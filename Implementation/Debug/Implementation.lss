
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000302  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001786  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b79  00000000  00000000  00001c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000829  00000000  00000000  000027bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ac  00000000  00000000  00002fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000692  00000000  00000000  00003194  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009b3  00000000  00000000  00003826  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000041d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	29 c1       	rjmp	.+594    	; 0x2fe <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
#include "adc.h"
#include "gpio.h"
#include "uart.h"

int main(void)
{
  ae:	2d d0       	rcall	.+90     	; 0x10a <disableJTAG>
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	64 e0       	ldi	r22, 0x04	; 4
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	2c d0       	rcall	.+88     	; 0x112 <gpio_init>
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	65 e0       	ldi	r22, 0x05	; 5
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	27 d0       	rcall	.+78     	; 0x112 <gpio_init>
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	22 d0       	rcall	.+68     	; 0x112 <gpio_init>
  ce:	64 e0       	ldi	r22, 0x04	; 4
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	5c d0       	rcall	.+184    	; 0x18c <gpio_out_set>
  d4:	65 e0       	ldi	r22, 0x05	; 5
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	71 d0       	rcall	.+226    	; 0x1bc <gpio_out_reset>
  da:	23 e3       	ldi	r18, 0x33	; 51
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	b5 d0       	rcall	.+362    	; 0x24e <uart_init>
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	ec d0       	rcall	.+472    	; 0x2c2 <uart_start>
  ea:	88 e7       	ldi	r24, 0x78	; 120
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	f7 d0       	rcall	.+494    	; 0x2de <uart_transmit>
  f0:	8a e0       	ldi	r24, 0x0A	; 10
  f2:	f5 d0       	rcall	.+490    	; 0x2de <uart_transmit>
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	80 e7       	ldi	r24, 0x70	; 112
  f8:	92 e0       	ldi	r25, 0x02	; 2
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x4c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x56>
 104:	00 00       	nop
 106:	f3 d0       	rcall	.+486    	; 0x2ee <uart_receive>
 108:	f1 cf       	rjmp	.-30     	; 0xec <main+0x3e>

0000010a <disableJTAG>:
			break;
		case PC:
			clearBit(&PORTC, _number);
			break;
		case PD:
			clearBit(&PORTD, _number);
 10a:	80 e8       	ldi	r24, 0x80	; 128
 10c:	85 bf       	out	0x35, r24	; 53
 10e:	85 bf       	out	0x35, r24	; 53
 110:	08 95       	ret

00000112 <gpio_init>:
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	d6 2f       	mov	r29, r22
 11a:	c4 2f       	mov	r28, r20
 11c:	12 2f       	mov	r17, r18
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	89 f0       	breq	.+34     	; 0x144 <gpio_init+0x32>
 122:	28 f0       	brcs	.+10     	; 0x12e <gpio_init+0x1c>
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	c9 f0       	breq	.+50     	; 0x15a <gpio_init+0x48>
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	11 f1       	breq	.+68     	; 0x170 <gpio_init+0x5e>
 12c:	2b c0       	rjmp	.+86     	; 0x184 <gpio_init+0x72>
 12e:	81 e2       	ldi	r24, 0x21	; 33
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	75 d0       	rcall	.+234    	; 0x21e <updateBit>
 134:	c1 11       	cpse	r28, r1
 136:	26 c0       	rjmp	.+76     	; 0x184 <gpio_init+0x72>
 138:	41 2f       	mov	r20, r17
 13a:	6d 2f       	mov	r22, r29
 13c:	82 e2       	ldi	r24, 0x22	; 34
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	6e d0       	rcall	.+220    	; 0x21e <updateBit>
 142:	20 c0       	rjmp	.+64     	; 0x184 <gpio_init+0x72>
 144:	84 e2       	ldi	r24, 0x24	; 36
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	6a d0       	rcall	.+212    	; 0x21e <updateBit>
 14a:	c1 11       	cpse	r28, r1
 14c:	1b c0       	rjmp	.+54     	; 0x184 <gpio_init+0x72>
 14e:	41 2f       	mov	r20, r17
 150:	6d 2f       	mov	r22, r29
 152:	85 e2       	ldi	r24, 0x25	; 37
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	63 d0       	rcall	.+198    	; 0x21e <updateBit>
 158:	15 c0       	rjmp	.+42     	; 0x184 <gpio_init+0x72>
 15a:	87 e2       	ldi	r24, 0x27	; 39
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	5f d0       	rcall	.+190    	; 0x21e <updateBit>
 160:	c1 11       	cpse	r28, r1
 162:	10 c0       	rjmp	.+32     	; 0x184 <gpio_init+0x72>
 164:	41 2f       	mov	r20, r17
 166:	6d 2f       	mov	r22, r29
 168:	88 e2       	ldi	r24, 0x28	; 40
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	58 d0       	rcall	.+176    	; 0x21e <updateBit>
 16e:	0a c0       	rjmp	.+20     	; 0x184 <gpio_init+0x72>
 170:	8a e2       	ldi	r24, 0x2A	; 42
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	54 d0       	rcall	.+168    	; 0x21e <updateBit>
 176:	c1 11       	cpse	r28, r1
 178:	05 c0       	rjmp	.+10     	; 0x184 <gpio_init+0x72>
 17a:	41 2f       	mov	r20, r17
 17c:	6d 2f       	mov	r22, r29
 17e:	8b e2       	ldi	r24, 0x2B	; 43
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	4d d0       	rcall	.+154    	; 0x21e <updateBit>
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	08 95       	ret

0000018c <gpio_out_set>:
	}
}
	

void gpio_out_set(port _port, u8 _number){
	switch(_port){
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	51 f0       	breq	.+20     	; 0x1a4 <gpio_out_set+0x18>
 190:	28 f0       	brcs	.+10     	; 0x19c <gpio_out_set+0x10>
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	59 f0       	breq	.+22     	; 0x1ac <gpio_out_set+0x20>
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	69 f0       	breq	.+26     	; 0x1b4 <gpio_out_set+0x28>
 19a:	08 95       	ret
		case PA:
			setBit(&PORTA, _number);
 19c:	82 e2       	ldi	r24, 0x22	; 34
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	25 c0       	rjmp	.+74     	; 0x1ec <setBit>
			break;
 1a2:	08 95       	ret
		case PB:
			setBit(&PORTB, _number);
 1a4:	85 e2       	ldi	r24, 0x25	; 37
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	21 c0       	rjmp	.+66     	; 0x1ec <setBit>
			break;
		case PC:
			setBit(&PORTC, _number);
 1aa:	08 95       	ret
 1ac:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			setBit(&PORTD, _number);
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	1d c0       	rjmp	.+58     	; 0x1ec <setBit>
 1b2:	08 95       	ret
 1b4:	8b e2       	ldi	r24, 0x2B	; 43
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	19 c0       	rjmp	.+50     	; 0x1ec <setBit>
 1ba:	08 95       	ret

000001bc <gpio_out_reset>:
			break;
	}
}

void gpio_out_reset(port _port, u8 _number){
	switch(_port){
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	51 f0       	breq	.+20     	; 0x1d4 <gpio_out_reset+0x18>
 1c0:	28 f0       	brcs	.+10     	; 0x1cc <gpio_out_reset+0x10>
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	59 f0       	breq	.+22     	; 0x1dc <gpio_out_reset+0x20>
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	69 f0       	breq	.+26     	; 0x1e4 <gpio_out_reset+0x28>
 1ca:	08 95       	ret
		case PA:
			clearBit(&PORTA, _number);
 1cc:	82 e2       	ldi	r24, 0x22	; 34
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	19 c0       	rjmp	.+50     	; 0x204 <clearBit>
			break;
 1d2:	08 95       	ret
		case PB:
			clearBit(&PORTB, _number);
 1d4:	85 e2       	ldi	r24, 0x25	; 37
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	15 c0       	rjmp	.+42     	; 0x204 <clearBit>
			break;
		case PC:
			clearBit(&PORTC, _number);
 1da:	08 95       	ret
 1dc:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			clearBit(&PORTD, _number);
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	11 c0       	rjmp	.+34     	; 0x204 <clearBit>
 1e2:	08 95       	ret
 1e4:	8b e2       	ldi	r24, 0x2B	; 43
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0d c0       	rjmp	.+26     	; 0x204 <clearBit>
 1ea:	08 95       	ret

000001ec <setBit>:
void clearBit(volatile u8 *registerName, u8 position){
	*registerName &= ~(1 << position);
}

void toggleBit(volatile u8 *registerName, u8 position){
	*registerName ^= (1 << position);
 1ec:	fc 01       	movw	r30, r24
 1ee:	40 81       	ld	r20, Z
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <setBit+0xe>
 1f6:	22 0f       	add	r18, r18
 1f8:	33 1f       	adc	r19, r19
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <setBit+0xa>
 1fe:	24 2b       	or	r18, r20
 200:	20 83       	st	Z, r18
 202:	08 95       	ret

00000204 <clearBit>:
 204:	fc 01       	movw	r30, r24
 206:	90 81       	ld	r25, Z
 208:	21 e0       	ldi	r18, 0x01	; 1
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <clearBit+0xe>
 20e:	22 0f       	add	r18, r18
 210:	33 1f       	adc	r19, r19
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <clearBit+0xa>
 216:	20 95       	com	r18
 218:	29 23       	and	r18, r25
 21a:	20 83       	st	Z, r18
 21c:	08 95       	ret

0000021e <updateBit>:
}

void updateBit(volatile u8 *registerName, u8 position, u8 value){
 21e:	fc 01       	movw	r30, r24
 220:	94 2f       	mov	r25, r20
	u8 newValue = value << position;
	newValue |= (*registerName & ~(1 << position));
 222:	20 81       	ld	r18, Z
 224:	41 e0       	ldi	r20, 0x01	; 1
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	06 2e       	mov	r0, r22
 22a:	02 c0       	rjmp	.+4      	; 0x230 <updateBit+0x12>
 22c:	44 0f       	add	r20, r20
 22e:	55 1f       	adc	r21, r21
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <updateBit+0xe>
 234:	40 95       	com	r20
 236:	50 95       	com	r21
 238:	24 23       	and	r18, r20
 23a:	49 2f       	mov	r20, r25
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <updateBit+0x26>
 240:	44 0f       	add	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <updateBit+0x22>
 248:	42 2b       	or	r20, r18
	*registerName = newValue;
 24a:	40 83       	st	Z, r20
 24c:	08 95       	ret

0000024e <uart_init>:
	updateBit(&UCSR0B, TXEN0, uartTx);
}

void uart_stop(bool uartTx, bool uartRx){
	clearBit(&UCSR0B, RXEN0);
	clearBit(&UCSR0B, TXEN0);
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	08 2f       	mov	r16, r24
 258:	16 2f       	mov	r17, r22
 25a:	d4 2f       	mov	r29, r20
 25c:	c2 2f       	mov	r28, r18
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	80 ec       	ldi	r24, 0xC0	; 192
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	cf df       	rcall	.-98     	; 0x204 <clearBit>
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	81 ec       	ldi	r24, 0xC1	; 193
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	cb df       	rcall	.-106    	; 0x204 <clearBit>
 26e:	62 e0       	ldi	r22, 0x02	; 2
 270:	82 ec       	ldi	r24, 0xC2	; 194
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	bb df       	rcall	.-138    	; 0x1ec <setBit>
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	82 ec       	ldi	r24, 0xC2	; 194
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	b7 df       	rcall	.-146    	; 0x1ec <setBit>
 27e:	67 e0       	ldi	r22, 0x07	; 7
 280:	82 ec       	ldi	r24, 0xC2	; 194
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	bf df       	rcall	.-130    	; 0x204 <clearBit>
 286:	40 2f       	mov	r20, r16
 288:	66 e0       	ldi	r22, 0x06	; 6
 28a:	82 ec       	ldi	r24, 0xC2	; 194
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	c7 df       	rcall	.-114    	; 0x21e <updateBit>
 290:	65 e0       	ldi	r22, 0x05	; 5
 292:	82 ec       	ldi	r24, 0xC2	; 194
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	aa df       	rcall	.-172    	; 0x1ec <setBit>
 298:	41 2f       	mov	r20, r17
 29a:	64 e0       	ldi	r22, 0x04	; 4
 29c:	82 ec       	ldi	r24, 0xC2	; 194
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	be df       	rcall	.-132    	; 0x21e <updateBit>
 2a2:	4d 2f       	mov	r20, r29
 2a4:	63 e0       	ldi	r22, 0x03	; 3
 2a6:	82 ec       	ldi	r24, 0xC2	; 194
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	b9 df       	rcall	.-142    	; 0x21e <updateBit>
 2ac:	2c 2f       	mov	r18, r28
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2b4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	08 95       	ret

000002c2 <uart_start>:
 2c2:	cf 93       	push	r28
 2c4:	c8 2f       	mov	r28, r24
 2c6:	46 2f       	mov	r20, r22
 2c8:	64 e0       	ldi	r22, 0x04	; 4
 2ca:	81 ec       	ldi	r24, 0xC1	; 193
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	a7 df       	rcall	.-178    	; 0x21e <updateBit>
 2d0:	4c 2f       	mov	r20, r28
 2d2:	63 e0       	ldi	r22, 0x03	; 3
 2d4:	81 ec       	ldi	r24, 0xC1	; 193
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	a2 df       	rcall	.-188    	; 0x21e <updateBit>
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <uart_transmit>:
}

void uart_transmit(u8 data){
	while(!(UCSR0A & (1 << UDRE0)));
 2de:	e0 ec       	ldi	r30, 0xC0	; 192
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	90 81       	ld	r25, Z
 2e4:	95 ff       	sbrs	r25, 5
 2e6:	fd cf       	rjmp	.-6      	; 0x2e2 <uart_transmit+0x4>
	UDR0 = data;
 2e8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2ec:	08 95       	ret

000002ee <uart_receive>:
}

u8 uart_receive(){
	u8 data = 0;
	while(!(UCSR0A & (1 << RXC0)));
 2ee:	e0 ec       	ldi	r30, 0xC0	; 192
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	88 23       	and	r24, r24
 2f6:	ec f7       	brge	.-6      	; 0x2f2 <uart_receive+0x4>
	data = UDR0;
 2f8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return data;
 2fc:	08 95       	ret

000002fe <_exit>:
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
