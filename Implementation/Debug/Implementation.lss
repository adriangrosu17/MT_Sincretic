
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000738  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000007ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000215d  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c41  00000000  00000000  00002ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000add  00000000  00000000  000036f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  000041d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000739  00000000  00000000  0000441c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e14  00000000  00000000  00004b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005969  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	44 c3       	rjmp	.+1672   	; 0x734 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
#include "gpio.h"
#include "uart.h"
#include <string.h>

int main(void)
{
  ae:	c9 d0       	rcall	.+402    	; 0x242 <disableJTAG>
  b0:	01 e0       	ldi	r16, 0x01	; 1
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	42 e3       	ldi	r20, 0x32	; 50
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	84 e0       	ldi	r24, 0x04	; 4
  be:	e2 d1       	rcall	.+964    	; 0x484 <pwm_init>
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	9c d2       	rcall	.+1336   	; 0x5fc <pwm_start>
  c4:	23 e3       	ldi	r18, 0x33	; 51
  c6:	41 e0       	ldi	r20, 0x01	; 1
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	b2 d2       	rcall	.+1380   	; 0x632 <uart_init>
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	e9 d2       	rcall	.+1490   	; 0x6a6 <uart_start>
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	41 e0       	ldi	r20, 0x01	; 1
  d8:	62 e0       	ldi	r22, 0x02	; 2
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	b6 d0       	rcall	.+364    	; 0x24a <gpio_init>
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	41 e0       	ldi	r20, 0x01	; 1
  e2:	67 e0       	ldi	r22, 0x07	; 7
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	b1 d0       	rcall	.+354    	; 0x24a <gpio_init>
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	67 e0       	ldi	r22, 0x07	; 7
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	ac d0       	rcall	.+344    	; 0x24a <gpio_init>
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	41 e0       	ldi	r20, 0x01	; 1
  f6:	66 e0       	ldi	r22, 0x06	; 6
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	a7 d0       	rcall	.+334    	; 0x24a <gpio_init>
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	41 e0       	ldi	r20, 0x01	; 1
 100:	65 e0       	ldi	r22, 0x05	; 5
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	a2 d0       	rcall	.+324    	; 0x24a <gpio_init>
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	41 e0       	ldi	r20, 0x01	; 1
 10a:	63 e0       	ldi	r22, 0x03	; 3
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	9d d0       	rcall	.+314    	; 0x24a <gpio_init>
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	66 e0       	ldi	r22, 0x06	; 6
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	98 d0       	rcall	.+304    	; 0x24a <gpio_init>
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	65 e0       	ldi	r22, 0x05	; 5
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	93 d0       	rcall	.+294    	; 0x24a <gpio_init>
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	41 e0       	ldi	r20, 0x01	; 1
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	8e d0       	rcall	.+284    	; 0x24a <gpio_init>
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	89 d0       	rcall	.+274    	; 0x24a <gpio_init>
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	41 e0       	ldi	r20, 0x01	; 1
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	84 d0       	rcall	.+264    	; 0x24a <gpio_init>
 142:	62 e0       	ldi	r22, 0x02	; 2
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	be d0       	rcall	.+380    	; 0x2c4 <gpio_out_set>
 148:	66 e0       	ldi	r22, 0x06	; 6
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	d3 d0       	rcall	.+422    	; 0x2f4 <gpio_out_reset>
 14e:	67 e0       	ldi	r22, 0x07	; 7
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	d0 d0       	rcall	.+416    	; 0x2f4 <gpio_out_reset>
 154:	67 e0       	ldi	r22, 0x07	; 7
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	cd d0       	rcall	.+410    	; 0x2f4 <gpio_out_reset>
 15a:	66 e0       	ldi	r22, 0x06	; 6
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	ca d0       	rcall	.+404    	; 0x2f4 <gpio_out_reset>
 160:	65 e0       	ldi	r22, 0x05	; 5
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	c7 d0       	rcall	.+398    	; 0x2f4 <gpio_out_reset>
 166:	63 e0       	ldi	r22, 0x03	; 3
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	c4 d0       	rcall	.+392    	; 0x2f4 <gpio_out_reset>
 16c:	65 e0       	ldi	r22, 0x05	; 5
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	a9 d0       	rcall	.+338    	; 0x2c4 <gpio_out_set>
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	a6 d0       	rcall	.+332    	; 0x2c4 <gpio_out_set>
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	bb d0       	rcall	.+374    	; 0x2f4 <gpio_out_reset>
 17e:	62 e0       	ldi	r22, 0x02	; 2
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	b8 d0       	rcall	.+368    	; 0x2f4 <gpio_out_reset>
 184:	9e d2       	rcall	.+1340   	; 0x6c2 <uart_receive>
 186:	81 33       	cpi	r24, 0x31	; 49
 188:	01 f5       	brne	.+64     	; 0x1ca <main+0x11c>
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	b2 d0       	rcall	.+356    	; 0x2f4 <gpio_out_reset>
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	97 d0       	rcall	.+302    	; 0x2c4 <gpio_out_set>
 196:	62 e0       	ldi	r22, 0x02	; 2
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	ac d0       	rcall	.+344    	; 0x2f4 <gpio_out_reset>
 19c:	65 e0       	ldi	r22, 0x05	; 5
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	a9 d0       	rcall	.+338    	; 0x2f4 <gpio_out_reset>
 1a2:	41 e0       	ldi	r20, 0x01	; 1
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	00 d2       	rcall	.+1024   	; 0x5aa <pwm_setDutyCycle>
 1aa:	67 e0       	ldi	r22, 0x07	; 7
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	8a d0       	rcall	.+276    	; 0x2c4 <gpio_out_set>
 1b0:	67 e0       	ldi	r22, 0x07	; 7
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	87 d0       	rcall	.+270    	; 0x2c4 <gpio_out_set>
 1b6:	65 e0       	ldi	r22, 0x05	; 5
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	9c d0       	rcall	.+312    	; 0x2f4 <gpio_out_reset>
 1bc:	63 e0       	ldi	r22, 0x03	; 3
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	81 d0       	rcall	.+258    	; 0x2c4 <gpio_out_set>
 1c2:	66 e0       	ldi	r22, 0x06	; 6
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	96 d0       	rcall	.+300    	; 0x2f4 <gpio_out_reset>
 1c8:	dd cf       	rjmp	.-70     	; 0x184 <main+0xd6>
 1ca:	82 33       	cpi	r24, 0x32	; 50
 1cc:	01 f5       	brne	.+64     	; 0x20e <main+0x160>
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 d0       	rcall	.+288    	; 0x2f4 <gpio_out_reset>
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	8d d0       	rcall	.+282    	; 0x2f4 <gpio_out_reset>
 1da:	62 e0       	ldi	r22, 0x02	; 2
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	72 d0       	rcall	.+228    	; 0x2c4 <gpio_out_set>
 1e0:	65 e0       	ldi	r22, 0x05	; 5
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	6f d0       	rcall	.+222    	; 0x2c4 <gpio_out_set>
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	87 e0       	ldi	r24, 0x07	; 7
 1ec:	de d1       	rcall	.+956    	; 0x5aa <pwm_setDutyCycle>
 1ee:	66 e0       	ldi	r22, 0x06	; 6
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	68 d0       	rcall	.+208    	; 0x2c4 <gpio_out_set>
 1f4:	65 e0       	ldi	r22, 0x05	; 5
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	65 d0       	rcall	.+202    	; 0x2c4 <gpio_out_set>
 1fa:	63 e0       	ldi	r22, 0x03	; 3
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	7a d0       	rcall	.+244    	; 0x2f4 <gpio_out_reset>
 200:	67 e0       	ldi	r22, 0x07	; 7
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	77 d0       	rcall	.+238    	; 0x2f4 <gpio_out_reset>
 206:	66 e0       	ldi	r22, 0x06	; 6
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	5c d0       	rcall	.+184    	; 0x2c4 <gpio_out_set>
 20c:	bb cf       	rjmp	.-138    	; 0x184 <main+0xd6>
 20e:	83 33       	cpi	r24, 0x33	; 51
 210:	09 f0       	breq	.+2      	; 0x214 <main+0x166>
 212:	b8 cf       	rjmp	.-144    	; 0x184 <main+0xd6>
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	55 d0       	rcall	.+170    	; 0x2c4 <gpio_out_set>
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	6a d0       	rcall	.+212    	; 0x2f4 <gpio_out_reset>
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	67 d0       	rcall	.+206    	; 0x2f4 <gpio_out_reset>
 226:	65 e0       	ldi	r22, 0x05	; 5
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	64 d0       	rcall	.+200    	; 0x2f4 <gpio_out_reset>
 22c:	41 e0       	ldi	r20, 0x01	; 1
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	8c e0       	ldi	r24, 0x0C	; 12
 232:	bb d1       	rcall	.+886    	; 0x5aa <pwm_setDutyCycle>
 234:	66 e0       	ldi	r22, 0x06	; 6
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	5d d0       	rcall	.+186    	; 0x2f4 <gpio_out_reset>
 23a:	67 e0       	ldi	r22, 0x07	; 7
 23c:	83 e0       	ldi	r24, 0x03	; 3
 23e:	5a d0       	rcall	.+180    	; 0x2f4 <gpio_out_reset>
 240:	a1 cf       	rjmp	.-190    	; 0x184 <main+0xd6>

00000242 <disableJTAG>:
			break;
		case PC:
			clearBit(&PORTC, _number);
			break;
		case PD:
			clearBit(&PORTD, _number);
 242:	80 e8       	ldi	r24, 0x80	; 128
 244:	85 bf       	out	0x35, r24	; 53
 246:	85 bf       	out	0x35, r24	; 53
 248:	08 95       	ret

0000024a <gpio_init>:
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	d6 2f       	mov	r29, r22
 252:	c4 2f       	mov	r28, r20
 254:	12 2f       	mov	r17, r18
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	89 f0       	breq	.+34     	; 0x27c <gpio_init+0x32>
 25a:	28 f0       	brcs	.+10     	; 0x266 <gpio_init+0x1c>
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	c9 f0       	breq	.+50     	; 0x292 <gpio_init+0x48>
 260:	83 30       	cpi	r24, 0x03	; 3
 262:	11 f1       	breq	.+68     	; 0x2a8 <gpio_init+0x5e>
 264:	2b c0       	rjmp	.+86     	; 0x2bc <gpio_init+0x72>
 266:	81 e2       	ldi	r24, 0x21	; 33
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	75 d0       	rcall	.+234    	; 0x356 <updateBit>
 26c:	c1 11       	cpse	r28, r1
 26e:	26 c0       	rjmp	.+76     	; 0x2bc <gpio_init+0x72>
 270:	41 2f       	mov	r20, r17
 272:	6d 2f       	mov	r22, r29
 274:	82 e2       	ldi	r24, 0x22	; 34
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	6e d0       	rcall	.+220    	; 0x356 <updateBit>
 27a:	20 c0       	rjmp	.+64     	; 0x2bc <gpio_init+0x72>
 27c:	84 e2       	ldi	r24, 0x24	; 36
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	6a d0       	rcall	.+212    	; 0x356 <updateBit>
 282:	c1 11       	cpse	r28, r1
 284:	1b c0       	rjmp	.+54     	; 0x2bc <gpio_init+0x72>
 286:	41 2f       	mov	r20, r17
 288:	6d 2f       	mov	r22, r29
 28a:	85 e2       	ldi	r24, 0x25	; 37
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	63 d0       	rcall	.+198    	; 0x356 <updateBit>
 290:	15 c0       	rjmp	.+42     	; 0x2bc <gpio_init+0x72>
 292:	87 e2       	ldi	r24, 0x27	; 39
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	5f d0       	rcall	.+190    	; 0x356 <updateBit>
 298:	c1 11       	cpse	r28, r1
 29a:	10 c0       	rjmp	.+32     	; 0x2bc <gpio_init+0x72>
 29c:	41 2f       	mov	r20, r17
 29e:	6d 2f       	mov	r22, r29
 2a0:	88 e2       	ldi	r24, 0x28	; 40
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	58 d0       	rcall	.+176    	; 0x356 <updateBit>
 2a6:	0a c0       	rjmp	.+20     	; 0x2bc <gpio_init+0x72>
 2a8:	8a e2       	ldi	r24, 0x2A	; 42
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	54 d0       	rcall	.+168    	; 0x356 <updateBit>
 2ae:	c1 11       	cpse	r28, r1
 2b0:	05 c0       	rjmp	.+10     	; 0x2bc <gpio_init+0x72>
 2b2:	41 2f       	mov	r20, r17
 2b4:	6d 2f       	mov	r22, r29
 2b6:	8b e2       	ldi	r24, 0x2B	; 43
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	4d d0       	rcall	.+154    	; 0x356 <updateBit>
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	08 95       	ret

000002c4 <gpio_out_set>:
	}
}
	

void gpio_out_set(port _port, u8 _number){
	switch(_port){
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	51 f0       	breq	.+20     	; 0x2dc <gpio_out_set+0x18>
 2c8:	28 f0       	brcs	.+10     	; 0x2d4 <gpio_out_set+0x10>
 2ca:	82 30       	cpi	r24, 0x02	; 2
 2cc:	59 f0       	breq	.+22     	; 0x2e4 <gpio_out_set+0x20>
 2ce:	83 30       	cpi	r24, 0x03	; 3
 2d0:	69 f0       	breq	.+26     	; 0x2ec <gpio_out_set+0x28>
 2d2:	08 95       	ret
		case PA:
			setBit(&PORTA, _number);
 2d4:	82 e2       	ldi	r24, 0x22	; 34
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	25 c0       	rjmp	.+74     	; 0x324 <setBit>
			break;
 2da:	08 95       	ret
		case PB:
			setBit(&PORTB, _number);
 2dc:	85 e2       	ldi	r24, 0x25	; 37
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	21 c0       	rjmp	.+66     	; 0x324 <setBit>
			break;
		case PC:
			setBit(&PORTC, _number);
 2e2:	08 95       	ret
 2e4:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			setBit(&PORTD, _number);
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	1d c0       	rjmp	.+58     	; 0x324 <setBit>
 2ea:	08 95       	ret
 2ec:	8b e2       	ldi	r24, 0x2B	; 43
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	19 c0       	rjmp	.+50     	; 0x324 <setBit>
 2f2:	08 95       	ret

000002f4 <gpio_out_reset>:
			break;
	}
}

void gpio_out_reset(port _port, u8 _number){
	switch(_port){
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	51 f0       	breq	.+20     	; 0x30c <gpio_out_reset+0x18>
 2f8:	28 f0       	brcs	.+10     	; 0x304 <gpio_out_reset+0x10>
 2fa:	82 30       	cpi	r24, 0x02	; 2
 2fc:	59 f0       	breq	.+22     	; 0x314 <gpio_out_reset+0x20>
 2fe:	83 30       	cpi	r24, 0x03	; 3
 300:	69 f0       	breq	.+26     	; 0x31c <gpio_out_reset+0x28>
 302:	08 95       	ret
		case PA:
			clearBit(&PORTA, _number);
 304:	82 e2       	ldi	r24, 0x22	; 34
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	19 c0       	rjmp	.+50     	; 0x33c <clearBit>
			break;
 30a:	08 95       	ret
		case PB:
			clearBit(&PORTB, _number);
 30c:	85 e2       	ldi	r24, 0x25	; 37
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	15 c0       	rjmp	.+42     	; 0x33c <clearBit>
			break;
		case PC:
			clearBit(&PORTC, _number);
 312:	08 95       	ret
 314:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			clearBit(&PORTD, _number);
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	11 c0       	rjmp	.+34     	; 0x33c <clearBit>
 31a:	08 95       	ret
 31c:	8b e2       	ldi	r24, 0x2B	; 43
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0d c0       	rjmp	.+26     	; 0x33c <clearBit>
 322:	08 95       	ret

00000324 <setBit>:
void clearBit(volatile u8 *registerName, u8 position){
	*registerName &= ~(1 << position);
}

void toggleBit(volatile u8 *registerName, u8 position){
	*registerName ^= (1 << position);
 324:	fc 01       	movw	r30, r24
 326:	40 81       	ld	r20, Z
 328:	21 e0       	ldi	r18, 0x01	; 1
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	02 c0       	rjmp	.+4      	; 0x332 <setBit+0xe>
 32e:	22 0f       	add	r18, r18
 330:	33 1f       	adc	r19, r19
 332:	6a 95       	dec	r22
 334:	e2 f7       	brpl	.-8      	; 0x32e <setBit+0xa>
 336:	24 2b       	or	r18, r20
 338:	20 83       	st	Z, r18
 33a:	08 95       	ret

0000033c <clearBit>:
 33c:	fc 01       	movw	r30, r24
 33e:	90 81       	ld	r25, Z
 340:	21 e0       	ldi	r18, 0x01	; 1
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <clearBit+0xe>
 346:	22 0f       	add	r18, r18
 348:	33 1f       	adc	r19, r19
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <clearBit+0xa>
 34e:	20 95       	com	r18
 350:	29 23       	and	r18, r25
 352:	20 83       	st	Z, r18
 354:	08 95       	ret

00000356 <updateBit>:
}

void updateBit(volatile u8 *registerName, u8 position, u8 value){
 356:	fc 01       	movw	r30, r24
 358:	94 2f       	mov	r25, r20
	u8 newValue = value << position;
	newValue |= (*registerName & ~(1 << position));
 35a:	20 81       	ld	r18, Z
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	50 e0       	ldi	r21, 0x00	; 0
 360:	06 2e       	mov	r0, r22
 362:	02 c0       	rjmp	.+4      	; 0x368 <updateBit+0x12>
 364:	44 0f       	add	r20, r20
 366:	55 1f       	adc	r21, r21
 368:	0a 94       	dec	r0
 36a:	e2 f7       	brpl	.-8      	; 0x364 <updateBit+0xe>
 36c:	40 95       	com	r20
 36e:	50 95       	com	r21
 370:	24 23       	and	r18, r20
 372:	49 2f       	mov	r20, r25
 374:	50 e0       	ldi	r21, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <updateBit+0x26>
 378:	44 0f       	add	r20, r20
 37a:	55 1f       	adc	r21, r21
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <updateBit+0x22>
 380:	42 2b       	or	r20, r18
	*registerName = newValue;
 382:	40 83       	st	Z, r20
 384:	08 95       	ret

00000386 <calculateTop>:
#include "pwm.h"
#include "gpio.h"

u8 timer1ClockSource;

u16 calculateTop(u16 *prescaler, u32 frequency, timer timerSelection){
 386:	cf 92       	push	r12
 388:	df 92       	push	r13
 38a:	ef 92       	push	r14
 38c:	ff 92       	push	r15
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	ec 01       	movw	r28, r24
 394:	6a 01       	movw	r12, r20
 396:	7b 01       	movw	r14, r22
	u32 topValue = 0;
	u16 divisor = 0;
	switch(timerSelection){
 398:	21 30       	cpi	r18, 0x01	; 1
 39a:	09 f0       	breq	.+2      	; 0x39e <calculateTop+0x18>
 39c:	69 c0       	rjmp	.+210    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
		case TIMER0:
			break;
		case TIMER1:
			divisor = 1;
			*prescaler = divisor;
			topValue = S_CLOCK / divisor / frequency - 1;
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	72 e1       	ldi	r23, 0x12	; 18
 3a2:	8a e7       	ldi	r24, 0x7A	; 122
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	a7 01       	movw	r20, r14
 3a8:	96 01       	movw	r18, r12
 3aa:	93 d1       	rcall	.+806    	; 0x6d2 <__udivmodsi4>
 3ac:	da 01       	movw	r26, r20
 3ae:	c9 01       	movw	r24, r18
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	a1 09       	sbc	r26, r1
 3b4:	b1 09       	sbc	r27, r1
			if(topValue > 0xFFFF){
 3b6:	00 97       	sbiw	r24, 0x00	; 0
 3b8:	21 e0       	ldi	r18, 0x01	; 1
 3ba:	a2 07       	cpc	r26, r18
 3bc:	b1 05       	cpc	r27, r1
 3be:	28 f4       	brcc	.+10     	; 0x3ca <calculateTop+0x44>
	switch(timerSelection){
		case TIMER0:
			break;
		case TIMER1:
			divisor = 1;
			*prescaler = divisor;
 3c0:	21 e0       	ldi	r18, 0x01	; 1
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	39 83       	std	Y+1, r19	; 0x01
 3c6:	28 83       	st	Y, r18
 3c8:	56 c0       	rjmp	.+172    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			topValue = S_CLOCK / divisor / frequency - 1;
			if(topValue > 0xFFFF){
				divisor = 8;
				*prescaler = divisor;
				topValue = S_CLOCK / divisor / frequency - 1;
 3ca:	60 e4       	ldi	r22, 0x40	; 64
 3cc:	72 e4       	ldi	r23, 0x42	; 66
 3ce:	8f e0       	ldi	r24, 0x0F	; 15
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	a7 01       	movw	r20, r14
 3d4:	96 01       	movw	r18, r12
 3d6:	7d d1       	rcall	.+762    	; 0x6d2 <__udivmodsi4>
 3d8:	da 01       	movw	r26, r20
 3da:	c9 01       	movw	r24, r18
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	a1 09       	sbc	r26, r1
 3e0:	b1 09       	sbc	r27, r1
				if(topValue > 0xFFFF){
 3e2:	00 97       	sbiw	r24, 0x00	; 0
 3e4:	21 e0       	ldi	r18, 0x01	; 1
 3e6:	a2 07       	cpc	r26, r18
 3e8:	b1 05       	cpc	r27, r1
 3ea:	28 f4       	brcc	.+10     	; 0x3f6 <calculateTop+0x70>
			divisor = 1;
			*prescaler = divisor;
			topValue = S_CLOCK / divisor / frequency - 1;
			if(topValue > 0xFFFF){
				divisor = 8;
				*prescaler = divisor;
 3ec:	28 e0       	ldi	r18, 0x08	; 8
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	39 83       	std	Y+1, r19	; 0x01
 3f2:	28 83       	st	Y, r18
 3f4:	40 c0       	rjmp	.+128    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
				topValue = S_CLOCK / divisor / frequency - 1;
				if(topValue > 0xFFFF){
					divisor = 64;
					*prescaler = divisor;
					topValue = S_CLOCK / divisor / frequency -1;
 3f6:	68 e4       	ldi	r22, 0x48	; 72
 3f8:	78 ee       	ldi	r23, 0xE8	; 232
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	a7 01       	movw	r20, r14
 400:	96 01       	movw	r18, r12
 402:	67 d1       	rcall	.+718    	; 0x6d2 <__udivmodsi4>
 404:	da 01       	movw	r26, r20
 406:	c9 01       	movw	r24, r18
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	a1 09       	sbc	r26, r1
 40c:	b1 09       	sbc	r27, r1
					if(topValue > 0xFFFF){
 40e:	00 97       	sbiw	r24, 0x00	; 0
 410:	21 e0       	ldi	r18, 0x01	; 1
 412:	a2 07       	cpc	r26, r18
 414:	b1 05       	cpc	r27, r1
 416:	28 f4       	brcc	.+10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
				divisor = 8;
				*prescaler = divisor;
				topValue = S_CLOCK / divisor / frequency - 1;
				if(topValue > 0xFFFF){
					divisor = 64;
					*prescaler = divisor;
 418:	20 e4       	ldi	r18, 0x40	; 64
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	39 83       	std	Y+1, r19	; 0x01
 41e:	28 83       	st	Y, r18
 420:	2a c0       	rjmp	.+84     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
					topValue = S_CLOCK / divisor / frequency -1;
					if(topValue > 0xFFFF){
						divisor = 256;
						*prescaler = divisor;
						topValue = S_CLOCK / divisor / frequency - 1;
 422:	62 e1       	ldi	r22, 0x12	; 18
 424:	7a e7       	ldi	r23, 0x7A	; 122
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	a7 01       	movw	r20, r14
 42c:	96 01       	movw	r18, r12
 42e:	51 d1       	rcall	.+674    	; 0x6d2 <__udivmodsi4>
 430:	da 01       	movw	r26, r20
 432:	c9 01       	movw	r24, r18
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	a1 09       	sbc	r26, r1
 438:	b1 09       	sbc	r27, r1
						if(topValue > 0xFFFF){
 43a:	00 97       	sbiw	r24, 0x00	; 0
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	a2 07       	cpc	r26, r18
 440:	b1 05       	cpc	r27, r1
 442:	28 f4       	brcc	.+10     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
					divisor = 64;
					*prescaler = divisor;
					topValue = S_CLOCK / divisor / frequency -1;
					if(topValue > 0xFFFF){
						divisor = 256;
						*prescaler = divisor;
 444:	20 e0       	ldi	r18, 0x00	; 0
 446:	31 e0       	ldi	r19, 0x01	; 1
 448:	39 83       	std	Y+1, r19	; 0x01
 44a:	28 83       	st	Y, r18
 44c:	14 c0       	rjmp	.+40     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
						topValue = S_CLOCK / divisor / frequency - 1;
						if(topValue > 0xFFFF){
							divisor = 1024;
							*prescaler = divisor;
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	94 e0       	ldi	r25, 0x04	; 4
 452:	99 83       	std	Y+1, r25	; 0x01
 454:	88 83       	st	Y, r24
							topValue = S_CLOCK / divisor / frequency - 1;
 456:	64 e8       	ldi	r22, 0x84	; 132
 458:	7e e1       	ldi	r23, 0x1E	; 30
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	a7 01       	movw	r20, r14
 460:	96 01       	movw	r18, r12
 462:	37 d1       	rcall	.+622    	; 0x6d2 <__udivmodsi4>
 464:	da 01       	movw	r26, r20
 466:	c9 01       	movw	r24, r18
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	a1 09       	sbc	r26, r1
 46c:	b1 09       	sbc	r27, r1
 46e:	03 c0       	rjmp	.+6      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
#include "gpio.h"

u8 timer1ClockSource;

u16 calculateTop(u16 *prescaler, u32 frequency, timer timerSelection){
	u32 topValue = 0;
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	dc 01       	movw	r26, r24
			break;
		case TIMER3:
			break;
	}
	return (u16)topValue;
}
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	ff 90       	pop	r15
 47c:	ef 90       	pop	r14
 47e:	df 90       	pop	r13
 480:	cf 90       	pop	r12
 482:	08 95       	ret

00000484 <pwm_init>:

void pwm_init(u8 dutyCycle, u32 frequency, timer timerSelection, channel channelSelection){
 484:	0f 93       	push	r16
 486:	1f 93       	push	r17
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	00 d0       	rcall	.+0      	; 0x48e <pwm_init+0xa>
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
	u16 prescaler = 0;
 492:	1a 82       	std	Y+2, r1	; 0x02
 494:	19 82       	std	Y+1, r1	; 0x01
	u32 dutyAux = 0;
	switch(timerSelection){
 496:	21 30       	cpi	r18, 0x01	; 1
 498:	09 f0       	breq	.+2      	; 0x49c <pwm_init+0x18>
 49a:	80 c0       	rjmp	.+256    	; 0x59c <pwm_init+0x118>
 49c:	18 2f       	mov	r17, r24
		case TIMER0:
			break;
		case TIMER1:
			/* Calculate TOP register to obtain the desired frequency */
			ICR1 = calculateTop(&prescaler, frequency, timerSelection);
 49e:	ce 01       	movw	r24, r28
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	71 df       	rcall	.-286    	; 0x386 <calculateTop>
 4a4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 4a8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			/* Sets the prescaler data to be later used in pwm_start() */
			switch(prescaler){
 4ac:	29 81       	ldd	r18, Y+1	; 0x01
 4ae:	3a 81       	ldd	r19, Y+2	; 0x02
 4b0:	20 34       	cpi	r18, 0x40	; 64
 4b2:	31 05       	cpc	r19, r1
 4b4:	c1 f0       	breq	.+48     	; 0x4e6 <pwm_init+0x62>
 4b6:	38 f4       	brcc	.+14     	; 0x4c6 <pwm_init+0x42>
 4b8:	21 30       	cpi	r18, 0x01	; 1
 4ba:	31 05       	cpc	r19, r1
 4bc:	61 f0       	breq	.+24     	; 0x4d6 <pwm_init+0x52>
 4be:	28 30       	cpi	r18, 0x08	; 8
 4c0:	31 05       	cpc	r19, r1
 4c2:	69 f0       	breq	.+26     	; 0x4de <pwm_init+0x5a>
 4c4:	1b c0       	rjmp	.+54     	; 0x4fc <pwm_init+0x78>
 4c6:	21 15       	cp	r18, r1
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	38 07       	cpc	r19, r24
 4cc:	81 f0       	breq	.+32     	; 0x4ee <pwm_init+0x6a>
 4ce:	21 15       	cp	r18, r1
 4d0:	34 40       	sbci	r19, 0x04	; 4
 4d2:	89 f0       	breq	.+34     	; 0x4f6 <pwm_init+0x72>
 4d4:	13 c0       	rjmp	.+38     	; 0x4fc <pwm_init+0x78>
				case 1:
					timer1ClockSource = 0x01;
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					break;
 4dc:	0f c0       	rjmp	.+30     	; 0x4fc <pwm_init+0x78>
				case 8:
					timer1ClockSource = 0x02;
 4de:	82 e0       	ldi	r24, 0x02	; 2
 4e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					break;
 4e4:	0b c0       	rjmp	.+22     	; 0x4fc <pwm_init+0x78>
				case 64:
					timer1ClockSource = 0x03;
 4e6:	83 e0       	ldi	r24, 0x03	; 3
 4e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					break;
 4ec:	07 c0       	rjmp	.+14     	; 0x4fc <pwm_init+0x78>
				case 256:
					timer1ClockSource = 0x04;
 4ee:	84 e0       	ldi	r24, 0x04	; 4
 4f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					break;
 4f4:	03 c0       	rjmp	.+6      	; 0x4fc <pwm_init+0x78>
				case 1024:
					timer1ClockSource = 0x05;
 4f6:	85 e0       	ldi	r24, 0x05	; 5
 4f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					break;
			}
			/* FAST PWM mode with ICR1 as TOP */
			clearBit(&TCCR1A, WGM10);
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	80 e8       	ldi	r24, 0x80	; 128
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	1c df       	rcall	.-456    	; 0x33c <clearBit>
			setBit(&TCCR1A, WGM11);
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	80 e8       	ldi	r24, 0x80	; 128
 508:	90 e0       	ldi	r25, 0x00	; 0
			setBit(&TCCR1B, WGM13);
 50a:	0c df       	rcall	.-488    	; 0x324 <setBit>
 50c:	64 e0       	ldi	r22, 0x04	; 4
 50e:	81 e8       	ldi	r24, 0x81	; 129
			setBit(&TCCR1B, WGM12);
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	08 df       	rcall	.-496    	; 0x324 <setBit>
 514:	63 e0       	ldi	r22, 0x03	; 3
 516:	81 e8       	ldi	r24, 0x81	; 129
 518:	90 e0       	ldi	r25, 0x00	; 0
			/* Clear OC1A/B on compare match and set it on BOTTOM */
			switch(channelSelection){
 51a:	04 df       	rcall	.-504    	; 0x324 <setBit>
 51c:	00 23       	and	r16, r16
 51e:	19 f0       	breq	.+6      	; 0x526 <pwm_init+0xa2>
 520:	01 30       	cpi	r16, 0x01	; 1
				case CHANNEL_A:
					gpio_init(PD, 5, OUTPUT, NO_PULL);
 522:	f9 f0       	breq	.+62     	; 0x562 <pwm_init+0xde>
 524:	3b c0       	rjmp	.+118    	; 0x59c <pwm_init+0x118>
 526:	20 e0       	ldi	r18, 0x00	; 0
 528:	41 e0       	ldi	r20, 0x01	; 1
 52a:	65 e0       	ldi	r22, 0x05	; 5
					setBit(&TCCR1A, COM1A1);
 52c:	83 e0       	ldi	r24, 0x03	; 3
 52e:	8d de       	rcall	.-742    	; 0x24a <gpio_init>
 530:	67 e0       	ldi	r22, 0x07	; 7
 532:	80 e8       	ldi	r24, 0x80	; 128
					clearBit(&TCCR1A, COM1A0);
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	f6 de       	rcall	.-532    	; 0x324 <setBit>
 538:	66 e0       	ldi	r22, 0x06	; 6
 53a:	80 e8       	ldi	r24, 0x80	; 128
					dutyAux = (u32) dutyCycle * ICR1 / 100;
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	fe de       	rcall	.-516    	; 0x33c <clearBit>
 540:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
					OCR1A = (u16) dutyAux;
 544:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 548:	21 2f       	mov	r18, r17
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	e4 d0       	rcall	.+456    	; 0x716 <__umulhisi3>
 54e:	24 e6       	ldi	r18, 0x64	; 100
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	40 e0       	ldi	r20, 0x00	; 0
 554:	50 e0       	ldi	r21, 0x00	; 0
 556:	bd d0       	rcall	.+378    	; 0x6d2 <__udivmodsi4>
 558:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
					break;
				case CHANNEL_B:
					gpio_init(PD, 4, OUTPUT, NO_PULL);
 55c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 560:	1d c0       	rjmp	.+58     	; 0x59c <pwm_init+0x118>
 562:	20 e0       	ldi	r18, 0x00	; 0
 564:	41 e0       	ldi	r20, 0x01	; 1
					setBit(&TCCR1A, COM1B1);
 566:	64 e0       	ldi	r22, 0x04	; 4
 568:	83 e0       	ldi	r24, 0x03	; 3
 56a:	6f de       	rcall	.-802    	; 0x24a <gpio_init>
 56c:	65 e0       	ldi	r22, 0x05	; 5
					clearBit(&TCCR1A, COM1B0);
 56e:	80 e8       	ldi	r24, 0x80	; 128
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	d8 de       	rcall	.-592    	; 0x324 <setBit>
 574:	64 e0       	ldi	r22, 0x04	; 4
					dutyAux = (u32) dutyCycle * ICR1 / 100;
 576:	80 e8       	ldi	r24, 0x80	; 128
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	e0 de       	rcall	.-576    	; 0x33c <clearBit>
 57c:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
					OCR1B = (u16) dutyAux;
 580:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 584:	21 2f       	mov	r18, r17
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	c6 d0       	rcall	.+396    	; 0x716 <__umulhisi3>
 58a:	24 e6       	ldi	r18, 0x64	; 100
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	40 e0       	ldi	r20, 0x00	; 0
 590:	50 e0       	ldi	r21, 0x00	; 0
 592:	9f d0       	rcall	.+318    	; 0x6d2 <__udivmodsi4>
 594:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 598:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		case TIMER2:
			break;
		case TIMER3:
			break;
	}
}
 59c:	0f 90       	pop	r0
 59e:	0f 90       	pop	r0
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	1f 91       	pop	r17
 5a6:	0f 91       	pop	r16
 5a8:	08 95       	ret

000005aa <pwm_setDutyCycle>:

/** Sets a new duty cycle for the selected timer and channel 
*/
void pwm_setDutyCycle(u8 dutyCycle, timer timerSelection, channel channelSelection){
	u32 dutyAux = 0;
	switch(timerSelection){
 5aa:	61 30       	cpi	r22, 0x01	; 1
 5ac:	31 f5       	brne	.+76     	; 0x5fa <pwm_setDutyCycle+0x50>
		case TIMER0:
			break;
		case TIMER1:
			switch(channelSelection){
 5ae:	44 23       	and	r20, r20
 5b0:	19 f0       	breq	.+6      	; 0x5b8 <pwm_setDutyCycle+0xe>
 5b2:	41 30       	cpi	r20, 0x01	; 1
 5b4:	91 f0       	breq	.+36     	; 0x5da <pwm_setDutyCycle+0x30>
 5b6:	08 95       	ret
				case CHANNEL_A:
					dutyAux = (u32) dutyCycle * ICR1 / 100;
 5b8:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 5bc:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
					OCR1A = (u16) dutyAux;
 5c0:	28 2f       	mov	r18, r24
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	a8 d0       	rcall	.+336    	; 0x716 <__umulhisi3>
 5c6:	24 e6       	ldi	r18, 0x64	; 100
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	40 e0       	ldi	r20, 0x00	; 0
 5cc:	50 e0       	ldi	r21, 0x00	; 0
 5ce:	81 d0       	rcall	.+258    	; 0x6d2 <__udivmodsi4>
 5d0:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 5d4:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
					break;
 5d8:	08 95       	ret
				case CHANNEL_B:
					dutyAux = (u32) dutyCycle * ICR1 / 100;
 5da:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 5de:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
					OCR1B = (u16) dutyAux;
 5e2:	28 2f       	mov	r18, r24
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	97 d0       	rcall	.+302    	; 0x716 <__umulhisi3>
 5e8:	24 e6       	ldi	r18, 0x64	; 100
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	40 e0       	ldi	r20, 0x00	; 0
 5ee:	50 e0       	ldi	r21, 0x00	; 0
 5f0:	70 d0       	rcall	.+224    	; 0x6d2 <__udivmodsi4>
 5f2:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 5f6:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 5fa:	08 95       	ret

000005fc <pwm_start>:
}

/** Starts the selected timer
*/
void pwm_start(timer timerSelection){
	switch(timerSelection){
 5fc:	81 30       	cpi	r24, 0x01	; 1
 5fe:	c1 f4       	brne	.+48     	; 0x630 <pwm_start+0x34>
		case TIMER0:
			break;
		case TIMER1:
			updateBit(&TCCR1B, CS12, (timer1ClockSource >> 2) & 1);
 600:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 604:	42 fb       	bst	r20, 2
 606:	44 27       	eor	r20, r20
 608:	40 f9       	bld	r20, 0
 60a:	62 e0       	ldi	r22, 0x02	; 2
 60c:	81 e8       	ldi	r24, 0x81	; 129
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	a2 de       	rcall	.-700    	; 0x356 <updateBit>
			updateBit(&TCCR1B, CS11, (timer1ClockSource >> 1) & 1);
 612:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 616:	46 95       	lsr	r20
 618:	41 70       	andi	r20, 0x01	; 1
 61a:	61 e0       	ldi	r22, 0x01	; 1
 61c:	81 e8       	ldi	r24, 0x81	; 129
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	9a de       	rcall	.-716    	; 0x356 <updateBit>
			updateBit(&TCCR1B, CS10, timer1ClockSource & 1);
 622:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 626:	41 70       	andi	r20, 0x01	; 1
 628:	60 e0       	ldi	r22, 0x00	; 0
 62a:	81 e8       	ldi	r24, 0x81	; 129
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	93 ce       	rjmp	.-730    	; 0x356 <updateBit>
 630:	08 95       	ret

00000632 <uart_init>:
	clearBit(&UCSR0B, TXEN0);
}

void uart_transmit(u8 data){
	while(!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
 632:	0f 93       	push	r16
 634:	1f 93       	push	r17
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	08 2f       	mov	r16, r24
 63c:	16 2f       	mov	r17, r22
 63e:	d4 2f       	mov	r29, r20
 640:	c2 2f       	mov	r28, r18
 642:	61 e0       	ldi	r22, 0x01	; 1
 644:	80 ec       	ldi	r24, 0xC0	; 192
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	79 de       	rcall	.-782    	; 0x33c <clearBit>
 64a:	62 e0       	ldi	r22, 0x02	; 2
 64c:	81 ec       	ldi	r24, 0xC1	; 193
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	75 de       	rcall	.-790    	; 0x33c <clearBit>
 652:	62 e0       	ldi	r22, 0x02	; 2
 654:	82 ec       	ldi	r24, 0xC2	; 194
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	65 de       	rcall	.-822    	; 0x324 <setBit>
 65a:	61 e0       	ldi	r22, 0x01	; 1
 65c:	82 ec       	ldi	r24, 0xC2	; 194
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	61 de       	rcall	.-830    	; 0x324 <setBit>
 662:	67 e0       	ldi	r22, 0x07	; 7
 664:	82 ec       	ldi	r24, 0xC2	; 194
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	69 de       	rcall	.-814    	; 0x33c <clearBit>
 66a:	40 2f       	mov	r20, r16
 66c:	66 e0       	ldi	r22, 0x06	; 6
 66e:	82 ec       	ldi	r24, 0xC2	; 194
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	71 de       	rcall	.-798    	; 0x356 <updateBit>
 674:	65 e0       	ldi	r22, 0x05	; 5
 676:	82 ec       	ldi	r24, 0xC2	; 194
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	54 de       	rcall	.-856    	; 0x324 <setBit>
 67c:	41 2f       	mov	r20, r17
 67e:	64 e0       	ldi	r22, 0x04	; 4
 680:	82 ec       	ldi	r24, 0xC2	; 194
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	68 de       	rcall	.-816    	; 0x356 <updateBit>
 686:	4d 2f       	mov	r20, r29
 688:	63 e0       	ldi	r22, 0x03	; 3
 68a:	82 ec       	ldi	r24, 0xC2	; 194
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	63 de       	rcall	.-826    	; 0x356 <updateBit>
 690:	2c 2f       	mov	r18, r28
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 698:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	1f 91       	pop	r17
 6a2:	0f 91       	pop	r16
 6a4:	08 95       	ret

000006a6 <uart_start>:
 6a6:	cf 93       	push	r28
 6a8:	c8 2f       	mov	r28, r24
 6aa:	46 2f       	mov	r20, r22
 6ac:	64 e0       	ldi	r22, 0x04	; 4
 6ae:	81 ec       	ldi	r24, 0xC1	; 193
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	51 de       	rcall	.-862    	; 0x356 <updateBit>
 6b4:	4c 2f       	mov	r20, r28
 6b6:	63 e0       	ldi	r22, 0x03	; 3
 6b8:	81 ec       	ldi	r24, 0xC1	; 193
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	4c de       	rcall	.-872    	; 0x356 <updateBit>
 6be:	cf 91       	pop	r28
 6c0:	08 95       	ret

000006c2 <uart_receive>:
}

u8 uart_receive(){
	u8 data = 0;
	while(!(UCSR0A & (1 << RXC0)));
 6c2:	e0 ec       	ldi	r30, 0xC0	; 192
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	88 23       	and	r24, r24
 6ca:	ec f7       	brge	.-6      	; 0x6c6 <uart_receive+0x4>
	data = UDR0;
 6cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return data;
 6d0:	08 95       	ret

000006d2 <__udivmodsi4>:
 6d2:	a1 e2       	ldi	r26, 0x21	; 33
 6d4:	1a 2e       	mov	r1, r26
 6d6:	aa 1b       	sub	r26, r26
 6d8:	bb 1b       	sub	r27, r27
 6da:	fd 01       	movw	r30, r26
 6dc:	0d c0       	rjmp	.+26     	; 0x6f8 <__udivmodsi4_ep>

000006de <__udivmodsi4_loop>:
 6de:	aa 1f       	adc	r26, r26
 6e0:	bb 1f       	adc	r27, r27
 6e2:	ee 1f       	adc	r30, r30
 6e4:	ff 1f       	adc	r31, r31
 6e6:	a2 17       	cp	r26, r18
 6e8:	b3 07       	cpc	r27, r19
 6ea:	e4 07       	cpc	r30, r20
 6ec:	f5 07       	cpc	r31, r21
 6ee:	20 f0       	brcs	.+8      	; 0x6f8 <__udivmodsi4_ep>
 6f0:	a2 1b       	sub	r26, r18
 6f2:	b3 0b       	sbc	r27, r19
 6f4:	e4 0b       	sbc	r30, r20
 6f6:	f5 0b       	sbc	r31, r21

000006f8 <__udivmodsi4_ep>:
 6f8:	66 1f       	adc	r22, r22
 6fa:	77 1f       	adc	r23, r23
 6fc:	88 1f       	adc	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	1a 94       	dec	r1
 702:	69 f7       	brne	.-38     	; 0x6de <__udivmodsi4_loop>
 704:	60 95       	com	r22
 706:	70 95       	com	r23
 708:	80 95       	com	r24
 70a:	90 95       	com	r25
 70c:	9b 01       	movw	r18, r22
 70e:	ac 01       	movw	r20, r24
 710:	bd 01       	movw	r22, r26
 712:	cf 01       	movw	r24, r30
 714:	08 95       	ret

00000716 <__umulhisi3>:
 716:	a2 9f       	mul	r26, r18
 718:	b0 01       	movw	r22, r0
 71a:	b3 9f       	mul	r27, r19
 71c:	c0 01       	movw	r24, r0
 71e:	a3 9f       	mul	r26, r19
 720:	70 0d       	add	r23, r0
 722:	81 1d       	adc	r24, r1
 724:	11 24       	eor	r1, r1
 726:	91 1d       	adc	r25, r1
 728:	b2 9f       	mul	r27, r18
 72a:	70 0d       	add	r23, r0
 72c:	81 1d       	adc	r24, r1
 72e:	11 24       	eor	r1, r1
 730:	91 1d       	adc	r25, r1
 732:	08 95       	ret

00000734 <_exit>:
 734:	f8 94       	cli

00000736 <__stop_program>:
 736:	ff cf       	rjmp	.-2      	; 0x736 <__stop_program>
