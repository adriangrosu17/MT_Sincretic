
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800100  00800100  00001328  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003462  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001014  00000000  00000000  00004a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001472  00000000  00000000  00005a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000538  00000000  00000000  00006ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a38  00000000  00000000  000073d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001645  00000000  00000000  00007e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00009455  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	75 c0       	rjmp	.+234    	; 0xec <__ctors_end>
       2:	00 00       	nop
       4:	84 c0       	rjmp	.+264    	; 0x10e <__bad_interrupt>
       6:	00 00       	nop
       8:	82 c0       	rjmp	.+260    	; 0x10e <__bad_interrupt>
       a:	00 00       	nop
       c:	80 c0       	rjmp	.+256    	; 0x10e <__bad_interrupt>
       e:	00 00       	nop
      10:	de c1       	rjmp	.+956    	; 0x3ce <__vector_4>
      12:	00 00       	nop
      14:	7c c0       	rjmp	.+248    	; 0x10e <__bad_interrupt>
      16:	00 00       	nop
      18:	01 c2       	rjmp	.+1026   	; 0x41c <__vector_6>
      1a:	00 00       	nop
      1c:	78 c0       	rjmp	.+240    	; 0x10e <__bad_interrupt>
      1e:	00 00       	nop
      20:	76 c0       	rjmp	.+236    	; 0x10e <__bad_interrupt>
      22:	00 00       	nop
      24:	74 c0       	rjmp	.+232    	; 0x10e <__bad_interrupt>
      26:	00 00       	nop
      28:	72 c0       	rjmp	.+228    	; 0x10e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	70 c0       	rjmp	.+224    	; 0x10e <__bad_interrupt>
      2e:	00 00       	nop
      30:	6e c0       	rjmp	.+220    	; 0x10e <__bad_interrupt>
      32:	00 00       	nop
      34:	6c c0       	rjmp	.+216    	; 0x10e <__bad_interrupt>
      36:	00 00       	nop
      38:	6a c0       	rjmp	.+212    	; 0x10e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	68 c0       	rjmp	.+208    	; 0x10e <__bad_interrupt>
      3e:	00 00       	nop
      40:	66 c0       	rjmp	.+204    	; 0x10e <__bad_interrupt>
      42:	00 00       	nop
      44:	64 c0       	rjmp	.+200    	; 0x10e <__bad_interrupt>
      46:	00 00       	nop
      48:	62 c0       	rjmp	.+196    	; 0x10e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	60 c0       	rjmp	.+192    	; 0x10e <__bad_interrupt>
      4e:	00 00       	nop
      50:	09 c6       	rjmp	.+3090   	; 0xc64 <__vector_20>
      52:	00 00       	nop
      54:	5c c0       	rjmp	.+184    	; 0x10e <__bad_interrupt>
      56:	00 00       	nop
      58:	5a c0       	rjmp	.+180    	; 0x10e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	58 c0       	rjmp	.+176    	; 0x10e <__bad_interrupt>
      5e:	00 00       	nop
      60:	56 c0       	rjmp	.+172    	; 0x10e <__bad_interrupt>
      62:	00 00       	nop
      64:	54 c0       	rjmp	.+168    	; 0x10e <__bad_interrupt>
      66:	00 00       	nop
      68:	52 c0       	rjmp	.+164    	; 0x10e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	50 c0       	rjmp	.+160    	; 0x10e <__bad_interrupt>
      6e:	00 00       	nop
      70:	4e c0       	rjmp	.+156    	; 0x10e <__bad_interrupt>
      72:	00 00       	nop
      74:	4c c0       	rjmp	.+152    	; 0x10e <__bad_interrupt>
      76:	00 00       	nop
      78:	4a c0       	rjmp	.+148    	; 0x10e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	48 c0       	rjmp	.+144    	; 0x10e <__bad_interrupt>
      7e:	00 00       	nop
      80:	46 c0       	rjmp	.+140    	; 0x10e <__bad_interrupt>
      82:	00 00       	nop
      84:	44 c0       	rjmp	.+136    	; 0x10e <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c0       	rjmp	.+134    	; 0x110 <__vector_34>
      8a:	00 00       	nop
      8c:	55 06       	cpc	r5, r21
      8e:	71 06       	cpc	r7, r17
      90:	7a 07       	cpc	r23, r26
      92:	7a 07       	cpc	r23, r26
      94:	7a 07       	cpc	r23, r26
      96:	7a 07       	cpc	r23, r26
      98:	7a 07       	cpc	r23, r26
      9a:	7a 07       	cpc	r23, r26
      9c:	7a 07       	cpc	r23, r26
      9e:	7a 07       	cpc	r23, r26
      a0:	92 06       	cpc	r9, r18
      a2:	95 06       	cpc	r9, r21
      a4:	7a 07       	cpc	r23, r26
      a6:	7a 07       	cpc	r23, r26
      a8:	7a 07       	cpc	r23, r26
      aa:	7a 07       	cpc	r23, r26
      ac:	99 06       	cpc	r9, r25
      ae:	9e 06       	cpc	r9, r30
      b0:	7a 07       	cpc	r23, r26
      b2:	7a 07       	cpc	r23, r26
      b4:	7a 07       	cpc	r23, r26
      b6:	7a 07       	cpc	r23, r26
      b8:	7a 07       	cpc	r23, r26
      ba:	7a 07       	cpc	r23, r26
      bc:	7a 07       	cpc	r23, r26
      be:	7a 07       	cpc	r23, r26
      c0:	a3 06       	cpc	r10, r19
      c2:	ad 06       	cpc	r10, r29
      c4:	b7 06       	cpc	r11, r23
      c6:	7a 07       	cpc	r23, r26
      c8:	7a 07       	cpc	r23, r26
      ca:	7a 07       	cpc	r23, r26
      cc:	c1 06       	cpc	r12, r17
      ce:	c5 06       	cpc	r12, r21
      d0:	cf 06       	cpc	r12, r31
      d2:	02 07       	cpc	r16, r18
      d4:	7a 07       	cpc	r23, r26
      d6:	7a 07       	cpc	r23, r26
      d8:	7a 07       	cpc	r23, r26
      da:	7a 07       	cpc	r23, r26
      dc:	7a 07       	cpc	r23, r26
      de:	7a 07       	cpc	r23, r26
      e0:	35 07       	cpc	r19, r21
      e2:	4b 07       	cpc	r20, r27
      e4:	5f 07       	cpc	r21, r31
      e6:	66 07       	cpc	r22, r22
      e8:	6d 07       	cpc	r22, r29
      ea:	74 07       	cpc	r23, r20

000000ec <__ctors_end>:
      ec:	11 24       	eor	r1, r1
      ee:	1f be       	out	0x3f, r1	; 63
      f0:	cf ef       	ldi	r28, 0xFF	; 255
      f2:	d0 e4       	ldi	r29, 0x40	; 64
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	cd bf       	out	0x3d, r28	; 61

000000f8 <__do_clear_bss>:
      f8:	21 e0       	ldi	r18, 0x01	; 1
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b1 e0       	ldi	r27, 0x01	; 1
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a7 31       	cpi	r26, 0x17	; 23
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	56 d0       	rcall	.+172    	; 0x1b6 <main>
     10a:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <_exit>

0000010e <__bad_interrupt>:
     10e:	78 cf       	rjmp	.-272    	; 0x0 <__vectors>

00000110 <__vector_34>:
	//motor_start();
	//pwm_start(TIMER1);
	//encoder_start();	
}

ISR(TIMER3_OVF_vect){
     110:	1f 92       	push	r1
     112:	0f 92       	push	r0
     114:	0f b6       	in	r0, 0x3f	; 63
     116:	0f 92       	push	r0
     118:	11 24       	eor	r1, r1
     11a:	0b b6       	in	r0, 0x3b	; 59
     11c:	0f 92       	push	r0
     11e:	2f 93       	push	r18
     120:	3f 93       	push	r19
     122:	4f 93       	push	r20
     124:	5f 93       	push	r21
     126:	6f 93       	push	r22
     128:	7f 93       	push	r23
     12a:	8f 93       	push	r24
     12c:	9f 93       	push	r25
     12e:	af 93       	push	r26
     130:	bf 93       	push	r27
     132:	ef 93       	push	r30
     134:	ff 93       	push	r31
	TCNT3 = 34285;
     136:	8d ee       	ldi	r24, 0xED	; 237
     138:	95 e8       	ldi	r25, 0x85	; 133
     13a:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     13e:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
	gpio_out_toggle(PD, 7);
     142:	67 e0       	ldi	r22, 0x07	; 7
     144:	83 e0       	ldi	r24, 0x03	; 3
     146:	58 d2       	rcall	.+1200   	; 0x5f8 <gpio_out_toggle>
}
     148:	ff 91       	pop	r31
     14a:	ef 91       	pop	r30
     14c:	bf 91       	pop	r27
     14e:	af 91       	pop	r26
     150:	9f 91       	pop	r25
     152:	8f 91       	pop	r24
     154:	7f 91       	pop	r23
     156:	6f 91       	pop	r22
     158:	5f 91       	pop	r21
     15a:	4f 91       	pop	r20
     15c:	3f 91       	pop	r19
     15e:	2f 91       	pop	r18
     160:	0f 90       	pop	r0
     162:	0b be       	out	0x3b, r0	; 59
     164:	0f 90       	pop	r0
     166:	0f be       	out	0x3f, r0	; 63
     168:	0f 90       	pop	r0
     16a:	1f 90       	pop	r1
     16c:	18 95       	reti

0000016e <distanceSensorInit>:

void distanceSensorInit(){
	gpio_init(PA, 5, OUTPUT, NO_PULL);
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	41 e0       	ldi	r20, 0x01	; 1
     172:	65 e0       	ldi	r22, 0x05	; 5
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	d3 d1       	rcall	.+934    	; 0x51e <gpio_init>
	gpio_init(PA, 6, INPUT, NO_PULL);
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	40 e0       	ldi	r20, 0x00	; 0
     17c:	66 e0       	ldi	r22, 0x06	; 6
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	ce d1       	rcall	.+924    	; 0x51e <gpio_init>
	gpio_init(PD, 7, OUTPUT, NO_PULL);
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	41 e0       	ldi	r20, 0x01	; 1
     186:	67 e0       	ldi	r22, 0x07	; 7
     188:	83 e0       	ldi	r24, 0x03	; 3
	gpio_out_reset(PD, 7);
     18a:	c9 d1       	rcall	.+914    	; 0x51e <gpio_init>
     18c:	67 e0       	ldi	r22, 0x07	; 7
     18e:	83 e0       	ldi	r24, 0x03	; 3
     190:	1b d2       	rcall	.+1078   	; 0x5c8 <gpio_out_reset>
	TCCR3A = 0x00;
     192:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TCCR3B = 0x00;
     196:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	TCCR3C = 0x00;
     19a:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__TEXT_REGION_LENGTH__+0x7e0092>
	TCNT3 = 0;
     19e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     1a2:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
	PCMSK0 = 0x40;
     1a6:	80 e4       	ldi	r24, 0x40	; 64
     1a8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	setBit(&PCICR, PCIE0);
     1ac:	60 e0       	ldi	r22, 0x00	; 0
     1ae:	88 e6       	ldi	r24, 0x68	; 104
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	3a c2       	rjmp	.+1140   	; 0x628 <setBit>
     1b4:	08 95       	ret

000001b6 <main>:
	//TIMSK3 = 0x01;
	//TCCR3B = 0x04;
}

int main(void)
{
     1b6:	af d1       	rcall	.+862    	; 0x516 <disableJTAG>
     1b8:	23 e3       	ldi	r18, 0x33	; 51
     1ba:	41 e0       	ldi	r20, 0x01	; 1
     1bc:	60 e0       	ldi	r22, 0x00	; 0
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	ac d6       	rcall	.+3416   	; 0xf1a <uart_init>
     1c2:	61 e0       	ldi	r22, 0x01	; 1
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	e7 d6       	rcall	.+3534   	; 0xf96 <uart_start>
     1c8:	d2 df       	rcall	.-92     	; 0x16e <distanceSensorInit>
     1ca:	78 94       	sei
     1cc:	2f ef       	ldi	r18, 0xFF	; 255
     1ce:	86 e7       	ldi	r24, 0x76	; 118
     1d0:	91 e0       	ldi	r25, 0x01	; 1
     1d2:	21 50       	subi	r18, 0x01	; 1
     1d4:	80 40       	sbci	r24, 0x00	; 0
     1d6:	90 40       	sbci	r25, 0x00	; 0
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0x1c>
     1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x26>
     1dc:	00 00       	nop
     1de:	96 d1       	rcall	.+812    	; 0x50c <getPulseLength>
     1e0:	bc 01       	movw	r22, r24
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	15 d7       	rcall	.+3626   	; 0x1012 <__floatunsisf>
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	40 e0       	ldi	r20, 0x00	; 0
     1ee:	52 e4       	ldi	r21, 0x42	; 66
     1f0:	c2 d7       	rcall	.+3972   	; 0x1176 <__mulsf3>
     1f2:	26 e9       	ldi	r18, 0x96	; 150
     1f4:	33 e4       	ldi	r19, 0x43	; 67
     1f6:	4b e8       	ldi	r20, 0x8B	; 139
     1f8:	5c e3       	ldi	r21, 0x3C	; 60
     1fa:	bd d7       	rcall	.+3962   	; 0x1176 <__mulsf3>
     1fc:	de d6       	rcall	.+3516   	; 0xfba <__fixunssfsi>
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	07 d7       	rcall	.+3598   	; 0x1012 <__floatunsisf>
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	40 e2       	ldi	r20, 0x20	; 32
     20a:	51 e4       	ldi	r21, 0x41	; 65
     20c:	d2 d6       	rcall	.+3492   	; 0xfb2 <__cmpsf2>
     20e:	88 23       	and	r24, r24
     210:	24 f4       	brge	.+8      	; 0x21a <main+0x64>
     212:	67 e0       	ldi	r22, 0x07	; 7
     214:	83 e0       	ldi	r24, 0x03	; 3
     216:	d8 d1       	rcall	.+944    	; 0x5c8 <gpio_out_reset>
     218:	03 c0       	rjmp	.+6      	; 0x220 <main+0x6a>
     21a:	67 e0       	ldi	r22, 0x07	; 7
     21c:	83 e0       	ldi	r24, 0x03	; 3
     21e:	bc d1       	rcall	.+888    	; 0x598 <gpio_out_set>
     220:	65 e0       	ldi	r22, 0x05	; 5
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	b9 d1       	rcall	.+882    	; 0x598 <gpio_out_set>
     226:	28 e2       	ldi	r18, 0x28	; 40
     228:	2a 95       	dec	r18
     22a:	f1 f7       	brne	.-4      	; 0x228 <main+0x72>
     22c:	65 e0       	ldi	r22, 0x05	; 5
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	cb d1       	rcall	.+918    	; 0x5c8 <gpio_out_reset>
     232:	cc cf       	rjmp	.-104    	; 0x1cc <main+0x16>

00000234 <pinChangeCallback>:
	return ((double) leftCounter /(double)(GEAR_RATIO * 12)) * (double)(3.141592 * WHEEL_DIAMETER);
}

double encoder_getDistanceRightCm(){
	return ((double) rightCounter /(double)(GEAR_RATIO * 12)) * (double)(3.141592 * WHEEL_DIAMETER);
}
     234:	cf 93       	push	r28
     236:	80 b1       	in	r24, 0x00	; 0
     238:	66 e0       	ldi	r22, 0x06	; 6
     23a:	33 d2       	rcall	.+1126   	; 0x6a2 <checkBit>
     23c:	81 30       	cpi	r24, 0x01	; 1
     23e:	71 f4       	brne	.+28     	; 0x25c <pinChangeCallback+0x28>
     240:	e4 e9       	ldi	r30, 0x94	; 148
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	91 81       	ldd	r25, Z+1	; 0x01
     248:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <pulseLength+0x1>
     24c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pulseLength>
     250:	11 82       	std	Z+1, r1	; 0x01
     252:	10 82       	st	Z, r1
     254:	84 e0       	ldi	r24, 0x04	; 4
     256:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
     25a:	0f c0       	rjmp	.+30     	; 0x27a <pinChangeCallback+0x46>
     25c:	80 b1       	in	r24, 0x00	; 0
     25e:	66 e0       	ldi	r22, 0x06	; 6
     260:	20 d2       	rcall	.+1088   	; 0x6a2 <checkBit>
     262:	81 11       	cpse	r24, r1
     264:	0a c0       	rjmp	.+20     	; 0x27a <pinChangeCallback+0x46>
     266:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
     26a:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     26e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <pulseLength+0x1>
     272:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pulseLength>
     276:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
     27a:	80 b1       	in	r24, 0x00	; 0
     27c:	67 e0       	ldi	r22, 0x07	; 7
     27e:	11 d2       	rcall	.+1058   	; 0x6a2 <checkBit>
     280:	c8 2f       	mov	r28, r24
     282:	80 b1       	in	r24, 0x00	; 0
     284:	66 e0       	ldi	r22, 0x06	; 6
     286:	0d d2       	rcall	.+1050   	; 0x6a2 <checkBit>
     288:	40 e8       	ldi	r20, 0x80	; 128
     28a:	c4 9f       	mul	r28, r20
     28c:	90 01       	movw	r18, r0
     28e:	11 24       	eor	r1, r1
     290:	40 e4       	ldi	r20, 0x40	; 64
     292:	84 9f       	mul	r24, r20
     294:	c0 01       	movw	r24, r0
     296:	11 24       	eor	r1, r1
     298:	82 2b       	or	r24, r18
     29a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <leftCurrentState>
     29e:	86 b1       	in	r24, 0x06	; 6
     2a0:	61 e0       	ldi	r22, 0x01	; 1
     2a2:	ff d1       	rcall	.+1022   	; 0x6a2 <checkBit>
     2a4:	c8 2f       	mov	r28, r24
     2a6:	86 b1       	in	r24, 0x06	; 6
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	fb d1       	rcall	.+1014   	; 0x6a2 <checkBit>
     2ac:	cc 0f       	add	r28, r28
     2ae:	8c 2b       	or	r24, r28
     2b0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rightCurrentState>
     2b4:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <leftLastState>
     2b8:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <rightLastState>
     2bc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <leftCurrentState>
     2c0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <rightCurrentState>
     2c4:	23 2b       	or	r18, r19
     2c6:	89 2b       	or	r24, r25
     2c8:	82 27       	eor	r24, r18
     2ca:	80 38       	cpi	r24, 0x80	; 128
     2cc:	a1 f4       	brne	.+40     	; 0x2f6 <pinChangeCallback+0xc2>
     2ce:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <leftCounter>
     2d2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <leftCounter+0x1>
     2d6:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <leftCounter+0x2>
     2da:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <leftCounter+0x3>
     2de:	01 96       	adiw	r24, 0x01	; 1
     2e0:	a1 1d       	adc	r26, r1
     2e2:	b1 1d       	adc	r27, r1
     2e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <leftCounter>
     2e8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <leftCounter+0x1>
     2ec:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <leftCounter+0x2>
     2f0:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <leftCounter+0x3>
     2f4:	62 c0       	rjmp	.+196    	; 0x3ba <pinChangeCallback+0x186>
     2f6:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <leftLastState>
     2fa:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <rightLastState>
     2fe:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <leftCurrentState>
     302:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <rightCurrentState>
     306:	23 2b       	or	r18, r19
     308:	89 2b       	or	r24, r25
     30a:	82 27       	eor	r24, r18
     30c:	80 34       	cpi	r24, 0x40	; 64
     30e:	a1 f4       	brne	.+40     	; 0x338 <pinChangeCallback+0x104>
     310:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <leftCounter>
     314:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <leftCounter+0x1>
     318:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <leftCounter+0x2>
     31c:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <leftCounter+0x3>
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	a1 1d       	adc	r26, r1
     324:	b1 1d       	adc	r27, r1
     326:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <leftCounter>
     32a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <leftCounter+0x1>
     32e:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <leftCounter+0x2>
     332:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <leftCounter+0x3>
     336:	41 c0       	rjmp	.+130    	; 0x3ba <pinChangeCallback+0x186>
     338:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <leftLastState>
     33c:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <rightLastState>
     340:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <leftCurrentState>
     344:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <rightCurrentState>
     348:	23 2b       	or	r18, r19
     34a:	89 2b       	or	r24, r25
     34c:	82 27       	eor	r24, r18
     34e:	82 30       	cpi	r24, 0x02	; 2
     350:	a1 f4       	brne	.+40     	; 0x37a <pinChangeCallback+0x146>
     352:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <rightCounter>
     356:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <rightCounter+0x1>
     35a:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <rightCounter+0x2>
     35e:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <rightCounter+0x3>
     362:	01 96       	adiw	r24, 0x01	; 1
     364:	a1 1d       	adc	r26, r1
     366:	b1 1d       	adc	r27, r1
     368:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <rightCounter>
     36c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <rightCounter+0x1>
     370:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <rightCounter+0x2>
     374:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <rightCounter+0x3>
     378:	20 c0       	rjmp	.+64     	; 0x3ba <pinChangeCallback+0x186>
     37a:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <leftLastState>
     37e:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <rightLastState>
     382:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <leftCurrentState>
     386:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <rightCurrentState>
     38a:	23 2b       	or	r18, r19
     38c:	89 2b       	or	r24, r25
     38e:	82 27       	eor	r24, r18
     390:	81 30       	cpi	r24, 0x01	; 1
     392:	99 f4       	brne	.+38     	; 0x3ba <pinChangeCallback+0x186>
     394:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <rightCounter>
     398:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <rightCounter+0x1>
     39c:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <rightCounter+0x2>
     3a0:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <rightCounter+0x3>
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	a1 1d       	adc	r26, r1
     3a8:	b1 1d       	adc	r27, r1
     3aa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <rightCounter>
     3ae:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <rightCounter+0x1>
     3b2:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <rightCounter+0x2>
     3b6:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <rightCounter+0x3>
     3ba:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <leftCurrentState>
     3be:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <leftLastState>
     3c2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rightCurrentState>
     3c6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <rightLastState>
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <__vector_4>:
     3ce:	1f 92       	push	r1
     3d0:	0f 92       	push	r0
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	0f 92       	push	r0
     3d6:	11 24       	eor	r1, r1
     3d8:	0b b6       	in	r0, 0x3b	; 59
     3da:	0f 92       	push	r0
     3dc:	2f 93       	push	r18
     3de:	3f 93       	push	r19
     3e0:	4f 93       	push	r20
     3e2:	5f 93       	push	r21
     3e4:	6f 93       	push	r22
     3e6:	7f 93       	push	r23
     3e8:	8f 93       	push	r24
     3ea:	9f 93       	push	r25
     3ec:	af 93       	push	r26
     3ee:	bf 93       	push	r27
     3f0:	ef 93       	push	r30
     3f2:	ff 93       	push	r31
     3f4:	1f df       	rcall	.-450    	; 0x234 <pinChangeCallback>
     3f6:	ff 91       	pop	r31
     3f8:	ef 91       	pop	r30
     3fa:	bf 91       	pop	r27
     3fc:	af 91       	pop	r26
     3fe:	9f 91       	pop	r25
     400:	8f 91       	pop	r24
     402:	7f 91       	pop	r23
     404:	6f 91       	pop	r22
     406:	5f 91       	pop	r21
     408:	4f 91       	pop	r20
     40a:	3f 91       	pop	r19
     40c:	2f 91       	pop	r18
     40e:	0f 90       	pop	r0
     410:	0b be       	out	0x3b, r0	; 59
     412:	0f 90       	pop	r0
     414:	0f be       	out	0x3f, r0	; 63
     416:	0f 90       	pop	r0
     418:	1f 90       	pop	r1
     41a:	18 95       	reti

0000041c <__vector_6>:
     41c:	1f 92       	push	r1
     41e:	0f 92       	push	r0
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	0f 92       	push	r0
     424:	11 24       	eor	r1, r1
     426:	0b b6       	in	r0, 0x3b	; 59
     428:	0f 92       	push	r0
     42a:	2f 93       	push	r18
     42c:	3f 93       	push	r19
     42e:	4f 93       	push	r20
     430:	5f 93       	push	r21
     432:	6f 93       	push	r22
     434:	7f 93       	push	r23
     436:	8f 93       	push	r24
     438:	9f 93       	push	r25
     43a:	af 93       	push	r26
     43c:	bf 93       	push	r27
     43e:	ef 93       	push	r30
     440:	ff 93       	push	r31
     442:	f8 de       	rcall	.-528    	; 0x234 <pinChangeCallback>
     444:	ff 91       	pop	r31
     446:	ef 91       	pop	r30
     448:	bf 91       	pop	r27
     44a:	af 91       	pop	r26
     44c:	9f 91       	pop	r25
     44e:	8f 91       	pop	r24
     450:	7f 91       	pop	r23
     452:	6f 91       	pop	r22
     454:	5f 91       	pop	r21
     456:	4f 91       	pop	r20
     458:	3f 91       	pop	r19
     45a:	2f 91       	pop	r18
     45c:	0f 90       	pop	r0
     45e:	0b be       	out	0x3b, r0	; 59
     460:	0f 90       	pop	r0
     462:	0f be       	out	0x3f, r0	; 63
     464:	0f 90       	pop	r0
     466:	1f 90       	pop	r1
     468:	18 95       	reti

0000046a <encoder_init>:
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	40 e0       	ldi	r20, 0x00	; 0
     46e:	67 e0       	ldi	r22, 0x07	; 7
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	55 d0       	rcall	.+170    	; 0x51e <gpio_init>
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	40 e0       	ldi	r20, 0x00	; 0
     478:	66 e0       	ldi	r22, 0x06	; 6
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	50 d0       	rcall	.+160    	; 0x51e <gpio_init>
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	40 e0       	ldi	r20, 0x00	; 0
     482:	61 e0       	ldi	r22, 0x01	; 1
     484:	82 e0       	ldi	r24, 0x02	; 2
     486:	4b d0       	rcall	.+150    	; 0x51e <gpio_init>
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	46 d0       	rcall	.+140    	; 0x51e <gpio_init>
     492:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <leftCounter>
     496:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <leftCounter+0x1>
     49a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <leftCounter+0x2>
     49e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <leftCounter+0x3>
     4a2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <leftCurrentState>
     4a6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <leftLastState>
     4aa:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <rightCounter>
     4ae:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <rightCounter+0x1>
     4b2:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rightCounter+0x2>
     4b6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <rightCounter+0x3>
     4ba:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rightCurrentState>
     4be:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <rightLastState>
     4c2:	eb e6       	ldi	r30, 0x6B	; 107
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	80 81       	ld	r24, Z
     4c8:	80 6e       	ori	r24, 0xE0	; 224
     4ca:	80 83       	st	Z, r24
     4cc:	ed e6       	ldi	r30, 0x6D	; 109
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	80 81       	ld	r24, Z
     4d2:	87 61       	ori	r24, 0x17	; 23
     4d4:	80 83       	st	Z, r24
     4d6:	08 95       	ret

000004d8 <encoder_stop>:
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	88 e6       	ldi	r24, 0x68	; 104
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	b0 d0       	rcall	.+352    	; 0x640 <clearBit>
     4e0:	62 e0       	ldi	r22, 0x02	; 2
     4e2:	88 e6       	ldi	r24, 0x68	; 104
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	ac c0       	rjmp	.+344    	; 0x640 <clearBit>
     4e8:	08 95       	ret

000004ea <encoder_reset>:

void encoder_reset(){
	leftCounter = 0;
     4ea:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <leftCounter>
     4ee:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <leftCounter+0x1>
     4f2:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <leftCounter+0x2>
     4f6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <leftCounter+0x3>
	rightCounter = 0;
     4fa:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <rightCounter>
     4fe:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <rightCounter+0x1>
     502:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rightCounter+0x2>
     506:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <rightCounter+0x3>
     50a:	08 95       	ret

0000050c <getPulseLength>:
}

u16 getPulseLength(){
	return pulseLength;
     50c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pulseLength>
     510:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <pulseLength+0x1>
     514:	08 95       	ret

00000516 <disableJTAG>:
			break;
		case PC:
			clearBit(&PORTC, _number);
			break;
		case PD:
			clearBit(&PORTD, _number);
     516:	80 e8       	ldi	r24, 0x80	; 128
     518:	85 bf       	out	0x35, r24	; 53
     51a:	85 bf       	out	0x35, r24	; 53
     51c:	08 95       	ret

0000051e <gpio_init>:
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	d6 2f       	mov	r29, r22
     526:	c4 2f       	mov	r28, r20
     528:	12 2f       	mov	r17, r18
     52a:	81 30       	cpi	r24, 0x01	; 1
     52c:	89 f0       	breq	.+34     	; 0x550 <gpio_init+0x32>
     52e:	28 f0       	brcs	.+10     	; 0x53a <gpio_init+0x1c>
     530:	82 30       	cpi	r24, 0x02	; 2
     532:	c9 f0       	breq	.+50     	; 0x566 <gpio_init+0x48>
     534:	83 30       	cpi	r24, 0x03	; 3
     536:	11 f1       	breq	.+68     	; 0x57c <gpio_init+0x5e>
     538:	2b c0       	rjmp	.+86     	; 0x590 <gpio_init+0x72>
     53a:	81 e2       	ldi	r24, 0x21	; 33
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	99 d0       	rcall	.+306    	; 0x672 <updateBit>
     540:	c1 11       	cpse	r28, r1
     542:	26 c0       	rjmp	.+76     	; 0x590 <gpio_init+0x72>
     544:	41 2f       	mov	r20, r17
     546:	6d 2f       	mov	r22, r29
     548:	82 e2       	ldi	r24, 0x22	; 34
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	92 d0       	rcall	.+292    	; 0x672 <updateBit>
     54e:	20 c0       	rjmp	.+64     	; 0x590 <gpio_init+0x72>
     550:	84 e2       	ldi	r24, 0x24	; 36
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	8e d0       	rcall	.+284    	; 0x672 <updateBit>
     556:	c1 11       	cpse	r28, r1
     558:	1b c0       	rjmp	.+54     	; 0x590 <gpio_init+0x72>
     55a:	41 2f       	mov	r20, r17
     55c:	6d 2f       	mov	r22, r29
     55e:	85 e2       	ldi	r24, 0x25	; 37
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	87 d0       	rcall	.+270    	; 0x672 <updateBit>
     564:	15 c0       	rjmp	.+42     	; 0x590 <gpio_init+0x72>
     566:	87 e2       	ldi	r24, 0x27	; 39
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	83 d0       	rcall	.+262    	; 0x672 <updateBit>
     56c:	c1 11       	cpse	r28, r1
     56e:	10 c0       	rjmp	.+32     	; 0x590 <gpio_init+0x72>
     570:	41 2f       	mov	r20, r17
     572:	6d 2f       	mov	r22, r29
     574:	88 e2       	ldi	r24, 0x28	; 40
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	7c d0       	rcall	.+248    	; 0x672 <updateBit>
     57a:	0a c0       	rjmp	.+20     	; 0x590 <gpio_init+0x72>
     57c:	8a e2       	ldi	r24, 0x2A	; 42
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	78 d0       	rcall	.+240    	; 0x672 <updateBit>
     582:	c1 11       	cpse	r28, r1
     584:	05 c0       	rjmp	.+10     	; 0x590 <gpio_init+0x72>
     586:	41 2f       	mov	r20, r17
     588:	6d 2f       	mov	r22, r29
     58a:	8b e2       	ldi	r24, 0x2B	; 43
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	71 d0       	rcall	.+226    	; 0x672 <updateBit>
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	1f 91       	pop	r17
     596:	08 95       	ret

00000598 <gpio_out_set>:
	}
}
	

void gpio_out_set(port _port, u8 _number){
	switch(_port){
     598:	81 30       	cpi	r24, 0x01	; 1
     59a:	51 f0       	breq	.+20     	; 0x5b0 <gpio_out_set+0x18>
     59c:	28 f0       	brcs	.+10     	; 0x5a8 <gpio_out_set+0x10>
     59e:	82 30       	cpi	r24, 0x02	; 2
     5a0:	59 f0       	breq	.+22     	; 0x5b8 <gpio_out_set+0x20>
     5a2:	83 30       	cpi	r24, 0x03	; 3
     5a4:	69 f0       	breq	.+26     	; 0x5c0 <gpio_out_set+0x28>
     5a6:	08 95       	ret
		case PA:
			setBit(&PORTA, _number);
     5a8:	82 e2       	ldi	r24, 0x22	; 34
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	3d c0       	rjmp	.+122    	; 0x628 <setBit>
			break;
     5ae:	08 95       	ret
		case PB:
			setBit(&PORTB, _number);
     5b0:	85 e2       	ldi	r24, 0x25	; 37
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	39 c0       	rjmp	.+114    	; 0x628 <setBit>
			break;
		case PC:
			setBit(&PORTC, _number);
     5b6:	08 95       	ret
     5b8:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			setBit(&PORTD, _number);
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	35 c0       	rjmp	.+106    	; 0x628 <setBit>
     5be:	08 95       	ret
     5c0:	8b e2       	ldi	r24, 0x2B	; 43
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	31 c0       	rjmp	.+98     	; 0x628 <setBit>
     5c6:	08 95       	ret

000005c8 <gpio_out_reset>:
			break;
	}
}

void gpio_out_reset(port _port, u8 _number){
	switch(_port){
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	51 f0       	breq	.+20     	; 0x5e0 <gpio_out_reset+0x18>
     5cc:	28 f0       	brcs	.+10     	; 0x5d8 <gpio_out_reset+0x10>
     5ce:	82 30       	cpi	r24, 0x02	; 2
     5d0:	59 f0       	breq	.+22     	; 0x5e8 <gpio_out_reset+0x20>
     5d2:	83 30       	cpi	r24, 0x03	; 3
     5d4:	69 f0       	breq	.+26     	; 0x5f0 <gpio_out_reset+0x28>
     5d6:	08 95       	ret
		case PA:
			clearBit(&PORTA, _number);
     5d8:	82 e2       	ldi	r24, 0x22	; 34
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	31 c0       	rjmp	.+98     	; 0x640 <clearBit>
			break;
     5de:	08 95       	ret
		case PB:
			clearBit(&PORTB, _number);
     5e0:	85 e2       	ldi	r24, 0x25	; 37
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	2d c0       	rjmp	.+90     	; 0x640 <clearBit>
			break;
		case PC:
			clearBit(&PORTC, _number);
     5e6:	08 95       	ret
     5e8:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			clearBit(&PORTD, _number);
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	29 c0       	rjmp	.+82     	; 0x640 <clearBit>
     5ee:	08 95       	ret
     5f0:	8b e2       	ldi	r24, 0x2B	; 43
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	25 c0       	rjmp	.+74     	; 0x640 <clearBit>
     5f6:	08 95       	ret

000005f8 <gpio_out_toggle>:
			break;
	}
}

void gpio_out_toggle(port _port, u8 _number){
	switch(_port){
     5f8:	81 30       	cpi	r24, 0x01	; 1
     5fa:	51 f0       	breq	.+20     	; 0x610 <gpio_out_toggle+0x18>
     5fc:	28 f0       	brcs	.+10     	; 0x608 <gpio_out_toggle+0x10>
     5fe:	82 30       	cpi	r24, 0x02	; 2
     600:	59 f0       	breq	.+22     	; 0x618 <gpio_out_toggle+0x20>
     602:	83 30       	cpi	r24, 0x03	; 3
     604:	69 f0       	breq	.+26     	; 0x620 <gpio_out_toggle+0x28>
     606:	08 95       	ret
		case PA:
			toggleBit(&PORTA, _number);
     608:	82 e2       	ldi	r24, 0x22	; 34
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	26 c0       	rjmp	.+76     	; 0x65a <toggleBit>
			break;
     60e:	08 95       	ret
		case PB:
			toggleBit(&PORTB, _number);
     610:	85 e2       	ldi	r24, 0x25	; 37
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	22 c0       	rjmp	.+68     	; 0x65a <toggleBit>
			break;
		case PC:
			toggleBit(&PORTC, _number);
     616:	08 95       	ret
     618:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			toggleBit(&PORTD, _number);
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	1e c0       	rjmp	.+60     	; 0x65a <toggleBit>
     61e:	08 95       	ret
     620:	8b e2       	ldi	r24, 0x2B	; 43
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	1a c0       	rjmp	.+52     	; 0x65a <toggleBit>
     626:	08 95       	ret

00000628 <setBit>:
 */ 

#include "math.h"

void setBit(volatile u8 *registerName, u8 position){
	*registerName |= (1 << position);
     628:	fc 01       	movw	r30, r24
     62a:	40 81       	ld	r20, Z
     62c:	21 e0       	ldi	r18, 0x01	; 1
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	02 c0       	rjmp	.+4      	; 0x636 <setBit+0xe>
     632:	22 0f       	add	r18, r18
     634:	33 1f       	adc	r19, r19
     636:	6a 95       	dec	r22
     638:	e2 f7       	brpl	.-8      	; 0x632 <setBit+0xa>
     63a:	24 2b       	or	r18, r20
     63c:	20 83       	st	Z, r18
     63e:	08 95       	ret

00000640 <clearBit>:
}

void clearBit(volatile u8 *registerName, u8 position){
     640:	fc 01       	movw	r30, r24
	*registerName &= ~(1 << position);
     642:	90 81       	ld	r25, Z
     644:	21 e0       	ldi	r18, 0x01	; 1
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	02 c0       	rjmp	.+4      	; 0x64e <clearBit+0xe>
     64a:	22 0f       	add	r18, r18
     64c:	33 1f       	adc	r19, r19
     64e:	6a 95       	dec	r22
     650:	e2 f7       	brpl	.-8      	; 0x64a <clearBit+0xa>
     652:	20 95       	com	r18
     654:	29 23       	and	r18, r25
     656:	20 83       	st	Z, r18
     658:	08 95       	ret

0000065a <toggleBit>:
}

void toggleBit(volatile u8 *registerName, u8 position){
	*registerName ^= (1 << position);
     65a:	fc 01       	movw	r30, r24
     65c:	40 81       	ld	r20, Z
     65e:	21 e0       	ldi	r18, 0x01	; 1
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	02 c0       	rjmp	.+4      	; 0x668 <toggleBit+0xe>
     664:	22 0f       	add	r18, r18
     666:	33 1f       	adc	r19, r19
     668:	6a 95       	dec	r22
     66a:	e2 f7       	brpl	.-8      	; 0x664 <toggleBit+0xa>
     66c:	24 27       	eor	r18, r20
     66e:	20 83       	st	Z, r18
     670:	08 95       	ret

00000672 <updateBit>:
}

void updateBit(volatile u8 *registerName, u8 position, u8 value){
     672:	fc 01       	movw	r30, r24
     674:	94 2f       	mov	r25, r20
	u8 newValue = value << position;
	newValue |= (*registerName & ~(1 << position));
     676:	20 81       	ld	r18, Z
     678:	41 e0       	ldi	r20, 0x01	; 1
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	06 2e       	mov	r0, r22
     67e:	02 c0       	rjmp	.+4      	; 0x684 <updateBit+0x12>
     680:	44 0f       	add	r20, r20
     682:	55 1f       	adc	r21, r21
     684:	0a 94       	dec	r0
     686:	e2 f7       	brpl	.-8      	; 0x680 <updateBit+0xe>
     688:	40 95       	com	r20
     68a:	50 95       	com	r21
     68c:	24 23       	and	r18, r20
     68e:	49 2f       	mov	r20, r25
     690:	50 e0       	ldi	r21, 0x00	; 0
     692:	02 c0       	rjmp	.+4      	; 0x698 <updateBit+0x26>
     694:	44 0f       	add	r20, r20
     696:	55 1f       	adc	r21, r21
     698:	6a 95       	dec	r22
     69a:	e2 f7       	brpl	.-8      	; 0x694 <updateBit+0x22>
     69c:	42 2b       	or	r20, r18
	*registerName = newValue;
     69e:	40 83       	st	Z, r20
     6a0:	08 95       	ret

000006a2 <checkBit>:
}

bitValue checkBit(u8 registerName, u8 position){
	return (registerName >> position) & 1;
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <checkBit+0x8>
     6a6:	95 95       	asr	r25
     6a8:	87 95       	ror	r24
     6aa:	6a 95       	dec	r22
     6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <checkBit+0x4>
     6ae:	81 70       	andi	r24, 0x01	; 1
     6b0:	08 95       	ret

000006b2 <motor_init>:

u8 calibrateSpeed(u8 speed){
	return 0.91*speed;
}

void motor_init(){
     6b2:	0f 93       	push	r16
	gpio_init(PC, 7, OUTPUT, NO_PULL);
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	41 e0       	ldi	r20, 0x01	; 1
     6b8:	67 e0       	ldi	r22, 0x07	; 7
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	30 df       	rcall	.-416    	; 0x51e <gpio_init>
	gpio_init(PC, 6, OUTPUT, NO_PULL);
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	41 e0       	ldi	r20, 0x01	; 1
     6c2:	66 e0       	ldi	r22, 0x06	; 6
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	2b df       	rcall	.-426    	; 0x51e <gpio_init>
	gpio_init(PC, 5, OUTPUT, NO_PULL);
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	41 e0       	ldi	r20, 0x01	; 1
     6cc:	65 e0       	ldi	r22, 0x05	; 5
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	26 df       	rcall	.-436    	; 0x51e <gpio_init>
	gpio_init(PC, 3, OUTPUT, NO_PULL);
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	41 e0       	ldi	r20, 0x01	; 1
     6d6:	63 e0       	ldi	r22, 0x03	; 3
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	21 df       	rcall	.-446    	; 0x51e <gpio_init>
	pwm_init(0, 35000, TIMER2, CHANNEL_A);
     6dc:	00 e0       	ldi	r16, 0x00	; 0
     6de:	22 e0       	ldi	r18, 0x02	; 2
     6e0:	48 eb       	ldi	r20, 0xB8	; 184
     6e2:	58 e8       	ldi	r21, 0x88	; 136
     6e4:	60 e0       	ldi	r22, 0x00	; 0
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	20 d1       	rcall	.+576    	; 0x92c <pwm_init>
	pwm_init(0, 25000, TIMER2, CHANNEL_B);
     6ec:	01 e0       	ldi	r16, 0x01	; 1
     6ee:	22 e0       	ldi	r18, 0x02	; 2
     6f0:	48 ea       	ldi	r20, 0xA8	; 168
     6f2:	51 e6       	ldi	r21, 0x61	; 97
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	18 d1       	rcall	.+560    	; 0x92c <pwm_init>
}
     6fc:	0f 91       	pop	r16
     6fe:	08 95       	ret

00000700 <motor_start>:

void motor_start(){
	gpio_out_set(PC, 7);
     700:	67 e0       	ldi	r22, 0x07	; 7
     702:	82 e0       	ldi	r24, 0x02	; 2
     704:	49 df       	rcall	.-366    	; 0x598 <gpio_out_set>
	gpio_out_reset(PC, 6);
     706:	66 e0       	ldi	r22, 0x06	; 6
     708:	82 e0       	ldi	r24, 0x02	; 2
	gpio_out_reset(PC, 5);
     70a:	5e df       	rcall	.-324    	; 0x5c8 <gpio_out_reset>
     70c:	65 e0       	ldi	r22, 0x05	; 5
	gpio_out_set(PC, 3);
     70e:	82 e0       	ldi	r24, 0x02	; 2
     710:	5b df       	rcall	.-330    	; 0x5c8 <gpio_out_reset>
     712:	63 e0       	ldi	r22, 0x03	; 3
	pwm_setDutyCycle(40, TIMER2, CHANNEL_A);
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	40 df       	rcall	.-384    	; 0x598 <gpio_out_set>
     718:	40 e0       	ldi	r20, 0x00	; 0
	pwm_setDutyCycle(40, TIMER2, CHANNEL_B);
     71a:	62 e0       	ldi	r22, 0x02	; 2
     71c:	88 e2       	ldi	r24, 0x28	; 40
     71e:	e0 d1       	rcall	.+960    	; 0xae0 <pwm_setDutyCycle>
     720:	41 e0       	ldi	r20, 0x01	; 1
	pwm_start(TIMER2);
     722:	62 e0       	ldi	r22, 0x02	; 2
     724:	88 e2       	ldi	r24, 0x28	; 40
     726:	dc d1       	rcall	.+952    	; 0xae0 <pwm_setDutyCycle>
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	2b c2       	rjmp	.+1110   	; 0xb82 <pwm_start>
     72c:	08 95       	ret

0000072e <motor_stop>:
}

void motor_stop(){
	pwm_stop(TIMER2);
     72e:	82 e0       	ldi	r24, 0x02	; 2
     730:	6f c2       	rjmp	.+1246   	; 0xc10 <pwm_stop>
     732:	08 95       	ret

00000734 <motor_direction>:
}

void motor_direction(motorDirection direction){
	switch(direction){
     734:	81 30       	cpi	r24, 0x01	; 1
     736:	99 f0       	breq	.+38     	; 0x75e <motor_direction+0x2a>
     738:	28 f0       	brcs	.+10     	; 0x744 <motor_direction+0x10>
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	e9 f0       	breq	.+58     	; 0x778 <motor_direction+0x44>
     73e:	83 30       	cpi	r24, 0x03	; 3
     740:	41 f1       	breq	.+80     	; 0x792 <motor_direction+0x5e>
     742:	08 95       	ret
		case FORWARD:
			gpio_out_set(PC, 7);
     744:	67 e0       	ldi	r22, 0x07	; 7
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	27 df       	rcall	.-434    	; 0x598 <gpio_out_set>
			gpio_out_reset(PC, 6);
     74a:	66 e0       	ldi	r22, 0x06	; 6
     74c:	82 e0       	ldi	r24, 0x02	; 2
			gpio_out_reset(PC, 5);
     74e:	3c df       	rcall	.-392    	; 0x5c8 <gpio_out_reset>
     750:	65 e0       	ldi	r22, 0x05	; 5
			gpio_out_set(PC, 3);
     752:	82 e0       	ldi	r24, 0x02	; 2
     754:	39 df       	rcall	.-398    	; 0x5c8 <gpio_out_reset>
     756:	63 e0       	ldi	r22, 0x03	; 3
			break;
     758:	82 e0       	ldi	r24, 0x02	; 2
		case BACKWARD:
			gpio_out_reset(PC, 7);
     75a:	1e cf       	rjmp	.-452    	; 0x598 <gpio_out_set>
     75c:	08 95       	ret
			gpio_out_set(PC, 6);
     75e:	67 e0       	ldi	r22, 0x07	; 7
     760:	82 e0       	ldi	r24, 0x02	; 2
			gpio_out_set(PC, 5);
     762:	32 df       	rcall	.-412    	; 0x5c8 <gpio_out_reset>
     764:	66 e0       	ldi	r22, 0x06	; 6
     766:	82 e0       	ldi	r24, 0x02	; 2
			gpio_out_reset(PC, 3);
     768:	17 df       	rcall	.-466    	; 0x598 <gpio_out_set>
     76a:	65 e0       	ldi	r22, 0x05	; 5
     76c:	82 e0       	ldi	r24, 0x02	; 2
			break;
		case LEFT:
			gpio_out_reset(PC, 7);
     76e:	14 df       	rcall	.-472    	; 0x598 <gpio_out_set>
     770:	63 e0       	ldi	r22, 0x03	; 3
			gpio_out_set(PC, 6);
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	29 cf       	rjmp	.-430    	; 0x5c8 <gpio_out_reset>
     776:	08 95       	ret
			gpio_out_reset(PC, 5);
     778:	67 e0       	ldi	r22, 0x07	; 7
     77a:	82 e0       	ldi	r24, 0x02	; 2
     77c:	25 df       	rcall	.-438    	; 0x5c8 <gpio_out_reset>
			gpio_out_set(PC, 3);
     77e:	66 e0       	ldi	r22, 0x06	; 6
     780:	82 e0       	ldi	r24, 0x02	; 2
			break;
		case RIGHT:
			gpio_out_set(PC, 7);
     782:	0a df       	rcall	.-492    	; 0x598 <gpio_out_set>
     784:	65 e0       	ldi	r22, 0x05	; 5
     786:	82 e0       	ldi	r24, 0x02	; 2
     788:	1f df       	rcall	.-450    	; 0x5c8 <gpio_out_reset>
			gpio_out_reset(PC, 6);
     78a:	63 e0       	ldi	r22, 0x03	; 3
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	04 cf       	rjmp	.-504    	; 0x598 <gpio_out_set>
     790:	08 95       	ret
			gpio_out_set(PC, 5);
     792:	67 e0       	ldi	r22, 0x07	; 7
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	00 df       	rcall	.-512    	; 0x598 <gpio_out_set>
     798:	66 e0       	ldi	r22, 0x06	; 6
			gpio_out_reset(PC, 3);
     79a:	82 e0       	ldi	r24, 0x02	; 2
     79c:	15 df       	rcall	.-470    	; 0x5c8 <gpio_out_reset>
     79e:	65 e0       	ldi	r22, 0x05	; 5
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	fa de       	rcall	.-524    	; 0x598 <gpio_out_set>
     7a4:	63 e0       	ldi	r22, 0x03	; 3
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	0f cf       	rjmp	.-482    	; 0x5c8 <gpio_out_reset>
     7aa:	08 95       	ret

000007ac <motor_speed>:
		case NO_DIR:
			break;
	}
}

void motor_speed(u8 speed){
     7ac:	cf 93       	push	r28
     7ae:	c8 2f       	mov	r28, r24
	pwm_setDutyCycle(speed, TIMER2, CHANNEL_A);
     7b0:	40 e0       	ldi	r20, 0x00	; 0
     7b2:	62 e0       	ldi	r22, 0x02	; 2
     7b4:	95 d1       	rcall	.+810    	; 0xae0 <pwm_setDutyCycle>
	pwm_setDutyCycle(speed, TIMER2, CHANNEL_B);
     7b6:	41 e0       	ldi	r20, 0x01	; 1
     7b8:	62 e0       	ldi	r22, 0x02	; 2
     7ba:	8c 2f       	mov	r24, r28
     7bc:	91 d1       	rcall	.+802    	; 0xae0 <pwm_setDutyCycle>
}
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <motor_individualDirSpeed>:

void motor_individualDirSpeed(motorDirection directionA, u8 speedA, motorDirection directionB, u8 speedB){
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	16 2f       	mov	r17, r22
     7ca:	c4 2f       	mov	r28, r20
     7cc:	d2 2f       	mov	r29, r18
	switch(directionA){
     7ce:	88 23       	and	r24, r24
     7d0:	19 f0       	breq	.+6      	; 0x7d8 <motor_individualDirSpeed+0x16>
     7d2:	81 30       	cpi	r24, 0x01	; 1
     7d4:	41 f0       	breq	.+16     	; 0x7e6 <motor_individualDirSpeed+0x24>
     7d6:	0d c0       	rjmp	.+26     	; 0x7f2 <motor_individualDirSpeed+0x30>
		case FORWARD:
			gpio_out_reset(PC, 7);
     7d8:	67 e0       	ldi	r22, 0x07	; 7
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	f5 de       	rcall	.-534    	; 0x5c8 <gpio_out_reset>
			gpio_out_set(PC, 6);
     7de:	66 e0       	ldi	r22, 0x06	; 6
     7e0:	82 e0       	ldi	r24, 0x02	; 2
     7e2:	da de       	rcall	.-588    	; 0x598 <gpio_out_set>
			break;
		case BACKWARD:
			gpio_out_set(PC, 7);
     7e4:	06 c0       	rjmp	.+12     	; 0x7f2 <motor_individualDirSpeed+0x30>
     7e6:	67 e0       	ldi	r22, 0x07	; 7
			gpio_out_reset(PC, 6);
     7e8:	82 e0       	ldi	r24, 0x02	; 2
     7ea:	d6 de       	rcall	.-596    	; 0x598 <gpio_out_set>
     7ec:	66 e0       	ldi	r22, 0x06	; 6
		case RIGHT:
			break;
		case NO_DIR:
			break;
	}
	pwm_setDutyCycle(speedA, TIMER2, CHANNEL_A);
     7ee:	82 e0       	ldi	r24, 0x02	; 2
     7f0:	eb de       	rcall	.-554    	; 0x5c8 <gpio_out_reset>
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	62 e0       	ldi	r22, 0x02	; 2
     7f6:	81 2f       	mov	r24, r17
	switch(directionB){
     7f8:	73 d1       	rcall	.+742    	; 0xae0 <pwm_setDutyCycle>
     7fa:	cc 23       	and	r28, r28
     7fc:	19 f0       	breq	.+6      	; 0x804 <motor_individualDirSpeed+0x42>
		case FORWARD:
			gpio_out_reset(PC, 5);
     7fe:	c1 30       	cpi	r28, 0x01	; 1
     800:	41 f0       	breq	.+16     	; 0x812 <motor_individualDirSpeed+0x50>
			gpio_out_set(PC, 3);
     802:	0d c0       	rjmp	.+26     	; 0x81e <motor_individualDirSpeed+0x5c>
     804:	65 e0       	ldi	r22, 0x05	; 5
			break;
     806:	82 e0       	ldi	r24, 0x02	; 2
		case BACKWARD:
			gpio_out_set(PC, 5);
     808:	df de       	rcall	.-578    	; 0x5c8 <gpio_out_reset>
     80a:	63 e0       	ldi	r22, 0x03	; 3
     80c:	82 e0       	ldi	r24, 0x02	; 2
			gpio_out_reset(PC, 3);
     80e:	c4 de       	rcall	.-632    	; 0x598 <gpio_out_set>
     810:	06 c0       	rjmp	.+12     	; 0x81e <motor_individualDirSpeed+0x5c>
     812:	65 e0       	ldi	r22, 0x05	; 5
     814:	82 e0       	ldi	r24, 0x02	; 2
		case RIGHT:
			break;
		case NO_DIR:
			break;
	}
	pwm_setDutyCycle(speedB, TIMER2, CHANNEL_B);
     816:	c0 de       	rcall	.-640    	; 0x598 <gpio_out_set>
     818:	63 e0       	ldi	r22, 0x03	; 3
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	d5 de       	rcall	.-598    	; 0x5c8 <gpio_out_reset>
     81e:	41 e0       	ldi	r20, 0x01	; 1
     820:	62 e0       	ldi	r22, 0x02	; 2
     822:	8d 2f       	mov	r24, r29
     824:	5d d1       	rcall	.+698    	; 0xae0 <pwm_setDutyCycle>
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	08 95       	ret

0000082e <calculateTop>:
#include "gpio.h"

u8 timer1ClockSource;
u8 timer2ClockSource;

u16 calculateTop(u16 *prescaler, u32 frequency, timer timerSelection){
     82e:	cf 92       	push	r12
     830:	df 92       	push	r13
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	ec 01       	movw	r28, r24
     83c:	6a 01       	movw	r12, r20
     83e:	7b 01       	movw	r14, r22
	u32 topValue = 0;
	u16 divisor = 0;
	switch(timerSelection){
     840:	21 30       	cpi	r18, 0x01	; 1
     842:	09 f0       	breq	.+2      	; 0x846 <calculateTop+0x18>
     844:	69 c0       	rjmp	.+210    	; 0x918 <calculateTop+0xea>
		case TIMER0:
			break;
		case TIMER1:
			divisor = 1;
			*prescaler = divisor;
			topValue = S_CLOCK / divisor / frequency - 1;
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	72 e1       	ldi	r23, 0x12	; 18
     84a:	8a e7       	ldi	r24, 0x7A	; 122
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	a7 01       	movw	r20, r14
     850:	96 01       	movw	r18, r12
     852:	f4 d4       	rcall	.+2536   	; 0x123c <__udivmodsi4>
     854:	da 01       	movw	r26, r20
     856:	c9 01       	movw	r24, r18
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	a1 09       	sbc	r26, r1
     85c:	b1 09       	sbc	r27, r1
			if(topValue > 0xFFFF){
     85e:	00 97       	sbiw	r24, 0x00	; 0
     860:	21 e0       	ldi	r18, 0x01	; 1
     862:	a2 07       	cpc	r26, r18
     864:	b1 05       	cpc	r27, r1
     866:	28 f4       	brcc	.+10     	; 0x872 <calculateTop+0x44>
	switch(timerSelection){
		case TIMER0:
			break;
		case TIMER1:
			divisor = 1;
			*prescaler = divisor;
     868:	21 e0       	ldi	r18, 0x01	; 1
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	39 83       	std	Y+1, r19	; 0x01
     86e:	28 83       	st	Y, r18
     870:	56 c0       	rjmp	.+172    	; 0x91e <calculateTop+0xf0>
			topValue = S_CLOCK / divisor / frequency - 1;
			if(topValue > 0xFFFF){
				divisor = 8;
				*prescaler = divisor;
				topValue = S_CLOCK / divisor / frequency - 1;
     872:	60 e4       	ldi	r22, 0x40	; 64
     874:	72 e4       	ldi	r23, 0x42	; 66
     876:	8f e0       	ldi	r24, 0x0F	; 15
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	a7 01       	movw	r20, r14
     87c:	96 01       	movw	r18, r12
     87e:	de d4       	rcall	.+2492   	; 0x123c <__udivmodsi4>
     880:	da 01       	movw	r26, r20
     882:	c9 01       	movw	r24, r18
     884:	01 97       	sbiw	r24, 0x01	; 1
     886:	a1 09       	sbc	r26, r1
     888:	b1 09       	sbc	r27, r1
				if(topValue > 0xFFFF){
     88a:	00 97       	sbiw	r24, 0x00	; 0
     88c:	21 e0       	ldi	r18, 0x01	; 1
     88e:	a2 07       	cpc	r26, r18
     890:	b1 05       	cpc	r27, r1
     892:	28 f4       	brcc	.+10     	; 0x89e <calculateTop+0x70>
			divisor = 1;
			*prescaler = divisor;
			topValue = S_CLOCK / divisor / frequency - 1;
			if(topValue > 0xFFFF){
				divisor = 8;
				*prescaler = divisor;
     894:	28 e0       	ldi	r18, 0x08	; 8
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	39 83       	std	Y+1, r19	; 0x01
     89a:	28 83       	st	Y, r18
     89c:	40 c0       	rjmp	.+128    	; 0x91e <calculateTop+0xf0>
				topValue = S_CLOCK / divisor / frequency - 1;
				if(topValue > 0xFFFF){
					divisor = 64;
					*prescaler = divisor;
					topValue = S_CLOCK / divisor / frequency -1;
     89e:	68 e4       	ldi	r22, 0x48	; 72
     8a0:	78 ee       	ldi	r23, 0xE8	; 232
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	a7 01       	movw	r20, r14
     8a8:	96 01       	movw	r18, r12
     8aa:	c8 d4       	rcall	.+2448   	; 0x123c <__udivmodsi4>
     8ac:	da 01       	movw	r26, r20
     8ae:	c9 01       	movw	r24, r18
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	a1 09       	sbc	r26, r1
     8b4:	b1 09       	sbc	r27, r1
					if(topValue > 0xFFFF){
     8b6:	00 97       	sbiw	r24, 0x00	; 0
     8b8:	21 e0       	ldi	r18, 0x01	; 1
     8ba:	a2 07       	cpc	r26, r18
     8bc:	b1 05       	cpc	r27, r1
     8be:	28 f4       	brcc	.+10     	; 0x8ca <calculateTop+0x9c>
				divisor = 8;
				*prescaler = divisor;
				topValue = S_CLOCK / divisor / frequency - 1;
				if(topValue > 0xFFFF){
					divisor = 64;
					*prescaler = divisor;
     8c0:	20 e4       	ldi	r18, 0x40	; 64
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	39 83       	std	Y+1, r19	; 0x01
     8c6:	28 83       	st	Y, r18
     8c8:	2a c0       	rjmp	.+84     	; 0x91e <calculateTop+0xf0>
					topValue = S_CLOCK / divisor / frequency -1;
					if(topValue > 0xFFFF){
						divisor = 256;
						*prescaler = divisor;
						topValue = S_CLOCK / divisor / frequency - 1;
     8ca:	62 e1       	ldi	r22, 0x12	; 18
     8cc:	7a e7       	ldi	r23, 0x7A	; 122
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	a7 01       	movw	r20, r14
     8d4:	96 01       	movw	r18, r12
     8d6:	b2 d4       	rcall	.+2404   	; 0x123c <__udivmodsi4>
     8d8:	da 01       	movw	r26, r20
     8da:	c9 01       	movw	r24, r18
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	a1 09       	sbc	r26, r1
     8e0:	b1 09       	sbc	r27, r1
						if(topValue > 0xFFFF){
     8e2:	00 97       	sbiw	r24, 0x00	; 0
     8e4:	21 e0       	ldi	r18, 0x01	; 1
     8e6:	a2 07       	cpc	r26, r18
     8e8:	b1 05       	cpc	r27, r1
     8ea:	28 f4       	brcc	.+10     	; 0x8f6 <calculateTop+0xc8>
					divisor = 64;
					*prescaler = divisor;
					topValue = S_CLOCK / divisor / frequency -1;
					if(topValue > 0xFFFF){
						divisor = 256;
						*prescaler = divisor;
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	31 e0       	ldi	r19, 0x01	; 1
     8f0:	39 83       	std	Y+1, r19	; 0x01
     8f2:	28 83       	st	Y, r18
     8f4:	14 c0       	rjmp	.+40     	; 0x91e <calculateTop+0xf0>
						topValue = S_CLOCK / divisor / frequency - 1;
						if(topValue > 0xFFFF){
							divisor = 1024;
							*prescaler = divisor;
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	94 e0       	ldi	r25, 0x04	; 4
     8fa:	99 83       	std	Y+1, r25	; 0x01
     8fc:	88 83       	st	Y, r24
							topValue = S_CLOCK / divisor / frequency - 1;
     8fe:	64 e8       	ldi	r22, 0x84	; 132
     900:	7e e1       	ldi	r23, 0x1E	; 30
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a7 01       	movw	r20, r14
     908:	96 01       	movw	r18, r12
     90a:	98 d4       	rcall	.+2352   	; 0x123c <__udivmodsi4>
     90c:	da 01       	movw	r26, r20
     90e:	c9 01       	movw	r24, r18
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	a1 09       	sbc	r26, r1
     914:	b1 09       	sbc	r27, r1
     916:	03 c0       	rjmp	.+6      	; 0x91e <calculateTop+0xf0>

u8 timer1ClockSource;
u8 timer2ClockSource;

u16 calculateTop(u16 *prescaler, u32 frequency, timer timerSelection){
	u32 topValue = 0;
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	dc 01       	movw	r26, r24
			break;
		case TIMER3:
			break;
	}
	return (u16)topValue;
}
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	ff 90       	pop	r15
     924:	ef 90       	pop	r14
     926:	df 90       	pop	r13
     928:	cf 90       	pop	r12
     92a:	08 95       	ret

0000092c <pwm_init>:

void pwm_init(u8 dutyCycle, u32 frequency, timer timerSelection, channel channelSelection){
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	00 d0       	rcall	.+0      	; 0x936 <pwm_init+0xa>
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
     93a:	18 2f       	mov	r17, r24
	u16 prescaler = 0;
     93c:	1a 82       	std	Y+2, r1	; 0x02
     93e:	19 82       	std	Y+1, r1	; 0x01
	u32 dutyAux = 0;
	switch(timerSelection){
     940:	21 30       	cpi	r18, 0x01	; 1
     942:	21 f0       	breq	.+8      	; 0x94c <pwm_init+0x20>
     944:	22 30       	cpi	r18, 0x02	; 2
     946:	09 f4       	brne	.+2      	; 0x94a <pwm_init+0x1e>
     948:	81 c0       	rjmp	.+258    	; 0xa4c <pwm_init+0x120>
     94a:	c3 c0       	rjmp	.+390    	; 0xad2 <pwm_init+0x1a6>
		case TIMER0:
			break;
		case TIMER1:
			/* Calculate TOP register to obtain the desired frequency */
			ICR1 = calculateTop(&prescaler, frequency, timerSelection);
     94c:	21 e0       	ldi	r18, 0x01	; 1
     94e:	ce 01       	movw	r24, r28
     950:	01 96       	adiw	r24, 0x01	; 1
     952:	6d df       	rcall	.-294    	; 0x82e <calculateTop>
     954:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     958:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			/* Sets the prescaler data to be later used in pwm_start() */
			switch(prescaler){
     95c:	89 81       	ldd	r24, Y+1	; 0x01
     95e:	9a 81       	ldd	r25, Y+2	; 0x02
     960:	80 34       	cpi	r24, 0x40	; 64
     962:	91 05       	cpc	r25, r1
     964:	b9 f0       	breq	.+46     	; 0x994 <pwm_init+0x68>
     966:	30 f4       	brcc	.+12     	; 0x974 <pwm_init+0x48>
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	91 05       	cpc	r25, r1
     96c:	59 f0       	breq	.+22     	; 0x984 <pwm_init+0x58>
     96e:	08 97       	sbiw	r24, 0x08	; 8
     970:	69 f0       	breq	.+26     	; 0x98c <pwm_init+0x60>
     972:	1b c0       	rjmp	.+54     	; 0x9aa <pwm_init+0x7e>
     974:	81 15       	cp	r24, r1
     976:	21 e0       	ldi	r18, 0x01	; 1
     978:	92 07       	cpc	r25, r18
     97a:	81 f0       	breq	.+32     	; 0x99c <pwm_init+0x70>
     97c:	81 15       	cp	r24, r1
     97e:	94 40       	sbci	r25, 0x04	; 4
     980:	89 f0       	breq	.+34     	; 0x9a4 <pwm_init+0x78>
     982:	13 c0       	rjmp	.+38     	; 0x9aa <pwm_init+0x7e>
				case 1:
					timer1ClockSource = 0x01;
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timer1ClockSource>
					break;
     98a:	0f c0       	rjmp	.+30     	; 0x9aa <pwm_init+0x7e>
				case 8:
					timer1ClockSource = 0x02;
     98c:	82 e0       	ldi	r24, 0x02	; 2
     98e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timer1ClockSource>
					break;
     992:	0b c0       	rjmp	.+22     	; 0x9aa <pwm_init+0x7e>
				case 64:
					timer1ClockSource = 0x03;
     994:	83 e0       	ldi	r24, 0x03	; 3
     996:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timer1ClockSource>
					break;
     99a:	07 c0       	rjmp	.+14     	; 0x9aa <pwm_init+0x7e>
				case 256:
					timer1ClockSource = 0x04;
     99c:	84 e0       	ldi	r24, 0x04	; 4
     99e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timer1ClockSource>
					break;
     9a2:	03 c0       	rjmp	.+6      	; 0x9aa <pwm_init+0x7e>
				case 1024:
					timer1ClockSource = 0x05;
     9a4:	85 e0       	ldi	r24, 0x05	; 5
     9a6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timer1ClockSource>
					break;
			}
			/* FAST PWM mode with ICR1 as TOP */
			clearBit(&TCCR1A, WGM10);
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	80 e8       	ldi	r24, 0x80	; 128
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	47 de       	rcall	.-882    	; 0x640 <clearBit>
			setBit(&TCCR1A, WGM11);
     9b2:	61 e0       	ldi	r22, 0x01	; 1
     9b4:	80 e8       	ldi	r24, 0x80	; 128
     9b6:	90 e0       	ldi	r25, 0x00	; 0
			setBit(&TCCR1B, WGM13);
     9b8:	37 de       	rcall	.-914    	; 0x628 <setBit>
     9ba:	64 e0       	ldi	r22, 0x04	; 4
     9bc:	81 e8       	ldi	r24, 0x81	; 129
			setBit(&TCCR1B, WGM12);
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	33 de       	rcall	.-922    	; 0x628 <setBit>
     9c2:	63 e0       	ldi	r22, 0x03	; 3
     9c4:	81 e8       	ldi	r24, 0x81	; 129
     9c6:	90 e0       	ldi	r25, 0x00	; 0
			/* Clear OC1A/B on compare match and set it on BOTTOM */
			switch(channelSelection){
     9c8:	2f de       	rcall	.-930    	; 0x628 <setBit>
     9ca:	00 23       	and	r16, r16
     9cc:	19 f0       	breq	.+6      	; 0x9d4 <pwm_init+0xa8>
     9ce:	01 30       	cpi	r16, 0x01	; 1
				case CHANNEL_A:
					gpio_init(PD, 5, OUTPUT, NO_PULL);
     9d0:	f9 f0       	breq	.+62     	; 0xa10 <pwm_init+0xe4>
     9d2:	7f c0       	rjmp	.+254    	; 0xad2 <pwm_init+0x1a6>
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	41 e0       	ldi	r20, 0x01	; 1
     9d8:	65 e0       	ldi	r22, 0x05	; 5
					setBit(&TCCR1A, COM1A1);
     9da:	83 e0       	ldi	r24, 0x03	; 3
     9dc:	a0 dd       	rcall	.-1216   	; 0x51e <gpio_init>
     9de:	67 e0       	ldi	r22, 0x07	; 7
     9e0:	80 e8       	ldi	r24, 0x80	; 128
					clearBit(&TCCR1A, COM1A0);
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	21 de       	rcall	.-958    	; 0x628 <setBit>
     9e6:	66 e0       	ldi	r22, 0x06	; 6
     9e8:	80 e8       	ldi	r24, 0x80	; 128
					dutyAux = (u32) dutyCycle * ICR1 / 100;
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	29 de       	rcall	.-942    	; 0x640 <clearBit>
     9ee:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
					OCR1A = (u16) dutyAux;
     9f2:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     9f6:	21 2f       	mov	r18, r17
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	4b d4       	rcall	.+2198   	; 0x1292 <__umulhisi3>
     9fc:	24 e6       	ldi	r18, 0x64	; 100
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e0       	ldi	r20, 0x00	; 0
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	1b d4       	rcall	.+2102   	; 0x123c <__udivmodsi4>
     a06:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
					break;
				case CHANNEL_B:
					gpio_init(PD, 4, OUTPUT, NO_PULL);
     a0a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     a0e:	61 c0       	rjmp	.+194    	; 0xad2 <pwm_init+0x1a6>
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	41 e0       	ldi	r20, 0x01	; 1
					setBit(&TCCR1A, COM1B1);
     a14:	64 e0       	ldi	r22, 0x04	; 4
     a16:	83 e0       	ldi	r24, 0x03	; 3
     a18:	82 dd       	rcall	.-1276   	; 0x51e <gpio_init>
     a1a:	65 e0       	ldi	r22, 0x05	; 5
					clearBit(&TCCR1A, COM1B0);
     a1c:	80 e8       	ldi	r24, 0x80	; 128
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	03 de       	rcall	.-1018   	; 0x628 <setBit>
     a22:	64 e0       	ldi	r22, 0x04	; 4
					dutyAux = (u32) dutyCycle * ICR1 / 100;
     a24:	80 e8       	ldi	r24, 0x80	; 128
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0b de       	rcall	.-1002   	; 0x640 <clearBit>
     a2a:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
					OCR1B = (u16) dutyAux;
     a2e:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a32:	21 2f       	mov	r18, r17
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	2d d4       	rcall	.+2138   	; 0x1292 <__umulhisi3>
     a38:	24 e6       	ldi	r18, 0x64	; 100
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	fd d3       	rcall	.+2042   	; 0x123c <__udivmodsi4>
					break;
     a42:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
					break;
			}
			break;
		case TIMER2:
			TIMSK2 = 0;
			clearBit(&ASSR, AS2);
     a46:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     a4a:	43 c0       	rjmp	.+134    	; 0xad2 <pwm_init+0x1a6>
     a4c:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
			clearBit(&TCCR2B, WGM22);
     a50:	65 e0       	ldi	r22, 0x05	; 5
     a52:	86 eb       	ldi	r24, 0xB6	; 182
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	f4 dd       	rcall	.-1048   	; 0x640 <clearBit>
			setBit(&TCCR2A, WGM21);
     a58:	63 e0       	ldi	r22, 0x03	; 3
     a5a:	81 eb       	ldi	r24, 0xB1	; 177
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	f0 dd       	rcall	.-1056   	; 0x640 <clearBit>
			setBit(&TCCR2A, WGM20);
     a60:	61 e0       	ldi	r22, 0x01	; 1
     a62:	80 eb       	ldi	r24, 0xB0	; 176
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	e0 dd       	rcall	.-1088   	; 0x628 <setBit>
     a68:	60 e0       	ldi	r22, 0x00	; 0
			timer2ClockSource = 0x01;
     a6a:	80 eb       	ldi	r24, 0xB0	; 176
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	dc dd       	rcall	.-1096   	; 0x628 <setBit>
			switch(channelSelection){
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <timer2ClockSource>
     a76:	00 23       	and	r16, r16
				case CHANNEL_A:
					gpio_init(PD, 7, OUTPUT, NO_PULL);
     a78:	19 f0       	breq	.+6      	; 0xa80 <pwm_init+0x154>
     a7a:	01 30       	cpi	r16, 0x01	; 1
     a7c:	b1 f0       	breq	.+44     	; 0xaaa <pwm_init+0x17e>
     a7e:	29 c0       	rjmp	.+82     	; 0xad2 <pwm_init+0x1a6>
     a80:	20 e0       	ldi	r18, 0x00	; 0
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2A = (u8) dutyAux;
     a82:	41 e0       	ldi	r20, 0x01	; 1
     a84:	67 e0       	ldi	r22, 0x07	; 7
     a86:	83 e0       	ldi	r24, 0x03	; 3
     a88:	4a dd       	rcall	.-1388   	; 0x51e <gpio_init>
     a8a:	8f ef       	ldi	r24, 0xFF	; 255
     a8c:	18 9f       	mul	r17, r24
     a8e:	90 01       	movw	r18, r0
     a90:	11 24       	eor	r1, r1
     a92:	36 95       	lsr	r19
     a94:	27 95       	ror	r18
     a96:	36 95       	lsr	r19
     a98:	27 95       	ror	r18
     a9a:	ab e7       	ldi	r26, 0x7B	; 123
     a9c:	b4 e1       	ldi	r27, 0x14	; 20
					break;
     a9e:	f9 d3       	rcall	.+2034   	; 0x1292 <__umulhisi3>
				case CHANNEL_B:
					gpio_init(PD, 6, OUTPUT, NO_PULL);
     aa0:	96 95       	lsr	r25
     aa2:	87 95       	ror	r24
     aa4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     aa8:	14 c0       	rjmp	.+40     	; 0xad2 <pwm_init+0x1a6>
     aaa:	20 e0       	ldi	r18, 0x00	; 0
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2B = (u8) dutyAux;
     aac:	41 e0       	ldi	r20, 0x01	; 1
     aae:	66 e0       	ldi	r22, 0x06	; 6
     ab0:	83 e0       	ldi	r24, 0x03	; 3
     ab2:	35 dd       	rcall	.-1430   	; 0x51e <gpio_init>
     ab4:	8f ef       	ldi	r24, 0xFF	; 255
     ab6:	18 9f       	mul	r17, r24
     ab8:	90 01       	movw	r18, r0
     aba:	11 24       	eor	r1, r1
     abc:	36 95       	lsr	r19
     abe:	27 95       	ror	r18
     ac0:	36 95       	lsr	r19
     ac2:	27 95       	ror	r18
     ac4:	ab e7       	ldi	r26, 0x7B	; 123
     ac6:	b4 e1       	ldi	r27, 0x14	; 20
     ac8:	e4 d3       	rcall	.+1992   	; 0x1292 <__umulhisi3>
     aca:	96 95       	lsr	r25
			}
			break;
		case TIMER3:
			break;
	}
}
     acc:	87 95       	ror	r24
     ace:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	08 95       	ret

00000ae0 <pwm_setDutyCycle>:

/** Sets a new duty cycle for the selected timer and channel 
*/
void pwm_setDutyCycle(u8 dutyCycle, timer timerSelection, channel channelSelection){
	u32 dutyAux = 0;
	switch(timerSelection){
     ae0:	61 30       	cpi	r22, 0x01	; 1
     ae2:	19 f0       	breq	.+6      	; 0xaea <pwm_setDutyCycle+0xa>
     ae4:	62 30       	cpi	r22, 0x02	; 2
     ae6:	41 f1       	breq	.+80     	; 0xb38 <pwm_setDutyCycle+0x58>
     ae8:	08 95       	ret
		case TIMER0:
			break;
		case TIMER1:
			switch(channelSelection){
     aea:	44 23       	and	r20, r20
     aec:	19 f0       	breq	.+6      	; 0xaf4 <pwm_setDutyCycle+0x14>
     aee:	41 30       	cpi	r20, 0x01	; 1
     af0:	91 f0       	breq	.+36     	; 0xb16 <pwm_setDutyCycle+0x36>
     af2:	08 95       	ret
				case CHANNEL_A:
					dutyAux = (u32) dutyCycle * ICR1 / 100;
     af4:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     af8:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
					OCR1A = (u16) dutyAux;
     afc:	28 2f       	mov	r18, r24
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	c8 d3       	rcall	.+1936   	; 0x1292 <__umulhisi3>
     b02:	24 e6       	ldi	r18, 0x64	; 100
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	98 d3       	rcall	.+1840   	; 0x123c <__udivmodsi4>
     b0c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b10:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
					break;
     b14:	08 95       	ret
				case CHANNEL_B:
					dutyAux = (u32) dutyCycle * ICR1 / 100;
     b16:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     b1a:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
					OCR1B = (u16) dutyAux;
     b1e:	28 2f       	mov	r18, r24
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	b7 d3       	rcall	.+1902   	; 0x1292 <__umulhisi3>
     b24:	24 e6       	ldi	r18, 0x64	; 100
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	40 e0       	ldi	r20, 0x00	; 0
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	87 d3       	rcall	.+1806   	; 0x123c <__udivmodsi4>
     b2e:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     b32:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				case NO_CHANNEL:
					break;
			}
			break;
		case TIMER2:
			switch(channelSelection){
     b36:	08 95       	ret
     b38:	44 23       	and	r20, r20
     b3a:	19 f0       	breq	.+6      	; 0xb42 <pwm_setDutyCycle+0x62>
     b3c:	41 30       	cpi	r20, 0x01	; 1
     b3e:	89 f0       	breq	.+34     	; 0xb62 <pwm_setDutyCycle+0x82>
				case CHANNEL_A:
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2A = (u8) dutyAux;
     b40:	08 95       	ret
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	89 9f       	mul	r24, r25
     b46:	90 01       	movw	r18, r0
     b48:	11 24       	eor	r1, r1
     b4a:	36 95       	lsr	r19
     b4c:	27 95       	ror	r18
     b4e:	36 95       	lsr	r19
     b50:	27 95       	ror	r18
     b52:	ab e7       	ldi	r26, 0x7B	; 123
     b54:	b4 e1       	ldi	r27, 0x14	; 20
     b56:	9d d3       	rcall	.+1850   	; 0x1292 <__umulhisi3>
     b58:	96 95       	lsr	r25
     b5a:	87 95       	ror	r24
     b5c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
					break;
				case CHANNEL_B:
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2B = (u8) dutyAux;
     b60:	08 95       	ret
     b62:	9f ef       	ldi	r25, 0xFF	; 255
     b64:	89 9f       	mul	r24, r25
     b66:	90 01       	movw	r18, r0
     b68:	11 24       	eor	r1, r1
     b6a:	36 95       	lsr	r19
     b6c:	27 95       	ror	r18
     b6e:	36 95       	lsr	r19
     b70:	27 95       	ror	r18
     b72:	ab e7       	ldi	r26, 0x7B	; 123
     b74:	b4 e1       	ldi	r27, 0x14	; 20
     b76:	8d d3       	rcall	.+1818   	; 0x1292 <__umulhisi3>
     b78:	96 95       	lsr	r25
     b7a:	87 95       	ror	r24
     b7c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     b80:	08 95       	ret

00000b82 <pwm_start>:
}

/** Starts the selected timer
*/
void pwm_start(timer timerSelection){
	switch(timerSelection){
     b82:	81 30       	cpi	r24, 0x01	; 1
     b84:	19 f0       	breq	.+6      	; 0xb8c <pwm_start+0xa>
     b86:	82 30       	cpi	r24, 0x02	; 2
     b88:	d1 f0       	breq	.+52     	; 0xbbe <pwm_start+0x3c>
     b8a:	08 95       	ret
		case TIMER0:
			break;
		case TIMER1:
			updateBit(&TCCR1B, CS12, (timer1ClockSource >> 2) & 1);
     b8c:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <timer1ClockSource>
     b90:	42 fb       	bst	r20, 2
     b92:	44 27       	eor	r20, r20
     b94:	40 f9       	bld	r20, 0
     b96:	62 e0       	ldi	r22, 0x02	; 2
     b98:	81 e8       	ldi	r24, 0x81	; 129
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	6a dd       	rcall	.-1324   	; 0x672 <updateBit>
			updateBit(&TCCR1B, CS11, (timer1ClockSource >> 1) & 1);
     b9e:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <timer1ClockSource>
     ba2:	46 95       	lsr	r20
     ba4:	41 70       	andi	r20, 0x01	; 1
     ba6:	61 e0       	ldi	r22, 0x01	; 1
     ba8:	81 e8       	ldi	r24, 0x81	; 129
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	62 dd       	rcall	.-1340   	; 0x672 <updateBit>
			updateBit(&TCCR1B, CS10, timer1ClockSource & 1);
     bae:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <timer1ClockSource>
     bb2:	41 70       	andi	r20, 0x01	; 1
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	81 e8       	ldi	r24, 0x81	; 129
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	5b cd       	rjmp	.-1354   	; 0x672 <updateBit>
			break;
     bbc:	08 95       	ret
		case TIMER2:
			updateBit(&TCCR2B, CS22, (timer2ClockSource >> 2) & 1);
     bbe:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <timer2ClockSource>
     bc2:	42 fb       	bst	r20, 2
     bc4:	44 27       	eor	r20, r20
     bc6:	40 f9       	bld	r20, 0
     bc8:	62 e0       	ldi	r22, 0x02	; 2
     bca:	81 eb       	ldi	r24, 0xB1	; 177
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	51 dd       	rcall	.-1374   	; 0x672 <updateBit>
			updateBit(&TCCR2B, CS21, (timer2ClockSource >> 1) & 1);
     bd0:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <timer2ClockSource>
     bd4:	46 95       	lsr	r20
     bd6:	41 70       	andi	r20, 0x01	; 1
     bd8:	61 e0       	ldi	r22, 0x01	; 1
     bda:	81 eb       	ldi	r24, 0xB1	; 177
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	49 dd       	rcall	.-1390   	; 0x672 <updateBit>
			updateBit(&TCCR2B, CS20, timer2ClockSource & 1);
     be0:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <timer2ClockSource>
     be4:	41 70       	andi	r20, 0x01	; 1
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	81 eb       	ldi	r24, 0xB1	; 177
     bea:	90 e0       	ldi	r25, 0x00	; 0
			setBit(&TCCR2A, COM2A1);
     bec:	42 dd       	rcall	.-1404   	; 0x672 <updateBit>
     bee:	67 e0       	ldi	r22, 0x07	; 7
     bf0:	80 eb       	ldi	r24, 0xB0	; 176
			clearBit(&TCCR2A, COM2A0);
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	19 dd       	rcall	.-1486   	; 0x628 <setBit>
     bf6:	66 e0       	ldi	r22, 0x06	; 6
			setBit(&TCCR2A, COM2B1);
     bf8:	80 eb       	ldi	r24, 0xB0	; 176
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	21 dd       	rcall	.-1470   	; 0x640 <clearBit>
     bfe:	65 e0       	ldi	r22, 0x05	; 5
     c00:	80 eb       	ldi	r24, 0xB0	; 176
			clearBit(&TCCR2A, COM2B0);
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	11 dd       	rcall	.-1502   	; 0x628 <setBit>
     c06:	64 e0       	ldi	r22, 0x04	; 4
     c08:	80 eb       	ldi	r24, 0xB0	; 176
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	19 cd       	rjmp	.-1486   	; 0x640 <clearBit>
     c0e:	08 95       	ret

00000c10 <pwm_stop>:
	}
}
/** Stops the selected timer
*/
void pwm_stop(timer timerSelection){
	switch(timerSelection){
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	19 f0       	breq	.+6      	; 0xc1a <pwm_stop+0xa>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	71 f0       	breq	.+28     	; 0xc34 <pwm_stop+0x24>
     c18:	08 95       	ret
		case TIMER0:
			break;
		case TIMER1:
			clearBit(&TCCR1B, CS12);
     c1a:	62 e0       	ldi	r22, 0x02	; 2
     c1c:	81 e8       	ldi	r24, 0x81	; 129
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0f dd       	rcall	.-1506   	; 0x640 <clearBit>
			clearBit(&TCCR1B, CS11);
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	81 e8       	ldi	r24, 0x81	; 129
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0b dd       	rcall	.-1514   	; 0x640 <clearBit>
			clearBit(&TCCR1B, CS10);
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	81 e8       	ldi	r24, 0x81	; 129
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	07 cd       	rjmp	.-1522   	; 0x640 <clearBit>
			break;
		case TIMER2:
			clearBit(&TCCR2B, CS22);
     c32:	08 95       	ret
     c34:	62 e0       	ldi	r22, 0x02	; 2
     c36:	81 eb       	ldi	r24, 0xB1	; 177
			clearBit(&TCCR2B, CS21);
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 dd       	rcall	.-1532   	; 0x640 <clearBit>
     c3c:	61 e0       	ldi	r22, 0x01	; 1
     c3e:	81 eb       	ldi	r24, 0xB1	; 177
			clearBit(&TCCR2B, CS20);
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	fe dc       	rcall	.-1540   	; 0x640 <clearBit>
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	81 eb       	ldi	r24, 0xB1	; 177
     c48:	90 e0       	ldi	r25, 0x00	; 0
			TCCR2A &= 0x0F;
     c4a:	fa dc       	rcall	.-1548   	; 0x640 <clearBit>
     c4c:	e0 eb       	ldi	r30, 0xB0	; 176
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
			gpio_out_reset(PD, 7);
     c50:	80 81       	ld	r24, Z
     c52:	8f 70       	andi	r24, 0x0F	; 15
     c54:	80 83       	st	Z, r24
     c56:	67 e0       	ldi	r22, 0x07	; 7
			gpio_out_reset(PD, 6);
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	b6 dc       	rcall	.-1684   	; 0x5c8 <gpio_out_reset>
     c5c:	66 e0       	ldi	r22, 0x06	; 6
     c5e:	83 e0       	ldi	r24, 0x03	; 3
     c60:	b3 cc       	rjmp	.-1690   	; 0x5c8 <gpio_out_reset>
     c62:	08 95       	ret

00000c64 <__vector_20>:
extern u8 servoEnable;
extern u8 dcEnable;
extern u8 dcSpeedLeft;
extern u8 dcSpeedRight;

ISR(USART0_RX_vect){
     c64:	1f 92       	push	r1
     c66:	0f 92       	push	r0
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	0f 92       	push	r0
     c6c:	11 24       	eor	r1, r1
     c6e:	0b b6       	in	r0, 0x3b	; 59
     c70:	0f 92       	push	r0
     c72:	2f 93       	push	r18
     c74:	3f 93       	push	r19
     c76:	4f 93       	push	r20
     c78:	5f 93       	push	r21
     c7a:	6f 93       	push	r22
     c7c:	7f 93       	push	r23
     c7e:	8f 93       	push	r24
     c80:	9f 93       	push	r25
     c82:	af 93       	push	r26
     c84:	bf 93       	push	r27
     c86:	ef 93       	push	r30
     c88:	ff 93       	push	r31
	aux = UDR0;
     c8a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     c8e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <aux>
	switch(aux){
     c92:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <aux>
     c96:	8e 2f       	mov	r24, r30
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	80 33       	cpi	r24, 0x30	; 48
     c9c:	91 05       	cpc	r25, r1
     c9e:	08 f0       	brcs	.+2      	; 0xca2 <__vector_20+0x3e>
     ca0:	29 c1       	rjmp	.+594    	; 0xef4 <__vector_20+0x290>
     ca2:	fc 01       	movw	r30, r24
     ca4:	ea 5b       	subi	r30, 0xBA	; 186
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	eb c2       	rjmp	.+1494   	; 0x1280 <__tablejump2__>
		case 0x00:
			systemEnable = 0;
     caa:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <systemEnable>
			servoEnable = 0;
     cae:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <servoEnable>
			dcEnable = 0;
     cb2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dcEnable>
			dcSpeedLeft = 0;
     cb6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <dcSpeedLeft>
			dcSpeedRight = 0;
			motor_stop();
			encoder_reset();
     cba:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			encoder_stop();
			gpio_out_reset(PA, 2);
     cbe:	37 dd       	rcall	.-1426   	; 0x72e <motor_stop>
			pwm_stop(TIMER1);
     cc0:	14 dc       	rcall	.-2008   	; 0x4ea <encoder_reset>
     cc2:	0a dc       	rcall	.-2028   	; 0x4d8 <encoder_stop>
			gpio_out_set(PB, 0);
     cc4:	62 e0       	ldi	r22, 0x02	; 2
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	7f dc       	rcall	.-1794   	; 0x5c8 <gpio_out_reset>
			gpio_out_reset(PB, 1);
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	a1 df       	rcall	.-190    	; 0xc10 <pwm_stop>
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	81 e0       	ldi	r24, 0x01	; 1
			gpio_out_reset(PB, 2);
     cd2:	62 dc       	rcall	.-1852   	; 0x598 <gpio_out_set>
			break;
		case 0x01:
			systemEnable = 1;
     cd4:	61 e0       	ldi	r22, 0x01	; 1
     cd6:	81 e0       	ldi	r24, 0x01	; 1
			dcEnable = 1;
     cd8:	77 dc       	rcall	.-1810   	; 0x5c8 <gpio_out_reset>
			motor_init();
     cda:	62 e0       	ldi	r22, 0x02	; 2
			encoder_init();
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	74 dc       	rcall	.-1816   	; 0x5c8 <gpio_out_reset>
			pwm_start(TIMER1);
     ce0:	09 c1       	rjmp	.+530    	; 0xef4 <__vector_20+0x290>
     ce2:	81 e0       	ldi	r24, 0x01	; 1
			gpio_out_set(PA, 2);
     ce4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <systemEnable>
			gpio_out_reset(PB, 0);
     ce8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dcEnable>
     cec:	e2 dc       	rcall	.-1596   	; 0x6b2 <motor_init>
			if(systemMode == 0){
     cee:	bd db       	rcall	.-2182   	; 0x46a <encoder_init>
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	47 df       	rcall	.-370    	; 0xb82 <pwm_start>
				gpio_out_set(PB, 1);
     cf4:	62 e0       	ldi	r22, 0x02	; 2
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	4f dc       	rcall	.-1890   	; 0x598 <gpio_out_set>
     cfa:	60 e0       	ldi	r22, 0x00	; 0
				gpio_out_reset(PB, 2);
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	64 dc       	rcall	.-1848   	; 0x5c8 <gpio_out_reset>
     d00:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <systemMode>
     d04:	81 11       	cpse	r24, r1
			}
			else{
				gpio_out_reset(PB, 1);
     d06:	07 c0       	rjmp	.+14     	; 0xd16 <__vector_20+0xb2>
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	81 e0       	ldi	r24, 0x01	; 1
				gpio_out_set(PB, 2);
     d0c:	45 dc       	rcall	.-1910   	; 0x598 <gpio_out_set>
     d0e:	62 e0       	ldi	r22, 0x02	; 2
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	5a dc       	rcall	.-1868   	; 0x5c8 <gpio_out_reset>
			}
			break;
		case 0x0A:
			systemMode = 0;
     d14:	ef c0       	rjmp	.+478    	; 0xef4 <__vector_20+0x290>
     d16:	61 e0       	ldi	r22, 0x01	; 1
			break;
     d18:	81 e0       	ldi	r24, 0x01	; 1
		case 0x0B:
			systemMode = 1;
     d1a:	56 dc       	rcall	.-1876   	; 0x5c8 <gpio_out_reset>
     d1c:	62 e0       	ldi	r22, 0x02	; 2
     d1e:	81 e0       	ldi	r24, 0x01	; 1
			break;
		case 0x10:
			servoEnable = 0;
     d20:	3b dc       	rcall	.-1930   	; 0x598 <gpio_out_set>
			pwm_stop(TIMER1);
     d22:	e8 c0       	rjmp	.+464    	; 0xef4 <__vector_20+0x290>
     d24:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <systemMode>
			break;
     d28:	e5 c0       	rjmp	.+458    	; 0xef4 <__vector_20+0x290>
		case 0x11:
			servoEnable = 1;
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <systemMode>
			pwm_start(TIMER1);
     d30:	e1 c0       	rjmp	.+450    	; 0xef4 <__vector_20+0x290>
			break;
     d32:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <servoEnable>
		case 0x1A:
			if(servoEnable){
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	6b df       	rcall	.-298    	; 0xc10 <pwm_stop>
     d3a:	dc c0       	rjmp	.+440    	; 0xef4 <__vector_20+0x290>
     d3c:	81 e0       	ldi	r24, 0x01	; 1
				pwm_setDutyCycle(3, TIMER1, CHANNEL_B);
     d3e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <servoEnable>
     d42:	1f df       	rcall	.-450    	; 0xb82 <pwm_start>
     d44:	d7 c0       	rjmp	.+430    	; 0xef4 <__vector_20+0x290>
     d46:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servoEnable>
			}
			break;
		case 0x1B:
			if(servoEnable){
     d4a:	88 23       	and	r24, r24
     d4c:	09 f4       	brne	.+2      	; 0xd50 <__vector_20+0xec>
     d4e:	d2 c0       	rjmp	.+420    	; 0xef4 <__vector_20+0x290>
				pwm_setDutyCycle(7, TIMER1, CHANNEL_B);
     d50:	41 e0       	ldi	r20, 0x01	; 1
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	c4 de       	rcall	.-632    	; 0xae0 <pwm_setDutyCycle>
     d58:	cd c0       	rjmp	.+410    	; 0xef4 <__vector_20+0x290>
			}
			break;
		case 0x1C:
			if(servoEnable){
     d5a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servoEnable>
     d5e:	88 23       	and	r24, r24
     d60:	09 f4       	brne	.+2      	; 0xd64 <__vector_20+0x100>
     d62:	c8 c0       	rjmp	.+400    	; 0xef4 <__vector_20+0x290>
				pwm_setDutyCycle(12, TIMER1, CHANNEL_B);
     d64:	41 e0       	ldi	r20, 0x01	; 1
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	87 e0       	ldi	r24, 0x07	; 7
     d6a:	ba de       	rcall	.-652    	; 0xae0 <pwm_setDutyCycle>
     d6c:	c3 c0       	rjmp	.+390    	; 0xef4 <__vector_20+0x290>
     d6e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servoEnable>
			}
			break;
		case 0x20:
			dcEnable = 0;
     d72:	88 23       	and	r24, r24
			motor_stop();
     d74:	09 f4       	brne	.+2      	; 0xd78 <__vector_20+0x114>
     d76:	be c0       	rjmp	.+380    	; 0xef4 <__vector_20+0x290>
			break;
     d78:	41 e0       	ldi	r20, 0x01	; 1
		case 0x21:
			dcEnable = 1;
     d7a:	61 e0       	ldi	r22, 0x01	; 1
     d7c:	8c e0       	ldi	r24, 0x0C	; 12
     d7e:	b0 de       	rcall	.-672    	; 0xae0 <pwm_setDutyCycle>
			motor_start();
     d80:	b9 c0       	rjmp	.+370    	; 0xef4 <__vector_20+0x290>
     d82:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dcEnable>
			dcSpeedLeft = 40;
     d86:	d3 dc       	rcall	.-1626   	; 0x72e <motor_stop>
     d88:	b5 c0       	rjmp	.+362    	; 0xef4 <__vector_20+0x290>
			dcSpeedRight = 40;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dcEnable>
			break;
		case 0x22:
			if(dcEnable){
     d90:	b7 dc       	rcall	.-1682   	; 0x700 <motor_start>
     d92:	88 e2       	ldi	r24, 0x28	; 40
     d94:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     d98:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				dcSpeedLeft = (dcSpeedLeft + dcSpeedRight) / 2 - 10;
     d9c:	ab c0       	rjmp	.+342    	; 0xef4 <__vector_20+0x290>
     d9e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     da2:	88 23       	and	r24, r24
     da4:	09 f4       	brne	.+2      	; 0xda8 <__vector_20+0x144>
     da6:	a6 c0       	rjmp	.+332    	; 0xef4 <__vector_20+0x290>
     da8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <dcSpeedLeft>
     db2:	ac 01       	movw	r20, r24
     db4:	42 0f       	add	r20, r18
				dcSpeedRight = (dcSpeedLeft + dcSpeedRight) / 2 + 10;
     db6:	51 1d       	adc	r21, r1
     db8:	9a 01       	movw	r18, r20
     dba:	35 95       	asr	r19
     dbc:	27 95       	ror	r18
     dbe:	2a 50       	subi	r18, 0x0A	; 10
     dc0:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <dcSpeedLeft>
				if(dcSpeedLeft <= 40){
     dc4:	82 0f       	add	r24, r18
					dcSpeedLeft = 40;
     dc6:	91 1d       	adc	r25, r1
     dc8:	95 95       	asr	r25
     dca:	87 95       	ror	r24
					dcSpeedRight = 50;
     dcc:	86 5f       	subi	r24, 0xF6	; 246
     dce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     dd2:	29 32       	cpi	r18, 0x29	; 41
				}
				if(dcSpeedRight >= 100){
     dd4:	38 f4       	brcc	.+14     	; 0xde4 <__vector_20+0x180>
     dd6:	88 e2       	ldi	r24, 0x28	; 40
					dcSpeedRight = 100;
     dd8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     ddc:	82 e3       	ldi	r24, 0x32	; 50
					dcSpeedLeft = 90;
     dde:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     de2:	08 c0       	rjmp	.+16     	; 0xdf4 <__vector_20+0x190>
				}
				motor_individualDirSpeed(NO_DIR, dcSpeedLeft, NO_DIR, dcSpeedRight);
     de4:	84 36       	cpi	r24, 0x64	; 100
     de6:	30 f0       	brcs	.+12     	; 0xdf4 <__vector_20+0x190>
     de8:	84 e6       	ldi	r24, 0x64	; 100
     dea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     dee:	8a e5       	ldi	r24, 0x5A	; 90
     df0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     df4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
			}
			break;
		case 0x23:
			if(dcEnable){
     df8:	44 e0       	ldi	r20, 0x04	; 4
     dfa:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <dcSpeedLeft>
     dfe:	84 e0       	ldi	r24, 0x04	; 4
				dcSpeedLeft = (dcSpeedLeft + dcSpeedRight) / 2 + 10;
     e00:	e0 dc       	rcall	.-1600   	; 0x7c2 <motor_individualDirSpeed>
     e02:	78 c0       	rjmp	.+240    	; 0xef4 <__vector_20+0x290>
     e04:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     e08:	88 23       	and	r24, r24
     e0a:	09 f4       	brne	.+2      	; 0xe0e <__vector_20+0x1aa>
     e0c:	73 c0       	rjmp	.+230    	; 0xef4 <__vector_20+0x290>
     e0e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <dcSpeedLeft>
     e18:	ac 01       	movw	r20, r24
     e1a:	42 0f       	add	r20, r18
				dcSpeedRight = (dcSpeedLeft + dcSpeedRight) / 2 - 10;
     e1c:	51 1d       	adc	r21, r1
     e1e:	9a 01       	movw	r18, r20
     e20:	35 95       	asr	r19
     e22:	27 95       	ror	r18
     e24:	26 5f       	subi	r18, 0xF6	; 246
     e26:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <dcSpeedLeft>
				if(dcSpeedRight <= 40){
     e2a:	82 0f       	add	r24, r18
					dcSpeedRight = 40;
     e2c:	91 1d       	adc	r25, r1
     e2e:	95 95       	asr	r25
     e30:	87 95       	ror	r24
					dcSpeedLeft = 50;
     e32:	8a 50       	subi	r24, 0x0A	; 10
     e34:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     e38:	89 32       	cpi	r24, 0x29	; 41
				}
				if(dcSpeedLeft >= 100){
     e3a:	38 f4       	brcc	.+14     	; 0xe4a <__vector_20+0x1e6>
     e3c:	88 e2       	ldi	r24, 0x28	; 40
					dcSpeedLeft = 100;
     e3e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     e42:	82 e3       	ldi	r24, 0x32	; 50
					dcSpeedRight = 90;
     e44:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     e48:	08 c0       	rjmp	.+16     	; 0xe5a <__vector_20+0x1f6>
				}
				motor_individualDirSpeed(NO_DIR, dcSpeedLeft, NO_DIR, dcSpeedRight);
     e4a:	24 36       	cpi	r18, 0x64	; 100
     e4c:	30 f0       	brcs	.+12     	; 0xe5a <__vector_20+0x1f6>
     e4e:	84 e6       	ldi	r24, 0x64	; 100
     e50:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     e54:	8a e5       	ldi	r24, 0x5A	; 90
     e56:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			break;
		case 0x2A:
			if(dcEnable){
     e5a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     e5e:	44 e0       	ldi	r20, 0x04	; 4
     e60:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <dcSpeedLeft>
				if((dcSpeedLeft < 100) && (dcSpeedRight < 100)){
     e64:	84 e0       	ldi	r24, 0x04	; 4
     e66:	ad dc       	rcall	.-1702   	; 0x7c2 <motor_individualDirSpeed>
     e68:	45 c0       	rjmp	.+138    	; 0xef4 <__vector_20+0x290>
     e6a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     e6e:	88 23       	and	r24, r24
     e70:	09 f4       	brne	.+2      	; 0xe74 <__vector_20+0x210>
     e72:	40 c0       	rjmp	.+128    	; 0xef4 <__vector_20+0x290>
					dcSpeedLeft += 10;
     e74:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dcSpeedLeft>
     e78:	84 36       	cpi	r24, 0x64	; 100
					dcSpeedRight += 10;
     e7a:	08 f0       	brcs	.+2      	; 0xe7e <__vector_20+0x21a>
     e7c:	3b c0       	rjmp	.+118    	; 0xef4 <__vector_20+0x290>
					motor_speed(dcSpeedLeft);
     e7e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
				}
			}
			break;
		case 0x2B:
			if(dcEnable){
     e82:	94 36       	cpi	r25, 0x64	; 100
     e84:	b8 f5       	brcc	.+110    	; 0xef4 <__vector_20+0x290>
     e86:	86 5f       	subi	r24, 0xF6	; 246
				if((dcSpeedLeft > 40) && (dcSpeedRight > 40)){
     e88:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     e8c:	96 5f       	subi	r25, 0xF6	; 246
     e8e:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
     e92:	8c dc       	rcall	.-1768   	; 0x7ac <motor_speed>
					dcSpeedLeft -= 10;
     e94:	2f c0       	rjmp	.+94     	; 0xef4 <__vector_20+0x290>
     e96:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
					dcSpeedRight -= 10;
     e9a:	88 23       	and	r24, r24
     e9c:	59 f1       	breq	.+86     	; 0xef4 <__vector_20+0x290>
					motor_speed(dcSpeedLeft);
     e9e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dcSpeedLeft>
				}
			}
			break;
		case 0x2C:
			if(dcEnable){
     ea2:	89 32       	cpi	r24, 0x29	; 41
     ea4:	38 f1       	brcs	.+78     	; 0xef4 <__vector_20+0x290>
     ea6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
				motor_direction(FORWARD);
     eaa:	99 32       	cpi	r25, 0x29	; 41
     eac:	18 f1       	brcs	.+70     	; 0xef4 <__vector_20+0x290>
     eae:	8a 50       	subi	r24, 0x0A	; 10
     eb0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
			}
			break;
		case 0x2D:
			if(dcEnable){
     eb4:	9a 50       	subi	r25, 0x0A	; 10
     eb6:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
				motor_direction(BACKWARD);
     eba:	78 dc       	rcall	.-1808   	; 0x7ac <motor_speed>
     ebc:	1b c0       	rjmp	.+54     	; 0xef4 <__vector_20+0x290>
     ebe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
			}
			break;
		case 0x2E:
			if(dcEnable){
     ec2:	88 23       	and	r24, r24
     ec4:	b9 f0       	breq	.+46     	; 0xef4 <__vector_20+0x290>
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	35 dc       	rcall	.-1942   	; 0x734 <motor_direction>
				motor_direction(LEFT);
     eca:	14 c0       	rjmp	.+40     	; 0xef4 <__vector_20+0x290>
     ecc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     ed0:	88 23       	and	r24, r24
			}
			break;
		case 0x2F:
			if(dcEnable){
     ed2:	81 f0       	breq	.+32     	; 0xef4 <__vector_20+0x290>
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	2e dc       	rcall	.-1956   	; 0x734 <motor_direction>
     ed8:	0d c0       	rjmp	.+26     	; 0xef4 <__vector_20+0x290>
				motor_direction(RIGHT);
     eda:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     ede:	88 23       	and	r24, r24
			}
			break;
	}
}
     ee0:	49 f0       	breq	.+18     	; 0xef4 <__vector_20+0x290>
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	27 dc       	rcall	.-1970   	; 0x734 <motor_direction>
     ee6:	06 c0       	rjmp	.+12     	; 0xef4 <__vector_20+0x290>
     ee8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     eec:	88 23       	and	r24, r24
     eee:	11 f0       	breq	.+4      	; 0xef4 <__vector_20+0x290>
     ef0:	83 e0       	ldi	r24, 0x03	; 3
     ef2:	20 dc       	rcall	.-1984   	; 0x734 <motor_direction>
     ef4:	ff 91       	pop	r31
     ef6:	ef 91       	pop	r30
     ef8:	bf 91       	pop	r27
     efa:	af 91       	pop	r26
     efc:	9f 91       	pop	r25
     efe:	8f 91       	pop	r24
     f00:	7f 91       	pop	r23
     f02:	6f 91       	pop	r22
     f04:	5f 91       	pop	r21
     f06:	4f 91       	pop	r20
     f08:	3f 91       	pop	r19
     f0a:	2f 91       	pop	r18
     f0c:	0f 90       	pop	r0
     f0e:	0b be       	out	0x3b, r0	; 59
     f10:	0f 90       	pop	r0
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	0f 90       	pop	r0
     f16:	1f 90       	pop	r1
     f18:	18 95       	reti

00000f1a <uart_init>:

void uart_init(syncMode uartMode, parity uartParity, stopBits uartStop, baudRate uartBaudRate){
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	08 2f       	mov	r16, r24
     f24:	16 2f       	mov	r17, r22
     f26:	d4 2f       	mov	r29, r20
     f28:	c2 2f       	mov	r28, r18
	/** Double speed disabled */
	clearBit(&UCSR0A, U2X0);
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	80 ec       	ldi	r24, 0xC0	; 192
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	87 db       	rcall	.-2290   	; 0x640 <clearBit>
	/** 8 bit data frame */
	clearBit(&UCSR0B, UCSZ02);
     f32:	62 e0       	ldi	r22, 0x02	; 2
     f34:	81 ec       	ldi	r24, 0xC1	; 193
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	83 db       	rcall	.-2298   	; 0x640 <clearBit>
	setBit(&UCSR0C, UCSZ01);
     f3a:	62 e0       	ldi	r22, 0x02	; 2
     f3c:	82 ec       	ldi	r24, 0xC2	; 194
     f3e:	90 e0       	ldi	r25, 0x00	; 0
	setBit(&UCSR0C, UCSZ00);
     f40:	73 db       	rcall	.-2330   	; 0x628 <setBit>
     f42:	61 e0       	ldi	r22, 0x01	; 1
     f44:	82 ec       	ldi	r24, 0xC2	; 194
	/** Asynchronous or synchronous mode */
	clearBit(&UCSR0C, UMSEL01);
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	6f db       	rcall	.-2338   	; 0x628 <setBit>
     f4a:	67 e0       	ldi	r22, 0x07	; 7
     f4c:	82 ec       	ldi	r24, 0xC2	; 194
	updateBit(&UCSR0C, UMSEL00, uartMode);
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	77 db       	rcall	.-2322   	; 0x640 <clearBit>
     f52:	40 2f       	mov	r20, r16
     f54:	66 e0       	ldi	r22, 0x06	; 6
     f56:	82 ec       	ldi	r24, 0xC2	; 194
	/** Odd or even parity mode */
	setBit(&UCSR0C, UPM01);
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	8b db       	rcall	.-2282   	; 0x672 <updateBit>
     f5c:	65 e0       	ldi	r22, 0x05	; 5
     f5e:	82 ec       	ldi	r24, 0xC2	; 194
	updateBit(&UCSR0C, UPM00, uartParity);
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	62 db       	rcall	.-2364   	; 0x628 <setBit>
     f64:	41 2f       	mov	r20, r17
     f66:	64 e0       	ldi	r22, 0x04	; 4
     f68:	82 ec       	ldi	r24, 0xC2	; 194
	/** Number of stop bits */
	updateBit(&UCSR0C, USBS0, uartStop);
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	82 db       	rcall	.-2300   	; 0x672 <updateBit>
     f6e:	4d 2f       	mov	r20, r29
     f70:	63 e0       	ldi	r22, 0x03	; 3
     f72:	82 ec       	ldi	r24, 0xC2	; 194
	/** Baud rate */
	UBRR0 = uartBaudRate;
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	7d db       	rcall	.-2310   	; 0x672 <updateBit>
     f78:	2c 2f       	mov	r18, r28
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	/** Interrupt mode on Receive enabled*/
	setBit(&UCSR0B, RXCIE0);
     f80:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     f84:	67 e0       	ldi	r22, 0x07	; 7
     f86:	81 ec       	ldi	r24, 0xC1	; 193
}
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	4e db       	rcall	.-2404   	; 0x628 <setBit>
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	08 95       	ret

00000f96 <uart_start>:

void uart_start(bool uartTx, bool uartRx){
     f96:	cf 93       	push	r28
     f98:	c8 2f       	mov	r28, r24
     f9a:	46 2f       	mov	r20, r22
	updateBit(&UCSR0B, RXEN0, uartRx);
     f9c:	64 e0       	ldi	r22, 0x04	; 4
     f9e:	81 ec       	ldi	r24, 0xC1	; 193
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	67 db       	rcall	.-2354   	; 0x672 <updateBit>
	updateBit(&UCSR0B, TXEN0, uartTx);
     fa4:	4c 2f       	mov	r20, r28
     fa6:	63 e0       	ldi	r22, 0x03	; 3
     fa8:	81 ec       	ldi	r24, 0xC1	; 193
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	62 db       	rcall	.-2364   	; 0x672 <updateBit>
	
}
     fae:	cf 91       	pop	r28
     fb0:	08 95       	ret

00000fb2 <__cmpsf2>:
     fb2:	6c d0       	rcall	.+216    	; 0x108c <__fp_cmp>
     fb4:	08 f4       	brcc	.+2      	; 0xfb8 <__cmpsf2+0x6>
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	08 95       	ret

00000fba <__fixunssfsi>:
     fba:	bc d0       	rcall	.+376    	; 0x1134 <__fp_splitA>
     fbc:	88 f0       	brcs	.+34     	; 0xfe0 <__fixunssfsi+0x26>
     fbe:	9f 57       	subi	r25, 0x7F	; 127
     fc0:	90 f0       	brcs	.+36     	; 0xfe6 <__fixunssfsi+0x2c>
     fc2:	b9 2f       	mov	r27, r25
     fc4:	99 27       	eor	r25, r25
     fc6:	b7 51       	subi	r27, 0x17	; 23
     fc8:	a0 f0       	brcs	.+40     	; 0xff2 <__fixunssfsi+0x38>
     fca:	d1 f0       	breq	.+52     	; 0x1000 <__fixunssfsi+0x46>
     fcc:	66 0f       	add	r22, r22
     fce:	77 1f       	adc	r23, r23
     fd0:	88 1f       	adc	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	1a f0       	brmi	.+6      	; 0xfdc <__fixunssfsi+0x22>
     fd6:	ba 95       	dec	r27
     fd8:	c9 f7       	brne	.-14     	; 0xfcc <__fixunssfsi+0x12>
     fda:	12 c0       	rjmp	.+36     	; 0x1000 <__fixunssfsi+0x46>
     fdc:	b1 30       	cpi	r27, 0x01	; 1
     fde:	81 f0       	breq	.+32     	; 0x1000 <__fixunssfsi+0x46>
     fe0:	c3 d0       	rcall	.+390    	; 0x1168 <__fp_zero>
     fe2:	b1 e0       	ldi	r27, 0x01	; 1
     fe4:	08 95       	ret
     fe6:	c0 c0       	rjmp	.+384    	; 0x1168 <__fp_zero>
     fe8:	67 2f       	mov	r22, r23
     fea:	78 2f       	mov	r23, r24
     fec:	88 27       	eor	r24, r24
     fee:	b8 5f       	subi	r27, 0xF8	; 248
     ff0:	39 f0       	breq	.+14     	; 0x1000 <__fixunssfsi+0x46>
     ff2:	b9 3f       	cpi	r27, 0xF9	; 249
     ff4:	cc f3       	brlt	.-14     	; 0xfe8 <__fixunssfsi+0x2e>
     ff6:	86 95       	lsr	r24
     ff8:	77 95       	ror	r23
     ffa:	67 95       	ror	r22
     ffc:	b3 95       	inc	r27
     ffe:	d9 f7       	brne	.-10     	; 0xff6 <__fixunssfsi+0x3c>
    1000:	3e f4       	brtc	.+14     	; 0x1010 <__fixunssfsi+0x56>
    1002:	90 95       	com	r25
    1004:	80 95       	com	r24
    1006:	70 95       	com	r23
    1008:	61 95       	neg	r22
    100a:	7f 4f       	sbci	r23, 0xFF	; 255
    100c:	8f 4f       	sbci	r24, 0xFF	; 255
    100e:	9f 4f       	sbci	r25, 0xFF	; 255
    1010:	08 95       	ret

00001012 <__floatunsisf>:
    1012:	e8 94       	clt
    1014:	09 c0       	rjmp	.+18     	; 0x1028 <__floatsisf+0x12>

00001016 <__floatsisf>:
    1016:	97 fb       	bst	r25, 7
    1018:	3e f4       	brtc	.+14     	; 0x1028 <__floatsisf+0x12>
    101a:	90 95       	com	r25
    101c:	80 95       	com	r24
    101e:	70 95       	com	r23
    1020:	61 95       	neg	r22
    1022:	7f 4f       	sbci	r23, 0xFF	; 255
    1024:	8f 4f       	sbci	r24, 0xFF	; 255
    1026:	9f 4f       	sbci	r25, 0xFF	; 255
    1028:	99 23       	and	r25, r25
    102a:	a9 f0       	breq	.+42     	; 0x1056 <__floatsisf+0x40>
    102c:	f9 2f       	mov	r31, r25
    102e:	96 e9       	ldi	r25, 0x96	; 150
    1030:	bb 27       	eor	r27, r27
    1032:	93 95       	inc	r25
    1034:	f6 95       	lsr	r31
    1036:	87 95       	ror	r24
    1038:	77 95       	ror	r23
    103a:	67 95       	ror	r22
    103c:	b7 95       	ror	r27
    103e:	f1 11       	cpse	r31, r1
    1040:	f8 cf       	rjmp	.-16     	; 0x1032 <__floatsisf+0x1c>
    1042:	fa f4       	brpl	.+62     	; 0x1082 <__floatsisf+0x6c>
    1044:	bb 0f       	add	r27, r27
    1046:	11 f4       	brne	.+4      	; 0x104c <__floatsisf+0x36>
    1048:	60 ff       	sbrs	r22, 0
    104a:	1b c0       	rjmp	.+54     	; 0x1082 <__floatsisf+0x6c>
    104c:	6f 5f       	subi	r22, 0xFF	; 255
    104e:	7f 4f       	sbci	r23, 0xFF	; 255
    1050:	8f 4f       	sbci	r24, 0xFF	; 255
    1052:	9f 4f       	sbci	r25, 0xFF	; 255
    1054:	16 c0       	rjmp	.+44     	; 0x1082 <__floatsisf+0x6c>
    1056:	88 23       	and	r24, r24
    1058:	11 f0       	breq	.+4      	; 0x105e <__floatsisf+0x48>
    105a:	96 e9       	ldi	r25, 0x96	; 150
    105c:	11 c0       	rjmp	.+34     	; 0x1080 <__floatsisf+0x6a>
    105e:	77 23       	and	r23, r23
    1060:	21 f0       	breq	.+8      	; 0x106a <__floatsisf+0x54>
    1062:	9e e8       	ldi	r25, 0x8E	; 142
    1064:	87 2f       	mov	r24, r23
    1066:	76 2f       	mov	r23, r22
    1068:	05 c0       	rjmp	.+10     	; 0x1074 <__floatsisf+0x5e>
    106a:	66 23       	and	r22, r22
    106c:	71 f0       	breq	.+28     	; 0x108a <__floatsisf+0x74>
    106e:	96 e8       	ldi	r25, 0x86	; 134
    1070:	86 2f       	mov	r24, r22
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	2a f0       	brmi	.+10     	; 0x1082 <__floatsisf+0x6c>
    1078:	9a 95       	dec	r25
    107a:	66 0f       	add	r22, r22
    107c:	77 1f       	adc	r23, r23
    107e:	88 1f       	adc	r24, r24
    1080:	da f7       	brpl	.-10     	; 0x1078 <__floatsisf+0x62>
    1082:	88 0f       	add	r24, r24
    1084:	96 95       	lsr	r25
    1086:	87 95       	ror	r24
    1088:	97 f9       	bld	r25, 7
    108a:	08 95       	ret

0000108c <__fp_cmp>:
    108c:	99 0f       	add	r25, r25
    108e:	00 08       	sbc	r0, r0
    1090:	55 0f       	add	r21, r21
    1092:	aa 0b       	sbc	r26, r26
    1094:	e0 e8       	ldi	r30, 0x80	; 128
    1096:	fe ef       	ldi	r31, 0xFE	; 254
    1098:	16 16       	cp	r1, r22
    109a:	17 06       	cpc	r1, r23
    109c:	e8 07       	cpc	r30, r24
    109e:	f9 07       	cpc	r31, r25
    10a0:	c0 f0       	brcs	.+48     	; 0x10d2 <__fp_cmp+0x46>
    10a2:	12 16       	cp	r1, r18
    10a4:	13 06       	cpc	r1, r19
    10a6:	e4 07       	cpc	r30, r20
    10a8:	f5 07       	cpc	r31, r21
    10aa:	98 f0       	brcs	.+38     	; 0x10d2 <__fp_cmp+0x46>
    10ac:	62 1b       	sub	r22, r18
    10ae:	73 0b       	sbc	r23, r19
    10b0:	84 0b       	sbc	r24, r20
    10b2:	95 0b       	sbc	r25, r21
    10b4:	39 f4       	brne	.+14     	; 0x10c4 <__fp_cmp+0x38>
    10b6:	0a 26       	eor	r0, r26
    10b8:	61 f0       	breq	.+24     	; 0x10d2 <__fp_cmp+0x46>
    10ba:	23 2b       	or	r18, r19
    10bc:	24 2b       	or	r18, r20
    10be:	25 2b       	or	r18, r21
    10c0:	21 f4       	brne	.+8      	; 0x10ca <__fp_cmp+0x3e>
    10c2:	08 95       	ret
    10c4:	0a 26       	eor	r0, r26
    10c6:	09 f4       	brne	.+2      	; 0x10ca <__fp_cmp+0x3e>
    10c8:	a1 40       	sbci	r26, 0x01	; 1
    10ca:	a6 95       	lsr	r26
    10cc:	8f ef       	ldi	r24, 0xFF	; 255
    10ce:	81 1d       	adc	r24, r1
    10d0:	81 1d       	adc	r24, r1
    10d2:	08 95       	ret

000010d4 <__fp_inf>:
    10d4:	97 f9       	bld	r25, 7
    10d6:	9f 67       	ori	r25, 0x7F	; 127
    10d8:	80 e8       	ldi	r24, 0x80	; 128
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	08 95       	ret

000010e0 <__fp_nan>:
    10e0:	9f ef       	ldi	r25, 0xFF	; 255
    10e2:	80 ec       	ldi	r24, 0xC0	; 192
    10e4:	08 95       	ret

000010e6 <__fp_pscA>:
    10e6:	00 24       	eor	r0, r0
    10e8:	0a 94       	dec	r0
    10ea:	16 16       	cp	r1, r22
    10ec:	17 06       	cpc	r1, r23
    10ee:	18 06       	cpc	r1, r24
    10f0:	09 06       	cpc	r0, r25
    10f2:	08 95       	ret

000010f4 <__fp_pscB>:
    10f4:	00 24       	eor	r0, r0
    10f6:	0a 94       	dec	r0
    10f8:	12 16       	cp	r1, r18
    10fa:	13 06       	cpc	r1, r19
    10fc:	14 06       	cpc	r1, r20
    10fe:	05 06       	cpc	r0, r21
    1100:	08 95       	ret

00001102 <__fp_round>:
    1102:	09 2e       	mov	r0, r25
    1104:	03 94       	inc	r0
    1106:	00 0c       	add	r0, r0
    1108:	11 f4       	brne	.+4      	; 0x110e <__fp_round+0xc>
    110a:	88 23       	and	r24, r24
    110c:	52 f0       	brmi	.+20     	; 0x1122 <__fp_round+0x20>
    110e:	bb 0f       	add	r27, r27
    1110:	40 f4       	brcc	.+16     	; 0x1122 <__fp_round+0x20>
    1112:	bf 2b       	or	r27, r31
    1114:	11 f4       	brne	.+4      	; 0x111a <__fp_round+0x18>
    1116:	60 ff       	sbrs	r22, 0
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <__fp_round+0x20>
    111a:	6f 5f       	subi	r22, 0xFF	; 255
    111c:	7f 4f       	sbci	r23, 0xFF	; 255
    111e:	8f 4f       	sbci	r24, 0xFF	; 255
    1120:	9f 4f       	sbci	r25, 0xFF	; 255
    1122:	08 95       	ret

00001124 <__fp_split3>:
    1124:	57 fd       	sbrc	r21, 7
    1126:	90 58       	subi	r25, 0x80	; 128
    1128:	44 0f       	add	r20, r20
    112a:	55 1f       	adc	r21, r21
    112c:	59 f0       	breq	.+22     	; 0x1144 <__fp_splitA+0x10>
    112e:	5f 3f       	cpi	r21, 0xFF	; 255
    1130:	71 f0       	breq	.+28     	; 0x114e <__fp_splitA+0x1a>
    1132:	47 95       	ror	r20

00001134 <__fp_splitA>:
    1134:	88 0f       	add	r24, r24
    1136:	97 fb       	bst	r25, 7
    1138:	99 1f       	adc	r25, r25
    113a:	61 f0       	breq	.+24     	; 0x1154 <__fp_splitA+0x20>
    113c:	9f 3f       	cpi	r25, 0xFF	; 255
    113e:	79 f0       	breq	.+30     	; 0x115e <__fp_splitA+0x2a>
    1140:	87 95       	ror	r24
    1142:	08 95       	ret
    1144:	12 16       	cp	r1, r18
    1146:	13 06       	cpc	r1, r19
    1148:	14 06       	cpc	r1, r20
    114a:	55 1f       	adc	r21, r21
    114c:	f2 cf       	rjmp	.-28     	; 0x1132 <__fp_split3+0xe>
    114e:	46 95       	lsr	r20
    1150:	f1 df       	rcall	.-30     	; 0x1134 <__fp_splitA>
    1152:	08 c0       	rjmp	.+16     	; 0x1164 <__fp_splitA+0x30>
    1154:	16 16       	cp	r1, r22
    1156:	17 06       	cpc	r1, r23
    1158:	18 06       	cpc	r1, r24
    115a:	99 1f       	adc	r25, r25
    115c:	f1 cf       	rjmp	.-30     	; 0x1140 <__fp_splitA+0xc>
    115e:	86 95       	lsr	r24
    1160:	71 05       	cpc	r23, r1
    1162:	61 05       	cpc	r22, r1
    1164:	08 94       	sec
    1166:	08 95       	ret

00001168 <__fp_zero>:
    1168:	e8 94       	clt

0000116a <__fp_szero>:
    116a:	bb 27       	eor	r27, r27
    116c:	66 27       	eor	r22, r22
    116e:	77 27       	eor	r23, r23
    1170:	cb 01       	movw	r24, r22
    1172:	97 f9       	bld	r25, 7
    1174:	08 95       	ret

00001176 <__mulsf3>:
    1176:	0b d0       	rcall	.+22     	; 0x118e <__mulsf3x>
    1178:	c4 cf       	rjmp	.-120    	; 0x1102 <__fp_round>
    117a:	b5 df       	rcall	.-150    	; 0x10e6 <__fp_pscA>
    117c:	28 f0       	brcs	.+10     	; 0x1188 <__mulsf3+0x12>
    117e:	ba df       	rcall	.-140    	; 0x10f4 <__fp_pscB>
    1180:	18 f0       	brcs	.+6      	; 0x1188 <__mulsf3+0x12>
    1182:	95 23       	and	r25, r21
    1184:	09 f0       	breq	.+2      	; 0x1188 <__mulsf3+0x12>
    1186:	a6 cf       	rjmp	.-180    	; 0x10d4 <__fp_inf>
    1188:	ab cf       	rjmp	.-170    	; 0x10e0 <__fp_nan>
    118a:	11 24       	eor	r1, r1
    118c:	ee cf       	rjmp	.-36     	; 0x116a <__fp_szero>

0000118e <__mulsf3x>:
    118e:	ca df       	rcall	.-108    	; 0x1124 <__fp_split3>
    1190:	a0 f3       	brcs	.-24     	; 0x117a <__mulsf3+0x4>

00001192 <__mulsf3_pse>:
    1192:	95 9f       	mul	r25, r21
    1194:	d1 f3       	breq	.-12     	; 0x118a <__mulsf3+0x14>
    1196:	95 0f       	add	r25, r21
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	55 1f       	adc	r21, r21
    119c:	62 9f       	mul	r22, r18
    119e:	f0 01       	movw	r30, r0
    11a0:	72 9f       	mul	r23, r18
    11a2:	bb 27       	eor	r27, r27
    11a4:	f0 0d       	add	r31, r0
    11a6:	b1 1d       	adc	r27, r1
    11a8:	63 9f       	mul	r22, r19
    11aa:	aa 27       	eor	r26, r26
    11ac:	f0 0d       	add	r31, r0
    11ae:	b1 1d       	adc	r27, r1
    11b0:	aa 1f       	adc	r26, r26
    11b2:	64 9f       	mul	r22, r20
    11b4:	66 27       	eor	r22, r22
    11b6:	b0 0d       	add	r27, r0
    11b8:	a1 1d       	adc	r26, r1
    11ba:	66 1f       	adc	r22, r22
    11bc:	82 9f       	mul	r24, r18
    11be:	22 27       	eor	r18, r18
    11c0:	b0 0d       	add	r27, r0
    11c2:	a1 1d       	adc	r26, r1
    11c4:	62 1f       	adc	r22, r18
    11c6:	73 9f       	mul	r23, r19
    11c8:	b0 0d       	add	r27, r0
    11ca:	a1 1d       	adc	r26, r1
    11cc:	62 1f       	adc	r22, r18
    11ce:	83 9f       	mul	r24, r19
    11d0:	a0 0d       	add	r26, r0
    11d2:	61 1d       	adc	r22, r1
    11d4:	22 1f       	adc	r18, r18
    11d6:	74 9f       	mul	r23, r20
    11d8:	33 27       	eor	r19, r19
    11da:	a0 0d       	add	r26, r0
    11dc:	61 1d       	adc	r22, r1
    11de:	23 1f       	adc	r18, r19
    11e0:	84 9f       	mul	r24, r20
    11e2:	60 0d       	add	r22, r0
    11e4:	21 1d       	adc	r18, r1
    11e6:	82 2f       	mov	r24, r18
    11e8:	76 2f       	mov	r23, r22
    11ea:	6a 2f       	mov	r22, r26
    11ec:	11 24       	eor	r1, r1
    11ee:	9f 57       	subi	r25, 0x7F	; 127
    11f0:	50 40       	sbci	r21, 0x00	; 0
    11f2:	8a f0       	brmi	.+34     	; 0x1216 <__mulsf3_pse+0x84>
    11f4:	e1 f0       	breq	.+56     	; 0x122e <__mulsf3_pse+0x9c>
    11f6:	88 23       	and	r24, r24
    11f8:	4a f0       	brmi	.+18     	; 0x120c <__mulsf3_pse+0x7a>
    11fa:	ee 0f       	add	r30, r30
    11fc:	ff 1f       	adc	r31, r31
    11fe:	bb 1f       	adc	r27, r27
    1200:	66 1f       	adc	r22, r22
    1202:	77 1f       	adc	r23, r23
    1204:	88 1f       	adc	r24, r24
    1206:	91 50       	subi	r25, 0x01	; 1
    1208:	50 40       	sbci	r21, 0x00	; 0
    120a:	a9 f7       	brne	.-22     	; 0x11f6 <__mulsf3_pse+0x64>
    120c:	9e 3f       	cpi	r25, 0xFE	; 254
    120e:	51 05       	cpc	r21, r1
    1210:	70 f0       	brcs	.+28     	; 0x122e <__mulsf3_pse+0x9c>
    1212:	60 cf       	rjmp	.-320    	; 0x10d4 <__fp_inf>
    1214:	aa cf       	rjmp	.-172    	; 0x116a <__fp_szero>
    1216:	5f 3f       	cpi	r21, 0xFF	; 255
    1218:	ec f3       	brlt	.-6      	; 0x1214 <__mulsf3_pse+0x82>
    121a:	98 3e       	cpi	r25, 0xE8	; 232
    121c:	dc f3       	brlt	.-10     	; 0x1214 <__mulsf3_pse+0x82>
    121e:	86 95       	lsr	r24
    1220:	77 95       	ror	r23
    1222:	67 95       	ror	r22
    1224:	b7 95       	ror	r27
    1226:	f7 95       	ror	r31
    1228:	e7 95       	ror	r30
    122a:	9f 5f       	subi	r25, 0xFF	; 255
    122c:	c1 f7       	brne	.-16     	; 0x121e <__mulsf3_pse+0x8c>
    122e:	fe 2b       	or	r31, r30
    1230:	88 0f       	add	r24, r24
    1232:	91 1d       	adc	r25, r1
    1234:	96 95       	lsr	r25
    1236:	87 95       	ror	r24
    1238:	97 f9       	bld	r25, 7
    123a:	08 95       	ret

0000123c <__udivmodsi4>:
    123c:	a1 e2       	ldi	r26, 0x21	; 33
    123e:	1a 2e       	mov	r1, r26
    1240:	aa 1b       	sub	r26, r26
    1242:	bb 1b       	sub	r27, r27
    1244:	fd 01       	movw	r30, r26
    1246:	0d c0       	rjmp	.+26     	; 0x1262 <__udivmodsi4_ep>

00001248 <__udivmodsi4_loop>:
    1248:	aa 1f       	adc	r26, r26
    124a:	bb 1f       	adc	r27, r27
    124c:	ee 1f       	adc	r30, r30
    124e:	ff 1f       	adc	r31, r31
    1250:	a2 17       	cp	r26, r18
    1252:	b3 07       	cpc	r27, r19
    1254:	e4 07       	cpc	r30, r20
    1256:	f5 07       	cpc	r31, r21
    1258:	20 f0       	brcs	.+8      	; 0x1262 <__udivmodsi4_ep>
    125a:	a2 1b       	sub	r26, r18
    125c:	b3 0b       	sbc	r27, r19
    125e:	e4 0b       	sbc	r30, r20
    1260:	f5 0b       	sbc	r31, r21

00001262 <__udivmodsi4_ep>:
    1262:	66 1f       	adc	r22, r22
    1264:	77 1f       	adc	r23, r23
    1266:	88 1f       	adc	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	1a 94       	dec	r1
    126c:	69 f7       	brne	.-38     	; 0x1248 <__udivmodsi4_loop>
    126e:	60 95       	com	r22
    1270:	70 95       	com	r23
    1272:	80 95       	com	r24
    1274:	90 95       	com	r25
    1276:	9b 01       	movw	r18, r22
    1278:	ac 01       	movw	r20, r24
    127a:	bd 01       	movw	r22, r26
    127c:	cf 01       	movw	r24, r30
    127e:	08 95       	ret

00001280 <__tablejump2__>:
    1280:	ee 0f       	add	r30, r30
    1282:	ff 1f       	adc	r31, r31
    1284:	00 24       	eor	r0, r0
    1286:	00 1c       	adc	r0, r0
    1288:	0b be       	out	0x3b, r0	; 59
    128a:	07 90       	elpm	r0, Z+
    128c:	f6 91       	elpm	r31, Z
    128e:	e0 2d       	mov	r30, r0
    1290:	09 94       	ijmp

00001292 <__umulhisi3>:
    1292:	a2 9f       	mul	r26, r18
    1294:	b0 01       	movw	r22, r0
    1296:	b3 9f       	mul	r27, r19
    1298:	c0 01       	movw	r24, r0
    129a:	a3 9f       	mul	r26, r19
    129c:	70 0d       	add	r23, r0
    129e:	81 1d       	adc	r24, r1
    12a0:	11 24       	eor	r1, r1
    12a2:	91 1d       	adc	r25, r1
    12a4:	b2 9f       	mul	r27, r18
    12a6:	70 0d       	add	r23, r0
    12a8:	81 1d       	adc	r24, r1
    12aa:	11 24       	eor	r1, r1
    12ac:	91 1d       	adc	r25, r1
    12ae:	08 95       	ret

000012b0 <_exit>:
    12b0:	f8 94       	cli

000012b2 <__stop_program>:
    12b2:	ff cf       	rjmp	.-2      	; 0x12b2 <__stop_program>
