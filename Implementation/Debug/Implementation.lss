
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000262  00800100  00001424  000014b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001424  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800362  00800362  0000171a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000171a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000174c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a71  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001187  00000000  00000000  00005425  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001810  00000000  00000000  000065ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000558  00000000  00000000  00007dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a52  00000000  00000000  00008314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ad6  00000000  00000000  00008d66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000a83c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__vector_5>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__vector_20>
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__vector_34>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e2       	ldi	r30, 0x24	; 36
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 36       	cpi	r26, 0x62	; 98
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	a2 e6       	ldi	r26, 0x62	; 98
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 38       	cpi	r26, 0x86	; 134
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	92 d2       	rcall	.+1316   	; 0x5e8 <main>
      c4:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <__vector_34>:
volatile u8 clockFlag;
volatile u16 eepromUnreadMessageAddress;
volatile u8 messageBuffer[10];
volatile u8 messageBufferIndex;

ISR(TIMER3_OVF_vect){
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	0b b6       	in	r0, 0x3b	; 59
      d6:	0f 92       	push	r0
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	4f 93       	push	r20
      de:	5f 93       	push	r21
      e0:	6f 93       	push	r22
      e2:	7f 93       	push	r23
      e4:	8f 93       	push	r24
      e6:	9f 93       	push	r25
      e8:	af 93       	push	r26
      ea:	bf 93       	push	r27
      ec:	ef 93       	push	r30
      ee:	ff 93       	push	r31
	TCNT3 = 34285;
      f0:	8d ee       	ldi	r24, 0xED	; 237
      f2:	95 e8       	ldi	r25, 0x85	; 133
      f4:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
      f8:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
	pinChangeFlag = TRUE;
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <__data_end>
	if(loggedIn == TRUE){
     102:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <loggedIn>
     106:	81 30       	cpi	r24, 0x01	; 1
     108:	91 f4       	brne	.+36     	; 0x12e <__vector_34+0x64>
		if(menuState == 0x3100){
     10a:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     10e:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
     112:	81 15       	cp	r24, r1
     114:	91 43       	sbci	r25, 0x31	; 49
     116:	59 f4       	brne	.+22     	; 0x12e <__vector_34+0x64>
			temperatureVoltage = adc_singleRead(0);
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	e9 d2       	rcall	.+1490   	; 0x6ee <adc_singleRead>
     11c:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <temperatureVoltage+0x1>
     120:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <temperatureVoltage>
			lcd_displayTemperature(temperatureVoltage);
     124:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <temperatureVoltage>
     128:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <temperatureVoltage+0x1>
     12c:	f2 d4       	rcall	.+2532   	; 0xb12 <lcd_displayTemperature>
		}
	}
}
     12e:	ff 91       	pop	r31
     130:	ef 91       	pop	r30
     132:	bf 91       	pop	r27
     134:	af 91       	pop	r26
     136:	9f 91       	pop	r25
     138:	8f 91       	pop	r24
     13a:	7f 91       	pop	r23
     13c:	6f 91       	pop	r22
     13e:	5f 91       	pop	r21
     140:	4f 91       	pop	r20
     142:	3f 91       	pop	r19
     144:	2f 91       	pop	r18
     146:	0f 90       	pop	r0
     148:	0b be       	out	0x3b, r0	; 59
     14a:	0f 90       	pop	r0
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	0f 90       	pop	r0
     150:	1f 90       	pop	r1
     152:	18 95       	reti

00000154 <__vector_5>:

ISR(PCINT1_vect){
     154:	1f 92       	push	r1
     156:	0f 92       	push	r0
     158:	0f b6       	in	r0, 0x3f	; 63
     15a:	0f 92       	push	r0
     15c:	11 24       	eor	r1, r1
     15e:	0b b6       	in	r0, 0x3b	; 59
     160:	0f 92       	push	r0
     162:	2f 93       	push	r18
     164:	3f 93       	push	r19
     166:	4f 93       	push	r20
     168:	5f 93       	push	r21
     16a:	6f 93       	push	r22
     16c:	7f 93       	push	r23
     16e:	8f 93       	push	r24
     170:	9f 93       	push	r25
     172:	af 93       	push	r26
     174:	bf 93       	push	r27
     176:	ef 93       	push	r30
     178:	ff 93       	push	r31
	if(pinChangeFlag == TRUE){
     17a:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <__data_end>
     17e:	81 30       	cpi	r24, 0x01	; 1
     180:	09 f0       	breq	.+2      	; 0x184 <__vector_5+0x30>
     182:	a8 c1       	rjmp	.+848    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
		if(loggedIn == FALSE)
     184:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <loggedIn>
     188:	81 11       	cpse	r24, r1
     18a:	56 c0       	rjmp	.+172    	; 0x238 <__vector_5+0xe4>
		{
			switch(passwordCounter){
     18c:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <passwordCounter>
     190:	81 30       	cpi	r24, 0x01	; 1
     192:	b9 f0       	breq	.+46     	; 0x1c2 <__vector_5+0x6e>
     194:	28 f0       	brcs	.+10     	; 0x1a0 <__vector_5+0x4c>
     196:	82 30       	cpi	r24, 0x02	; 2
     198:	29 f1       	breq	.+74     	; 0x1e4 <__vector_5+0x90>
     19a:	83 30       	cpi	r24, 0x03	; 3
     19c:	a1 f1       	breq	.+104    	; 0x206 <__vector_5+0xb2>
     19e:	49 c0       	rjmp	.+146    	; 0x232 <__vector_5+0xde>
				case 0:
					if(checkBit(PINB, 0) == 0){
     1a0:	83 b1       	in	r24, 0x03	; 3
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	fc d6       	rcall	.+3576   	; 0xf9e <checkBit>
     1a6:	81 11       	cpse	r24, r1
     1a8:	09 c0       	rjmp	.+18     	; 0x1bc <__vector_5+0x68>
						passwordCounter++;
     1aa:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <passwordCounter>
     1ae:	8f 5f       	subi	r24, 0xFF	; 255
     1b0:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <passwordCounter>
						gpio_out_toggle(PA, 4);
     1b4:	64 e0       	ldi	r22, 0x04	; 4
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	96 d3       	rcall	.+1836   	; 0x8e6 <gpio_out_toggle>
     1ba:	3b c0       	rjmp	.+118    	; 0x232 <__vector_5+0xde>
					}
					else{
						passwordCounter = 0;
     1bc:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <passwordCounter>
					}
					break;
				case 1:
					if(checkBit(PINB, 1) == 0){
     1c0:	38 c0       	rjmp	.+112    	; 0x232 <__vector_5+0xde>
     1c2:	83 b1       	in	r24, 0x03	; 3
     1c4:	61 e0       	ldi	r22, 0x01	; 1
     1c6:	eb d6       	rcall	.+3542   	; 0xf9e <checkBit>
     1c8:	81 11       	cpse	r24, r1
						passwordCounter++;
     1ca:	09 c0       	rjmp	.+18     	; 0x1de <__vector_5+0x8a>
     1cc:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <passwordCounter>
     1d0:	8f 5f       	subi	r24, 0xFF	; 255
						gpio_out_toggle(PA, 4);
     1d2:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <passwordCounter>
     1d6:	64 e0       	ldi	r22, 0x04	; 4
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	85 d3       	rcall	.+1802   	; 0x8e6 <gpio_out_toggle>
					}
					else{
						passwordCounter = 0;
     1dc:	2a c0       	rjmp	.+84     	; 0x232 <__vector_5+0xde>
     1de:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <passwordCounter>
					}
					break;
				case 2:
					if(checkBit(PINB, 2) == 0){
     1e2:	27 c0       	rjmp	.+78     	; 0x232 <__vector_5+0xde>
     1e4:	83 b1       	in	r24, 0x03	; 3
     1e6:	62 e0       	ldi	r22, 0x02	; 2
     1e8:	da d6       	rcall	.+3508   	; 0xf9e <checkBit>
     1ea:	81 11       	cpse	r24, r1
						passwordCounter++;
     1ec:	09 c0       	rjmp	.+18     	; 0x200 <__vector_5+0xac>
     1ee:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <passwordCounter>
     1f2:	8f 5f       	subi	r24, 0xFF	; 255
						gpio_out_toggle(PA, 4);
     1f4:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <passwordCounter>
     1f8:	64 e0       	ldi	r22, 0x04	; 4
     1fa:	80 e0       	ldi	r24, 0x00	; 0
					}
					else{
						passwordCounter = 0;
     1fc:	74 d3       	rcall	.+1768   	; 0x8e6 <gpio_out_toggle>
     1fe:	19 c0       	rjmp	.+50     	; 0x232 <__vector_5+0xde>
     200:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <passwordCounter>
					}
					break;
				case 3:
					if(checkBit(PINB, 3) == 0){
     204:	16 c0       	rjmp	.+44     	; 0x232 <__vector_5+0xde>
     206:	83 b1       	in	r24, 0x03	; 3
						loggedIn = TRUE;
     208:	63 e0       	ldi	r22, 0x03	; 3
						lcd_clearDisplay();
     20a:	c9 d6       	rcall	.+3474   	; 0xf9e <checkBit>
						lcd_writeString("Welcome!");
     20c:	81 11       	cpse	r24, r1
     20e:	0f c0       	rjmp	.+30     	; 0x22e <__vector_5+0xda>
     210:	81 e0       	ldi	r24, 0x01	; 1
						lcd_newLine();
     212:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <loggedIn>
						lcd_writeString("Press OK");
     216:	7f d3       	rcall	.+1790   	; 0x916 <lcd_clearDisplay>
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	5e d4       	rcall	.+2236   	; 0xada <lcd_writeString>
						gpio_out_toggle(PA, 4);
     21e:	25 d4       	rcall	.+2122   	; 0xa6a <lcd_newLine>
     220:	89 e0       	ldi	r24, 0x09	; 9
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	5a d4       	rcall	.+2228   	; 0xada <lcd_writeString>
     226:	64 e0       	ldi	r22, 0x04	; 4
					}
					else{
						passwordCounter = 0;
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	5d d3       	rcall	.+1722   	; 0x8e6 <gpio_out_toggle>
					}
					break;
				default:
					break;
			}
			pinChangeFlag = FALSE;
     22c:	02 c0       	rjmp	.+4      	; 0x232 <__vector_5+0xde>
     22e:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <passwordCounter>
		}
		else
		{
			if((menuState == 0x0000) && (menuLevel == 0)){
     232:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <__data_end>
     236:	4e c1       	rjmp	.+668    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     238:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     23c:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
     240:	89 2b       	or	r24, r25
				if(checkBit(PINB, 0) == 0){
     242:	c1 f4       	brne	.+48     	; 0x274 <__vector_5+0x120>
     244:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
     248:	81 11       	cpse	r24, r1
     24a:	14 c0       	rjmp	.+40     	; 0x274 <__vector_5+0x120>
     24c:	83 b1       	in	r24, 0x03	; 3
					menuState += 0x1000;
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	a6 d6       	rcall	.+3404   	; 0xf9e <checkBit>
     252:	81 11       	cpse	r24, r1
     254:	35 c1       	rjmp	.+618    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     256:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     25a:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
					menuLevel++;
     25e:	90 5f       	subi	r25, 0xF0	; 240
     260:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <menuState+0x1>
     264:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <menuState>
     268:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
				}
			}
			else if(checkBit(PINB, 3) == 0){ // up
     26c:	8f 5f       	subi	r24, 0xFF	; 255
     26e:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <menuLevel>
     272:	26 c1       	rjmp	.+588    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     274:	83 b1       	in	r24, 0x03	; 3
				switch(menuLevel){
     276:	63 e0       	ldi	r22, 0x03	; 3
     278:	92 d6       	rcall	.+3364   	; 0xf9e <checkBit>
     27a:	81 11       	cpse	r24, r1
     27c:	2d c0       	rjmp	.+90     	; 0x2d8 <__vector_5+0x184>
     27e:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
     282:	81 30       	cpi	r24, 0x01	; 1
					case 1:
						if(menuState != 0x1000){
     284:	19 f0       	breq	.+6      	; 0x28c <__vector_5+0x138>
     286:	82 30       	cpi	r24, 0x02	; 2
     288:	99 f0       	breq	.+38     	; 0x2b0 <__vector_5+0x15c>
     28a:	1a c1       	rjmp	.+564    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     28c:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     290:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
							menuState -= 0x1000;
     294:	81 15       	cp	r24, r1
     296:	90 41       	sbci	r25, 0x10	; 16
     298:	09 f4       	brne	.+2      	; 0x29c <__vector_5+0x148>
     29a:	12 c1       	rjmp	.+548    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     29c:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     2a0:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
     2a4:	90 51       	subi	r25, 0x10	; 16
     2a6:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <menuState+0x1>
						}
						break;
					case 2:
						if((menuState & 0x0F00) != 0x0100){
     2aa:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <menuState>
     2ae:	08 c1       	rjmp	.+528    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     2b0:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     2b4:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
     2b8:	88 27       	eor	r24, r24
							menuState -= 0x0100;
     2ba:	9f 70       	andi	r25, 0x0F	; 15
     2bc:	81 15       	cp	r24, r1
     2be:	91 40       	sbci	r25, 0x01	; 1
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <__vector_5+0x170>
     2c2:	fe c0       	rjmp	.+508    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     2c4:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     2c8:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
     2cc:	9a 95       	dec	r25
						break;
					default:
						break;
				}
			}
			else if(checkBit(PINB, 2) == 0){ // down
     2ce:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <menuState+0x1>
     2d2:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <menuState>
     2d6:	f4 c0       	rjmp	.+488    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     2d8:	83 b1       	in	r24, 0x03	; 3
				switch(menuLevel){
     2da:	62 e0       	ldi	r22, 0x02	; 2
     2dc:	60 d6       	rcall	.+3264   	; 0xf9e <checkBit>
     2de:	81 11       	cpse	r24, r1
     2e0:	67 c0       	rjmp	.+206    	; 0x3b0 <__vector_5+0x25c>
     2e2:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
     2e6:	81 30       	cpi	r24, 0x01	; 1
					case 1:
						if(menuState != 0x4000){
     2e8:	19 f0       	breq	.+6      	; 0x2f0 <__vector_5+0x19c>
     2ea:	82 30       	cpi	r24, 0x02	; 2
     2ec:	99 f0       	breq	.+38     	; 0x314 <__vector_5+0x1c0>
     2ee:	e8 c0       	rjmp	.+464    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     2f0:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     2f4:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
							menuState += 0x1000;
     2f8:	81 15       	cp	r24, r1
     2fa:	90 44       	sbci	r25, 0x40	; 64
     2fc:	09 f4       	brne	.+2      	; 0x300 <__vector_5+0x1ac>
     2fe:	e0 c0       	rjmp	.+448    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     300:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     304:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
     308:	90 5f       	subi	r25, 0xF0	; 240
     30a:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <menuState+0x1>
						}
						break;
					case 2:
						switch(menuState & 0xF000){
     30e:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <menuState>
     312:	d6 c0       	rjmp	.+428    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     314:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     318:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
     31c:	88 27       	eor	r24, r24
     31e:	90 7f       	andi	r25, 0xF0	; 240
     320:	81 15       	cp	r24, r1
     322:	20 e2       	ldi	r18, 0x20	; 32
     324:	92 07       	cpc	r25, r18
     326:	e1 f0       	breq	.+56     	; 0x360 <__vector_5+0x20c>
     328:	81 15       	cp	r24, r1
     32a:	20 e4       	ldi	r18, 0x40	; 64
     32c:	92 07       	cpc	r25, r18
     32e:	61 f1       	breq	.+88     	; 0x388 <__vector_5+0x234>
							case 0x1000:
								if((menuState & 0x0F00) != 0x0300){
     330:	81 15       	cp	r24, r1
     332:	90 41       	sbci	r25, 0x10	; 16
     334:	09 f0       	breq	.+2      	; 0x338 <__vector_5+0x1e4>
     336:	c4 c0       	rjmp	.+392    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     338:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     33c:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
     340:	88 27       	eor	r24, r24
     342:	9f 70       	andi	r25, 0x0F	; 15
									menuState += 0x0100;
     344:	81 15       	cp	r24, r1
     346:	93 40       	sbci	r25, 0x03	; 3
     348:	09 f4       	brne	.+2      	; 0x34c <__vector_5+0x1f8>
     34a:	ba c0       	rjmp	.+372    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     34c:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     350:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
     354:	93 95       	inc	r25
     356:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <menuState+0x1>
								}
								break;
							case 0x2000:
								if((menuState & 0x0F00) != 0x0200){
     35a:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <menuState>
     35e:	b0 c0       	rjmp	.+352    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     360:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     364:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
     368:	88 27       	eor	r24, r24
     36a:	9f 70       	andi	r25, 0x0F	; 15
									menuState += 0x0100;
     36c:	81 15       	cp	r24, r1
     36e:	92 40       	sbci	r25, 0x02	; 2
     370:	09 f4       	brne	.+2      	; 0x374 <__vector_5+0x220>
     372:	a6 c0       	rjmp	.+332    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     374:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     378:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
     37c:	93 95       	inc	r25
     37e:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <menuState+0x1>
								}
								break;
							case 0x3000:
								break;
							case 0x4000:
								if((menuState & 0x0F00) != 0x0A00){
     382:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <menuState>
     386:	9c c0       	rjmp	.+312    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     388:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     38c:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
     390:	88 27       	eor	r24, r24
									menuState += 0x0100;
     392:	9f 70       	andi	r25, 0x0F	; 15
     394:	81 15       	cp	r24, r1
     396:	9a 40       	sbci	r25, 0x0A	; 10
     398:	09 f4       	brne	.+2      	; 0x39c <__vector_5+0x248>
     39a:	92 c0       	rjmp	.+292    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     39c:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     3a0:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
     3a4:	93 95       	inc	r25
						break;
					default:
						break;
				}
			}
			else if(checkBit(PINB, 1) == 0){ // back
     3a6:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <menuState+0x1>
     3aa:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <menuState>
     3ae:	88 c0       	rjmp	.+272    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     3b0:	83 b1       	in	r24, 0x03	; 3
				menuLevel--;
     3b2:	61 e0       	ldi	r22, 0x01	; 1
     3b4:	f4 d5       	rcall	.+3048   	; 0xf9e <checkBit>
     3b6:	81 11       	cpse	r24, r1
     3b8:	26 c0       	rjmp	.+76     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3ba:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
				switch(menuLevel){
     3be:	81 50       	subi	r24, 0x01	; 1
     3c0:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <menuLevel>
     3c4:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
     3c8:	81 30       	cpi	r24, 0x01	; 1
     3ca:	41 f0       	breq	.+16     	; 0x3dc <__vector_5+0x288>
					case 0:
						menuState = 0x0000;
     3cc:	18 f0       	brcs	.+6      	; 0x3d4 <__vector_5+0x280>
     3ce:	82 30       	cpi	r24, 0x02	; 2
     3d0:	81 f0       	breq	.+32     	; 0x3f2 <__vector_5+0x29e>
     3d2:	76 c0       	rjmp	.+236    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
					case 1:
						menuState &= 0xF000;
     3d4:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <menuState+0x1>
     3d8:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <menuState>
     3dc:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     3e0:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
     3e4:	88 27       	eor	r24, r24
						break;
     3e6:	90 7f       	andi	r25, 0xF0	; 240
					case 2:
						menuState &= 0xFF00;
     3e8:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <menuState+0x1>
     3ec:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <menuState>
     3f0:	67 c0       	rjmp	.+206    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     3f2:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     3f6:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
						break;
     3fa:	88 27       	eor	r24, r24
						break;
					default:
						break;
				}
			}
			else if(checkBit(PINB, 0) == 0){ // ok
     3fc:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <menuState+0x1>
     400:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <menuState>
     404:	5d c0       	rjmp	.+186    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     406:	83 b1       	in	r24, 0x03	; 3
				menuLevel++;
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	c9 d5       	rcall	.+2962   	; 0xf9e <checkBit>
     40c:	81 11       	cpse	r24, r1
     40e:	58 c0       	rjmp	.+176    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     410:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
				switch(menuLevel){
     414:	8f 5f       	subi	r24, 0xFF	; 255
     416:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <menuLevel>
     41a:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
     41e:	82 30       	cpi	r24, 0x02	; 2
     420:	79 f0       	breq	.+30     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     422:	83 30       	cpi	r24, 0x03	; 3
					case 1:
						menuState += 0x1000;
     424:	b9 f0       	breq	.+46     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     426:	81 30       	cpi	r24, 0x01	; 1
     428:	09 f0       	breq	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	4a c0       	rjmp	.+148    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     42c:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     430:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
     434:	90 5f       	subi	r25, 0xF0	; 240
						break;
     436:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <menuState+0x1>
					case 2:
						menuState += 0x0100;
     43a:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <menuState>
     43e:	40 c0       	rjmp	.+128    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     440:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     444:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
     448:	93 95       	inc	r25
						break;
     44a:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <menuState+0x1>
					case 3:
						if(menuState == 0x2100){
     44e:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <menuState>
     452:	36 c0       	rjmp	.+108    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     454:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     458:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
							manualMode = TRUE;
     45c:	81 15       	cp	r24, r1
     45e:	91 42       	sbci	r25, 0x21	; 33
							menuLevel--;
     460:	49 f4       	brne	.+18     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <manualMode>
     468:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
						}
						else if(menuState == 0x2200){
     46c:	81 50       	subi	r24, 0x01	; 1
     46e:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <menuLevel>
     472:	26 c0       	rjmp	.+76     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     474:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     478:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
							manualMode = FALSE;
     47c:	81 15       	cp	r24, r1
							menuLevel--;
     47e:	92 42       	sbci	r25, 0x22	; 34
     480:	41 f4       	brne	.+16     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     482:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <manualMode>
     486:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
						}
						else if((menuState == 0x1100) || (menuState == 0x1200)){
     48a:	81 50       	subi	r24, 0x01	; 1
     48c:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <menuLevel>
     490:	17 c0       	rjmp	.+46     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     492:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     496:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
     49a:	81 15       	cp	r24, r1
     49c:	91 41       	sbci	r25, 0x11	; 17
     49e:	39 f0       	breq	.+14     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4a0:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
							menuState += 0x0010;
     4a4:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
     4a8:	81 15       	cp	r24, r1
     4aa:	92 41       	sbci	r25, 0x12	; 18
     4ac:	49 f4       	brne	.+18     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4ae:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     4b2:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
						break;
					default:
						break;
				}
			}
			lcd_displayMenu(menuState);
     4b6:	40 96       	adiw	r24, 0x10	; 16
     4b8:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <menuState+0x1>
     4bc:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <menuState>
			gpio_out_toggle(PA, 4);
     4c0:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <menuState>
     4c4:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <menuState+0x1>
			pinChangeFlag = FALSE;
     4c8:	cd d3       	rcall	.+1946   	; 0xc64 <lcd_displayMenu>
     4ca:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
}
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	0b d2       	rcall	.+1046   	; 0x8e6 <gpio_out_toggle>
     4d0:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <__data_end>
     4d4:	ff 91       	pop	r31
     4d6:	ef 91       	pop	r30
     4d8:	bf 91       	pop	r27
     4da:	af 91       	pop	r26
     4dc:	9f 91       	pop	r25
     4de:	8f 91       	pop	r24
     4e0:	7f 91       	pop	r23
     4e2:	6f 91       	pop	r22
     4e4:	5f 91       	pop	r21
     4e6:	4f 91       	pop	r20
     4e8:	3f 91       	pop	r19
     4ea:	2f 91       	pop	r18
     4ec:	0f 90       	pop	r0
     4ee:	0b be       	out	0x3b, r0	; 59
     4f0:	0f 90       	pop	r0
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	0f 90       	pop	r0
     4f6:	1f 90       	pop	r1
     4f8:	18 95       	reti

000004fa <init>:

void init(){
	lcd_init();
     4fa:	cf 93       	push	r28
	lcd_writeString("Enter password:");
     4fc:	42 d2       	rcall	.+1156   	; 0x982 <lcd_init>
     4fe:	82 e1       	ldi	r24, 0x12	; 18
     500:	91 e0       	ldi	r25, 0x01	; 1
	//lcd_resetCursor();
	loggedIn = FALSE;
     502:	eb d2       	rcall	.+1494   	; 0xada <lcd_writeString>
     504:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <loggedIn>
	pinChangeFlag = TRUE;
     508:	c1 e0       	ldi	r28, 0x01	; 1
     50a:	c0 93 62 03 	sts	0x0362, r28	; 0x800362 <__data_end>
	passwordCounter = 0;
     50e:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <passwordCounter>
	menuState = 0x0000;
     512:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <menuState+0x1>
     516:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <menuState>
	menuLevel = 0;
     51a:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <menuLevel>
	manualMode = TRUE;
     51e:	c0 93 78 03 	sts	0x0378, r28	; 0x800378 <manualMode>
	eepromUnreadMessageAddress = 0x010;
     522:	80 e1       	ldi	r24, 0x10	; 16
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <eepromUnreadMessageAddress+0x1>
     52a:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <eepromUnreadMessageAddress>
	gpio_init(PB, 0, INPUT, USE_PULL);
     52e:	21 e0       	ldi	r18, 0x01	; 1
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	81 e0       	ldi	r24, 0x01	; 1
	gpio_init(PB, 1, INPUT, USE_PULL);
     536:	6a d1       	rcall	.+724    	; 0x80c <gpio_init>
     538:	21 e0       	ldi	r18, 0x01	; 1
     53a:	40 e0       	ldi	r20, 0x00	; 0
     53c:	61 e0       	ldi	r22, 0x01	; 1
	gpio_init(PB, 2, INPUT, USE_PULL);
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	65 d1       	rcall	.+714    	; 0x80c <gpio_init>
     542:	21 e0       	ldi	r18, 0x01	; 1
     544:	40 e0       	ldi	r20, 0x00	; 0
	gpio_init(PB, 3, INPUT, USE_PULL);
     546:	62 e0       	ldi	r22, 0x02	; 2
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	60 d1       	rcall	.+704    	; 0x80c <gpio_init>
     54c:	21 e0       	ldi	r18, 0x01	; 1
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	63 e0       	ldi	r22, 0x03	; 3
	PCMSK1 = 0x0F;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	5b d1       	rcall	.+694    	; 0x80c <gpio_init>
     556:	8f e0       	ldi	r24, 0x0F	; 15
	TCCR3A = 0x00;
     558:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	TCCR3C = 0x00;
     55c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TIMSK3 = 0x01;
     560:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__TEXT_REGION_LENGTH__+0x7e0092>
	setBit(&PCICR, PCIE1);
     564:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     568:	61 e0       	ldi	r22, 0x01	; 1
	gpio_init(PA, 4, OUTPUT, NO_PULL);
     56a:	88 e6       	ldi	r24, 0x68	; 104
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	da d4       	rcall	.+2484   	; 0xf24 <setBit>
     570:	20 e0       	ldi	r18, 0x00	; 0
	gpio_init(PA, 0, INPUT, NO_PULL);
     572:	41 e0       	ldi	r20, 0x01	; 1
     574:	64 e0       	ldi	r22, 0x04	; 4
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	49 d1       	rcall	.+658    	; 0x80c <gpio_init>
     57a:	20 e0       	ldi	r18, 0x00	; 0
	adc_init(_10BIT, ADC_PRESCALER_16, SINGLE_CONVERSION);
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	44 d1       	rcall	.+648    	; 0x80c <gpio_init>
     584:	40 e0       	ldi	r20, 0x00	; 0
     586:	64 e0       	ldi	r22, 0x04	; 4
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	32 d0       	rcall	.+100    	; 0x5f0 <adc_init>
	for(int i = 1; i < 8; i++){
		channelsEnabled[i] = 0;
     58c:	ed e6       	ldi	r30, 0x6D	; 109
	TIMSK3 = 0x01;
	setBit(&PCICR, PCIE1);
	gpio_init(PA, 4, OUTPUT, NO_PULL);
	gpio_init(PA, 0, INPUT, NO_PULL);
	adc_init(_10BIT, ADC_PRESCALER_16, SINGLE_CONVERSION);
	for(int i = 1; i < 8; i++){
     58e:	f3 e0       	ldi	r31, 0x03	; 3
     590:	84 e7       	ldi	r24, 0x74	; 116
     592:	93 e0       	ldi	r25, 0x03	; 3
		channelsEnabled[i] = 0;
	}
	channelsEnabled[0] = 1;
     594:	11 92       	st	Z+, r1
     596:	8e 17       	cp	r24, r30
     598:	9f 07       	cpc	r25, r31
	adc_start(channelsEnabled);
     59a:	e1 f7       	brne	.-8      	; 0x594 <init+0x9a>
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <channelsEnabled>
	TCCR3B = 0x04;
     5a2:	8c e6       	ldi	r24, 0x6C	; 108
     5a4:	93 e0       	ldi	r25, 0x03	; 3
	TCNT3 = 34285;
     5a6:	6e d0       	rcall	.+220    	; 0x684 <adc_start>
     5a8:	84 e0       	ldi	r24, 0x04	; 4
     5aa:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	uart_init(ASYNCHRONOUS, EVEN, _2BIT, _9600);
     5ae:	8d ee       	ldi	r24, 0xED	; 237
     5b0:	95 e8       	ldi	r25, 0x85	; 133
     5b2:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     5b6:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
	uart_start(TRUE, TRUE);
     5ba:	23 e3       	ldi	r18, 0x33	; 51
     5bc:	41 e0       	ldi	r20, 0x01	; 1
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	80 e0       	ldi	r24, 0x00	; 0
	eeprom_init();
     5c2:	32 d5       	rcall	.+2660   	; 0x1028 <uart_init>
     5c4:	61 e0       	ldi	r22, 0x01	; 1
	for(int i = 0; i < 10; i++){
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	75 d5       	rcall	.+2794   	; 0x10b4 <uart_start>
		messageBuffer[i] = 0;
     5ca:	cf d0       	rcall	.+414    	; 0x76a <eeprom_init>
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	fc 01       	movw	r30, r24
	TCCR3B = 0x04;
	TCNT3 = 34285;
	uart_init(ASYNCHRONOUS, EVEN, _2BIT, _9600);
	uart_start(TRUE, TRUE);
	eeprom_init();
	for(int i = 0; i < 10; i++){
     5d2:	e7 58       	subi	r30, 0x87	; 135
     5d4:	fc 4f       	sbci	r31, 0xFC	; 252
     5d6:	10 82       	st	Z, r1
     5d8:	01 96       	adiw	r24, 0x01	; 1
		messageBuffer[i] = 0;
	}
	messageBufferIndex = 0;
     5da:	8a 30       	cpi	r24, 0x0A	; 10
     5dc:	91 05       	cpc	r25, r1
}
     5de:	c1 f7       	brne	.-16     	; 0x5d0 <init+0xd6>
     5e0:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <messageBufferIndex>
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <main>:

int main(void)
{
	disableJTAG();
	init();
     5e8:	0d d1       	rcall	.+538    	; 0x804 <disableJTAG>
     5ea:	87 df       	rcall	.-242    	; 0x4fa <init>
	sei();
     5ec:	78 94       	sei
     5ee:	ff cf       	rjmp	.-2      	; 0x5ee <main+0x6>

000005f0 <adc_init>:
void adc_stop(u8 *channelsEnabled){
	u8 channel;
	clearBit(&ADCSRA, ADEN);
	for (channel = 0; channel < 8; channel++)
		updateBit(&DIDR0, 1 << channel, ~channelsEnabled[channel]);
}
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	18 2f       	mov	r17, r24
     5f8:	c6 2f       	mov	r28, r22
     5fa:	d4 2f       	mov	r29, r20
     5fc:	67 e0       	ldi	r22, 0x07	; 7
     5fe:	8c e7       	ldi	r24, 0x7C	; 124
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	9c d4       	rcall	.+2360   	; 0xf3c <clearBit>
     604:	66 e0       	ldi	r22, 0x06	; 6
     606:	8c e7       	ldi	r24, 0x7C	; 124
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	8c d4       	rcall	.+2328   	; 0xf24 <setBit>
     60c:	41 2f       	mov	r20, r17
     60e:	65 e0       	ldi	r22, 0x05	; 5
     610:	8c e7       	ldi	r24, 0x7C	; 124
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	ac d4       	rcall	.+2392   	; 0xf6e <updateBit>
     616:	64 e0       	ldi	r22, 0x04	; 4
     618:	8c e7       	ldi	r24, 0x7C	; 124
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	8f d4       	rcall	.+2334   	; 0xf3c <clearBit>
     61e:	63 e0       	ldi	r22, 0x03	; 3
     620:	8c e7       	ldi	r24, 0x7C	; 124
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	8b d4       	rcall	.+2326   	; 0xf3c <clearBit>
     626:	c2 fb       	bst	r28, 2
     628:	44 27       	eor	r20, r20
     62a:	40 f9       	bld	r20, 0
     62c:	62 e0       	ldi	r22, 0x02	; 2
     62e:	8a e7       	ldi	r24, 0x7A	; 122
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	9d d4       	rcall	.+2362   	; 0xf6e <updateBit>
     634:	c1 fb       	bst	r28, 1
     636:	44 27       	eor	r20, r20
     638:	40 f9       	bld	r20, 0
     63a:	61 e0       	ldi	r22, 0x01	; 1
     63c:	8a e7       	ldi	r24, 0x7A	; 122
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	96 d4       	rcall	.+2348   	; 0xf6e <updateBit>
     642:	4c 2f       	mov	r20, r28
     644:	41 70       	andi	r20, 0x01	; 1
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	8a e7       	ldi	r24, 0x7A	; 122
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	90 d4       	rcall	.+2336   	; 0xf6e <updateBit>
     64e:	d1 11       	cpse	r29, r1
     650:	05 c0       	rjmp	.+10     	; 0x65c <adc_init+0x6c>
     652:	65 e0       	ldi	r22, 0x05	; 5
     654:	8a e7       	ldi	r24, 0x7A	; 122
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	71 d4       	rcall	.+2274   	; 0xf3c <clearBit>
     65a:	10 c0       	rjmp	.+32     	; 0x67c <adc_init+0x8c>
     65c:	65 e0       	ldi	r22, 0x05	; 5
     65e:	8a e7       	ldi	r24, 0x7A	; 122
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	60 d4       	rcall	.+2240   	; 0xf24 <setBit>
     664:	62 e0       	ldi	r22, 0x02	; 2
     666:	8b e7       	ldi	r24, 0x7B	; 123
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	68 d4       	rcall	.+2256   	; 0xf3c <clearBit>
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	8b e7       	ldi	r24, 0x7B	; 123
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	64 d4       	rcall	.+2248   	; 0xf3c <clearBit>
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	8b e7       	ldi	r24, 0x7B	; 123
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	60 d4       	rcall	.+2240   	; 0xf3c <clearBit>
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	08 95       	ret

00000684 <adc_start>:
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	d8 2f       	mov	r29, r24
     692:	c9 2f       	mov	r28, r25
     694:	67 e0       	ldi	r22, 0x07	; 7
     696:	8a e7       	ldi	r24, 0x7A	; 122
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	44 d4       	rcall	.+2184   	; 0xf24 <setBit>
     69c:	0d 2f       	mov	r16, r29
     69e:	1c 2f       	mov	r17, r28
     6a0:	c0 e0       	ldi	r28, 0x00	; 0
     6a2:	d0 e0       	ldi	r29, 0x00	; 0
     6a4:	ee 24       	eor	r14, r14
     6a6:	e3 94       	inc	r14
     6a8:	f1 2c       	mov	r15, r1
     6aa:	f8 01       	movw	r30, r16
     6ac:	41 91       	ld	r20, Z+
     6ae:	8f 01       	movw	r16, r30
     6b0:	b7 01       	movw	r22, r14
     6b2:	0c 2e       	mov	r0, r28
     6b4:	02 c0       	rjmp	.+4      	; 0x6ba <adc_start+0x36>
     6b6:	66 0f       	add	r22, r22
     6b8:	77 1f       	adc	r23, r23
     6ba:	0a 94       	dec	r0
     6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <adc_start+0x32>
     6be:	8e e7       	ldi	r24, 0x7E	; 126
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	55 d4       	rcall	.+2218   	; 0xf6e <updateBit>
     6c4:	21 96       	adiw	r28, 0x01	; 1
     6c6:	c8 30       	cpi	r28, 0x08	; 8
     6c8:	d1 05       	cpc	r29, r1
     6ca:	79 f7       	brne	.-34     	; 0x6aa <adc_start+0x26>
     6cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     6d0:	65 e0       	ldi	r22, 0x05	; 5
     6d2:	65 d4       	rcall	.+2250   	; 0xf9e <checkBit>
     6d4:	88 23       	and	r24, r24
     6d6:	21 f0       	breq	.+8      	; 0x6e0 <adc_start+0x5c>
     6d8:	66 e0       	ldi	r22, 0x06	; 6
     6da:	8a e7       	ldi	r24, 0x7A	; 122
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	22 d4       	rcall	.+2116   	; 0xf24 <setBit>
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	0f 91       	pop	r16
     6e8:	ff 90       	pop	r15
     6ea:	ef 90       	pop	r14
     6ec:	08 95       	ret

000006ee <adc_singleRead>:

u16 adc_singleRead(u8 channel){
	u16 readValue = 0;
	u16 temp = 0;
	ADMUX = channel | (ADMUX & 0b11111000);
     6ee:	ec e7       	ldi	r30, 0x7C	; 124
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	90 81       	ld	r25, Z
     6f4:	98 7f       	andi	r25, 0xF8	; 248
     6f6:	89 2b       	or	r24, r25
     6f8:	80 83       	st	Z, r24
	if(!checkBit(ADCSRA, ADATE))
     6fa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     6fe:	65 e0       	ldi	r22, 0x05	; 5
     700:	4e d4       	rcall	.+2204   	; 0xf9e <checkBit>
     702:	81 11       	cpse	r24, r1
     704:	0a c0       	rjmp	.+20     	; 0x71a <adc_singleRead+0x2c>
	{
		setBit(&ADCSRA, ADSC);
     706:	66 e0       	ldi	r22, 0x06	; 6
     708:	8a e7       	ldi	r24, 0x7A	; 122
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0b d4       	rcall	.+2070   	; 0xf24 <setBit>
		while(!(ADCSRA & (1<<ADIF)));
     70e:	ea e7       	ldi	r30, 0x7A	; 122
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	80 81       	ld	r24, Z
     714:	84 ff       	sbrs	r24, 4
     716:	fd cf       	rjmp	.-6      	; 0x712 <adc_singleRead+0x24>
     718:	12 c0       	rjmp	.+36     	; 0x73e <adc_singleRead+0x50>
	}
	else
	{
		setBit(&ADCSRA, ADIF);
     71a:	64 e0       	ldi	r22, 0x04	; 4
     71c:	8a e7       	ldi	r24, 0x7A	; 122
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	01 d4       	rcall	.+2050   	; 0xf24 <setBit>
		while(!(ADCSRA & (1<<ADIF)));
     722:	ea e7       	ldi	r30, 0x7A	; 122
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	80 81       	ld	r24, Z
     728:	84 ff       	sbrs	r24, 4
		setBit(&ADCSRA, ADIF);
     72a:	fd cf       	rjmp	.-6      	; 0x726 <adc_singleRead+0x38>
     72c:	64 e0       	ldi	r22, 0x04	; 4
     72e:	8a e7       	ldi	r24, 0x7A	; 122
     730:	90 e0       	ldi	r25, 0x00	; 0
		while(!(ADCSRA & (1<<ADIF)));
     732:	f8 d3       	rcall	.+2032   	; 0xf24 <setBit>
     734:	ea e7       	ldi	r30, 0x7A	; 122
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	80 81       	ld	r24, Z
		
	}
	switch(checkBit(ADMUX, ADLAR))
     73a:	84 ff       	sbrs	r24, 4
     73c:	fd cf       	rjmp	.-6      	; 0x738 <adc_singleRead+0x4a>
     73e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     742:	65 e0       	ldi	r22, 0x05	; 5
     744:	2c d4       	rcall	.+2136   	; 0xf9e <checkBit>
     746:	88 23       	and	r24, r24
     748:	31 f0       	breq	.+12     	; 0x756 <adc_singleRead+0x68>
     74a:	81 30       	cpi	r24, 0x01	; 1
	{
		case 1:
			readValue = ADCH;
     74c:	59 f4       	brne	.+22     	; 0x764 <adc_singleRead+0x76>
     74e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
			break;
     752:	90 e0       	ldi	r25, 0x00	; 0
		case 0:
			readValue = ADCL;
     754:	08 95       	ret
     756:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
			temp = ADCH;
     75a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
			readValue |= (temp << 8);
     75e:	90 e0       	ldi	r25, 0x00	; 0
		break;
     760:	92 2b       	or	r25, r18
	for (channel = 0; channel < 8; channel++)
		updateBit(&DIDR0, 1 << channel, ~channelsEnabled[channel]);
}

u16 adc_singleRead(u8 channel){
	u16 readValue = 0;
     762:	08 95       	ret
     764:	80 e0       	ldi	r24, 0x00	; 0
			temp = ADCH;
			readValue |= (temp << 8);
		break;
	}
	return readValue;
}
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	08 95       	ret

0000076a <eeprom_init>:
#include "gpio.h"
#include "uart.h"

void eeprom_init(){
	spi_init();
	spi_start();
     76a:	21 d4       	rcall	.+2114   	; 0xfae <spi_init>
     76c:	4d c4       	rjmp	.+2202   	; 0x1008 <spi_start>
     76e:	08 95       	ret

00000770 <eeprom_read>:
}

u8 eeprom_read(u16 address){
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	c8 2f       	mov	r28, r24
     776:	d9 2f       	mov	r29, r25
	u8 value = 0x23;
	gpio_out_reset(PB, 4);
     778:	64 e0       	ldi	r22, 0x04	; 4
     77a:	81 e0       	ldi	r24, 0x01	; 1
	spi_writeData(0x03);
     77c:	9c d0       	rcall	.+312    	; 0x8b6 <gpio_out_reset>
	spi_writeData((u8)(address >> 8));
     77e:	83 e0       	ldi	r24, 0x03	; 3
	spi_writeData((u8)(address));
     780:	51 d4       	rcall	.+2210   	; 0x1024 <spi_writeData>
     782:	8d 2f       	mov	r24, r29
	value = spi_readData();
     784:	4f d4       	rcall	.+2206   	; 0x1024 <spi_writeData>
     786:	8c 2f       	mov	r24, r28
	gpio_out_set(PB, 4);
     788:	4d d4       	rcall	.+2202   	; 0x1024 <spi_writeData>
     78a:	49 d4       	rcall	.+2194   	; 0x101e <spi_readData>
     78c:	c8 2f       	mov	r28, r24
     78e:	64 e0       	ldi	r22, 0x04	; 4
	return value;
}
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	79 d0       	rcall	.+242    	; 0x886 <gpio_out_set>
     794:	8c 2f       	mov	r24, r28
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <eeprom_write>:

void eeprom_write(u8 data, u16 address){
     79c:	1f 93       	push	r17
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	c8 2f       	mov	r28, r24
     7a4:	d6 2f       	mov	r29, r22
     7a6:	17 2f       	mov	r17, r23
	gpio_out_reset(PB, 4);
     7a8:	64 e0       	ldi	r22, 0x04	; 4
     7aa:	81 e0       	ldi	r24, 0x01	; 1
	spi_writeData(0x06);
     7ac:	84 d0       	rcall	.+264    	; 0x8b6 <gpio_out_reset>
	gpio_out_set(PB, 4);
     7ae:	86 e0       	ldi	r24, 0x06	; 6
     7b0:	39 d4       	rcall	.+2162   	; 0x1024 <spi_writeData>
     7b2:	64 e0       	ldi	r22, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	67 d0       	rcall	.+206    	; 0x886 <gpio_out_set>
     7b8:	8f e1       	ldi	r24, 0x1F	; 31
     7ba:	9e e4       	ldi	r25, 0x4E	; 78
     7bc:	01 97       	sbiw	r24, 0x01	; 1
	_delay_ms(10);
	gpio_out_reset(PB, 4);
     7be:	f1 f7       	brne	.-4      	; 0x7bc <eeprom_write+0x20>
     7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <eeprom_write+0x26>
	spi_writeData(0x02);
     7c2:	00 00       	nop
	spi_writeData((u8)(address >> 8));
     7c4:	64 e0       	ldi	r22, 0x04	; 4
	spi_writeData((u8)(address));
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	76 d0       	rcall	.+236    	; 0x8b6 <gpio_out_reset>
	spi_writeData(data);
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	2b d4       	rcall	.+2134   	; 0x1024 <spi_writeData>
     7ce:	81 2f       	mov	r24, r17
	gpio_out_set(PB, 4);
     7d0:	29 d4       	rcall	.+2130   	; 0x1024 <spi_writeData>
     7d2:	8d 2f       	mov	r24, r29
     7d4:	27 d4       	rcall	.+2126   	; 0x1024 <spi_writeData>
     7d6:	8c 2f       	mov	r24, r28
     7d8:	25 d4       	rcall	.+2122   	; 0x1024 <spi_writeData>
     7da:	64 e0       	ldi	r22, 0x04	; 4
     7dc:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(10);
	gpio_out_reset(PB, 4);
     7de:	53 d0       	rcall	.+166    	; 0x886 <gpio_out_set>
     7e0:	8f e1       	ldi	r24, 0x1F	; 31
     7e2:	9e e4       	ldi	r25, 0x4E	; 78
     7e4:	01 97       	sbiw	r24, 0x01	; 1
	spi_writeData(0x04);
     7e6:	f1 f7       	brne	.-4      	; 0x7e4 <eeprom_write+0x48>
     7e8:	00 c0       	rjmp	.+0      	; 0x7ea <eeprom_write+0x4e>
     7ea:	00 00       	nop
	gpio_out_set(PB, 4);
     7ec:	64 e0       	ldi	r22, 0x04	; 4
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	62 d0       	rcall	.+196    	; 0x8b6 <gpio_out_reset>
     7f2:	84 e0       	ldi	r24, 0x04	; 4
     7f4:	17 d4       	rcall	.+2094   	; 0x1024 <spi_writeData>
     7f6:	64 e0       	ldi	r22, 0x04	; 4
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	45 d0       	rcall	.+138    	; 0x886 <gpio_out_set>
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	08 95       	ret

00000804 <disableJTAG>:
			break;
		case PC:
			clearBit(&PORTC, _number);
			break;
		case PD:
			clearBit(&PORTD, _number);
     804:	80 e8       	ldi	r24, 0x80	; 128
     806:	85 bf       	out	0x35, r24	; 53
     808:	85 bf       	out	0x35, r24	; 53
     80a:	08 95       	ret

0000080c <gpio_init>:
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	d6 2f       	mov	r29, r22
     814:	c4 2f       	mov	r28, r20
     816:	12 2f       	mov	r17, r18
     818:	81 30       	cpi	r24, 0x01	; 1
     81a:	89 f0       	breq	.+34     	; 0x83e <gpio_init+0x32>
     81c:	28 f0       	brcs	.+10     	; 0x828 <gpio_init+0x1c>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	c9 f0       	breq	.+50     	; 0x854 <gpio_init+0x48>
     822:	83 30       	cpi	r24, 0x03	; 3
     824:	11 f1       	breq	.+68     	; 0x86a <gpio_init+0x5e>
     826:	2b c0       	rjmp	.+86     	; 0x87e <gpio_init+0x72>
     828:	81 e2       	ldi	r24, 0x21	; 33
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	a0 d3       	rcall	.+1856   	; 0xf6e <updateBit>
     82e:	c1 11       	cpse	r28, r1
     830:	26 c0       	rjmp	.+76     	; 0x87e <gpio_init+0x72>
     832:	41 2f       	mov	r20, r17
     834:	6d 2f       	mov	r22, r29
     836:	82 e2       	ldi	r24, 0x22	; 34
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	99 d3       	rcall	.+1842   	; 0xf6e <updateBit>
     83c:	20 c0       	rjmp	.+64     	; 0x87e <gpio_init+0x72>
     83e:	84 e2       	ldi	r24, 0x24	; 36
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	95 d3       	rcall	.+1834   	; 0xf6e <updateBit>
     844:	c1 11       	cpse	r28, r1
     846:	1b c0       	rjmp	.+54     	; 0x87e <gpio_init+0x72>
     848:	41 2f       	mov	r20, r17
     84a:	6d 2f       	mov	r22, r29
     84c:	85 e2       	ldi	r24, 0x25	; 37
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	8e d3       	rcall	.+1820   	; 0xf6e <updateBit>
     852:	15 c0       	rjmp	.+42     	; 0x87e <gpio_init+0x72>
     854:	87 e2       	ldi	r24, 0x27	; 39
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	8a d3       	rcall	.+1812   	; 0xf6e <updateBit>
     85a:	c1 11       	cpse	r28, r1
     85c:	10 c0       	rjmp	.+32     	; 0x87e <gpio_init+0x72>
     85e:	41 2f       	mov	r20, r17
     860:	6d 2f       	mov	r22, r29
     862:	88 e2       	ldi	r24, 0x28	; 40
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	83 d3       	rcall	.+1798   	; 0xf6e <updateBit>
     868:	0a c0       	rjmp	.+20     	; 0x87e <gpio_init+0x72>
     86a:	8a e2       	ldi	r24, 0x2A	; 42
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	7f d3       	rcall	.+1790   	; 0xf6e <updateBit>
     870:	c1 11       	cpse	r28, r1
     872:	05 c0       	rjmp	.+10     	; 0x87e <gpio_init+0x72>
     874:	41 2f       	mov	r20, r17
     876:	6d 2f       	mov	r22, r29
     878:	8b e2       	ldi	r24, 0x2B	; 43
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	78 d3       	rcall	.+1776   	; 0xf6e <updateBit>
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	08 95       	ret

00000886 <gpio_out_set>:
	}
}
	

void gpio_out_set(port _port, u8 _number){
	switch(_port){
     886:	81 30       	cpi	r24, 0x01	; 1
     888:	51 f0       	breq	.+20     	; 0x89e <gpio_out_set+0x18>
     88a:	28 f0       	brcs	.+10     	; 0x896 <gpio_out_set+0x10>
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	59 f0       	breq	.+22     	; 0x8a6 <gpio_out_set+0x20>
     890:	83 30       	cpi	r24, 0x03	; 3
     892:	69 f0       	breq	.+26     	; 0x8ae <gpio_out_set+0x28>
     894:	08 95       	ret
		case PA:
			setBit(&PORTA, _number);
     896:	82 e2       	ldi	r24, 0x22	; 34
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	44 c3       	rjmp	.+1672   	; 0xf24 <setBit>
			break;
     89c:	08 95       	ret
		case PB:
			setBit(&PORTB, _number);
     89e:	85 e2       	ldi	r24, 0x25	; 37
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	40 c3       	rjmp	.+1664   	; 0xf24 <setBit>
			break;
		case PC:
			setBit(&PORTC, _number);
     8a4:	08 95       	ret
     8a6:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			setBit(&PORTD, _number);
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	3c c3       	rjmp	.+1656   	; 0xf24 <setBit>
     8ac:	08 95       	ret
     8ae:	8b e2       	ldi	r24, 0x2B	; 43
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	38 c3       	rjmp	.+1648   	; 0xf24 <setBit>
     8b4:	08 95       	ret

000008b6 <gpio_out_reset>:
			break;
	}
}

void gpio_out_reset(port _port, u8 _number){
	switch(_port){
     8b6:	81 30       	cpi	r24, 0x01	; 1
     8b8:	51 f0       	breq	.+20     	; 0x8ce <gpio_out_reset+0x18>
     8ba:	28 f0       	brcs	.+10     	; 0x8c6 <gpio_out_reset+0x10>
     8bc:	82 30       	cpi	r24, 0x02	; 2
     8be:	59 f0       	breq	.+22     	; 0x8d6 <gpio_out_reset+0x20>
     8c0:	83 30       	cpi	r24, 0x03	; 3
     8c2:	69 f0       	breq	.+26     	; 0x8de <gpio_out_reset+0x28>
     8c4:	08 95       	ret
		case PA:
			clearBit(&PORTA, _number);
     8c6:	82 e2       	ldi	r24, 0x22	; 34
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	38 c3       	rjmp	.+1648   	; 0xf3c <clearBit>
			break;
     8cc:	08 95       	ret
		case PB:
			clearBit(&PORTB, _number);
     8ce:	85 e2       	ldi	r24, 0x25	; 37
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	34 c3       	rjmp	.+1640   	; 0xf3c <clearBit>
			break;
		case PC:
			clearBit(&PORTC, _number);
     8d4:	08 95       	ret
     8d6:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			clearBit(&PORTD, _number);
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	30 c3       	rjmp	.+1632   	; 0xf3c <clearBit>
     8dc:	08 95       	ret
     8de:	8b e2       	ldi	r24, 0x2B	; 43
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	2c c3       	rjmp	.+1624   	; 0xf3c <clearBit>
     8e4:	08 95       	ret

000008e6 <gpio_out_toggle>:
			break;
	}
}

void gpio_out_toggle(port _port, u8 _number){
	switch(_port){
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	51 f0       	breq	.+20     	; 0x8fe <gpio_out_toggle+0x18>
     8ea:	28 f0       	brcs	.+10     	; 0x8f6 <gpio_out_toggle+0x10>
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	59 f0       	breq	.+22     	; 0x906 <gpio_out_toggle+0x20>
     8f0:	83 30       	cpi	r24, 0x03	; 3
     8f2:	69 f0       	breq	.+26     	; 0x90e <gpio_out_toggle+0x28>
     8f4:	08 95       	ret
		case PA:
			toggleBit(&PORTA, _number);
     8f6:	82 e2       	ldi	r24, 0x22	; 34
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	2d c3       	rjmp	.+1626   	; 0xf56 <toggleBit>
			break;
     8fc:	08 95       	ret
		case PB:
			toggleBit(&PORTB, _number);
     8fe:	85 e2       	ldi	r24, 0x25	; 37
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	29 c3       	rjmp	.+1618   	; 0xf56 <toggleBit>
			break;
		case PC:
			toggleBit(&PORTC, _number);
     904:	08 95       	ret
     906:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			toggleBit(&PORTD, _number);
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	25 c3       	rjmp	.+1610   	; 0xf56 <toggleBit>
     90c:	08 95       	ret
     90e:	8b e2       	ldi	r24, 0x2B	; 43
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	21 c3       	rjmp	.+1602   	; 0xf56 <toggleBit>
     914:	08 95       	ret

00000916 <lcd_clearDisplay>:
u16 auxTemperatureVoltage;
extern u16 temperatureVoltage;
extern bool manualMode;

void lcd_clearDisplay(){
	gpio_out_reset(PD, 5);
     916:	65 e0       	ldi	r22, 0x05	; 5
     918:	83 e0       	ldi	r24, 0x03	; 3
     91a:	cd df       	rcall	.-102    	; 0x8b6 <gpio_out_reset>
	gpio_out_reset(PD, 6);
     91c:	66 e0       	ldi	r22, 0x06	; 6
     91e:	83 e0       	ldi	r24, 0x03	; 3
     920:	ca df       	rcall	.-108    	; 0x8b6 <gpio_out_reset>
	PORTC = 0x01;
     922:	81 e0       	ldi	r24, 0x01	; 1
	gpio_out_set(PD, 4);
     924:	88 b9       	out	0x08, r24	; 8
     926:	64 e0       	ldi	r22, 0x04	; 4
     928:	83 e0       	ldi	r24, 0x03	; 3
     92a:	ad df       	rcall	.-166    	; 0x886 <gpio_out_set>
     92c:	8f e0       	ldi	r24, 0x0F	; 15
     92e:	97 e2       	ldi	r25, 0x27	; 39
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	f1 f7       	brne	.-4      	; 0x930 <lcd_clearDisplay+0x1a>
	_delay_ms(5);
	gpio_out_reset(PD, 4);
     934:	00 c0       	rjmp	.+0      	; 0x936 <lcd_clearDisplay+0x20>
     936:	00 00       	nop
     938:	64 e0       	ldi	r22, 0x04	; 4
     93a:	83 e0       	ldi	r24, 0x03	; 3
     93c:	bc df       	rcall	.-136    	; 0x8b6 <gpio_out_reset>
     93e:	8f e0       	ldi	r24, 0x0F	; 15
     940:	97 e2       	ldi	r25, 0x27	; 39
     942:	01 97       	sbiw	r24, 0x01	; 1
     944:	f1 f7       	brne	.-4      	; 0x942 <lcd_clearDisplay+0x2c>
     946:	00 c0       	rjmp	.+0      	; 0x948 <lcd_clearDisplay+0x32>
     948:	00 00       	nop
     94a:	08 95       	ret

0000094c <lcd_resetCursor>:
	_delay_ms(5);
}

void lcd_resetCursor(){
	/* Set DDRAM address to 00H */
	gpio_out_reset(PD, 5);
     94c:	65 e0       	ldi	r22, 0x05	; 5
     94e:	83 e0       	ldi	r24, 0x03	; 3
     950:	b2 df       	rcall	.-156    	; 0x8b6 <gpio_out_reset>
	gpio_out_reset(PD, 6);
     952:	66 e0       	ldi	r22, 0x06	; 6
     954:	83 e0       	ldi	r24, 0x03	; 3
     956:	af df       	rcall	.-162    	; 0x8b6 <gpio_out_reset>
	PORTC = 0x80;
     958:	80 e8       	ldi	r24, 0x80	; 128
	gpio_out_set(PD, 4);
     95a:	88 b9       	out	0x08, r24	; 8
     95c:	64 e0       	ldi	r22, 0x04	; 4
     95e:	83 e0       	ldi	r24, 0x03	; 3
     960:	92 df       	rcall	.-220    	; 0x886 <gpio_out_set>
     962:	8f e0       	ldi	r24, 0x0F	; 15
     964:	97 e2       	ldi	r25, 0x27	; 39
     966:	01 97       	sbiw	r24, 0x01	; 1
     968:	f1 f7       	brne	.-4      	; 0x966 <lcd_resetCursor+0x1a>
	_delay_ms(5);
	gpio_out_reset(PD, 4);
     96a:	00 c0       	rjmp	.+0      	; 0x96c <lcd_resetCursor+0x20>
     96c:	00 00       	nop
     96e:	64 e0       	ldi	r22, 0x04	; 4
     970:	83 e0       	ldi	r24, 0x03	; 3
     972:	a1 df       	rcall	.-190    	; 0x8b6 <gpio_out_reset>
     974:	8f e0       	ldi	r24, 0x0F	; 15
     976:	97 e2       	ldi	r25, 0x27	; 39
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	f1 f7       	brne	.-4      	; 0x978 <lcd_resetCursor+0x2c>
     97c:	00 c0       	rjmp	.+0      	; 0x97e <lcd_resetCursor+0x32>
     97e:	00 00       	nop
     980:	08 95       	ret

00000982 <lcd_init>:
	_delay_ms(5);
}

void lcd_init(){
     982:	cf 93       	push	r28
     984:	c4 e0       	ldi	r28, 0x04	; 4
	int index;
	/* Enable, R/nW, RS */
	for(index = 4; index < 7; index++){
		gpio_init(PD, index, OUTPUT, NO_PULL);
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	6c 2f       	mov	r22, r28
     98c:	83 e0       	ldi	r24, 0x03	; 3
     98e:	3e df       	rcall	.-388    	; 0x80c <gpio_init>
		gpio_out_reset(PD, index);
     990:	6c 2f       	mov	r22, r28
     992:	83 e0       	ldi	r24, 0x03	; 3
     994:	90 df       	rcall	.-224    	; 0x8b6 <gpio_out_reset>
     996:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_init(){
	int index;
	/* Enable, R/nW, RS */
	for(index = 4; index < 7; index++){
     998:	c7 30       	cpi	r28, 0x07	; 7
     99a:	a9 f7       	brne	.-22     	; 0x986 <lcd_init+0x4>
     99c:	c0 e0       	ldi	r28, 0x00	; 0
		gpio_init(PD, index, OUTPUT, NO_PULL);
		gpio_out_reset(PD, index);
	}
	/* Data port */
	for(index = 0; index < 8; index++){
		gpio_init(PC, index, OUTPUT, NO_PULL);
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	41 e0       	ldi	r20, 0x01	; 1
     9a2:	6c 2f       	mov	r22, r28
     9a4:	82 e0       	ldi	r24, 0x02	; 2
		gpio_out_reset(PC, index);
     9a6:	32 df       	rcall	.-412    	; 0x80c <gpio_init>
     9a8:	6c 2f       	mov	r22, r28
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	84 df       	rcall	.-248    	; 0x8b6 <gpio_out_reset>
     9ae:	cf 5f       	subi	r28, 0xFF	; 255
	for(index = 4; index < 7; index++){
		gpio_init(PD, index, OUTPUT, NO_PULL);
		gpio_out_reset(PD, index);
	}
	/* Data port */
	for(index = 0; index < 8; index++){
     9b0:	c8 30       	cpi	r28, 0x08	; 8
     9b2:	a9 f7       	brne	.-22     	; 0x99e <lcd_init+0x1c>
     9b4:	2f ef       	ldi	r18, 0xFF	; 255
     9b6:	89 e6       	ldi	r24, 0x69	; 105
     9b8:	98 e1       	ldi	r25, 0x18	; 24
     9ba:	21 50       	subi	r18, 0x01	; 1
     9bc:	80 40       	sbci	r24, 0x00	; 0
     9be:	90 40       	sbci	r25, 0x00	; 0
     9c0:	e1 f7       	brne	.-8      	; 0x9ba <lcd_init+0x38>
		gpio_out_reset(PC, index);
	}
	
	_delay_ms(1000);
	/* Clear screen */
	lcd_clearDisplay();
     9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <lcd_init+0x42>
	
	/* 8 data bits, 2 lines */
	gpio_out_reset(PD, 5);
     9c4:	00 00       	nop
     9c6:	a7 df       	rcall	.-178    	; 0x916 <lcd_clearDisplay>
     9c8:	65 e0       	ldi	r22, 0x05	; 5
	gpio_out_reset(PD, 6);
     9ca:	83 e0       	ldi	r24, 0x03	; 3
     9cc:	74 df       	rcall	.-280    	; 0x8b6 <gpio_out_reset>
     9ce:	66 e0       	ldi	r22, 0x06	; 6
	PORTC = 0x38;
     9d0:	83 e0       	ldi	r24, 0x03	; 3
     9d2:	71 df       	rcall	.-286    	; 0x8b6 <gpio_out_reset>
	gpio_out_set(PD, 4);
     9d4:	88 e3       	ldi	r24, 0x38	; 56
     9d6:	88 b9       	out	0x08, r24	; 8
     9d8:	64 e0       	ldi	r22, 0x04	; 4
     9da:	83 e0       	ldi	r24, 0x03	; 3
     9dc:	54 df       	rcall	.-344    	; 0x886 <gpio_out_set>
     9de:	8f e0       	ldi	r24, 0x0F	; 15
     9e0:	97 e2       	ldi	r25, 0x27	; 39
     9e2:	01 97       	sbiw	r24, 0x01	; 1
	_delay_ms(5);
	gpio_out_reset(PD, 4);
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <lcd_init+0x60>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <lcd_init+0x66>
     9e8:	00 00       	nop
     9ea:	64 e0       	ldi	r22, 0x04	; 4
     9ec:	83 e0       	ldi	r24, 0x03	; 3
     9ee:	63 df       	rcall	.-314    	; 0x8b6 <gpio_out_reset>
     9f0:	8f e0       	ldi	r24, 0x0F	; 15
     9f2:	97 e2       	ldi	r25, 0x27	; 39
	_delay_ms(5);
	
	/* Display on */
	gpio_out_reset(PD, 5);
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	f1 f7       	brne	.-4      	; 0x9f4 <lcd_init+0x72>
     9f8:	00 c0       	rjmp	.+0      	; 0x9fa <lcd_init+0x78>
	gpio_out_reset(PD, 6);
     9fa:	00 00       	nop
     9fc:	65 e0       	ldi	r22, 0x05	; 5
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	5a df       	rcall	.-332    	; 0x8b6 <gpio_out_reset>
	PORTC = 0x0D;
     a02:	66 e0       	ldi	r22, 0x06	; 6
	gpio_out_set(PD, 4);
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	57 df       	rcall	.-338    	; 0x8b6 <gpio_out_reset>
     a08:	8d e0       	ldi	r24, 0x0D	; 13
     a0a:	88 b9       	out	0x08, r24	; 8
     a0c:	64 e0       	ldi	r22, 0x04	; 4
     a0e:	83 e0       	ldi	r24, 0x03	; 3
     a10:	3a df       	rcall	.-396    	; 0x886 <gpio_out_set>
     a12:	8f e0       	ldi	r24, 0x0F	; 15
	_delay_ms(5);
	gpio_out_reset(PD, 4);
     a14:	97 e2       	ldi	r25, 0x27	; 39
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	f1 f7       	brne	.-4      	; 0xa16 <lcd_init+0x94>
     a1a:	00 c0       	rjmp	.+0      	; 0xa1c <lcd_init+0x9a>
     a1c:	00 00       	nop
     a1e:	64 e0       	ldi	r22, 0x04	; 4
     a20:	83 e0       	ldi	r24, 0x03	; 3
     a22:	49 df       	rcall	.-366    	; 0x8b6 <gpio_out_reset>
	_delay_ms(5);
	
	/* Cursor shift to the right */
	gpio_out_reset(PD, 5);
     a24:	8f e0       	ldi	r24, 0x0F	; 15
     a26:	97 e2       	ldi	r25, 0x27	; 39
     a28:	01 97       	sbiw	r24, 0x01	; 1
     a2a:	f1 f7       	brne	.-4      	; 0xa28 <lcd_init+0xa6>
	gpio_out_reset(PD, 6);
     a2c:	00 c0       	rjmp	.+0      	; 0xa2e <lcd_init+0xac>
     a2e:	00 00       	nop
     a30:	65 e0       	ldi	r22, 0x05	; 5
	PORTC = 0x14;
     a32:	83 e0       	ldi	r24, 0x03	; 3
     a34:	40 df       	rcall	.-384    	; 0x8b6 <gpio_out_reset>
	gpio_out_set(PD, 4);
     a36:	66 e0       	ldi	r22, 0x06	; 6
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	3d df       	rcall	.-390    	; 0x8b6 <gpio_out_reset>
     a3c:	84 e1       	ldi	r24, 0x14	; 20
     a3e:	88 b9       	out	0x08, r24	; 8
     a40:	64 e0       	ldi	r22, 0x04	; 4
     a42:	83 e0       	ldi	r24, 0x03	; 3
     a44:	20 df       	rcall	.-448    	; 0x886 <gpio_out_set>
     a46:	8f e0       	ldi	r24, 0x0F	; 15
	_delay_ms(5);
	gpio_out_reset(PD, 4);
     a48:	97 e2       	ldi	r25, 0x27	; 39
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	f1 f7       	brne	.-4      	; 0xa4a <lcd_init+0xc8>
     a4e:	00 c0       	rjmp	.+0      	; 0xa50 <lcd_init+0xce>
     a50:	00 00       	nop
     a52:	64 e0       	ldi	r22, 0x04	; 4
     a54:	83 e0       	ldi	r24, 0x03	; 3
     a56:	2f df       	rcall	.-418    	; 0x8b6 <gpio_out_reset>
     a58:	8f e0       	ldi	r24, 0x0F	; 15
     a5a:	97 e2       	ldi	r25, 0x27	; 39
	_delay_ms(5);
	
	/* Set DDRAM address to 00H */
	lcd_resetCursor();
     a5c:	01 97       	sbiw	r24, 0x01	; 1
     a5e:	f1 f7       	brne	.-4      	; 0xa5c <lcd_init+0xda>
}
     a60:	00 c0       	rjmp	.+0      	; 0xa62 <lcd_init+0xe0>
     a62:	00 00       	nop
     a64:	73 df       	rcall	.-282    	; 0x94c <lcd_resetCursor>
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <lcd_newLine>:

void lcd_newLine(){
	/* Set DDRAM address to 40H */
	gpio_out_reset(PD, 5);
     a6a:	65 e0       	ldi	r22, 0x05	; 5
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	23 df       	rcall	.-442    	; 0x8b6 <gpio_out_reset>
	gpio_out_reset(PD, 6);
     a70:	66 e0       	ldi	r22, 0x06	; 6
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	20 df       	rcall	.-448    	; 0x8b6 <gpio_out_reset>
	PORTC = 0xC0;
     a76:	80 ec       	ldi	r24, 0xC0	; 192
	gpio_out_set(PD, 4);
     a78:	88 b9       	out	0x08, r24	; 8
     a7a:	64 e0       	ldi	r22, 0x04	; 4
     a7c:	83 e0       	ldi	r24, 0x03	; 3
     a7e:	03 df       	rcall	.-506    	; 0x886 <gpio_out_set>
     a80:	8f e0       	ldi	r24, 0x0F	; 15
     a82:	97 e2       	ldi	r25, 0x27	; 39
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	f1 f7       	brne	.-4      	; 0xa84 <lcd_newLine+0x1a>
	_delay_ms(5);
	gpio_out_reset(PD, 4);
     a88:	00 c0       	rjmp	.+0      	; 0xa8a <lcd_newLine+0x20>
     a8a:	00 00       	nop
     a8c:	64 e0       	ldi	r22, 0x04	; 4
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	12 df       	rcall	.-476    	; 0x8b6 <gpio_out_reset>
     a92:	8f e0       	ldi	r24, 0x0F	; 15
     a94:	97 e2       	ldi	r25, 0x27	; 39
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	f1 f7       	brne	.-4      	; 0xa96 <lcd_newLine+0x2c>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <lcd_newLine+0x32>
     a9c:	00 00       	nop
     a9e:	08 95       	ret

00000aa0 <lcd_writeChar>:
	_delay_ms(5);
}

void lcd_writeChar(char character){
     aa0:	cf 93       	push	r28
     aa2:	c8 2f       	mov	r28, r24
	gpio_out_reset(PD, 5);
     aa4:	65 e0       	ldi	r22, 0x05	; 5
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	06 df       	rcall	.-500    	; 0x8b6 <gpio_out_reset>
	gpio_out_set(PD, 6);
     aaa:	66 e0       	ldi	r22, 0x06	; 6
     aac:	83 e0       	ldi	r24, 0x03	; 3
     aae:	eb de       	rcall	.-554    	; 0x886 <gpio_out_set>
	PORTC = character;
	gpio_out_set(PD, 4);
     ab0:	c8 b9       	out	0x08, r28	; 8
     ab2:	64 e0       	ldi	r22, 0x04	; 4
     ab4:	83 e0       	ldi	r24, 0x03	; 3
     ab6:	e7 de       	rcall	.-562    	; 0x886 <gpio_out_set>
     ab8:	8f e0       	ldi	r24, 0x0F	; 15
     aba:	97 e2       	ldi	r25, 0x27	; 39
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	f1 f7       	brne	.-4      	; 0xabc <lcd_writeChar+0x1c>
	_delay_ms(5);
	gpio_out_reset(PD, 4);
     ac0:	00 c0       	rjmp	.+0      	; 0xac2 <lcd_writeChar+0x22>
     ac2:	00 00       	nop
     ac4:	64 e0       	ldi	r22, 0x04	; 4
     ac6:	83 e0       	ldi	r24, 0x03	; 3
     ac8:	f6 de       	rcall	.-532    	; 0x8b6 <gpio_out_reset>
     aca:	8f e0       	ldi	r24, 0x0F	; 15
     acc:	97 e2       	ldi	r25, 0x27	; 39
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	f1 f7       	brne	.-4      	; 0xace <lcd_writeChar+0x2e>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <lcd_writeChar+0x34>
	_delay_ms(5);
}
     ad4:	00 00       	nop
     ad6:	cf 91       	pop	r28
     ad8:	08 95       	ret

00000ada <lcd_writeString>:

void lcd_writeString(char *string){
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
	int index;
	int stringLength = strlen(string);
     ae2:	fc 01       	movw	r30, r24
     ae4:	01 90       	ld	r0, Z+
     ae6:	00 20       	and	r0, r0
     ae8:	e9 f7       	brne	.-6      	; 0xae4 <lcd_writeString+0xa>
     aea:	31 97       	sbiw	r30, 0x01	; 1
     aec:	e8 1b       	sub	r30, r24
     aee:	f9 0b       	sbc	r31, r25
	for(index = 0; index < stringLength; index++){
     af0:	1e 16       	cp	r1, r30
     af2:	1f 06       	cpc	r1, r31
     af4:	4c f4       	brge	.+18     	; 0xb08 <lcd_writeString+0x2e>
     af6:	ec 01       	movw	r28, r24
     af8:	8c 01       	movw	r16, r24
     afa:	0e 0f       	add	r16, r30
     afc:	1f 1f       	adc	r17, r31
		lcd_writeChar(string[index]);
     afe:	89 91       	ld	r24, Y+
     b00:	cf df       	rcall	.-98     	; 0xaa0 <lcd_writeChar>
}

void lcd_writeString(char *string){
	int index;
	int stringLength = strlen(string);
	for(index = 0; index < stringLength; index++){
     b02:	c0 17       	cp	r28, r16
     b04:	d1 07       	cpc	r29, r17
     b06:	d9 f7       	brne	.-10     	; 0xafe <lcd_writeString+0x24>
		lcd_writeChar(string[index]);
	}
}
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	08 95       	ret

00000b12 <lcd_displayTemperature>:
			lcd_writeString(">4.10.No event");
			break;
	}
}

void lcd_displayTemperature(u16 temperatureVoltage){
     b12:	cf 92       	push	r12
     b14:	df 92       	push	r13
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
	temperatureVoltage = temperatureVoltage * 4.41837732160312805474095796676;
     b1a:	bc 01       	movw	r22, r24
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	7f d3       	rcall	.+1790   	; 0x1220 <__floatunsisf>
     b22:	29 e5       	ldi	r18, 0x59	; 89
     b24:	33 e6       	ldi	r19, 0x63	; 99
     b26:	4d e8       	ldi	r20, 0x8D	; 141
     b28:	50 e4       	ldi	r21, 0x40	; 64
     b2a:	08 d4       	rcall	.+2064   	; 0x133c <__mulsf3>
     b2c:	4d d3       	rcall	.+1690   	; 0x11c8 <__fixunssfsi>
     b2e:	6b 01       	movw	r12, r22
     b30:	7c 01       	movw	r14, r24
	auxTemperatureVoltage = temperatureVoltage;
     b32:	70 93 84 03 	sts	0x0384, r23	; 0x800384 <auxTemperatureVoltage+0x1>
	lcd_clearDisplay();
	lcd_resetCursor();
     b36:	60 93 83 03 	sts	0x0383, r22	; 0x800383 <auxTemperatureVoltage>
	lcd_writeString("10bit resolution: ");
     b3a:	ed de       	rcall	.-550    	; 0x916 <lcd_clearDisplay>
     b3c:	07 df       	rcall	.-498    	; 0x94c <lcd_resetCursor>
     b3e:	82 e2       	ldi	r24, 0x22	; 34
	lcd_newLine();
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	cb df       	rcall	.-106    	; 0xada <lcd_writeString>
	lcd_writeChar(auxTemperatureVoltage / 1000 + 48);
     b44:	92 df       	rcall	.-220    	; 0xa6a <lcd_newLine>
     b46:	20 91 83 03 	lds	r18, 0x0383	; 0x800383 <auxTemperatureVoltage>
     b4a:	30 91 84 03 	lds	r19, 0x0384	; 0x800384 <auxTemperatureVoltage+0x1>
     b4e:	36 95       	lsr	r19
     b50:	27 95       	ror	r18
     b52:	36 95       	lsr	r19
     b54:	27 95       	ror	r18
     b56:	36 95       	lsr	r19
     b58:	27 95       	ror	r18
     b5a:	a5 ec       	ldi	r26, 0xC5	; 197
     b5c:	b0 e2       	ldi	r27, 0x20	; 32
     b5e:	51 d4       	rcall	.+2210   	; 0x1402 <__umulhisi3>
     b60:	92 95       	swap	r25
     b62:	82 95       	swap	r24
     b64:	8f 70       	andi	r24, 0x0F	; 15
     b66:	89 27       	eor	r24, r25
     b68:	9f 70       	andi	r25, 0x0F	; 15
     b6a:	89 27       	eor	r24, r25
	auxTemperatureVoltage = temperatureVoltage % 1000;
     b6c:	80 5d       	subi	r24, 0xD0	; 208
     b6e:	98 df       	rcall	.-208    	; 0xaa0 <lcd_writeChar>
     b70:	96 01       	movw	r18, r12
     b72:	36 95       	lsr	r19
     b74:	27 95       	ror	r18
     b76:	36 95       	lsr	r19
     b78:	27 95       	ror	r18
     b7a:	36 95       	lsr	r19
     b7c:	27 95       	ror	r18
     b7e:	a5 ec       	ldi	r26, 0xC5	; 197
     b80:	b0 e2       	ldi	r27, 0x20	; 32
     b82:	3f d4       	rcall	.+2174   	; 0x1402 <__umulhisi3>
     b84:	92 95       	swap	r25
     b86:	82 95       	swap	r24
     b88:	8f 70       	andi	r24, 0x0F	; 15
     b8a:	89 27       	eor	r24, r25
     b8c:	9f 70       	andi	r25, 0x0F	; 15
     b8e:	89 27       	eor	r24, r25
     b90:	48 ee       	ldi	r20, 0xE8	; 232
     b92:	53 e0       	ldi	r21, 0x03	; 3
     b94:	84 9f       	mul	r24, r20
     b96:	90 01       	movw	r18, r0
     b98:	85 9f       	mul	r24, r21
     b9a:	30 0d       	add	r19, r0
     b9c:	94 9f       	mul	r25, r20
     b9e:	30 0d       	add	r19, r0
     ba0:	11 24       	eor	r1, r1
     ba2:	c6 01       	movw	r24, r12
     ba4:	82 1b       	sub	r24, r18
     ba6:	93 0b       	sbc	r25, r19
     ba8:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <auxTemperatureVoltage+0x1>
	lcd_writeChar('.');
     bac:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <auxTemperatureVoltage>
	lcd_writeChar(auxTemperatureVoltage / 100 + 48);
     bb0:	8e e2       	ldi	r24, 0x2E	; 46
     bb2:	76 df       	rcall	.-276    	; 0xaa0 <lcd_writeChar>
     bb4:	20 91 83 03 	lds	r18, 0x0383	; 0x800383 <auxTemperatureVoltage>
     bb8:	30 91 84 03 	lds	r19, 0x0384	; 0x800384 <auxTemperatureVoltage+0x1>
     bbc:	36 95       	lsr	r19
     bbe:	27 95       	ror	r18
     bc0:	36 95       	lsr	r19
     bc2:	27 95       	ror	r18
     bc4:	ab e7       	ldi	r26, 0x7B	; 123
     bc6:	b4 e1       	ldi	r27, 0x14	; 20
     bc8:	1c d4       	rcall	.+2104   	; 0x1402 <__umulhisi3>
     bca:	96 95       	lsr	r25
	auxTemperatureVoltage = temperatureVoltage % 100;
     bcc:	87 95       	ror	r24
     bce:	80 5d       	subi	r24, 0xD0	; 208
     bd0:	67 df       	rcall	.-306    	; 0xaa0 <lcd_writeChar>
     bd2:	96 01       	movw	r18, r12
     bd4:	36 95       	lsr	r19
     bd6:	27 95       	ror	r18
     bd8:	36 95       	lsr	r19
     bda:	27 95       	ror	r18
     bdc:	ab e7       	ldi	r26, 0x7B	; 123
     bde:	b4 e1       	ldi	r27, 0x14	; 20
     be0:	10 d4       	rcall	.+2080   	; 0x1402 <__umulhisi3>
     be2:	9c 01       	movw	r18, r24
     be4:	36 95       	lsr	r19
     be6:	27 95       	ror	r18
     be8:	44 e6       	ldi	r20, 0x64	; 100
     bea:	42 9f       	mul	r20, r18
     bec:	c0 01       	movw	r24, r0
     bee:	43 9f       	mul	r20, r19
     bf0:	90 0d       	add	r25, r0
     bf2:	11 24       	eor	r1, r1
     bf4:	96 01       	movw	r18, r12
     bf6:	28 1b       	sub	r18, r24
	lcd_writeChar(auxTemperatureVoltage / 10 + 48);
     bf8:	39 0b       	sbc	r19, r25
     bfa:	30 93 84 03 	sts	0x0384, r19	; 0x800384 <auxTemperatureVoltage+0x1>
     bfe:	20 93 83 03 	sts	0x0383, r18	; 0x800383 <auxTemperatureVoltage>
     c02:	ad ec       	ldi	r26, 0xCD	; 205
     c04:	bc ec       	ldi	r27, 0xCC	; 204
     c06:	fd d3       	rcall	.+2042   	; 0x1402 <__umulhisi3>
     c08:	96 95       	lsr	r25
     c0a:	87 95       	ror	r24
     c0c:	96 95       	lsr	r25
     c0e:	87 95       	ror	r24
	auxTemperatureVoltage = temperatureVoltage % 10;
     c10:	96 95       	lsr	r25
     c12:	87 95       	ror	r24
     c14:	80 5d       	subi	r24, 0xD0	; 208
     c16:	44 df       	rcall	.-376    	; 0xaa0 <lcd_writeChar>
     c18:	96 01       	movw	r18, r12
     c1a:	ad ec       	ldi	r26, 0xCD	; 205
     c1c:	bc ec       	ldi	r27, 0xCC	; 204
     c1e:	f1 d3       	rcall	.+2018   	; 0x1402 <__umulhisi3>
     c20:	96 95       	lsr	r25
     c22:	87 95       	ror	r24
     c24:	96 95       	lsr	r25
     c26:	87 95       	ror	r24
     c28:	96 95       	lsr	r25
     c2a:	87 95       	ror	r24
     c2c:	9c 01       	movw	r18, r24
     c2e:	22 0f       	add	r18, r18
     c30:	33 1f       	adc	r19, r19
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	82 0f       	add	r24, r18
     c40:	93 1f       	adc	r25, r19
     c42:	96 01       	movw	r18, r12
     c44:	28 1b       	sub	r18, r24
     c46:	39 0b       	sbc	r19, r25
	lcd_writeChar(auxTemperatureVoltage + 48);
     c48:	c9 01       	movw	r24, r18
     c4a:	30 93 84 03 	sts	0x0384, r19	; 0x800384 <auxTemperatureVoltage+0x1>
	lcd_writeChar('V');
     c4e:	20 93 83 03 	sts	0x0383, r18	; 0x800383 <auxTemperatureVoltage>
     c52:	80 5d       	subi	r24, 0xD0	; 208
     c54:	25 df       	rcall	.-438    	; 0xaa0 <lcd_writeChar>
     c56:	86 e5       	ldi	r24, 0x56	; 86
     c58:	23 df       	rcall	.-442    	; 0xaa0 <lcd_writeChar>
     c5a:	ff 90       	pop	r15
     c5c:	ef 90       	pop	r14
     c5e:	df 90       	pop	r13
     c60:	cf 90       	pop	r12
     c62:	08 95       	ret

00000c64 <lcd_displayMenu>:
	for(index = 0; index < stringLength; index++){
		lcd_writeChar(string[index]);
	}
}

void lcd_displayMenu(u16 menuState){
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
	switch(menuState){
     c68:	81 15       	cp	r24, r1
     c6a:	21 e3       	ldi	r18, 0x31	; 49
     c6c:	92 07       	cpc	r25, r18
     c6e:	09 f4       	brne	.+2      	; 0xc72 <lcd_displayMenu+0xe>
     c70:	f5 c0       	rjmp	.+490    	; 0xe5c <lcd_displayMenu+0x1f8>
     c72:	a0 f5       	brcc	.+104    	; 0xcdc <lcd_displayMenu+0x78>
     c74:	81 15       	cp	r24, r1
     c76:	22 e1       	ldi	r18, 0x12	; 18
     c78:	92 07       	cpc	r25, r18
     c7a:	09 f4       	brne	.+2      	; 0xc7e <lcd_displayMenu+0x1a>
     c7c:	ad c0       	rjmp	.+346    	; 0xdd8 <lcd_displayMenu+0x174>
     c7e:	a0 f4       	brcc	.+40     	; 0xca8 <lcd_displayMenu+0x44>
     c80:	81 15       	cp	r24, r1
     c82:	20 e1       	ldi	r18, 0x10	; 16
     c84:	92 07       	cpc	r25, r18
     c86:	09 f4       	brne	.+2      	; 0xc8a <lcd_displayMenu+0x26>
     c88:	6c c0       	rjmp	.+216    	; 0xd62 <lcd_displayMenu+0xfe>
     c8a:	20 f4       	brcc	.+8      	; 0xc94 <lcd_displayMenu+0x30>
     c8c:	89 2b       	or	r24, r25
     c8e:	09 f4       	brne	.+2      	; 0xc92 <lcd_displayMenu+0x2e>
     c90:	5f c0       	rjmp	.+190    	; 0xd50 <lcd_displayMenu+0xec>
     c92:	45 c1       	rjmp	.+650    	; 0xf1e <lcd_displayMenu+0x2ba>
     c94:	81 15       	cp	r24, r1
     c96:	21 e1       	ldi	r18, 0x11	; 17
     c98:	92 07       	cpc	r25, r18
     c9a:	09 f4       	brne	.+2      	; 0xc9e <lcd_displayMenu+0x3a>
     c9c:	86 c0       	rjmp	.+268    	; 0xdaa <lcd_displayMenu+0x146>
     c9e:	80 31       	cpi	r24, 0x10	; 16
     ca0:	91 41       	sbci	r25, 0x11	; 17
     ca2:	09 f4       	brne	.+2      	; 0xca6 <lcd_displayMenu+0x42>
     ca4:	8b c0       	rjmp	.+278    	; 0xdbc <lcd_displayMenu+0x158>
     ca6:	3b c1       	rjmp	.+630    	; 0xf1e <lcd_displayMenu+0x2ba>
     ca8:	81 15       	cp	r24, r1
     caa:	21 e2       	ldi	r18, 0x21	; 33
     cac:	92 07       	cpc	r25, r18
     cae:	09 f4       	brne	.+2      	; 0xcb2 <lcd_displayMenu+0x4e>
     cb0:	a5 c0       	rjmp	.+330    	; 0xdfc <lcd_displayMenu+0x198>
     cb2:	50 f4       	brcc	.+20     	; 0xcc8 <lcd_displayMenu+0x64>
     cb4:	81 15       	cp	r24, r1
     cb6:	23 e1       	ldi	r18, 0x13	; 19
     cb8:	92 07       	cpc	r25, r18
     cba:	09 f4       	brne	.+2      	; 0xcbe <lcd_displayMenu+0x5a>
     cbc:	96 c0       	rjmp	.+300    	; 0xdea <lcd_displayMenu+0x186>
     cbe:	81 15       	cp	r24, r1
     cc0:	90 42       	sbci	r25, 0x20	; 32
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <lcd_displayMenu+0x62>
     cc4:	57 c0       	rjmp	.+174    	; 0xd74 <lcd_displayMenu+0x110>
     cc6:	2b c1       	rjmp	.+598    	; 0xf1e <lcd_displayMenu+0x2ba>
     cc8:	81 15       	cp	r24, r1
     cca:	22 e2       	ldi	r18, 0x22	; 34
     ccc:	92 07       	cpc	r25, r18
     cce:	09 f4       	brne	.+2      	; 0xcd2 <lcd_displayMenu+0x6e>
     cd0:	ad c0       	rjmp	.+346    	; 0xe2c <lcd_displayMenu+0x1c8>
     cd2:	81 15       	cp	r24, r1
     cd4:	90 43       	sbci	r25, 0x30	; 48
     cd6:	09 f4       	brne	.+2      	; 0xcda <lcd_displayMenu+0x76>
     cd8:	56 c0       	rjmp	.+172    	; 0xd86 <lcd_displayMenu+0x122>
     cda:	21 c1       	rjmp	.+578    	; 0xf1e <lcd_displayMenu+0x2ba>
     cdc:	81 15       	cp	r24, r1
     cde:	25 e4       	ldi	r18, 0x45	; 69
     ce0:	92 07       	cpc	r25, r18
     ce2:	09 f4       	brne	.+2      	; 0xce6 <lcd_displayMenu+0x82>
     ce4:	e7 c0       	rjmp	.+462    	; 0xeb4 <lcd_displayMenu+0x250>
     ce6:	d0 f4       	brcc	.+52     	; 0xd1c <lcd_displayMenu+0xb8>
     ce8:	81 15       	cp	r24, r1
     cea:	22 e4       	ldi	r18, 0x42	; 66
     cec:	92 07       	cpc	r25, r18
     cee:	09 f4       	brne	.+2      	; 0xcf2 <lcd_displayMenu+0x8e>
     cf0:	c6 c0       	rjmp	.+396    	; 0xe7e <lcd_displayMenu+0x21a>
     cf2:	50 f4       	brcc	.+20     	; 0xd08 <lcd_displayMenu+0xa4>
     cf4:	81 15       	cp	r24, r1
     cf6:	20 e4       	ldi	r18, 0x40	; 64
     cf8:	92 07       	cpc	r25, r18
     cfa:	09 f4       	brne	.+2      	; 0xcfe <lcd_displayMenu+0x9a>
     cfc:	4d c0       	rjmp	.+154    	; 0xd98 <lcd_displayMenu+0x134>
     cfe:	81 15       	cp	r24, r1
     d00:	91 44       	sbci	r25, 0x41	; 65
     d02:	09 f4       	brne	.+2      	; 0xd06 <lcd_displayMenu+0xa2>
     d04:	b3 c0       	rjmp	.+358    	; 0xe6c <lcd_displayMenu+0x208>
     d06:	0b c1       	rjmp	.+534    	; 0xf1e <lcd_displayMenu+0x2ba>
     d08:	81 15       	cp	r24, r1
     d0a:	23 e4       	ldi	r18, 0x43	; 67
     d0c:	92 07       	cpc	r25, r18
     d0e:	09 f4       	brne	.+2      	; 0xd12 <lcd_displayMenu+0xae>
     d10:	bf c0       	rjmp	.+382    	; 0xe90 <lcd_displayMenu+0x22c>
     d12:	81 15       	cp	r24, r1
     d14:	94 44       	sbci	r25, 0x44	; 68
     d16:	09 f4       	brne	.+2      	; 0xd1a <lcd_displayMenu+0xb6>
     d18:	c4 c0       	rjmp	.+392    	; 0xea2 <lcd_displayMenu+0x23e>
     d1a:	01 c1       	rjmp	.+514    	; 0xf1e <lcd_displayMenu+0x2ba>
     d1c:	81 15       	cp	r24, r1
     d1e:	28 e4       	ldi	r18, 0x48	; 72
     d20:	92 07       	cpc	r25, r18
     d22:	09 f4       	brne	.+2      	; 0xd26 <lcd_displayMenu+0xc2>
     d24:	e2 c0       	rjmp	.+452    	; 0xeea <lcd_displayMenu+0x286>
     d26:	50 f4       	brcc	.+20     	; 0xd3c <lcd_displayMenu+0xd8>
     d28:	81 15       	cp	r24, r1
     d2a:	26 e4       	ldi	r18, 0x46	; 70
     d2c:	92 07       	cpc	r25, r18
     d2e:	09 f4       	brne	.+2      	; 0xd32 <lcd_displayMenu+0xce>
     d30:	ca c0       	rjmp	.+404    	; 0xec6 <lcd_displayMenu+0x262>
     d32:	81 15       	cp	r24, r1
     d34:	97 44       	sbci	r25, 0x47	; 71
     d36:	09 f4       	brne	.+2      	; 0xd3a <lcd_displayMenu+0xd6>
     d38:	cf c0       	rjmp	.+414    	; 0xed8 <lcd_displayMenu+0x274>
     d3a:	f1 c0       	rjmp	.+482    	; 0xf1e <lcd_displayMenu+0x2ba>
     d3c:	81 15       	cp	r24, r1
     d3e:	29 e4       	ldi	r18, 0x49	; 73
     d40:	92 07       	cpc	r25, r18
     d42:	09 f4       	brne	.+2      	; 0xd46 <lcd_displayMenu+0xe2>
     d44:	db c0       	rjmp	.+438    	; 0xefc <lcd_displayMenu+0x298>
     d46:	81 15       	cp	r24, r1
     d48:	9a 44       	sbci	r25, 0x4A	; 74
     d4a:	09 f4       	brne	.+2      	; 0xd4e <lcd_displayMenu+0xea>
     d4c:	e0 c0       	rjmp	.+448    	; 0xf0e <lcd_displayMenu+0x2aa>
		case 0x0000:
			lcd_clearDisplay();
     d4e:	e7 c0       	rjmp	.+462    	; 0xf1e <lcd_displayMenu+0x2ba>
			lcd_writeString("Welcome!");
     d50:	e2 dd       	rcall	.-1084   	; 0x916 <lcd_clearDisplay>
     d52:	80 e0       	ldi	r24, 0x00	; 0
			lcd_newLine();
     d54:	91 e0       	ldi	r25, 0x01	; 1
			lcd_writeString("Press OK");
     d56:	c1 de       	rcall	.-638    	; 0xada <lcd_writeString>
     d58:	88 de       	rcall	.-752    	; 0xa6a <lcd_newLine>
			break;
     d5a:	89 e0       	ldi	r24, 0x09	; 9
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	bd de       	rcall	.-646    	; 0xada <lcd_writeString>
     d60:	de c0       	rjmp	.+444    	; 0xf1e <lcd_displayMenu+0x2ba>
     d62:	d9 dd       	rcall	.-1102   	; 0x916 <lcd_clearDisplay>
     d64:	85 e3       	ldi	r24, 0x35	; 53
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	b8 de       	rcall	.-656    	; 0xada <lcd_writeString>
     d6a:	7f de       	rcall	.-770    	; 0xa6a <lcd_newLine>
     d6c:	8f e3       	ldi	r24, 0x3F	; 63
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	b4 de       	rcall	.-664    	; 0xada <lcd_writeString>
     d72:	d5 c0       	rjmp	.+426    	; 0xf1e <lcd_displayMenu+0x2ba>
     d74:	d0 dd       	rcall	.-1120   	; 0x916 <lcd_clearDisplay>
     d76:	8a e4       	ldi	r24, 0x4A	; 74
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	af de       	rcall	.-674    	; 0xada <lcd_writeString>
     d7c:	76 de       	rcall	.-788    	; 0xa6a <lcd_newLine>
     d7e:	84 e5       	ldi	r24, 0x54	; 84
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	ab de       	rcall	.-682    	; 0xada <lcd_writeString>
     d84:	cc c0       	rjmp	.+408    	; 0xf1e <lcd_displayMenu+0x2ba>
     d86:	c7 dd       	rcall	.-1138   	; 0x916 <lcd_clearDisplay>
     d88:	8f e3       	ldi	r24, 0x3F	; 63
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	a6 de       	rcall	.-692    	; 0xada <lcd_writeString>
     d8e:	6d de       	rcall	.-806    	; 0xa6a <lcd_newLine>
     d90:	8f e5       	ldi	r24, 0x5F	; 95
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	a2 de       	rcall	.-700    	; 0xada <lcd_writeString>
     d96:	c3 c0       	rjmp	.+390    	; 0xf1e <lcd_displayMenu+0x2ba>
     d98:	be dd       	rcall	.-1156   	; 0x916 <lcd_clearDisplay>
     d9a:	8e e6       	ldi	r24, 0x6E	; 110
     d9c:	91 e0       	ldi	r25, 0x01	; 1
     d9e:	9d de       	rcall	.-710    	; 0xada <lcd_writeString>
     da0:	64 de       	rcall	.-824    	; 0xa6a <lcd_newLine>
     da2:	8d e7       	ldi	r24, 0x7D	; 125
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	99 de       	rcall	.-718    	; 0xada <lcd_writeString>
     da8:	ba c0       	rjmp	.+372    	; 0xf1e <lcd_displayMenu+0x2ba>
     daa:	b5 dd       	rcall	.-1174   	; 0x916 <lcd_clearDisplay>
     dac:	8a e8       	ldi	r24, 0x8A	; 138
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	94 de       	rcall	.-728    	; 0xada <lcd_writeString>
     db2:	5b de       	rcall	.-842    	; 0xa6a <lcd_newLine>
     db4:	88 e9       	ldi	r24, 0x98	; 152
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	90 de       	rcall	.-736    	; 0xada <lcd_writeString>
     dba:	b1 c0       	rjmp	.+354    	; 0xf1e <lcd_displayMenu+0x2ba>
     dbc:	ac dd       	rcall	.-1192   	; 0x916 <lcd_clearDisplay>
     dbe:	84 ea       	ldi	r24, 0xA4	; 164
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	8b de       	rcall	.-746    	; 0xada <lcd_writeString>
     dc4:	c0 e1       	ldi	r28, 0x10	; 16
     dc6:	d0 e0       	ldi	r29, 0x00	; 0
     dc8:	ce 01       	movw	r24, r28
     dca:	d2 dc       	rcall	.-1628   	; 0x770 <eeprom_read>
     dcc:	69 de       	rcall	.-814    	; 0xaa0 <lcd_writeChar>
     dce:	21 96       	adiw	r28, 0x01	; 1
     dd0:	ca 31       	cpi	r28, 0x1A	; 26
     dd2:	d1 05       	cpc	r29, r1
     dd4:	c9 f7       	brne	.-14     	; 0xdc8 <lcd_displayMenu+0x164>
     dd6:	a3 c0       	rjmp	.+326    	; 0xf1e <lcd_displayMenu+0x2ba>
     dd8:	9e dd       	rcall	.-1220   	; 0x916 <lcd_clearDisplay>
     dda:	8b ea       	ldi	r24, 0xAB	; 171
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	7d de       	rcall	.-774    	; 0xada <lcd_writeString>
     de0:	44 de       	rcall	.-888    	; 0xa6a <lcd_newLine>
     de2:	89 eb       	ldi	r24, 0xB9	; 185
     de4:	91 e0       	ldi	r25, 0x01	; 1
     de6:	79 de       	rcall	.-782    	; 0xada <lcd_writeString>
     de8:	9a c0       	rjmp	.+308    	; 0xf1e <lcd_displayMenu+0x2ba>
     dea:	95 dd       	rcall	.-1238   	; 0x916 <lcd_clearDisplay>
     dec:	88 e9       	ldi	r24, 0x98	; 152
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	74 de       	rcall	.-792    	; 0xada <lcd_writeString>
     df2:	3b de       	rcall	.-906    	; 0xa6a <lcd_newLine>
     df4:	85 ec       	ldi	r24, 0xC5	; 197
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	70 de       	rcall	.-800    	; 0xada <lcd_writeString>
     dfa:	91 c0       	rjmp	.+290    	; 0xf1e <lcd_displayMenu+0x2ba>
     dfc:	8c dd       	rcall	.-1256   	; 0x916 <lcd_clearDisplay>
     dfe:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <manualMode>
     e02:	88 23       	and	r24, r24
     e04:	59 f0       	breq	.+22     	; 0xe1c <lcd_displayMenu+0x1b8>
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	09 f0       	breq	.+2      	; 0xe0c <lcd_displayMenu+0x1a8>
     e0a:	89 c0       	rjmp	.+274    	; 0xf1e <lcd_displayMenu+0x2ba>
     e0c:	83 ed       	ldi	r24, 0xD3	; 211
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	64 de       	rcall	.-824    	; 0xada <lcd_writeString>
     e12:	2b de       	rcall	.-938    	; 0xa6a <lcd_newLine>
     e14:	83 ee       	ldi	r24, 0xE3	; 227
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	60 de       	rcall	.-832    	; 0xada <lcd_writeString>
     e1a:	81 c0       	rjmp	.+258    	; 0xf1e <lcd_displayMenu+0x2ba>
     e1c:	84 ef       	ldi	r24, 0xF4	; 244
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	5c de       	rcall	.-840    	; 0xada <lcd_writeString>
     e22:	23 de       	rcall	.-954    	; 0xa6a <lcd_newLine>
     e24:	84 e0       	ldi	r24, 0x04	; 4
     e26:	92 e0       	ldi	r25, 0x02	; 2
     e28:	58 de       	rcall	.-848    	; 0xada <lcd_writeString>
     e2a:	79 c0       	rjmp	.+242    	; 0xf1e <lcd_displayMenu+0x2ba>
     e2c:	74 dd       	rcall	.-1304   	; 0x916 <lcd_clearDisplay>
     e2e:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <manualMode>
     e32:	88 23       	and	r24, r24
     e34:	59 f0       	breq	.+22     	; 0xe4c <lcd_displayMenu+0x1e8>
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	09 f0       	breq	.+2      	; 0xe3c <lcd_displayMenu+0x1d8>
     e3a:	71 c0       	rjmp	.+226    	; 0xf1e <lcd_displayMenu+0x2ba>
     e3c:	85 e1       	ldi	r24, 0x15	; 21
     e3e:	92 e0       	ldi	r25, 0x02	; 2
     e40:	4c de       	rcall	.-872    	; 0xada <lcd_writeString>
     e42:	13 de       	rcall	.-986    	; 0xa6a <lcd_newLine>
     e44:	85 e2       	ldi	r24, 0x25	; 37
     e46:	92 e0       	ldi	r25, 0x02	; 2
     e48:	48 de       	rcall	.-880    	; 0xada <lcd_writeString>
     e4a:	69 c0       	rjmp	.+210    	; 0xf1e <lcd_displayMenu+0x2ba>
     e4c:	86 e3       	ldi	r24, 0x36	; 54
     e4e:	92 e0       	ldi	r25, 0x02	; 2
     e50:	44 de       	rcall	.-888    	; 0xada <lcd_writeString>
     e52:	0b de       	rcall	.-1002   	; 0xa6a <lcd_newLine>
     e54:	86 e4       	ldi	r24, 0x46	; 70
     e56:	92 e0       	ldi	r25, 0x02	; 2
     e58:	40 de       	rcall	.-896    	; 0xada <lcd_writeString>
     e5a:	61 c0       	rjmp	.+194    	; 0xf1e <lcd_displayMenu+0x2ba>
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	47 dc       	rcall	.-1906   	; 0x6ee <adc_singleRead>
     e60:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <temperatureVoltage+0x1>
     e64:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <temperatureVoltage>
     e68:	54 de       	rcall	.-856    	; 0xb12 <lcd_displayTemperature>
     e6a:	59 c0       	rjmp	.+178    	; 0xf1e <lcd_displayMenu+0x2ba>
     e6c:	54 dd       	rcall	.-1368   	; 0x916 <lcd_clearDisplay>
     e6e:	87 e5       	ldi	r24, 0x57	; 87
     e70:	92 e0       	ldi	r25, 0x02	; 2
     e72:	33 de       	rcall	.-922    	; 0xada <lcd_writeString>
     e74:	fa dd       	rcall	.-1036   	; 0xa6a <lcd_newLine>
     e76:	85 e6       	ldi	r24, 0x65	; 101
     e78:	92 e0       	ldi	r25, 0x02	; 2
     e7a:	2f de       	rcall	.-930    	; 0xada <lcd_writeString>
     e7c:	50 c0       	rjmp	.+160    	; 0xf1e <lcd_displayMenu+0x2ba>
     e7e:	4b dd       	rcall	.-1386   	; 0x916 <lcd_clearDisplay>
     e80:	83 e7       	ldi	r24, 0x73	; 115
     e82:	92 e0       	ldi	r25, 0x02	; 2
     e84:	2a de       	rcall	.-940    	; 0xada <lcd_writeString>
     e86:	f1 dd       	rcall	.-1054   	; 0xa6a <lcd_newLine>
     e88:	81 e8       	ldi	r24, 0x81	; 129
     e8a:	92 e0       	ldi	r25, 0x02	; 2
     e8c:	26 de       	rcall	.-948    	; 0xada <lcd_writeString>
     e8e:	47 c0       	rjmp	.+142    	; 0xf1e <lcd_displayMenu+0x2ba>
     e90:	42 dd       	rcall	.-1404   	; 0x916 <lcd_clearDisplay>
     e92:	85 e6       	ldi	r24, 0x65	; 101
     e94:	92 e0       	ldi	r25, 0x02	; 2
     e96:	21 de       	rcall	.-958    	; 0xada <lcd_writeString>
     e98:	e8 dd       	rcall	.-1072   	; 0xa6a <lcd_newLine>
     e9a:	8f e8       	ldi	r24, 0x8F	; 143
     e9c:	92 e0       	ldi	r25, 0x02	; 2
     e9e:	1d de       	rcall	.-966    	; 0xada <lcd_writeString>
     ea0:	3e c0       	rjmp	.+124    	; 0xf1e <lcd_displayMenu+0x2ba>
     ea2:	39 dd       	rcall	.-1422   	; 0x916 <lcd_clearDisplay>
     ea4:	8d e9       	ldi	r24, 0x9D	; 157
     ea6:	92 e0       	ldi	r25, 0x02	; 2
     ea8:	18 de       	rcall	.-976    	; 0xada <lcd_writeString>
     eaa:	df dd       	rcall	.-1090   	; 0xa6a <lcd_newLine>
     eac:	8b ea       	ldi	r24, 0xAB	; 171
     eae:	92 e0       	ldi	r25, 0x02	; 2
     eb0:	14 de       	rcall	.-984    	; 0xada <lcd_writeString>
     eb2:	35 c0       	rjmp	.+106    	; 0xf1e <lcd_displayMenu+0x2ba>
     eb4:	30 dd       	rcall	.-1440   	; 0x916 <lcd_clearDisplay>
     eb6:	89 eb       	ldi	r24, 0xB9	; 185
     eb8:	92 e0       	ldi	r25, 0x02	; 2
     eba:	0f de       	rcall	.-994    	; 0xada <lcd_writeString>
     ebc:	d6 dd       	rcall	.-1108   	; 0xa6a <lcd_newLine>
     ebe:	87 ec       	ldi	r24, 0xC7	; 199
     ec0:	92 e0       	ldi	r25, 0x02	; 2
     ec2:	0b de       	rcall	.-1002   	; 0xada <lcd_writeString>
     ec4:	2c c0       	rjmp	.+88     	; 0xf1e <lcd_displayMenu+0x2ba>
     ec6:	27 dd       	rcall	.-1458   	; 0x916 <lcd_clearDisplay>
     ec8:	85 ed       	ldi	r24, 0xD5	; 213
     eca:	92 e0       	ldi	r25, 0x02	; 2
     ecc:	06 de       	rcall	.-1012   	; 0xada <lcd_writeString>
     ece:	cd dd       	rcall	.-1126   	; 0xa6a <lcd_newLine>
     ed0:	83 ee       	ldi	r24, 0xE3	; 227
     ed2:	92 e0       	ldi	r25, 0x02	; 2
     ed4:	02 de       	rcall	.-1020   	; 0xada <lcd_writeString>
     ed6:	23 c0       	rjmp	.+70     	; 0xf1e <lcd_displayMenu+0x2ba>
     ed8:	1e dd       	rcall	.-1476   	; 0x916 <lcd_clearDisplay>
     eda:	81 ef       	ldi	r24, 0xF1	; 241
     edc:	92 e0       	ldi	r25, 0x02	; 2
     ede:	fd dd       	rcall	.-1030   	; 0xada <lcd_writeString>
     ee0:	c4 dd       	rcall	.-1144   	; 0xa6a <lcd_newLine>
     ee2:	8f ef       	ldi	r24, 0xFF	; 255
     ee4:	92 e0       	ldi	r25, 0x02	; 2
     ee6:	f9 dd       	rcall	.-1038   	; 0xada <lcd_writeString>
     ee8:	1a c0       	rjmp	.+52     	; 0xf1e <lcd_displayMenu+0x2ba>
     eea:	15 dd       	rcall	.-1494   	; 0x916 <lcd_clearDisplay>
     eec:	8d e0       	ldi	r24, 0x0D	; 13
     eee:	93 e0       	ldi	r25, 0x03	; 3
     ef0:	f4 dd       	rcall	.-1048   	; 0xada <lcd_writeString>
     ef2:	bb dd       	rcall	.-1162   	; 0xa6a <lcd_newLine>
     ef4:	8b e1       	ldi	r24, 0x1B	; 27
     ef6:	93 e0       	ldi	r25, 0x03	; 3
     ef8:	f0 dd       	rcall	.-1056   	; 0xada <lcd_writeString>
     efa:	11 c0       	rjmp	.+34     	; 0xf1e <lcd_displayMenu+0x2ba>
     efc:	0c dd       	rcall	.-1512   	; 0x916 <lcd_clearDisplay>
     efe:	89 e2       	ldi	r24, 0x29	; 41
     f00:	93 e0       	ldi	r25, 0x03	; 3
     f02:	eb dd       	rcall	.-1066   	; 0xada <lcd_writeString>
     f04:	b2 dd       	rcall	.-1180   	; 0xa6a <lcd_newLine>
     f06:	87 e3       	ldi	r24, 0x37	; 55
     f08:	93 e0       	ldi	r25, 0x03	; 3
     f0a:	e7 dd       	rcall	.-1074   	; 0xada <lcd_writeString>
     f0c:	08 c0       	rjmp	.+16     	; 0xf1e <lcd_displayMenu+0x2ba>
     f0e:	03 dd       	rcall	.-1530   	; 0x916 <lcd_clearDisplay>
     f10:	85 e4       	ldi	r24, 0x45	; 69
     f12:	93 e0       	ldi	r25, 0x03	; 3
     f14:	e2 dd       	rcall	.-1084   	; 0xada <lcd_writeString>
     f16:	a9 dd       	rcall	.-1198   	; 0xa6a <lcd_newLine>
     f18:	83 e5       	ldi	r24, 0x53	; 83
     f1a:	93 e0       	ldi	r25, 0x03	; 3
     f1c:	de dd       	rcall	.-1092   	; 0xada <lcd_writeString>
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	08 95       	ret

00000f24 <setBit>:
 */ 

#include "math.h"

void setBit(volatile u8 *registerName, u8 position){
	*registerName |= (1 << position);
     f24:	fc 01       	movw	r30, r24
     f26:	40 81       	ld	r20, Z
     f28:	21 e0       	ldi	r18, 0x01	; 1
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <setBit+0xe>
     f2e:	22 0f       	add	r18, r18
     f30:	33 1f       	adc	r19, r19
     f32:	6a 95       	dec	r22
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <setBit+0xa>
     f36:	24 2b       	or	r18, r20
     f38:	20 83       	st	Z, r18
     f3a:	08 95       	ret

00000f3c <clearBit>:
}

void clearBit(volatile u8 *registerName, u8 position){
     f3c:	fc 01       	movw	r30, r24
	*registerName &= ~(1 << position);
     f3e:	90 81       	ld	r25, Z
     f40:	21 e0       	ldi	r18, 0x01	; 1
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <clearBit+0xe>
     f46:	22 0f       	add	r18, r18
     f48:	33 1f       	adc	r19, r19
     f4a:	6a 95       	dec	r22
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <clearBit+0xa>
     f4e:	20 95       	com	r18
     f50:	29 23       	and	r18, r25
     f52:	20 83       	st	Z, r18
     f54:	08 95       	ret

00000f56 <toggleBit>:
}

void toggleBit(volatile u8 *registerName, u8 position){
	*registerName ^= (1 << position);
     f56:	fc 01       	movw	r30, r24
     f58:	40 81       	ld	r20, Z
     f5a:	21 e0       	ldi	r18, 0x01	; 1
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <toggleBit+0xe>
     f60:	22 0f       	add	r18, r18
     f62:	33 1f       	adc	r19, r19
     f64:	6a 95       	dec	r22
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <toggleBit+0xa>
     f68:	24 27       	eor	r18, r20
     f6a:	20 83       	st	Z, r18
     f6c:	08 95       	ret

00000f6e <updateBit>:
}

void updateBit(volatile u8 *registerName, u8 position, u8 value){
     f6e:	fc 01       	movw	r30, r24
     f70:	94 2f       	mov	r25, r20
	u8 newValue = value << position;
	newValue |= (*registerName & ~(1 << position));
     f72:	20 81       	ld	r18, Z
     f74:	41 e0       	ldi	r20, 0x01	; 1
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	06 2e       	mov	r0, r22
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <updateBit+0x12>
     f7c:	44 0f       	add	r20, r20
     f7e:	55 1f       	adc	r21, r21
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <updateBit+0xe>
     f84:	40 95       	com	r20
     f86:	50 95       	com	r21
     f88:	24 23       	and	r18, r20
     f8a:	49 2f       	mov	r20, r25
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <updateBit+0x26>
     f90:	44 0f       	add	r20, r20
     f92:	55 1f       	adc	r21, r21
     f94:	6a 95       	dec	r22
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <updateBit+0x22>
     f98:	42 2b       	or	r20, r18
	*registerName = newValue;
     f9a:	40 83       	st	Z, r20
     f9c:	08 95       	ret

00000f9e <checkBit>:
}

bitValue checkBit(u8 registerName, u8 position){
	return (registerName >> position) & 1;
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <checkBit+0x8>
     fa2:	95 95       	asr	r25
     fa4:	87 95       	ror	r24
     fa6:	6a 95       	dec	r22
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <checkBit+0x4>
     faa:	81 70       	andi	r24, 0x01	; 1
     fac:	08 95       	ret

00000fae <spi_init>:
void spi_start(){
	setBit(&SPCR, SPE);
}

void spi_stop(){
	clearBit(&SPCR, SPE);
     fae:	64 e0       	ldi	r22, 0x04	; 4
     fb0:	8c e4       	ldi	r24, 0x4C	; 76
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	b7 df       	rcall	.-146    	; 0xf24 <setBit>
     fb6:	64 e0       	ldi	r22, 0x04	; 4
     fb8:	84 e2       	ldi	r24, 0x24	; 36
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	b3 df       	rcall	.-154    	; 0xf24 <setBit>
     fbe:	65 e0       	ldi	r22, 0x05	; 5
     fc0:	84 e2       	ldi	r24, 0x24	; 36
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	af df       	rcall	.-162    	; 0xf24 <setBit>
     fc6:	67 e0       	ldi	r22, 0x07	; 7
     fc8:	84 e2       	ldi	r24, 0x24	; 36
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	ab df       	rcall	.-170    	; 0xf24 <setBit>
     fce:	66 e0       	ldi	r22, 0x06	; 6
     fd0:	84 e2       	ldi	r24, 0x24	; 36
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	b3 df       	rcall	.-154    	; 0xf3c <clearBit>
     fd6:	65 e0       	ldi	r22, 0x05	; 5
     fd8:	8c e4       	ldi	r24, 0x4C	; 76
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	af df       	rcall	.-162    	; 0xf3c <clearBit>
     fde:	63 e0       	ldi	r22, 0x03	; 3
     fe0:	8c e4       	ldi	r24, 0x4C	; 76
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	ab df       	rcall	.-170    	; 0xf3c <clearBit>
     fe6:	62 e0       	ldi	r22, 0x02	; 2
     fe8:	8c e4       	ldi	r24, 0x4C	; 76
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a7 df       	rcall	.-178    	; 0xf3c <clearBit>
     fee:	60 e0       	ldi	r22, 0x00	; 0
     ff0:	8c e4       	ldi	r24, 0x4C	; 76
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	a3 df       	rcall	.-186    	; 0xf3c <clearBit>
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	8c e4       	ldi	r24, 0x4C	; 76
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	9f df       	rcall	.-194    	; 0xf3c <clearBit>
     ffe:	61 e0       	ldi	r22, 0x01	; 1
    1000:	8c e4       	ldi	r24, 0x4C	; 76
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	9b cf       	rjmp	.-202    	; 0xf3c <clearBit>
    1006:	08 95       	ret

00001008 <spi_start>:
    1008:	66 e0       	ldi	r22, 0x06	; 6
    100a:	8c e4       	ldi	r24, 0x4C	; 76
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	8a cf       	rjmp	.-236    	; 0xf24 <setBit>
    1010:	08 95       	ret

00001012 <spi_transferData>:
}

u8 spi_transferData(u8 data){
	SPDR = data;
    1012:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    1014:	0d b4       	in	r0, 0x2d	; 45
    1016:	07 fe       	sbrs	r0, 7
    1018:	fd cf       	rjmp	.-6      	; 0x1014 <spi_transferData+0x2>
	data = SPDR;
    101a:	8e b5       	in	r24, 0x2e	; 46
	return data;
}
    101c:	08 95       	ret

0000101e <spi_readData>:

u8 spi_readData(){
	u8 value = 0;
	value = spi_transferData(0x00);
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	f8 cf       	rjmp	.-16     	; 0x1012 <spi_transferData>
	return value;
}
    1022:	08 95       	ret

00001024 <spi_writeData>:

void spi_writeData(u8 data){
    1024:	f6 cf       	rjmp	.-20     	; 0x1012 <spi_transferData>
    1026:	08 95       	ret

00001028 <uart_init>:
	
}

void uart_stop(bool uartTx, bool uartRx){
	clearBit(&UCSR0B, RXEN0);
	clearBit(&UCSR0B, TXEN0);
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	08 2f       	mov	r16, r24
    1032:	16 2f       	mov	r17, r22
    1034:	d4 2f       	mov	r29, r20
    1036:	c2 2f       	mov	r28, r18
    1038:	61 e0       	ldi	r22, 0x01	; 1
    103a:	8a e2       	ldi	r24, 0x2A	; 42
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	72 df       	rcall	.-284    	; 0xf24 <setBit>
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	8a e2       	ldi	r24, 0x2A	; 42
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	7a df       	rcall	.-268    	; 0xf3c <clearBit>
    1048:	61 e0       	ldi	r22, 0x01	; 1
    104a:	80 ec       	ldi	r24, 0xC0	; 192
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	76 df       	rcall	.-276    	; 0xf3c <clearBit>
    1050:	62 e0       	ldi	r22, 0x02	; 2
    1052:	81 ec       	ldi	r24, 0xC1	; 193
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	72 df       	rcall	.-284    	; 0xf3c <clearBit>
    1058:	62 e0       	ldi	r22, 0x02	; 2
    105a:	82 ec       	ldi	r24, 0xC2	; 194
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	62 df       	rcall	.-316    	; 0xf24 <setBit>
    1060:	61 e0       	ldi	r22, 0x01	; 1
    1062:	82 ec       	ldi	r24, 0xC2	; 194
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	5e df       	rcall	.-324    	; 0xf24 <setBit>
    1068:	67 e0       	ldi	r22, 0x07	; 7
    106a:	82 ec       	ldi	r24, 0xC2	; 194
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	66 df       	rcall	.-308    	; 0xf3c <clearBit>
    1070:	40 2f       	mov	r20, r16
    1072:	66 e0       	ldi	r22, 0x06	; 6
    1074:	82 ec       	ldi	r24, 0xC2	; 194
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	7a df       	rcall	.-268    	; 0xf6e <updateBit>
    107a:	65 e0       	ldi	r22, 0x05	; 5
    107c:	82 ec       	ldi	r24, 0xC2	; 194
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	51 df       	rcall	.-350    	; 0xf24 <setBit>
    1082:	41 2f       	mov	r20, r17
    1084:	64 e0       	ldi	r22, 0x04	; 4
    1086:	82 ec       	ldi	r24, 0xC2	; 194
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	71 df       	rcall	.-286    	; 0xf6e <updateBit>
    108c:	4d 2f       	mov	r20, r29
    108e:	63 e0       	ldi	r22, 0x03	; 3
    1090:	82 ec       	ldi	r24, 0xC2	; 194
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	6c df       	rcall	.-296    	; 0xf6e <updateBit>
    1096:	2c 2f       	mov	r18, r28
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    109e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    10a2:	67 e0       	ldi	r22, 0x07	; 7
    10a4:	81 ec       	ldi	r24, 0xC1	; 193
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	3d df       	rcall	.-390    	; 0xf24 <setBit>
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	1f 91       	pop	r17
    10b0:	0f 91       	pop	r16
    10b2:	08 95       	ret

000010b4 <uart_start>:
    10b4:	cf 93       	push	r28
    10b6:	c8 2f       	mov	r28, r24
    10b8:	46 2f       	mov	r20, r22
    10ba:	64 e0       	ldi	r22, 0x04	; 4
    10bc:	81 ec       	ldi	r24, 0xC1	; 193
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	56 df       	rcall	.-340    	; 0xf6e <updateBit>
    10c2:	4c 2f       	mov	r20, r28
    10c4:	63 e0       	ldi	r22, 0x03	; 3
    10c6:	81 ec       	ldi	r24, 0xC1	; 193
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	51 df       	rcall	.-350    	; 0xf6e <updateBit>
    10cc:	cf 91       	pop	r28
    10ce:	08 95       	ret

000010d0 <uart_transmit>:
}

void uart_transmit(u8 data){
	while(!(UCSR0A & (1 << UDRE0)));
    10d0:	e0 ec       	ldi	r30, 0xC0	; 192
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	90 81       	ld	r25, Z
    10d6:	95 ff       	sbrs	r25, 5
    10d8:	fd cf       	rjmp	.-6      	; 0x10d4 <uart_transmit+0x4>
	UDR0 = data;
    10da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    10de:	08 95       	ret

000010e0 <__vector_20>:
extern volatile u8 dcSpeedRight;
extern volatile u8 cannonState;
extern volatile u8 rotatingFlag;


ISR(USART0_RX_vect){
    10e0:	1f 92       	push	r1
    10e2:	0f 92       	push	r0
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	0f 92       	push	r0
    10e8:	11 24       	eor	r1, r1
    10ea:	0b b6       	in	r0, 0x3b	; 59
    10ec:	0f 92       	push	r0
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	2f 93       	push	r18
    10f4:	3f 93       	push	r19
    10f6:	4f 93       	push	r20
    10f8:	5f 93       	push	r21
    10fa:	6f 93       	push	r22
    10fc:	7f 93       	push	r23
    10fe:	8f 93       	push	r24
    1100:	9f 93       	push	r25
    1102:	af 93       	push	r26
    1104:	bf 93       	push	r27
    1106:	cf 93       	push	r28
    1108:	ef 93       	push	r30
    110a:	ff 93       	push	r31
	aux = UDR0;
    110c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1110:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <aux>
	uart_transmit(aux);
    1114:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <aux>
    1118:	db df       	rcall	.-74     	; 0x10d0 <uart_transmit>
	if(aux == '!'){
    111a:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <aux>
    111e:	81 32       	cpi	r24, 0x21	; 33
    1120:	51 f5       	brne	.+84     	; 0x1176 <__vector_20+0x96>
		for(u8 i = 0; i < messageBufferIndex; i++){
    1122:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <messageBufferIndex>
    1126:	88 23       	and	r24, r24
    1128:	c9 f1       	breq	.+114    	; 0x119c <__vector_20+0xbc>
    112a:	c0 e0       	ldi	r28, 0x00	; 0
			eeprom_write(messageBuffer[i], eepromUnreadMessageAddress);
			eepromUnreadMessageAddress++;
			if(eepromUnreadMessageAddress == 0x01A){
				eepromUnreadMessageAddress = 0x010;
    112c:	00 e1       	ldi	r16, 0x10	; 16
    112e:	10 e0       	ldi	r17, 0x00	; 0
ISR(USART0_RX_vect){
	aux = UDR0;
	uart_transmit(aux);
	if(aux == '!'){
		for(u8 i = 0; i < messageBufferIndex; i++){
			eeprom_write(messageBuffer[i], eepromUnreadMessageAddress);
    1130:	60 91 6a 03 	lds	r22, 0x036A	; 0x80036a <eepromUnreadMessageAddress>
    1134:	70 91 6b 03 	lds	r23, 0x036B	; 0x80036b <eepromUnreadMessageAddress+0x1>
    1138:	ec 2f       	mov	r30, r28
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	e7 58       	subi	r30, 0x87	; 135
    113e:	fc 4f       	sbci	r31, 0xFC	; 252
    1140:	80 81       	ld	r24, Z
    1142:	2c db       	rcall	.-2472   	; 0x79c <eeprom_write>
			eepromUnreadMessageAddress++;
    1144:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <eepromUnreadMessageAddress>
    1148:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <eepromUnreadMessageAddress+0x1>
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <eepromUnreadMessageAddress+0x1>
    1152:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <eepromUnreadMessageAddress>
			if(eepromUnreadMessageAddress == 0x01A){
    1156:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <eepromUnreadMessageAddress>
    115a:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <eepromUnreadMessageAddress+0x1>
    115e:	4a 97       	sbiw	r24, 0x1a	; 26
    1160:	21 f4       	brne	.+8      	; 0x116a <__vector_20+0x8a>
				eepromUnreadMessageAddress = 0x010;
    1162:	10 93 6b 03 	sts	0x036B, r17	; 0x80036b <eepromUnreadMessageAddress+0x1>
    1166:	00 93 6a 03 	sts	0x036A, r16	; 0x80036a <eepromUnreadMessageAddress>

ISR(USART0_RX_vect){
	aux = UDR0;
	uart_transmit(aux);
	if(aux == '!'){
		for(u8 i = 0; i < messageBufferIndex; i++){
    116a:	cf 5f       	subi	r28, 0xFF	; 255
    116c:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <messageBufferIndex>
    1170:	c8 17       	cp	r28, r24
    1172:	f0 f2       	brcs	.-68     	; 0x1130 <__vector_20+0x50>
    1174:	13 c0       	rjmp	.+38     	; 0x119c <__vector_20+0xbc>
				eepromUnreadMessageAddress = 0x010;
			}
		}
	}
	else{
		messageBuffer[messageBufferIndex] = aux;
    1176:	e0 91 63 03 	lds	r30, 0x0363	; 0x800363 <messageBufferIndex>
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <aux>
    1180:	e7 58       	subi	r30, 0x87	; 135
    1182:	fc 4f       	sbci	r31, 0xFC	; 252
    1184:	80 83       	st	Z, r24
		messageBufferIndex++;
    1186:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <messageBufferIndex>
    118a:	8f 5f       	subi	r24, 0xFF	; 255
    118c:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <messageBufferIndex>
		if(messageBufferIndex > 9){
    1190:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <messageBufferIndex>
    1194:	8a 30       	cpi	r24, 0x0A	; 10
    1196:	10 f0       	brcs	.+4      	; 0x119c <__vector_20+0xbc>
			messageBufferIndex = 0;
    1198:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <messageBufferIndex>
		}
	}	
}
    119c:	ff 91       	pop	r31
    119e:	ef 91       	pop	r30
    11a0:	cf 91       	pop	r28
    11a2:	bf 91       	pop	r27
    11a4:	af 91       	pop	r26
    11a6:	9f 91       	pop	r25
    11a8:	8f 91       	pop	r24
    11aa:	7f 91       	pop	r23
    11ac:	6f 91       	pop	r22
    11ae:	5f 91       	pop	r21
    11b0:	4f 91       	pop	r20
    11b2:	3f 91       	pop	r19
    11b4:	2f 91       	pop	r18
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	0f 90       	pop	r0
    11bc:	0b be       	out	0x3b, r0	; 59
    11be:	0f 90       	pop	r0
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	0f 90       	pop	r0
    11c4:	1f 90       	pop	r1
    11c6:	18 95       	reti

000011c8 <__fixunssfsi>:
    11c8:	98 d0       	rcall	.+304    	; 0x12fa <__fp_splitA>
    11ca:	88 f0       	brcs	.+34     	; 0x11ee <__fixunssfsi+0x26>
    11cc:	9f 57       	subi	r25, 0x7F	; 127
    11ce:	90 f0       	brcs	.+36     	; 0x11f4 <__fixunssfsi+0x2c>
    11d0:	b9 2f       	mov	r27, r25
    11d2:	99 27       	eor	r25, r25
    11d4:	b7 51       	subi	r27, 0x17	; 23
    11d6:	a0 f0       	brcs	.+40     	; 0x1200 <__fixunssfsi+0x38>
    11d8:	d1 f0       	breq	.+52     	; 0x120e <__fixunssfsi+0x46>
    11da:	66 0f       	add	r22, r22
    11dc:	77 1f       	adc	r23, r23
    11de:	88 1f       	adc	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	1a f0       	brmi	.+6      	; 0x11ea <__fixunssfsi+0x22>
    11e4:	ba 95       	dec	r27
    11e6:	c9 f7       	brne	.-14     	; 0x11da <__fixunssfsi+0x12>
    11e8:	12 c0       	rjmp	.+36     	; 0x120e <__fixunssfsi+0x46>
    11ea:	b1 30       	cpi	r27, 0x01	; 1
    11ec:	81 f0       	breq	.+32     	; 0x120e <__fixunssfsi+0x46>
    11ee:	9f d0       	rcall	.+318    	; 0x132e <__fp_zero>
    11f0:	b1 e0       	ldi	r27, 0x01	; 1
    11f2:	08 95       	ret
    11f4:	9c c0       	rjmp	.+312    	; 0x132e <__fp_zero>
    11f6:	67 2f       	mov	r22, r23
    11f8:	78 2f       	mov	r23, r24
    11fa:	88 27       	eor	r24, r24
    11fc:	b8 5f       	subi	r27, 0xF8	; 248
    11fe:	39 f0       	breq	.+14     	; 0x120e <__fixunssfsi+0x46>
    1200:	b9 3f       	cpi	r27, 0xF9	; 249
    1202:	cc f3       	brlt	.-14     	; 0x11f6 <__fixunssfsi+0x2e>
    1204:	86 95       	lsr	r24
    1206:	77 95       	ror	r23
    1208:	67 95       	ror	r22
    120a:	b3 95       	inc	r27
    120c:	d9 f7       	brne	.-10     	; 0x1204 <__fixunssfsi+0x3c>
    120e:	3e f4       	brtc	.+14     	; 0x121e <__fixunssfsi+0x56>
    1210:	90 95       	com	r25
    1212:	80 95       	com	r24
    1214:	70 95       	com	r23
    1216:	61 95       	neg	r22
    1218:	7f 4f       	sbci	r23, 0xFF	; 255
    121a:	8f 4f       	sbci	r24, 0xFF	; 255
    121c:	9f 4f       	sbci	r25, 0xFF	; 255
    121e:	08 95       	ret

00001220 <__floatunsisf>:
    1220:	e8 94       	clt
    1222:	09 c0       	rjmp	.+18     	; 0x1236 <__floatsisf+0x12>

00001224 <__floatsisf>:
    1224:	97 fb       	bst	r25, 7
    1226:	3e f4       	brtc	.+14     	; 0x1236 <__floatsisf+0x12>
    1228:	90 95       	com	r25
    122a:	80 95       	com	r24
    122c:	70 95       	com	r23
    122e:	61 95       	neg	r22
    1230:	7f 4f       	sbci	r23, 0xFF	; 255
    1232:	8f 4f       	sbci	r24, 0xFF	; 255
    1234:	9f 4f       	sbci	r25, 0xFF	; 255
    1236:	99 23       	and	r25, r25
    1238:	a9 f0       	breq	.+42     	; 0x1264 <__floatsisf+0x40>
    123a:	f9 2f       	mov	r31, r25
    123c:	96 e9       	ldi	r25, 0x96	; 150
    123e:	bb 27       	eor	r27, r27
    1240:	93 95       	inc	r25
    1242:	f6 95       	lsr	r31
    1244:	87 95       	ror	r24
    1246:	77 95       	ror	r23
    1248:	67 95       	ror	r22
    124a:	b7 95       	ror	r27
    124c:	f1 11       	cpse	r31, r1
    124e:	f8 cf       	rjmp	.-16     	; 0x1240 <__floatsisf+0x1c>
    1250:	fa f4       	brpl	.+62     	; 0x1290 <__floatsisf+0x6c>
    1252:	bb 0f       	add	r27, r27
    1254:	11 f4       	brne	.+4      	; 0x125a <__floatsisf+0x36>
    1256:	60 ff       	sbrs	r22, 0
    1258:	1b c0       	rjmp	.+54     	; 0x1290 <__floatsisf+0x6c>
    125a:	6f 5f       	subi	r22, 0xFF	; 255
    125c:	7f 4f       	sbci	r23, 0xFF	; 255
    125e:	8f 4f       	sbci	r24, 0xFF	; 255
    1260:	9f 4f       	sbci	r25, 0xFF	; 255
    1262:	16 c0       	rjmp	.+44     	; 0x1290 <__floatsisf+0x6c>
    1264:	88 23       	and	r24, r24
    1266:	11 f0       	breq	.+4      	; 0x126c <__floatsisf+0x48>
    1268:	96 e9       	ldi	r25, 0x96	; 150
    126a:	11 c0       	rjmp	.+34     	; 0x128e <__floatsisf+0x6a>
    126c:	77 23       	and	r23, r23
    126e:	21 f0       	breq	.+8      	; 0x1278 <__floatsisf+0x54>
    1270:	9e e8       	ldi	r25, 0x8E	; 142
    1272:	87 2f       	mov	r24, r23
    1274:	76 2f       	mov	r23, r22
    1276:	05 c0       	rjmp	.+10     	; 0x1282 <__floatsisf+0x5e>
    1278:	66 23       	and	r22, r22
    127a:	71 f0       	breq	.+28     	; 0x1298 <__floatsisf+0x74>
    127c:	96 e8       	ldi	r25, 0x86	; 134
    127e:	86 2f       	mov	r24, r22
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	2a f0       	brmi	.+10     	; 0x1290 <__floatsisf+0x6c>
    1286:	9a 95       	dec	r25
    1288:	66 0f       	add	r22, r22
    128a:	77 1f       	adc	r23, r23
    128c:	88 1f       	adc	r24, r24
    128e:	da f7       	brpl	.-10     	; 0x1286 <__floatsisf+0x62>
    1290:	88 0f       	add	r24, r24
    1292:	96 95       	lsr	r25
    1294:	87 95       	ror	r24
    1296:	97 f9       	bld	r25, 7
    1298:	08 95       	ret

0000129a <__fp_inf>:
    129a:	97 f9       	bld	r25, 7
    129c:	9f 67       	ori	r25, 0x7F	; 127
    129e:	80 e8       	ldi	r24, 0x80	; 128
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	08 95       	ret

000012a6 <__fp_nan>:
    12a6:	9f ef       	ldi	r25, 0xFF	; 255
    12a8:	80 ec       	ldi	r24, 0xC0	; 192
    12aa:	08 95       	ret

000012ac <__fp_pscA>:
    12ac:	00 24       	eor	r0, r0
    12ae:	0a 94       	dec	r0
    12b0:	16 16       	cp	r1, r22
    12b2:	17 06       	cpc	r1, r23
    12b4:	18 06       	cpc	r1, r24
    12b6:	09 06       	cpc	r0, r25
    12b8:	08 95       	ret

000012ba <__fp_pscB>:
    12ba:	00 24       	eor	r0, r0
    12bc:	0a 94       	dec	r0
    12be:	12 16       	cp	r1, r18
    12c0:	13 06       	cpc	r1, r19
    12c2:	14 06       	cpc	r1, r20
    12c4:	05 06       	cpc	r0, r21
    12c6:	08 95       	ret

000012c8 <__fp_round>:
    12c8:	09 2e       	mov	r0, r25
    12ca:	03 94       	inc	r0
    12cc:	00 0c       	add	r0, r0
    12ce:	11 f4       	brne	.+4      	; 0x12d4 <__fp_round+0xc>
    12d0:	88 23       	and	r24, r24
    12d2:	52 f0       	brmi	.+20     	; 0x12e8 <__fp_round+0x20>
    12d4:	bb 0f       	add	r27, r27
    12d6:	40 f4       	brcc	.+16     	; 0x12e8 <__fp_round+0x20>
    12d8:	bf 2b       	or	r27, r31
    12da:	11 f4       	brne	.+4      	; 0x12e0 <__fp_round+0x18>
    12dc:	60 ff       	sbrs	r22, 0
    12de:	04 c0       	rjmp	.+8      	; 0x12e8 <__fp_round+0x20>
    12e0:	6f 5f       	subi	r22, 0xFF	; 255
    12e2:	7f 4f       	sbci	r23, 0xFF	; 255
    12e4:	8f 4f       	sbci	r24, 0xFF	; 255
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	08 95       	ret

000012ea <__fp_split3>:
    12ea:	57 fd       	sbrc	r21, 7
    12ec:	90 58       	subi	r25, 0x80	; 128
    12ee:	44 0f       	add	r20, r20
    12f0:	55 1f       	adc	r21, r21
    12f2:	59 f0       	breq	.+22     	; 0x130a <__fp_splitA+0x10>
    12f4:	5f 3f       	cpi	r21, 0xFF	; 255
    12f6:	71 f0       	breq	.+28     	; 0x1314 <__fp_splitA+0x1a>
    12f8:	47 95       	ror	r20

000012fa <__fp_splitA>:
    12fa:	88 0f       	add	r24, r24
    12fc:	97 fb       	bst	r25, 7
    12fe:	99 1f       	adc	r25, r25
    1300:	61 f0       	breq	.+24     	; 0x131a <__fp_splitA+0x20>
    1302:	9f 3f       	cpi	r25, 0xFF	; 255
    1304:	79 f0       	breq	.+30     	; 0x1324 <__fp_splitA+0x2a>
    1306:	87 95       	ror	r24
    1308:	08 95       	ret
    130a:	12 16       	cp	r1, r18
    130c:	13 06       	cpc	r1, r19
    130e:	14 06       	cpc	r1, r20
    1310:	55 1f       	adc	r21, r21
    1312:	f2 cf       	rjmp	.-28     	; 0x12f8 <__fp_split3+0xe>
    1314:	46 95       	lsr	r20
    1316:	f1 df       	rcall	.-30     	; 0x12fa <__fp_splitA>
    1318:	08 c0       	rjmp	.+16     	; 0x132a <__fp_splitA+0x30>
    131a:	16 16       	cp	r1, r22
    131c:	17 06       	cpc	r1, r23
    131e:	18 06       	cpc	r1, r24
    1320:	99 1f       	adc	r25, r25
    1322:	f1 cf       	rjmp	.-30     	; 0x1306 <__fp_splitA+0xc>
    1324:	86 95       	lsr	r24
    1326:	71 05       	cpc	r23, r1
    1328:	61 05       	cpc	r22, r1
    132a:	08 94       	sec
    132c:	08 95       	ret

0000132e <__fp_zero>:
    132e:	e8 94       	clt

00001330 <__fp_szero>:
    1330:	bb 27       	eor	r27, r27
    1332:	66 27       	eor	r22, r22
    1334:	77 27       	eor	r23, r23
    1336:	cb 01       	movw	r24, r22
    1338:	97 f9       	bld	r25, 7
    133a:	08 95       	ret

0000133c <__mulsf3>:
    133c:	0b d0       	rcall	.+22     	; 0x1354 <__mulsf3x>
    133e:	c4 cf       	rjmp	.-120    	; 0x12c8 <__fp_round>
    1340:	b5 df       	rcall	.-150    	; 0x12ac <__fp_pscA>
    1342:	28 f0       	brcs	.+10     	; 0x134e <__mulsf3+0x12>
    1344:	ba df       	rcall	.-140    	; 0x12ba <__fp_pscB>
    1346:	18 f0       	brcs	.+6      	; 0x134e <__mulsf3+0x12>
    1348:	95 23       	and	r25, r21
    134a:	09 f0       	breq	.+2      	; 0x134e <__mulsf3+0x12>
    134c:	a6 cf       	rjmp	.-180    	; 0x129a <__fp_inf>
    134e:	ab cf       	rjmp	.-170    	; 0x12a6 <__fp_nan>
    1350:	11 24       	eor	r1, r1
    1352:	ee cf       	rjmp	.-36     	; 0x1330 <__fp_szero>

00001354 <__mulsf3x>:
    1354:	ca df       	rcall	.-108    	; 0x12ea <__fp_split3>
    1356:	a0 f3       	brcs	.-24     	; 0x1340 <__mulsf3+0x4>

00001358 <__mulsf3_pse>:
    1358:	95 9f       	mul	r25, r21
    135a:	d1 f3       	breq	.-12     	; 0x1350 <__mulsf3+0x14>
    135c:	95 0f       	add	r25, r21
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	55 1f       	adc	r21, r21
    1362:	62 9f       	mul	r22, r18
    1364:	f0 01       	movw	r30, r0
    1366:	72 9f       	mul	r23, r18
    1368:	bb 27       	eor	r27, r27
    136a:	f0 0d       	add	r31, r0
    136c:	b1 1d       	adc	r27, r1
    136e:	63 9f       	mul	r22, r19
    1370:	aa 27       	eor	r26, r26
    1372:	f0 0d       	add	r31, r0
    1374:	b1 1d       	adc	r27, r1
    1376:	aa 1f       	adc	r26, r26
    1378:	64 9f       	mul	r22, r20
    137a:	66 27       	eor	r22, r22
    137c:	b0 0d       	add	r27, r0
    137e:	a1 1d       	adc	r26, r1
    1380:	66 1f       	adc	r22, r22
    1382:	82 9f       	mul	r24, r18
    1384:	22 27       	eor	r18, r18
    1386:	b0 0d       	add	r27, r0
    1388:	a1 1d       	adc	r26, r1
    138a:	62 1f       	adc	r22, r18
    138c:	73 9f       	mul	r23, r19
    138e:	b0 0d       	add	r27, r0
    1390:	a1 1d       	adc	r26, r1
    1392:	62 1f       	adc	r22, r18
    1394:	83 9f       	mul	r24, r19
    1396:	a0 0d       	add	r26, r0
    1398:	61 1d       	adc	r22, r1
    139a:	22 1f       	adc	r18, r18
    139c:	74 9f       	mul	r23, r20
    139e:	33 27       	eor	r19, r19
    13a0:	a0 0d       	add	r26, r0
    13a2:	61 1d       	adc	r22, r1
    13a4:	23 1f       	adc	r18, r19
    13a6:	84 9f       	mul	r24, r20
    13a8:	60 0d       	add	r22, r0
    13aa:	21 1d       	adc	r18, r1
    13ac:	82 2f       	mov	r24, r18
    13ae:	76 2f       	mov	r23, r22
    13b0:	6a 2f       	mov	r22, r26
    13b2:	11 24       	eor	r1, r1
    13b4:	9f 57       	subi	r25, 0x7F	; 127
    13b6:	50 40       	sbci	r21, 0x00	; 0
    13b8:	8a f0       	brmi	.+34     	; 0x13dc <__mulsf3_pse+0x84>
    13ba:	e1 f0       	breq	.+56     	; 0x13f4 <__mulsf3_pse+0x9c>
    13bc:	88 23       	and	r24, r24
    13be:	4a f0       	brmi	.+18     	; 0x13d2 <__mulsf3_pse+0x7a>
    13c0:	ee 0f       	add	r30, r30
    13c2:	ff 1f       	adc	r31, r31
    13c4:	bb 1f       	adc	r27, r27
    13c6:	66 1f       	adc	r22, r22
    13c8:	77 1f       	adc	r23, r23
    13ca:	88 1f       	adc	r24, r24
    13cc:	91 50       	subi	r25, 0x01	; 1
    13ce:	50 40       	sbci	r21, 0x00	; 0
    13d0:	a9 f7       	brne	.-22     	; 0x13bc <__mulsf3_pse+0x64>
    13d2:	9e 3f       	cpi	r25, 0xFE	; 254
    13d4:	51 05       	cpc	r21, r1
    13d6:	70 f0       	brcs	.+28     	; 0x13f4 <__mulsf3_pse+0x9c>
    13d8:	60 cf       	rjmp	.-320    	; 0x129a <__fp_inf>
    13da:	aa cf       	rjmp	.-172    	; 0x1330 <__fp_szero>
    13dc:	5f 3f       	cpi	r21, 0xFF	; 255
    13de:	ec f3       	brlt	.-6      	; 0x13da <__mulsf3_pse+0x82>
    13e0:	98 3e       	cpi	r25, 0xE8	; 232
    13e2:	dc f3       	brlt	.-10     	; 0x13da <__mulsf3_pse+0x82>
    13e4:	86 95       	lsr	r24
    13e6:	77 95       	ror	r23
    13e8:	67 95       	ror	r22
    13ea:	b7 95       	ror	r27
    13ec:	f7 95       	ror	r31
    13ee:	e7 95       	ror	r30
    13f0:	9f 5f       	subi	r25, 0xFF	; 255
    13f2:	c1 f7       	brne	.-16     	; 0x13e4 <__mulsf3_pse+0x8c>
    13f4:	fe 2b       	or	r31, r30
    13f6:	88 0f       	add	r24, r24
    13f8:	91 1d       	adc	r25, r1
    13fa:	96 95       	lsr	r25
    13fc:	87 95       	ror	r24
    13fe:	97 f9       	bld	r25, 7
    1400:	08 95       	ret

00001402 <__umulhisi3>:
    1402:	a2 9f       	mul	r26, r18
    1404:	b0 01       	movw	r22, r0
    1406:	b3 9f       	mul	r27, r19
    1408:	c0 01       	movw	r24, r0
    140a:	a3 9f       	mul	r26, r19
    140c:	70 0d       	add	r23, r0
    140e:	81 1d       	adc	r24, r1
    1410:	11 24       	eor	r1, r1
    1412:	91 1d       	adc	r25, r1
    1414:	b2 9f       	mul	r27, r18
    1416:	70 0d       	add	r23, r0
    1418:	81 1d       	adc	r24, r1
    141a:	11 24       	eor	r1, r1
    141c:	91 1d       	adc	r25, r1
    141e:	08 95       	ret

00001420 <_exit>:
    1420:	f8 94       	cli

00001422 <__stop_program>:
    1422:	ff cf       	rjmp	.-2      	; 0x1422 <__stop_program>
