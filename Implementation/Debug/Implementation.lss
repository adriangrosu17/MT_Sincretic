
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000262  00800100  000013a0  00001434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800362  00800362  00001696  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001696  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000039c3  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000115b  00000000  00000000  000052f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017a9  00000000  00000000  0000644e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000548  00000000  00000000  00007bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a31  00000000  00000000  00008140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a6c  00000000  00000000  00008b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000a5dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__vector_5>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	df c7       	rjmp	.+4030   	; 0x1010 <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__vector_34>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 ea       	ldi	r30, 0xA0	; 160
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 36       	cpi	r26, 0x62	; 98
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	a2 e6       	ldi	r26, 0x62	; 98
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 37       	cpi	r26, 0x7B	; 123
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	86 d2       	rcall	.+1292   	; 0x5d0 <main>
      c4:	0c 94 ce 09 	jmp	0x139c	; 0x139c <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <__vector_34>:
volatile u8 menuLevel;
volatile bool manualMode;
volatile u8 clockFlag;
volatile u16 eepromUnreadMessageAddress;

ISR(TIMER3_OVF_vect){
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	0b b6       	in	r0, 0x3b	; 59
      d6:	0f 92       	push	r0
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	4f 93       	push	r20
      de:	5f 93       	push	r21
      e0:	6f 93       	push	r22
      e2:	7f 93       	push	r23
      e4:	8f 93       	push	r24
      e6:	9f 93       	push	r25
      e8:	af 93       	push	r26
      ea:	bf 93       	push	r27
      ec:	ef 93       	push	r30
      ee:	ff 93       	push	r31
	TCNT3 = 34285;
      f0:	8d ee       	ldi	r24, 0xED	; 237
      f2:	95 e8       	ldi	r25, 0x85	; 133
      f4:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
      f8:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
	pinChangeFlag = TRUE;
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <__data_end>
	if(loggedIn == TRUE){
     102:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <loggedIn>
     106:	81 30       	cpi	r24, 0x01	; 1
     108:	91 f4       	brne	.+36     	; 0x12e <__vector_34+0x64>
		if(menuState == 0x3100){
     10a:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     10e:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
     112:	81 15       	cp	r24, r1
     114:	91 43       	sbci	r25, 0x31	; 49
     116:	59 f4       	brne	.+22     	; 0x12e <__vector_34+0x64>
			temperatureVoltage = adc_singleRead(0);
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	dd d2       	rcall	.+1466   	; 0x6d6 <adc_singleRead>
     11c:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <temperatureVoltage+0x1>
     120:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <temperatureVoltage>
			lcd_displayTemperature(temperatureVoltage);
     124:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <temperatureVoltage>
     128:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <temperatureVoltage+0x1>
     12c:	e6 d4       	rcall	.+2508   	; 0xafa <lcd_displayTemperature>
		}
	}
}
     12e:	ff 91       	pop	r31
     130:	ef 91       	pop	r30
     132:	bf 91       	pop	r27
     134:	af 91       	pop	r26
     136:	9f 91       	pop	r25
     138:	8f 91       	pop	r24
     13a:	7f 91       	pop	r23
     13c:	6f 91       	pop	r22
     13e:	5f 91       	pop	r21
     140:	4f 91       	pop	r20
     142:	3f 91       	pop	r19
     144:	2f 91       	pop	r18
     146:	0f 90       	pop	r0
     148:	0b be       	out	0x3b, r0	; 59
     14a:	0f 90       	pop	r0
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	0f 90       	pop	r0
     150:	1f 90       	pop	r1
     152:	18 95       	reti

00000154 <__vector_5>:

ISR(PCINT1_vect){
     154:	1f 92       	push	r1
     156:	0f 92       	push	r0
     158:	0f b6       	in	r0, 0x3f	; 63
     15a:	0f 92       	push	r0
     15c:	11 24       	eor	r1, r1
     15e:	0b b6       	in	r0, 0x3b	; 59
     160:	0f 92       	push	r0
     162:	2f 93       	push	r18
     164:	3f 93       	push	r19
     166:	4f 93       	push	r20
     168:	5f 93       	push	r21
     16a:	6f 93       	push	r22
     16c:	7f 93       	push	r23
     16e:	8f 93       	push	r24
     170:	9f 93       	push	r25
     172:	af 93       	push	r26
     174:	bf 93       	push	r27
     176:	ef 93       	push	r30
     178:	ff 93       	push	r31
	if(pinChangeFlag == TRUE){
     17a:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <__data_end>
     17e:	81 30       	cpi	r24, 0x01	; 1
     180:	09 f0       	breq	.+2      	; 0x184 <__vector_5+0x30>
     182:	a8 c1       	rjmp	.+848    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
		if(loggedIn == FALSE)
     184:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <loggedIn>
     188:	81 11       	cpse	r24, r1
     18a:	56 c0       	rjmp	.+172    	; 0x238 <__vector_5+0xe4>
		{
			switch(passwordCounter){
     18c:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <passwordCounter>
     190:	81 30       	cpi	r24, 0x01	; 1
     192:	b9 f0       	breq	.+46     	; 0x1c2 <__vector_5+0x6e>
     194:	28 f0       	brcs	.+10     	; 0x1a0 <__vector_5+0x4c>
     196:	82 30       	cpi	r24, 0x02	; 2
     198:	29 f1       	breq	.+74     	; 0x1e4 <__vector_5+0x90>
     19a:	83 30       	cpi	r24, 0x03	; 3
     19c:	a1 f1       	breq	.+104    	; 0x206 <__vector_5+0xb2>
     19e:	49 c0       	rjmp	.+146    	; 0x232 <__vector_5+0xde>
				case 0:
					if(checkBit(PINB, 0) == 0){
     1a0:	83 b1       	in	r24, 0x03	; 3
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	f0 d6       	rcall	.+3552   	; 0xf86 <checkBit>
     1a6:	81 11       	cpse	r24, r1
     1a8:	09 c0       	rjmp	.+18     	; 0x1bc <__vector_5+0x68>
						passwordCounter++;
     1aa:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <passwordCounter>
     1ae:	8f 5f       	subi	r24, 0xFF	; 255
     1b0:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <passwordCounter>
						gpio_out_toggle(PA, 4);
     1b4:	64 e0       	ldi	r22, 0x04	; 4
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	8a d3       	rcall	.+1812   	; 0x8ce <gpio_out_toggle>
     1ba:	3b c0       	rjmp	.+118    	; 0x232 <__vector_5+0xde>
					}
					else{
						passwordCounter = 0;
     1bc:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <passwordCounter>
					}
					break;
				case 1:
					if(checkBit(PINB, 1) == 0){
     1c0:	38 c0       	rjmp	.+112    	; 0x232 <__vector_5+0xde>
     1c2:	83 b1       	in	r24, 0x03	; 3
     1c4:	61 e0       	ldi	r22, 0x01	; 1
     1c6:	df d6       	rcall	.+3518   	; 0xf86 <checkBit>
     1c8:	81 11       	cpse	r24, r1
						passwordCounter++;
     1ca:	09 c0       	rjmp	.+18     	; 0x1de <__vector_5+0x8a>
     1cc:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <passwordCounter>
     1d0:	8f 5f       	subi	r24, 0xFF	; 255
						gpio_out_toggle(PA, 4);
     1d2:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <passwordCounter>
     1d6:	64 e0       	ldi	r22, 0x04	; 4
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	79 d3       	rcall	.+1778   	; 0x8ce <gpio_out_toggle>
					}
					else{
						passwordCounter = 0;
     1dc:	2a c0       	rjmp	.+84     	; 0x232 <__vector_5+0xde>
     1de:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <passwordCounter>
					}
					break;
				case 2:
					if(checkBit(PINB, 2) == 0){
     1e2:	27 c0       	rjmp	.+78     	; 0x232 <__vector_5+0xde>
     1e4:	83 b1       	in	r24, 0x03	; 3
     1e6:	62 e0       	ldi	r22, 0x02	; 2
     1e8:	ce d6       	rcall	.+3484   	; 0xf86 <checkBit>
     1ea:	81 11       	cpse	r24, r1
						passwordCounter++;
     1ec:	09 c0       	rjmp	.+18     	; 0x200 <__vector_5+0xac>
     1ee:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <passwordCounter>
     1f2:	8f 5f       	subi	r24, 0xFF	; 255
						gpio_out_toggle(PA, 4);
     1f4:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <passwordCounter>
     1f8:	64 e0       	ldi	r22, 0x04	; 4
     1fa:	80 e0       	ldi	r24, 0x00	; 0
					}
					else{
						passwordCounter = 0;
     1fc:	68 d3       	rcall	.+1744   	; 0x8ce <gpio_out_toggle>
     1fe:	19 c0       	rjmp	.+50     	; 0x232 <__vector_5+0xde>
     200:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <passwordCounter>
					}
					break;
				case 3:
					if(checkBit(PINB, 3) == 0){
     204:	16 c0       	rjmp	.+44     	; 0x232 <__vector_5+0xde>
     206:	83 b1       	in	r24, 0x03	; 3
						loggedIn = TRUE;
     208:	63 e0       	ldi	r22, 0x03	; 3
						lcd_clearDisplay();
     20a:	bd d6       	rcall	.+3450   	; 0xf86 <checkBit>
						lcd_writeString("Welcome!");
     20c:	81 11       	cpse	r24, r1
     20e:	0f c0       	rjmp	.+30     	; 0x22e <__vector_5+0xda>
     210:	81 e0       	ldi	r24, 0x01	; 1
						lcd_newLine();
     212:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <loggedIn>
						lcd_writeString("Press OK");
     216:	73 d3       	rcall	.+1766   	; 0x8fe <lcd_clearDisplay>
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	52 d4       	rcall	.+2212   	; 0xac2 <lcd_writeString>
						gpio_out_toggle(PA, 4);
     21e:	19 d4       	rcall	.+2098   	; 0xa52 <lcd_newLine>
     220:	89 e0       	ldi	r24, 0x09	; 9
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	4e d4       	rcall	.+2204   	; 0xac2 <lcd_writeString>
     226:	64 e0       	ldi	r22, 0x04	; 4
					}
					else{
						passwordCounter = 0;
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	51 d3       	rcall	.+1698   	; 0x8ce <gpio_out_toggle>
					}
					break;
				default:
					break;
			}
			pinChangeFlag = FALSE;
     22c:	02 c0       	rjmp	.+4      	; 0x232 <__vector_5+0xde>
     22e:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <passwordCounter>
		}
		else
		{
			if((menuState == 0x0000) && (menuLevel == 0)){
     232:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <__data_end>
     236:	4e c1       	rjmp	.+668    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     238:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     23c:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
     240:	89 2b       	or	r24, r25
				if(checkBit(PINB, 0) == 0){
     242:	c1 f4       	brne	.+48     	; 0x274 <__vector_5+0x120>
     244:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <menuLevel>
     248:	81 11       	cpse	r24, r1
     24a:	14 c0       	rjmp	.+40     	; 0x274 <__vector_5+0x120>
     24c:	83 b1       	in	r24, 0x03	; 3
					menuState += 0x1000;
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	9a d6       	rcall	.+3380   	; 0xf86 <checkBit>
     252:	81 11       	cpse	r24, r1
     254:	35 c1       	rjmp	.+618    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     256:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     25a:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
					menuLevel++;
     25e:	90 5f       	subi	r25, 0xF0	; 240
     260:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <menuState+0x1>
     264:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <menuState>
     268:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <menuLevel>
				}
			}
			else if(checkBit(PINB, 3) == 0){ // up
     26c:	8f 5f       	subi	r24, 0xFF	; 255
     26e:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <menuLevel>
     272:	26 c1       	rjmp	.+588    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     274:	83 b1       	in	r24, 0x03	; 3
				switch(menuLevel){
     276:	63 e0       	ldi	r22, 0x03	; 3
     278:	86 d6       	rcall	.+3340   	; 0xf86 <checkBit>
     27a:	81 11       	cpse	r24, r1
     27c:	2d c0       	rjmp	.+90     	; 0x2d8 <__vector_5+0x184>
     27e:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <menuLevel>
     282:	81 30       	cpi	r24, 0x01	; 1
					case 1:
						if(menuState != 0x1000){
     284:	19 f0       	breq	.+6      	; 0x28c <__vector_5+0x138>
     286:	82 30       	cpi	r24, 0x02	; 2
     288:	99 f0       	breq	.+38     	; 0x2b0 <__vector_5+0x15c>
     28a:	1a c1       	rjmp	.+564    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     28c:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     290:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
							menuState -= 0x1000;
     294:	81 15       	cp	r24, r1
     296:	90 41       	sbci	r25, 0x10	; 16
     298:	09 f4       	brne	.+2      	; 0x29c <__vector_5+0x148>
     29a:	12 c1       	rjmp	.+548    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     29c:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     2a0:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
     2a4:	90 51       	subi	r25, 0x10	; 16
     2a6:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <menuState+0x1>
						}
						break;
					case 2:
						if((menuState & 0x0F00) != 0x0100){
     2aa:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <menuState>
     2ae:	08 c1       	rjmp	.+528    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     2b0:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     2b4:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
     2b8:	88 27       	eor	r24, r24
							menuState -= 0x0100;
     2ba:	9f 70       	andi	r25, 0x0F	; 15
     2bc:	81 15       	cp	r24, r1
     2be:	91 40       	sbci	r25, 0x01	; 1
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <__vector_5+0x170>
     2c2:	fe c0       	rjmp	.+508    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     2c4:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     2c8:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
     2cc:	9a 95       	dec	r25
						break;
					default:
						break;
				}
			}
			else if(checkBit(PINB, 2) == 0){ // down
     2ce:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <menuState+0x1>
     2d2:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <menuState>
     2d6:	f4 c0       	rjmp	.+488    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     2d8:	83 b1       	in	r24, 0x03	; 3
				switch(menuLevel){
     2da:	62 e0       	ldi	r22, 0x02	; 2
     2dc:	54 d6       	rcall	.+3240   	; 0xf86 <checkBit>
     2de:	81 11       	cpse	r24, r1
     2e0:	67 c0       	rjmp	.+206    	; 0x3b0 <__vector_5+0x25c>
     2e2:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <menuLevel>
     2e6:	81 30       	cpi	r24, 0x01	; 1
					case 1:
						if(menuState != 0x4000){
     2e8:	19 f0       	breq	.+6      	; 0x2f0 <__vector_5+0x19c>
     2ea:	82 30       	cpi	r24, 0x02	; 2
     2ec:	99 f0       	breq	.+38     	; 0x314 <__vector_5+0x1c0>
     2ee:	e8 c0       	rjmp	.+464    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     2f0:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     2f4:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
							menuState += 0x1000;
     2f8:	81 15       	cp	r24, r1
     2fa:	90 44       	sbci	r25, 0x40	; 64
     2fc:	09 f4       	brne	.+2      	; 0x300 <__vector_5+0x1ac>
     2fe:	e0 c0       	rjmp	.+448    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     300:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     304:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
     308:	90 5f       	subi	r25, 0xF0	; 240
     30a:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <menuState+0x1>
						}
						break;
					case 2:
						switch(menuState & 0xF000){
     30e:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <menuState>
     312:	d6 c0       	rjmp	.+428    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     314:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     318:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
     31c:	88 27       	eor	r24, r24
     31e:	90 7f       	andi	r25, 0xF0	; 240
     320:	81 15       	cp	r24, r1
     322:	20 e2       	ldi	r18, 0x20	; 32
     324:	92 07       	cpc	r25, r18
     326:	e1 f0       	breq	.+56     	; 0x360 <__vector_5+0x20c>
     328:	81 15       	cp	r24, r1
     32a:	20 e4       	ldi	r18, 0x40	; 64
     32c:	92 07       	cpc	r25, r18
     32e:	61 f1       	breq	.+88     	; 0x388 <__vector_5+0x234>
							case 0x1000:
								if((menuState & 0x0F00) != 0x0300){
     330:	81 15       	cp	r24, r1
     332:	90 41       	sbci	r25, 0x10	; 16
     334:	09 f0       	breq	.+2      	; 0x338 <__vector_5+0x1e4>
     336:	c4 c0       	rjmp	.+392    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     338:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     33c:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
     340:	88 27       	eor	r24, r24
     342:	9f 70       	andi	r25, 0x0F	; 15
									menuState += 0x0100;
     344:	81 15       	cp	r24, r1
     346:	93 40       	sbci	r25, 0x03	; 3
     348:	09 f4       	brne	.+2      	; 0x34c <__vector_5+0x1f8>
     34a:	ba c0       	rjmp	.+372    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     34c:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     350:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
     354:	93 95       	inc	r25
     356:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <menuState+0x1>
								}
								break;
							case 0x2000:
								if((menuState & 0x0F00) != 0x0200){
     35a:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <menuState>
     35e:	b0 c0       	rjmp	.+352    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     360:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     364:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
     368:	88 27       	eor	r24, r24
     36a:	9f 70       	andi	r25, 0x0F	; 15
									menuState += 0x0100;
     36c:	81 15       	cp	r24, r1
     36e:	92 40       	sbci	r25, 0x02	; 2
     370:	09 f4       	brne	.+2      	; 0x374 <__vector_5+0x220>
     372:	a6 c0       	rjmp	.+332    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     374:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     378:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
     37c:	93 95       	inc	r25
     37e:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <menuState+0x1>
								}
								break;
							case 0x3000:
								break;
							case 0x4000:
								if((menuState & 0x0F00) != 0x0A00){
     382:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <menuState>
     386:	9c c0       	rjmp	.+312    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     388:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     38c:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
     390:	88 27       	eor	r24, r24
									menuState += 0x0100;
     392:	9f 70       	andi	r25, 0x0F	; 15
     394:	81 15       	cp	r24, r1
     396:	9a 40       	sbci	r25, 0x0A	; 10
     398:	09 f4       	brne	.+2      	; 0x39c <__vector_5+0x248>
     39a:	92 c0       	rjmp	.+292    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     39c:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     3a0:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
     3a4:	93 95       	inc	r25
						break;
					default:
						break;
				}
			}
			else if(checkBit(PINB, 1) == 0){ // back
     3a6:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <menuState+0x1>
     3aa:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <menuState>
     3ae:	88 c0       	rjmp	.+272    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     3b0:	83 b1       	in	r24, 0x03	; 3
				menuLevel--;
     3b2:	61 e0       	ldi	r22, 0x01	; 1
     3b4:	e8 d5       	rcall	.+3024   	; 0xf86 <checkBit>
     3b6:	81 11       	cpse	r24, r1
     3b8:	26 c0       	rjmp	.+76     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3ba:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <menuLevel>
				switch(menuLevel){
     3be:	81 50       	subi	r24, 0x01	; 1
     3c0:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <menuLevel>
     3c4:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <menuLevel>
     3c8:	81 30       	cpi	r24, 0x01	; 1
     3ca:	41 f0       	breq	.+16     	; 0x3dc <__vector_5+0x288>
					case 0:
						menuState = 0x0000;
     3cc:	18 f0       	brcs	.+6      	; 0x3d4 <__vector_5+0x280>
     3ce:	82 30       	cpi	r24, 0x02	; 2
     3d0:	81 f0       	breq	.+32     	; 0x3f2 <__vector_5+0x29e>
     3d2:	76 c0       	rjmp	.+236    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
					case 1:
						menuState &= 0xF000;
     3d4:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <menuState+0x1>
     3d8:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <menuState>
     3dc:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     3e0:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
     3e4:	88 27       	eor	r24, r24
						break;
     3e6:	90 7f       	andi	r25, 0xF0	; 240
					case 2:
						menuState &= 0xFF00;
     3e8:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <menuState+0x1>
     3ec:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <menuState>
     3f0:	67 c0       	rjmp	.+206    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     3f2:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     3f6:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
						break;
     3fa:	88 27       	eor	r24, r24
						break;
					default:
						break;
				}
			}
			else if(checkBit(PINB, 0) == 0){ // ok
     3fc:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <menuState+0x1>
     400:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <menuState>
     404:	5d c0       	rjmp	.+186    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     406:	83 b1       	in	r24, 0x03	; 3
				menuLevel++;
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	bd d5       	rcall	.+2938   	; 0xf86 <checkBit>
     40c:	81 11       	cpse	r24, r1
     40e:	58 c0       	rjmp	.+176    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     410:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <menuLevel>
				switch(menuLevel){
     414:	8f 5f       	subi	r24, 0xFF	; 255
     416:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <menuLevel>
     41a:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <menuLevel>
     41e:	82 30       	cpi	r24, 0x02	; 2
     420:	79 f0       	breq	.+30     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     422:	83 30       	cpi	r24, 0x03	; 3
					case 1:
						menuState += 0x1000;
     424:	b9 f0       	breq	.+46     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     426:	81 30       	cpi	r24, 0x01	; 1
     428:	09 f0       	breq	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	4a c0       	rjmp	.+148    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     42c:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     430:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
     434:	90 5f       	subi	r25, 0xF0	; 240
						break;
     436:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <menuState+0x1>
					case 2:
						menuState += 0x0100;
     43a:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <menuState>
     43e:	40 c0       	rjmp	.+128    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     440:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     444:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
     448:	93 95       	inc	r25
						break;
     44a:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <menuState+0x1>
					case 3:
						if(menuState == 0x2100){
     44e:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <menuState>
     452:	36 c0       	rjmp	.+108    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     454:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     458:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
							manualMode = TRUE;
     45c:	81 15       	cp	r24, r1
     45e:	91 42       	sbci	r25, 0x21	; 33
							menuLevel--;
     460:	49 f4       	brne	.+18     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <manualMode>
     468:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <menuLevel>
						}
						else if(menuState == 0x2200){
     46c:	81 50       	subi	r24, 0x01	; 1
     46e:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <menuLevel>
     472:	26 c0       	rjmp	.+76     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     474:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     478:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
							manualMode = FALSE;
     47c:	81 15       	cp	r24, r1
							menuLevel--;
     47e:	92 42       	sbci	r25, 0x22	; 34
     480:	41 f4       	brne	.+16     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     482:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <manualMode>
     486:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <menuLevel>
						}
						else if((menuState == 0x1100) || (menuState == 0x1200)){
     48a:	81 50       	subi	r24, 0x01	; 1
     48c:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <menuLevel>
     490:	17 c0       	rjmp	.+46     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     492:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     496:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
     49a:	81 15       	cp	r24, r1
     49c:	91 41       	sbci	r25, 0x11	; 17
     49e:	39 f0       	breq	.+14     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4a0:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
							menuState += 0x0010;
     4a4:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
     4a8:	81 15       	cp	r24, r1
     4aa:	92 41       	sbci	r25, 0x12	; 18
     4ac:	49 f4       	brne	.+18     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4ae:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     4b2:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
						break;
					default:
						break;
				}
			}
			lcd_displayMenu(menuState);
     4b6:	40 96       	adiw	r24, 0x10	; 16
     4b8:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <menuState+0x1>
     4bc:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <menuState>
			gpio_out_toggle(PA, 4);
     4c0:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <menuState>
     4c4:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <menuState+0x1>
			pinChangeFlag = FALSE;
     4c8:	c1 d3       	rcall	.+1922   	; 0xc4c <lcd_displayMenu>
     4ca:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
}
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	ff d1       	rcall	.+1022   	; 0x8ce <gpio_out_toggle>
     4d0:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <__data_end>
     4d4:	ff 91       	pop	r31
     4d6:	ef 91       	pop	r30
     4d8:	bf 91       	pop	r27
     4da:	af 91       	pop	r26
     4dc:	9f 91       	pop	r25
     4de:	8f 91       	pop	r24
     4e0:	7f 91       	pop	r23
     4e2:	6f 91       	pop	r22
     4e4:	5f 91       	pop	r21
     4e6:	4f 91       	pop	r20
     4e8:	3f 91       	pop	r19
     4ea:	2f 91       	pop	r18
     4ec:	0f 90       	pop	r0
     4ee:	0b be       	out	0x3b, r0	; 59
     4f0:	0f 90       	pop	r0
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	0f 90       	pop	r0
     4f6:	1f 90       	pop	r1
     4f8:	18 95       	reti

000004fa <init>:

void init(){
	lcd_init();
     4fa:	cf 93       	push	r28
	lcd_writeString("Enter password:");
     4fc:	36 d2       	rcall	.+1132   	; 0x96a <lcd_init>
     4fe:	82 e1       	ldi	r24, 0x12	; 18
     500:	91 e0       	ldi	r25, 0x01	; 1
	//lcd_resetCursor();
	loggedIn = FALSE;
     502:	df d2       	rcall	.+1470   	; 0xac2 <lcd_writeString>
     504:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <loggedIn>
	pinChangeFlag = TRUE;
     508:	c1 e0       	ldi	r28, 0x01	; 1
     50a:	c0 93 62 03 	sts	0x0362, r28	; 0x800362 <__data_end>
	passwordCounter = 0;
     50e:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <passwordCounter>
	menuState = 0x0000;
     512:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <menuState+0x1>
     516:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <menuState>
	menuLevel = 0;
     51a:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <menuLevel>
	manualMode = TRUE;
     51e:	c0 93 77 03 	sts	0x0377, r28	; 0x800377 <manualMode>
	eepromUnreadMessageAddress = 0x010;
     522:	80 e1       	ldi	r24, 0x10	; 16
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <eepromUnreadMessageAddress+0x1>
     52a:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <eepromUnreadMessageAddress>
	gpio_init(PB, 0, INPUT, USE_PULL);
     52e:	21 e0       	ldi	r18, 0x01	; 1
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	81 e0       	ldi	r24, 0x01	; 1
	gpio_init(PB, 1, INPUT, USE_PULL);
     536:	5e d1       	rcall	.+700    	; 0x7f4 <gpio_init>
     538:	21 e0       	ldi	r18, 0x01	; 1
     53a:	40 e0       	ldi	r20, 0x00	; 0
     53c:	61 e0       	ldi	r22, 0x01	; 1
	gpio_init(PB, 2, INPUT, USE_PULL);
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	59 d1       	rcall	.+690    	; 0x7f4 <gpio_init>
     542:	21 e0       	ldi	r18, 0x01	; 1
     544:	40 e0       	ldi	r20, 0x00	; 0
	gpio_init(PB, 3, INPUT, USE_PULL);
     546:	62 e0       	ldi	r22, 0x02	; 2
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	54 d1       	rcall	.+680    	; 0x7f4 <gpio_init>
     54c:	21 e0       	ldi	r18, 0x01	; 1
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	63 e0       	ldi	r22, 0x03	; 3
	PCMSK1 = 0x0F;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	4f d1       	rcall	.+670    	; 0x7f4 <gpio_init>
     556:	8f e0       	ldi	r24, 0x0F	; 15
	TCCR3A = 0x00;
     558:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	TCCR3C = 0x00;
     55c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TIMSK3 = 0x01;
     560:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__TEXT_REGION_LENGTH__+0x7e0092>
	setBit(&PCICR, PCIE1);
     564:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     568:	61 e0       	ldi	r22, 0x01	; 1
	gpio_init(PA, 4, OUTPUT, NO_PULL);
     56a:	88 e6       	ldi	r24, 0x68	; 104
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	ce d4       	rcall	.+2460   	; 0xf0c <setBit>
     570:	20 e0       	ldi	r18, 0x00	; 0
	gpio_init(PA, 0, INPUT, NO_PULL);
     572:	41 e0       	ldi	r20, 0x01	; 1
     574:	64 e0       	ldi	r22, 0x04	; 4
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	3d d1       	rcall	.+634    	; 0x7f4 <gpio_init>
     57a:	20 e0       	ldi	r18, 0x00	; 0
	adc_init(_10BIT, ADC_PRESCALER_16, SINGLE_CONVERSION);
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	38 d1       	rcall	.+624    	; 0x7f4 <gpio_init>
     584:	40 e0       	ldi	r20, 0x00	; 0
     586:	64 e0       	ldi	r22, 0x04	; 4
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	26 d0       	rcall	.+76     	; 0x5d8 <adc_init>
	for(int i = 1; i < 8; i++){
		channelsEnabled[i] = 0;
     58c:	ec e6       	ldi	r30, 0x6C	; 108
	TIMSK3 = 0x01;
	setBit(&PCICR, PCIE1);
	gpio_init(PA, 4, OUTPUT, NO_PULL);
	gpio_init(PA, 0, INPUT, NO_PULL);
	adc_init(_10BIT, ADC_PRESCALER_16, SINGLE_CONVERSION);
	for(int i = 1; i < 8; i++){
     58e:	f3 e0       	ldi	r31, 0x03	; 3
     590:	83 e7       	ldi	r24, 0x73	; 115
     592:	93 e0       	ldi	r25, 0x03	; 3
		channelsEnabled[i] = 0;
	}
	channelsEnabled[0] = 1;
     594:	11 92       	st	Z+, r1
     596:	e8 17       	cp	r30, r24
     598:	f9 07       	cpc	r31, r25
	adc_start(channelsEnabled);
     59a:	e1 f7       	brne	.-8      	; 0x594 <init+0x9a>
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <channelsEnabled>
	TCCR3B = 0x04;
     5a2:	8b e6       	ldi	r24, 0x6B	; 107
     5a4:	93 e0       	ldi	r25, 0x03	; 3
	TCNT3 = 34285;
     5a6:	62 d0       	rcall	.+196    	; 0x66c <adc_start>
     5a8:	84 e0       	ldi	r24, 0x04	; 4
     5aa:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	uart_init(ASYNCHRONOUS, EVEN, _2BIT, _9600);
     5ae:	8d ee       	ldi	r24, 0xED	; 237
     5b0:	95 e8       	ldi	r25, 0x85	; 133
     5b2:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     5b6:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
	uart_start(TRUE, TRUE);
     5ba:	23 e3       	ldi	r18, 0x33	; 51
     5bc:	41 e0       	ldi	r20, 0x01	; 1
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	80 e0       	ldi	r24, 0x00	; 0
	eeprom_init();
     5c2:	6c d5       	rcall	.+2776   	; 0x109c <uart_init>
     5c4:	61 e0       	ldi	r22, 0x01	; 1
}
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	af d5       	rcall	.+2910   	; 0x1128 <uart_start>
     5ca:	c3 d0       	rcall	.+390    	; 0x752 <eeprom_init>
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <main>:

int main(void)
{
	disableJTAG();
	init();
     5d0:	0d d1       	rcall	.+538    	; 0x7ec <disableJTAG>
     5d2:	93 df       	rcall	.-218    	; 0x4fa <init>
	sei();
     5d4:	78 94       	sei
     5d6:	ff cf       	rjmp	.-2      	; 0x5d6 <main+0x6>

000005d8 <adc_init>:
void adc_stop(u8 *channelsEnabled){
	u8 channel;
	clearBit(&ADCSRA, ADEN);
	for (channel = 0; channel < 8; channel++)
		updateBit(&DIDR0, 1 << channel, ~channelsEnabled[channel]);
}
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	18 2f       	mov	r17, r24
     5e0:	c6 2f       	mov	r28, r22
     5e2:	d4 2f       	mov	r29, r20
     5e4:	67 e0       	ldi	r22, 0x07	; 7
     5e6:	8c e7       	ldi	r24, 0x7C	; 124
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	9c d4       	rcall	.+2360   	; 0xf24 <clearBit>
     5ec:	66 e0       	ldi	r22, 0x06	; 6
     5ee:	8c e7       	ldi	r24, 0x7C	; 124
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	8c d4       	rcall	.+2328   	; 0xf0c <setBit>
     5f4:	41 2f       	mov	r20, r17
     5f6:	65 e0       	ldi	r22, 0x05	; 5
     5f8:	8c e7       	ldi	r24, 0x7C	; 124
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	ac d4       	rcall	.+2392   	; 0xf56 <updateBit>
     5fe:	64 e0       	ldi	r22, 0x04	; 4
     600:	8c e7       	ldi	r24, 0x7C	; 124
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	8f d4       	rcall	.+2334   	; 0xf24 <clearBit>
     606:	63 e0       	ldi	r22, 0x03	; 3
     608:	8c e7       	ldi	r24, 0x7C	; 124
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	8b d4       	rcall	.+2326   	; 0xf24 <clearBit>
     60e:	c2 fb       	bst	r28, 2
     610:	44 27       	eor	r20, r20
     612:	40 f9       	bld	r20, 0
     614:	62 e0       	ldi	r22, 0x02	; 2
     616:	8a e7       	ldi	r24, 0x7A	; 122
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	9d d4       	rcall	.+2362   	; 0xf56 <updateBit>
     61c:	c1 fb       	bst	r28, 1
     61e:	44 27       	eor	r20, r20
     620:	40 f9       	bld	r20, 0
     622:	61 e0       	ldi	r22, 0x01	; 1
     624:	8a e7       	ldi	r24, 0x7A	; 122
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	96 d4       	rcall	.+2348   	; 0xf56 <updateBit>
     62a:	4c 2f       	mov	r20, r28
     62c:	41 70       	andi	r20, 0x01	; 1
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	8a e7       	ldi	r24, 0x7A	; 122
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	90 d4       	rcall	.+2336   	; 0xf56 <updateBit>
     636:	d1 11       	cpse	r29, r1
     638:	05 c0       	rjmp	.+10     	; 0x644 <adc_init+0x6c>
     63a:	65 e0       	ldi	r22, 0x05	; 5
     63c:	8a e7       	ldi	r24, 0x7A	; 122
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	71 d4       	rcall	.+2274   	; 0xf24 <clearBit>
     642:	10 c0       	rjmp	.+32     	; 0x664 <adc_init+0x8c>
     644:	65 e0       	ldi	r22, 0x05	; 5
     646:	8a e7       	ldi	r24, 0x7A	; 122
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	60 d4       	rcall	.+2240   	; 0xf0c <setBit>
     64c:	62 e0       	ldi	r22, 0x02	; 2
     64e:	8b e7       	ldi	r24, 0x7B	; 123
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	68 d4       	rcall	.+2256   	; 0xf24 <clearBit>
     654:	61 e0       	ldi	r22, 0x01	; 1
     656:	8b e7       	ldi	r24, 0x7B	; 123
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	64 d4       	rcall	.+2248   	; 0xf24 <clearBit>
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	8b e7       	ldi	r24, 0x7B	; 123
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	60 d4       	rcall	.+2240   	; 0xf24 <clearBit>
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	08 95       	ret

0000066c <adc_start>:
     66c:	ef 92       	push	r14
     66e:	ff 92       	push	r15
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	d8 2f       	mov	r29, r24
     67a:	c9 2f       	mov	r28, r25
     67c:	67 e0       	ldi	r22, 0x07	; 7
     67e:	8a e7       	ldi	r24, 0x7A	; 122
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	44 d4       	rcall	.+2184   	; 0xf0c <setBit>
     684:	0d 2f       	mov	r16, r29
     686:	1c 2f       	mov	r17, r28
     688:	c0 e0       	ldi	r28, 0x00	; 0
     68a:	d0 e0       	ldi	r29, 0x00	; 0
     68c:	ee 24       	eor	r14, r14
     68e:	e3 94       	inc	r14
     690:	f1 2c       	mov	r15, r1
     692:	f8 01       	movw	r30, r16
     694:	41 91       	ld	r20, Z+
     696:	8f 01       	movw	r16, r30
     698:	b7 01       	movw	r22, r14
     69a:	0c 2e       	mov	r0, r28
     69c:	02 c0       	rjmp	.+4      	; 0x6a2 <adc_start+0x36>
     69e:	66 0f       	add	r22, r22
     6a0:	77 1f       	adc	r23, r23
     6a2:	0a 94       	dec	r0
     6a4:	e2 f7       	brpl	.-8      	; 0x69e <adc_start+0x32>
     6a6:	8e e7       	ldi	r24, 0x7E	; 126
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	55 d4       	rcall	.+2218   	; 0xf56 <updateBit>
     6ac:	21 96       	adiw	r28, 0x01	; 1
     6ae:	c8 30       	cpi	r28, 0x08	; 8
     6b0:	d1 05       	cpc	r29, r1
     6b2:	79 f7       	brne	.-34     	; 0x692 <adc_start+0x26>
     6b4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     6b8:	65 e0       	ldi	r22, 0x05	; 5
     6ba:	65 d4       	rcall	.+2250   	; 0xf86 <checkBit>
     6bc:	88 23       	and	r24, r24
     6be:	21 f0       	breq	.+8      	; 0x6c8 <adc_start+0x5c>
     6c0:	66 e0       	ldi	r22, 0x06	; 6
     6c2:	8a e7       	ldi	r24, 0x7A	; 122
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	22 d4       	rcall	.+2116   	; 0xf0c <setBit>
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	ff 90       	pop	r15
     6d2:	ef 90       	pop	r14
     6d4:	08 95       	ret

000006d6 <adc_singleRead>:

u16 adc_singleRead(u8 channel){
	u16 readValue = 0;
	u16 temp = 0;
	ADMUX = channel | (ADMUX & 0b11111000);
     6d6:	ec e7       	ldi	r30, 0x7C	; 124
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	90 81       	ld	r25, Z
     6dc:	98 7f       	andi	r25, 0xF8	; 248
     6de:	89 2b       	or	r24, r25
     6e0:	80 83       	st	Z, r24
	if(!checkBit(ADCSRA, ADATE))
     6e2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     6e6:	65 e0       	ldi	r22, 0x05	; 5
     6e8:	4e d4       	rcall	.+2204   	; 0xf86 <checkBit>
     6ea:	81 11       	cpse	r24, r1
     6ec:	0a c0       	rjmp	.+20     	; 0x702 <adc_singleRead+0x2c>
	{
		setBit(&ADCSRA, ADSC);
     6ee:	66 e0       	ldi	r22, 0x06	; 6
     6f0:	8a e7       	ldi	r24, 0x7A	; 122
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0b d4       	rcall	.+2070   	; 0xf0c <setBit>
		while(!(ADCSRA & (1<<ADIF)));
     6f6:	ea e7       	ldi	r30, 0x7A	; 122
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	84 ff       	sbrs	r24, 4
     6fe:	fd cf       	rjmp	.-6      	; 0x6fa <adc_singleRead+0x24>
     700:	12 c0       	rjmp	.+36     	; 0x726 <adc_singleRead+0x50>
	}
	else
	{
		setBit(&ADCSRA, ADIF);
     702:	64 e0       	ldi	r22, 0x04	; 4
     704:	8a e7       	ldi	r24, 0x7A	; 122
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	01 d4       	rcall	.+2050   	; 0xf0c <setBit>
		while(!(ADCSRA & (1<<ADIF)));
     70a:	ea e7       	ldi	r30, 0x7A	; 122
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	80 81       	ld	r24, Z
     710:	84 ff       	sbrs	r24, 4
		setBit(&ADCSRA, ADIF);
     712:	fd cf       	rjmp	.-6      	; 0x70e <adc_singleRead+0x38>
     714:	64 e0       	ldi	r22, 0x04	; 4
     716:	8a e7       	ldi	r24, 0x7A	; 122
     718:	90 e0       	ldi	r25, 0x00	; 0
		while(!(ADCSRA & (1<<ADIF)));
     71a:	f8 d3       	rcall	.+2032   	; 0xf0c <setBit>
     71c:	ea e7       	ldi	r30, 0x7A	; 122
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 81       	ld	r24, Z
		
	}
	switch(checkBit(ADMUX, ADLAR))
     722:	84 ff       	sbrs	r24, 4
     724:	fd cf       	rjmp	.-6      	; 0x720 <adc_singleRead+0x4a>
     726:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     72a:	65 e0       	ldi	r22, 0x05	; 5
     72c:	2c d4       	rcall	.+2136   	; 0xf86 <checkBit>
     72e:	88 23       	and	r24, r24
     730:	31 f0       	breq	.+12     	; 0x73e <adc_singleRead+0x68>
     732:	81 30       	cpi	r24, 0x01	; 1
	{
		case 1:
			readValue = ADCH;
     734:	59 f4       	brne	.+22     	; 0x74c <adc_singleRead+0x76>
     736:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
			break;
     73a:	90 e0       	ldi	r25, 0x00	; 0
		case 0:
			readValue = ADCL;
     73c:	08 95       	ret
     73e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
			temp = ADCH;
     742:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
			readValue |= (temp << 8);
     746:	90 e0       	ldi	r25, 0x00	; 0
		break;
     748:	92 2b       	or	r25, r18
	for (channel = 0; channel < 8; channel++)
		updateBit(&DIDR0, 1 << channel, ~channelsEnabled[channel]);
}

u16 adc_singleRead(u8 channel){
	u16 readValue = 0;
     74a:	08 95       	ret
     74c:	80 e0       	ldi	r24, 0x00	; 0
			temp = ADCH;
			readValue |= (temp << 8);
		break;
	}
	return readValue;
}
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	08 95       	ret

00000752 <eeprom_init>:
#include "gpio.h"
#include "uart.h"

void eeprom_init(){
	spi_init();
	spi_start();
     752:	21 d4       	rcall	.+2114   	; 0xf96 <spi_init>
     754:	4d c4       	rjmp	.+2202   	; 0xff0 <spi_start>
     756:	08 95       	ret

00000758 <eeprom_read>:
}

u8 eeprom_read(u16 address){
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	c8 2f       	mov	r28, r24
     75e:	d9 2f       	mov	r29, r25
	u8 value = 0x23;
	gpio_out_reset(PB, 4);
     760:	64 e0       	ldi	r22, 0x04	; 4
     762:	81 e0       	ldi	r24, 0x01	; 1
	spi_writeData(0x03);
     764:	9c d0       	rcall	.+312    	; 0x89e <gpio_out_reset>
	spi_writeData((u8)(address >> 8));
     766:	83 e0       	ldi	r24, 0x03	; 3
	spi_writeData((u8)(address));
     768:	51 d4       	rcall	.+2210   	; 0x100c <spi_writeData>
     76a:	8d 2f       	mov	r24, r29
	value = spi_readData();
     76c:	4f d4       	rcall	.+2206   	; 0x100c <spi_writeData>
     76e:	8c 2f       	mov	r24, r28
	gpio_out_set(PB, 4);
     770:	4d d4       	rcall	.+2202   	; 0x100c <spi_writeData>
     772:	49 d4       	rcall	.+2194   	; 0x1006 <spi_readData>
     774:	c8 2f       	mov	r28, r24
     776:	64 e0       	ldi	r22, 0x04	; 4
	return value;
}
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	79 d0       	rcall	.+242    	; 0x86e <gpio_out_set>
     77c:	8c 2f       	mov	r24, r28
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	08 95       	ret

00000784 <eeprom_write>:

void eeprom_write(u8 data, u16 address){
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	c8 2f       	mov	r28, r24
     78c:	d6 2f       	mov	r29, r22
     78e:	17 2f       	mov	r17, r23
	gpio_out_reset(PB, 4);
     790:	64 e0       	ldi	r22, 0x04	; 4
     792:	81 e0       	ldi	r24, 0x01	; 1
	spi_writeData(0x06);
     794:	84 d0       	rcall	.+264    	; 0x89e <gpio_out_reset>
	gpio_out_set(PB, 4);
     796:	86 e0       	ldi	r24, 0x06	; 6
     798:	39 d4       	rcall	.+2162   	; 0x100c <spi_writeData>
     79a:	64 e0       	ldi	r22, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	67 d0       	rcall	.+206    	; 0x86e <gpio_out_set>
     7a0:	8f e1       	ldi	r24, 0x1F	; 31
     7a2:	9e e4       	ldi	r25, 0x4E	; 78
     7a4:	01 97       	sbiw	r24, 0x01	; 1
	_delay_ms(10);
	gpio_out_reset(PB, 4);
     7a6:	f1 f7       	brne	.-4      	; 0x7a4 <eeprom_write+0x20>
     7a8:	00 c0       	rjmp	.+0      	; 0x7aa <eeprom_write+0x26>
	spi_writeData(0x02);
     7aa:	00 00       	nop
	spi_writeData((u8)(address >> 8));
     7ac:	64 e0       	ldi	r22, 0x04	; 4
	spi_writeData((u8)(address));
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	76 d0       	rcall	.+236    	; 0x89e <gpio_out_reset>
	spi_writeData(data);
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	2b d4       	rcall	.+2134   	; 0x100c <spi_writeData>
     7b6:	81 2f       	mov	r24, r17
	gpio_out_set(PB, 4);
     7b8:	29 d4       	rcall	.+2130   	; 0x100c <spi_writeData>
     7ba:	8d 2f       	mov	r24, r29
     7bc:	27 d4       	rcall	.+2126   	; 0x100c <spi_writeData>
     7be:	8c 2f       	mov	r24, r28
     7c0:	25 d4       	rcall	.+2122   	; 0x100c <spi_writeData>
     7c2:	64 e0       	ldi	r22, 0x04	; 4
     7c4:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(10);
	gpio_out_reset(PB, 4);
     7c6:	53 d0       	rcall	.+166    	; 0x86e <gpio_out_set>
     7c8:	8f e1       	ldi	r24, 0x1F	; 31
     7ca:	9e e4       	ldi	r25, 0x4E	; 78
     7cc:	01 97       	sbiw	r24, 0x01	; 1
	spi_writeData(0x04);
     7ce:	f1 f7       	brne	.-4      	; 0x7cc <eeprom_write+0x48>
     7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <eeprom_write+0x4e>
     7d2:	00 00       	nop
	gpio_out_set(PB, 4);
     7d4:	64 e0       	ldi	r22, 0x04	; 4
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	62 d0       	rcall	.+196    	; 0x89e <gpio_out_reset>
     7da:	84 e0       	ldi	r24, 0x04	; 4
     7dc:	17 d4       	rcall	.+2094   	; 0x100c <spi_writeData>
     7de:	64 e0       	ldi	r22, 0x04	; 4
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	45 d0       	rcall	.+138    	; 0x86e <gpio_out_set>
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	08 95       	ret

000007ec <disableJTAG>:
			break;
		case PC:
			clearBit(&PORTC, _number);
			break;
		case PD:
			clearBit(&PORTD, _number);
     7ec:	80 e8       	ldi	r24, 0x80	; 128
     7ee:	85 bf       	out	0x35, r24	; 53
     7f0:	85 bf       	out	0x35, r24	; 53
     7f2:	08 95       	ret

000007f4 <gpio_init>:
     7f4:	1f 93       	push	r17
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	d6 2f       	mov	r29, r22
     7fc:	c4 2f       	mov	r28, r20
     7fe:	12 2f       	mov	r17, r18
     800:	81 30       	cpi	r24, 0x01	; 1
     802:	89 f0       	breq	.+34     	; 0x826 <gpio_init+0x32>
     804:	28 f0       	brcs	.+10     	; 0x810 <gpio_init+0x1c>
     806:	82 30       	cpi	r24, 0x02	; 2
     808:	c9 f0       	breq	.+50     	; 0x83c <gpio_init+0x48>
     80a:	83 30       	cpi	r24, 0x03	; 3
     80c:	11 f1       	breq	.+68     	; 0x852 <gpio_init+0x5e>
     80e:	2b c0       	rjmp	.+86     	; 0x866 <gpio_init+0x72>
     810:	81 e2       	ldi	r24, 0x21	; 33
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	a0 d3       	rcall	.+1856   	; 0xf56 <updateBit>
     816:	c1 11       	cpse	r28, r1
     818:	26 c0       	rjmp	.+76     	; 0x866 <gpio_init+0x72>
     81a:	41 2f       	mov	r20, r17
     81c:	6d 2f       	mov	r22, r29
     81e:	82 e2       	ldi	r24, 0x22	; 34
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	99 d3       	rcall	.+1842   	; 0xf56 <updateBit>
     824:	20 c0       	rjmp	.+64     	; 0x866 <gpio_init+0x72>
     826:	84 e2       	ldi	r24, 0x24	; 36
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	95 d3       	rcall	.+1834   	; 0xf56 <updateBit>
     82c:	c1 11       	cpse	r28, r1
     82e:	1b c0       	rjmp	.+54     	; 0x866 <gpio_init+0x72>
     830:	41 2f       	mov	r20, r17
     832:	6d 2f       	mov	r22, r29
     834:	85 e2       	ldi	r24, 0x25	; 37
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	8e d3       	rcall	.+1820   	; 0xf56 <updateBit>
     83a:	15 c0       	rjmp	.+42     	; 0x866 <gpio_init+0x72>
     83c:	87 e2       	ldi	r24, 0x27	; 39
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	8a d3       	rcall	.+1812   	; 0xf56 <updateBit>
     842:	c1 11       	cpse	r28, r1
     844:	10 c0       	rjmp	.+32     	; 0x866 <gpio_init+0x72>
     846:	41 2f       	mov	r20, r17
     848:	6d 2f       	mov	r22, r29
     84a:	88 e2       	ldi	r24, 0x28	; 40
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	83 d3       	rcall	.+1798   	; 0xf56 <updateBit>
     850:	0a c0       	rjmp	.+20     	; 0x866 <gpio_init+0x72>
     852:	8a e2       	ldi	r24, 0x2A	; 42
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	7f d3       	rcall	.+1790   	; 0xf56 <updateBit>
     858:	c1 11       	cpse	r28, r1
     85a:	05 c0       	rjmp	.+10     	; 0x866 <gpio_init+0x72>
     85c:	41 2f       	mov	r20, r17
     85e:	6d 2f       	mov	r22, r29
     860:	8b e2       	ldi	r24, 0x2B	; 43
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	78 d3       	rcall	.+1776   	; 0xf56 <updateBit>
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	1f 91       	pop	r17
     86c:	08 95       	ret

0000086e <gpio_out_set>:
	}
}
	

void gpio_out_set(port _port, u8 _number){
	switch(_port){
     86e:	81 30       	cpi	r24, 0x01	; 1
     870:	51 f0       	breq	.+20     	; 0x886 <gpio_out_set+0x18>
     872:	28 f0       	brcs	.+10     	; 0x87e <gpio_out_set+0x10>
     874:	82 30       	cpi	r24, 0x02	; 2
     876:	59 f0       	breq	.+22     	; 0x88e <gpio_out_set+0x20>
     878:	83 30       	cpi	r24, 0x03	; 3
     87a:	69 f0       	breq	.+26     	; 0x896 <gpio_out_set+0x28>
     87c:	08 95       	ret
		case PA:
			setBit(&PORTA, _number);
     87e:	82 e2       	ldi	r24, 0x22	; 34
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	44 c3       	rjmp	.+1672   	; 0xf0c <setBit>
			break;
     884:	08 95       	ret
		case PB:
			setBit(&PORTB, _number);
     886:	85 e2       	ldi	r24, 0x25	; 37
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	40 c3       	rjmp	.+1664   	; 0xf0c <setBit>
			break;
		case PC:
			setBit(&PORTC, _number);
     88c:	08 95       	ret
     88e:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			setBit(&PORTD, _number);
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	3c c3       	rjmp	.+1656   	; 0xf0c <setBit>
     894:	08 95       	ret
     896:	8b e2       	ldi	r24, 0x2B	; 43
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	38 c3       	rjmp	.+1648   	; 0xf0c <setBit>
     89c:	08 95       	ret

0000089e <gpio_out_reset>:
			break;
	}
}

void gpio_out_reset(port _port, u8 _number){
	switch(_port){
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	51 f0       	breq	.+20     	; 0x8b6 <gpio_out_reset+0x18>
     8a2:	28 f0       	brcs	.+10     	; 0x8ae <gpio_out_reset+0x10>
     8a4:	82 30       	cpi	r24, 0x02	; 2
     8a6:	59 f0       	breq	.+22     	; 0x8be <gpio_out_reset+0x20>
     8a8:	83 30       	cpi	r24, 0x03	; 3
     8aa:	69 f0       	breq	.+26     	; 0x8c6 <gpio_out_reset+0x28>
     8ac:	08 95       	ret
		case PA:
			clearBit(&PORTA, _number);
     8ae:	82 e2       	ldi	r24, 0x22	; 34
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	38 c3       	rjmp	.+1648   	; 0xf24 <clearBit>
			break;
     8b4:	08 95       	ret
		case PB:
			clearBit(&PORTB, _number);
     8b6:	85 e2       	ldi	r24, 0x25	; 37
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	34 c3       	rjmp	.+1640   	; 0xf24 <clearBit>
			break;
		case PC:
			clearBit(&PORTC, _number);
     8bc:	08 95       	ret
     8be:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			clearBit(&PORTD, _number);
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	30 c3       	rjmp	.+1632   	; 0xf24 <clearBit>
     8c4:	08 95       	ret
     8c6:	8b e2       	ldi	r24, 0x2B	; 43
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	2c c3       	rjmp	.+1624   	; 0xf24 <clearBit>
     8cc:	08 95       	ret

000008ce <gpio_out_toggle>:
			break;
	}
}

void gpio_out_toggle(port _port, u8 _number){
	switch(_port){
     8ce:	81 30       	cpi	r24, 0x01	; 1
     8d0:	51 f0       	breq	.+20     	; 0x8e6 <gpio_out_toggle+0x18>
     8d2:	28 f0       	brcs	.+10     	; 0x8de <gpio_out_toggle+0x10>
     8d4:	82 30       	cpi	r24, 0x02	; 2
     8d6:	59 f0       	breq	.+22     	; 0x8ee <gpio_out_toggle+0x20>
     8d8:	83 30       	cpi	r24, 0x03	; 3
     8da:	69 f0       	breq	.+26     	; 0x8f6 <gpio_out_toggle+0x28>
     8dc:	08 95       	ret
		case PA:
			toggleBit(&PORTA, _number);
     8de:	82 e2       	ldi	r24, 0x22	; 34
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	2d c3       	rjmp	.+1626   	; 0xf3e <toggleBit>
			break;
     8e4:	08 95       	ret
		case PB:
			toggleBit(&PORTB, _number);
     8e6:	85 e2       	ldi	r24, 0x25	; 37
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	29 c3       	rjmp	.+1618   	; 0xf3e <toggleBit>
			break;
		case PC:
			toggleBit(&PORTC, _number);
     8ec:	08 95       	ret
     8ee:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			toggleBit(&PORTD, _number);
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	25 c3       	rjmp	.+1610   	; 0xf3e <toggleBit>
     8f4:	08 95       	ret
     8f6:	8b e2       	ldi	r24, 0x2B	; 43
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	21 c3       	rjmp	.+1602   	; 0xf3e <toggleBit>
     8fc:	08 95       	ret

000008fe <lcd_clearDisplay>:
u16 auxTemperatureVoltage;
extern u16 temperatureVoltage;
extern bool manualMode;

void lcd_clearDisplay(){
	gpio_out_reset(PD, 5);
     8fe:	65 e0       	ldi	r22, 0x05	; 5
     900:	83 e0       	ldi	r24, 0x03	; 3
     902:	cd df       	rcall	.-102    	; 0x89e <gpio_out_reset>
	gpio_out_reset(PD, 6);
     904:	66 e0       	ldi	r22, 0x06	; 6
     906:	83 e0       	ldi	r24, 0x03	; 3
     908:	ca df       	rcall	.-108    	; 0x89e <gpio_out_reset>
	PORTC = 0x01;
     90a:	81 e0       	ldi	r24, 0x01	; 1
	gpio_out_set(PD, 4);
     90c:	88 b9       	out	0x08, r24	; 8
     90e:	64 e0       	ldi	r22, 0x04	; 4
     910:	83 e0       	ldi	r24, 0x03	; 3
     912:	ad df       	rcall	.-166    	; 0x86e <gpio_out_set>
     914:	8f e0       	ldi	r24, 0x0F	; 15
     916:	97 e2       	ldi	r25, 0x27	; 39
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	f1 f7       	brne	.-4      	; 0x918 <lcd_clearDisplay+0x1a>
	_delay_ms(5);
	gpio_out_reset(PD, 4);
     91c:	00 c0       	rjmp	.+0      	; 0x91e <lcd_clearDisplay+0x20>
     91e:	00 00       	nop
     920:	64 e0       	ldi	r22, 0x04	; 4
     922:	83 e0       	ldi	r24, 0x03	; 3
     924:	bc df       	rcall	.-136    	; 0x89e <gpio_out_reset>
     926:	8f e0       	ldi	r24, 0x0F	; 15
     928:	97 e2       	ldi	r25, 0x27	; 39
     92a:	01 97       	sbiw	r24, 0x01	; 1
     92c:	f1 f7       	brne	.-4      	; 0x92a <lcd_clearDisplay+0x2c>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <lcd_clearDisplay+0x32>
     930:	00 00       	nop
     932:	08 95       	ret

00000934 <lcd_resetCursor>:
	_delay_ms(5);
}

void lcd_resetCursor(){
	/* Set DDRAM address to 00H */
	gpio_out_reset(PD, 5);
     934:	65 e0       	ldi	r22, 0x05	; 5
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	b2 df       	rcall	.-156    	; 0x89e <gpio_out_reset>
	gpio_out_reset(PD, 6);
     93a:	66 e0       	ldi	r22, 0x06	; 6
     93c:	83 e0       	ldi	r24, 0x03	; 3
     93e:	af df       	rcall	.-162    	; 0x89e <gpio_out_reset>
	PORTC = 0x80;
     940:	80 e8       	ldi	r24, 0x80	; 128
	gpio_out_set(PD, 4);
     942:	88 b9       	out	0x08, r24	; 8
     944:	64 e0       	ldi	r22, 0x04	; 4
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	92 df       	rcall	.-220    	; 0x86e <gpio_out_set>
     94a:	8f e0       	ldi	r24, 0x0F	; 15
     94c:	97 e2       	ldi	r25, 0x27	; 39
     94e:	01 97       	sbiw	r24, 0x01	; 1
     950:	f1 f7       	brne	.-4      	; 0x94e <lcd_resetCursor+0x1a>
	_delay_ms(5);
	gpio_out_reset(PD, 4);
     952:	00 c0       	rjmp	.+0      	; 0x954 <lcd_resetCursor+0x20>
     954:	00 00       	nop
     956:	64 e0       	ldi	r22, 0x04	; 4
     958:	83 e0       	ldi	r24, 0x03	; 3
     95a:	a1 df       	rcall	.-190    	; 0x89e <gpio_out_reset>
     95c:	8f e0       	ldi	r24, 0x0F	; 15
     95e:	97 e2       	ldi	r25, 0x27	; 39
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	f1 f7       	brne	.-4      	; 0x960 <lcd_resetCursor+0x2c>
     964:	00 c0       	rjmp	.+0      	; 0x966 <lcd_resetCursor+0x32>
     966:	00 00       	nop
     968:	08 95       	ret

0000096a <lcd_init>:
	_delay_ms(5);
}

void lcd_init(){
     96a:	cf 93       	push	r28
     96c:	c4 e0       	ldi	r28, 0x04	; 4
	int index;
	/* Enable, R/nW, RS */
	for(index = 4; index < 7; index++){
		gpio_init(PD, index, OUTPUT, NO_PULL);
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	41 e0       	ldi	r20, 0x01	; 1
     972:	6c 2f       	mov	r22, r28
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	3e df       	rcall	.-388    	; 0x7f4 <gpio_init>
		gpio_out_reset(PD, index);
     978:	6c 2f       	mov	r22, r28
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	90 df       	rcall	.-224    	; 0x89e <gpio_out_reset>
     97e:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_init(){
	int index;
	/* Enable, R/nW, RS */
	for(index = 4; index < 7; index++){
     980:	c7 30       	cpi	r28, 0x07	; 7
     982:	a9 f7       	brne	.-22     	; 0x96e <lcd_init+0x4>
     984:	c0 e0       	ldi	r28, 0x00	; 0
		gpio_init(PD, index, OUTPUT, NO_PULL);
		gpio_out_reset(PD, index);
	}
	/* Data port */
	for(index = 0; index < 8; index++){
		gpio_init(PC, index, OUTPUT, NO_PULL);
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	6c 2f       	mov	r22, r28
     98c:	82 e0       	ldi	r24, 0x02	; 2
		gpio_out_reset(PC, index);
     98e:	32 df       	rcall	.-412    	; 0x7f4 <gpio_init>
     990:	6c 2f       	mov	r22, r28
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	84 df       	rcall	.-248    	; 0x89e <gpio_out_reset>
     996:	cf 5f       	subi	r28, 0xFF	; 255
	for(index = 4; index < 7; index++){
		gpio_init(PD, index, OUTPUT, NO_PULL);
		gpio_out_reset(PD, index);
	}
	/* Data port */
	for(index = 0; index < 8; index++){
     998:	c8 30       	cpi	r28, 0x08	; 8
     99a:	a9 f7       	brne	.-22     	; 0x986 <lcd_init+0x1c>
     99c:	2f ef       	ldi	r18, 0xFF	; 255
     99e:	89 e6       	ldi	r24, 0x69	; 105
     9a0:	98 e1       	ldi	r25, 0x18	; 24
     9a2:	21 50       	subi	r18, 0x01	; 1
     9a4:	80 40       	sbci	r24, 0x00	; 0
     9a6:	90 40       	sbci	r25, 0x00	; 0
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <lcd_init+0x38>
		gpio_out_reset(PC, index);
	}
	
	_delay_ms(1000);
	/* Clear screen */
	lcd_clearDisplay();
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <lcd_init+0x42>
	
	/* 8 data bits, 2 lines */
	gpio_out_reset(PD, 5);
     9ac:	00 00       	nop
     9ae:	a7 df       	rcall	.-178    	; 0x8fe <lcd_clearDisplay>
     9b0:	65 e0       	ldi	r22, 0x05	; 5
	gpio_out_reset(PD, 6);
     9b2:	83 e0       	ldi	r24, 0x03	; 3
     9b4:	74 df       	rcall	.-280    	; 0x89e <gpio_out_reset>
     9b6:	66 e0       	ldi	r22, 0x06	; 6
	PORTC = 0x38;
     9b8:	83 e0       	ldi	r24, 0x03	; 3
     9ba:	71 df       	rcall	.-286    	; 0x89e <gpio_out_reset>
	gpio_out_set(PD, 4);
     9bc:	88 e3       	ldi	r24, 0x38	; 56
     9be:	88 b9       	out	0x08, r24	; 8
     9c0:	64 e0       	ldi	r22, 0x04	; 4
     9c2:	83 e0       	ldi	r24, 0x03	; 3
     9c4:	54 df       	rcall	.-344    	; 0x86e <gpio_out_set>
     9c6:	8f e0       	ldi	r24, 0x0F	; 15
     9c8:	97 e2       	ldi	r25, 0x27	; 39
     9ca:	01 97       	sbiw	r24, 0x01	; 1
	_delay_ms(5);
	gpio_out_reset(PD, 4);
     9cc:	f1 f7       	brne	.-4      	; 0x9ca <lcd_init+0x60>
     9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <lcd_init+0x66>
     9d0:	00 00       	nop
     9d2:	64 e0       	ldi	r22, 0x04	; 4
     9d4:	83 e0       	ldi	r24, 0x03	; 3
     9d6:	63 df       	rcall	.-314    	; 0x89e <gpio_out_reset>
     9d8:	8f e0       	ldi	r24, 0x0F	; 15
     9da:	97 e2       	ldi	r25, 0x27	; 39
	_delay_ms(5);
	
	/* Display on */
	gpio_out_reset(PD, 5);
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	f1 f7       	brne	.-4      	; 0x9dc <lcd_init+0x72>
     9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <lcd_init+0x78>
	gpio_out_reset(PD, 6);
     9e2:	00 00       	nop
     9e4:	65 e0       	ldi	r22, 0x05	; 5
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	5a df       	rcall	.-332    	; 0x89e <gpio_out_reset>
	PORTC = 0x0D;
     9ea:	66 e0       	ldi	r22, 0x06	; 6
	gpio_out_set(PD, 4);
     9ec:	83 e0       	ldi	r24, 0x03	; 3
     9ee:	57 df       	rcall	.-338    	; 0x89e <gpio_out_reset>
     9f0:	8d e0       	ldi	r24, 0x0D	; 13
     9f2:	88 b9       	out	0x08, r24	; 8
     9f4:	64 e0       	ldi	r22, 0x04	; 4
     9f6:	83 e0       	ldi	r24, 0x03	; 3
     9f8:	3a df       	rcall	.-396    	; 0x86e <gpio_out_set>
     9fa:	8f e0       	ldi	r24, 0x0F	; 15
	_delay_ms(5);
	gpio_out_reset(PD, 4);
     9fc:	97 e2       	ldi	r25, 0x27	; 39
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	f1 f7       	brne	.-4      	; 0x9fe <lcd_init+0x94>
     a02:	00 c0       	rjmp	.+0      	; 0xa04 <lcd_init+0x9a>
     a04:	00 00       	nop
     a06:	64 e0       	ldi	r22, 0x04	; 4
     a08:	83 e0       	ldi	r24, 0x03	; 3
     a0a:	49 df       	rcall	.-366    	; 0x89e <gpio_out_reset>
	_delay_ms(5);
	
	/* Cursor shift to the right */
	gpio_out_reset(PD, 5);
     a0c:	8f e0       	ldi	r24, 0x0F	; 15
     a0e:	97 e2       	ldi	r25, 0x27	; 39
     a10:	01 97       	sbiw	r24, 0x01	; 1
     a12:	f1 f7       	brne	.-4      	; 0xa10 <lcd_init+0xa6>
	gpio_out_reset(PD, 6);
     a14:	00 c0       	rjmp	.+0      	; 0xa16 <lcd_init+0xac>
     a16:	00 00       	nop
     a18:	65 e0       	ldi	r22, 0x05	; 5
	PORTC = 0x14;
     a1a:	83 e0       	ldi	r24, 0x03	; 3
     a1c:	40 df       	rcall	.-384    	; 0x89e <gpio_out_reset>
	gpio_out_set(PD, 4);
     a1e:	66 e0       	ldi	r22, 0x06	; 6
     a20:	83 e0       	ldi	r24, 0x03	; 3
     a22:	3d df       	rcall	.-390    	; 0x89e <gpio_out_reset>
     a24:	84 e1       	ldi	r24, 0x14	; 20
     a26:	88 b9       	out	0x08, r24	; 8
     a28:	64 e0       	ldi	r22, 0x04	; 4
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	20 df       	rcall	.-448    	; 0x86e <gpio_out_set>
     a2e:	8f e0       	ldi	r24, 0x0F	; 15
	_delay_ms(5);
	gpio_out_reset(PD, 4);
     a30:	97 e2       	ldi	r25, 0x27	; 39
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	f1 f7       	brne	.-4      	; 0xa32 <lcd_init+0xc8>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <lcd_init+0xce>
     a38:	00 00       	nop
     a3a:	64 e0       	ldi	r22, 0x04	; 4
     a3c:	83 e0       	ldi	r24, 0x03	; 3
     a3e:	2f df       	rcall	.-418    	; 0x89e <gpio_out_reset>
     a40:	8f e0       	ldi	r24, 0x0F	; 15
     a42:	97 e2       	ldi	r25, 0x27	; 39
	_delay_ms(5);
	
	/* Set DDRAM address to 00H */
	lcd_resetCursor();
     a44:	01 97       	sbiw	r24, 0x01	; 1
     a46:	f1 f7       	brne	.-4      	; 0xa44 <lcd_init+0xda>
}
     a48:	00 c0       	rjmp	.+0      	; 0xa4a <lcd_init+0xe0>
     a4a:	00 00       	nop
     a4c:	73 df       	rcall	.-282    	; 0x934 <lcd_resetCursor>
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <lcd_newLine>:

void lcd_newLine(){
	/* Set DDRAM address to 40H */
	gpio_out_reset(PD, 5);
     a52:	65 e0       	ldi	r22, 0x05	; 5
     a54:	83 e0       	ldi	r24, 0x03	; 3
     a56:	23 df       	rcall	.-442    	; 0x89e <gpio_out_reset>
	gpio_out_reset(PD, 6);
     a58:	66 e0       	ldi	r22, 0x06	; 6
     a5a:	83 e0       	ldi	r24, 0x03	; 3
     a5c:	20 df       	rcall	.-448    	; 0x89e <gpio_out_reset>
	PORTC = 0xC0;
     a5e:	80 ec       	ldi	r24, 0xC0	; 192
	gpio_out_set(PD, 4);
     a60:	88 b9       	out	0x08, r24	; 8
     a62:	64 e0       	ldi	r22, 0x04	; 4
     a64:	83 e0       	ldi	r24, 0x03	; 3
     a66:	03 df       	rcall	.-506    	; 0x86e <gpio_out_set>
     a68:	8f e0       	ldi	r24, 0x0F	; 15
     a6a:	97 e2       	ldi	r25, 0x27	; 39
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	f1 f7       	brne	.-4      	; 0xa6c <lcd_newLine+0x1a>
	_delay_ms(5);
	gpio_out_reset(PD, 4);
     a70:	00 c0       	rjmp	.+0      	; 0xa72 <lcd_newLine+0x20>
     a72:	00 00       	nop
     a74:	64 e0       	ldi	r22, 0x04	; 4
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	12 df       	rcall	.-476    	; 0x89e <gpio_out_reset>
     a7a:	8f e0       	ldi	r24, 0x0F	; 15
     a7c:	97 e2       	ldi	r25, 0x27	; 39
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	f1 f7       	brne	.-4      	; 0xa7e <lcd_newLine+0x2c>
     a82:	00 c0       	rjmp	.+0      	; 0xa84 <lcd_newLine+0x32>
     a84:	00 00       	nop
     a86:	08 95       	ret

00000a88 <lcd_writeChar>:
	_delay_ms(5);
}

void lcd_writeChar(char character){
     a88:	cf 93       	push	r28
     a8a:	c8 2f       	mov	r28, r24
	gpio_out_reset(PD, 5);
     a8c:	65 e0       	ldi	r22, 0x05	; 5
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	06 df       	rcall	.-500    	; 0x89e <gpio_out_reset>
	gpio_out_set(PD, 6);
     a92:	66 e0       	ldi	r22, 0x06	; 6
     a94:	83 e0       	ldi	r24, 0x03	; 3
     a96:	eb de       	rcall	.-554    	; 0x86e <gpio_out_set>
	PORTC = character;
	gpio_out_set(PD, 4);
     a98:	c8 b9       	out	0x08, r28	; 8
     a9a:	64 e0       	ldi	r22, 0x04	; 4
     a9c:	83 e0       	ldi	r24, 0x03	; 3
     a9e:	e7 de       	rcall	.-562    	; 0x86e <gpio_out_set>
     aa0:	8f e0       	ldi	r24, 0x0F	; 15
     aa2:	97 e2       	ldi	r25, 0x27	; 39
     aa4:	01 97       	sbiw	r24, 0x01	; 1
     aa6:	f1 f7       	brne	.-4      	; 0xaa4 <lcd_writeChar+0x1c>
	_delay_ms(5);
	gpio_out_reset(PD, 4);
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <lcd_writeChar+0x22>
     aaa:	00 00       	nop
     aac:	64 e0       	ldi	r22, 0x04	; 4
     aae:	83 e0       	ldi	r24, 0x03	; 3
     ab0:	f6 de       	rcall	.-532    	; 0x89e <gpio_out_reset>
     ab2:	8f e0       	ldi	r24, 0x0F	; 15
     ab4:	97 e2       	ldi	r25, 0x27	; 39
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <lcd_writeChar+0x2e>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <lcd_writeChar+0x34>
	_delay_ms(5);
}
     abc:	00 00       	nop
     abe:	cf 91       	pop	r28
     ac0:	08 95       	ret

00000ac2 <lcd_writeString>:

void lcd_writeString(char *string){
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
	int index;
	int stringLength = strlen(string);
     aca:	fc 01       	movw	r30, r24
     acc:	01 90       	ld	r0, Z+
     ace:	00 20       	and	r0, r0
     ad0:	e9 f7       	brne	.-6      	; 0xacc <lcd_writeString+0xa>
     ad2:	31 97       	sbiw	r30, 0x01	; 1
     ad4:	e8 1b       	sub	r30, r24
     ad6:	f9 0b       	sbc	r31, r25
	for(index = 0; index < stringLength; index++){
     ad8:	1e 16       	cp	r1, r30
     ada:	1f 06       	cpc	r1, r31
     adc:	4c f4       	brge	.+18     	; 0xaf0 <lcd_writeString+0x2e>
     ade:	ec 01       	movw	r28, r24
     ae0:	8c 01       	movw	r16, r24
     ae2:	0e 0f       	add	r16, r30
     ae4:	1f 1f       	adc	r17, r31
		lcd_writeChar(string[index]);
     ae6:	89 91       	ld	r24, Y+
     ae8:	cf df       	rcall	.-98     	; 0xa88 <lcd_writeChar>
}

void lcd_writeString(char *string){
	int index;
	int stringLength = strlen(string);
	for(index = 0; index < stringLength; index++){
     aea:	c0 17       	cp	r28, r16
     aec:	d1 07       	cpc	r29, r17
     aee:	d9 f7       	brne	.-10     	; 0xae6 <lcd_writeString+0x24>
		lcd_writeChar(string[index]);
	}
}
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	08 95       	ret

00000afa <lcd_displayTemperature>:
			lcd_writeString(">4.10.No event");
			break;
	}
}

void lcd_displayTemperature(u16 temperatureVoltage){
     afa:	cf 92       	push	r12
     afc:	df 92       	push	r13
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
	temperatureVoltage = temperatureVoltage * 4.41837732160312805474095796676;
     b02:	bc 01       	movw	r22, r24
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	49 d3       	rcall	.+1682   	; 0x119c <__floatunsisf>
     b0a:	29 e5       	ldi	r18, 0x59	; 89
     b0c:	33 e6       	ldi	r19, 0x63	; 99
     b0e:	4d e8       	ldi	r20, 0x8D	; 141
     b10:	50 e4       	ldi	r21, 0x40	; 64
     b12:	d2 d3       	rcall	.+1956   	; 0x12b8 <__mulsf3>
     b14:	17 d3       	rcall	.+1582   	; 0x1144 <__fixunssfsi>
     b16:	6b 01       	movw	r12, r22
     b18:	7c 01       	movw	r14, r24
	auxTemperatureVoltage = temperatureVoltage;
     b1a:	70 93 79 03 	sts	0x0379, r23	; 0x800379 <auxTemperatureVoltage+0x1>
	lcd_clearDisplay();
	lcd_resetCursor();
     b1e:	60 93 78 03 	sts	0x0378, r22	; 0x800378 <auxTemperatureVoltage>
	lcd_writeString("10bit resolution: ");
     b22:	ed de       	rcall	.-550    	; 0x8fe <lcd_clearDisplay>
     b24:	07 df       	rcall	.-498    	; 0x934 <lcd_resetCursor>
     b26:	82 e2       	ldi	r24, 0x22	; 34
	lcd_newLine();
     b28:	91 e0       	ldi	r25, 0x01	; 1
     b2a:	cb df       	rcall	.-106    	; 0xac2 <lcd_writeString>
	lcd_writeChar(auxTemperatureVoltage / 1000 + 48);
     b2c:	92 df       	rcall	.-220    	; 0xa52 <lcd_newLine>
     b2e:	20 91 78 03 	lds	r18, 0x0378	; 0x800378 <auxTemperatureVoltage>
     b32:	30 91 79 03 	lds	r19, 0x0379	; 0x800379 <auxTemperatureVoltage+0x1>
     b36:	36 95       	lsr	r19
     b38:	27 95       	ror	r18
     b3a:	36 95       	lsr	r19
     b3c:	27 95       	ror	r18
     b3e:	36 95       	lsr	r19
     b40:	27 95       	ror	r18
     b42:	a5 ec       	ldi	r26, 0xC5	; 197
     b44:	b0 e2       	ldi	r27, 0x20	; 32
     b46:	1b d4       	rcall	.+2102   	; 0x137e <__umulhisi3>
     b48:	92 95       	swap	r25
     b4a:	82 95       	swap	r24
     b4c:	8f 70       	andi	r24, 0x0F	; 15
     b4e:	89 27       	eor	r24, r25
     b50:	9f 70       	andi	r25, 0x0F	; 15
     b52:	89 27       	eor	r24, r25
	auxTemperatureVoltage = temperatureVoltage % 1000;
     b54:	80 5d       	subi	r24, 0xD0	; 208
     b56:	98 df       	rcall	.-208    	; 0xa88 <lcd_writeChar>
     b58:	96 01       	movw	r18, r12
     b5a:	36 95       	lsr	r19
     b5c:	27 95       	ror	r18
     b5e:	36 95       	lsr	r19
     b60:	27 95       	ror	r18
     b62:	36 95       	lsr	r19
     b64:	27 95       	ror	r18
     b66:	a5 ec       	ldi	r26, 0xC5	; 197
     b68:	b0 e2       	ldi	r27, 0x20	; 32
     b6a:	09 d4       	rcall	.+2066   	; 0x137e <__umulhisi3>
     b6c:	92 95       	swap	r25
     b6e:	82 95       	swap	r24
     b70:	8f 70       	andi	r24, 0x0F	; 15
     b72:	89 27       	eor	r24, r25
     b74:	9f 70       	andi	r25, 0x0F	; 15
     b76:	89 27       	eor	r24, r25
     b78:	48 ee       	ldi	r20, 0xE8	; 232
     b7a:	53 e0       	ldi	r21, 0x03	; 3
     b7c:	84 9f       	mul	r24, r20
     b7e:	90 01       	movw	r18, r0
     b80:	85 9f       	mul	r24, r21
     b82:	30 0d       	add	r19, r0
     b84:	94 9f       	mul	r25, r20
     b86:	30 0d       	add	r19, r0
     b88:	11 24       	eor	r1, r1
     b8a:	c6 01       	movw	r24, r12
     b8c:	82 1b       	sub	r24, r18
     b8e:	93 0b       	sbc	r25, r19
     b90:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <auxTemperatureVoltage+0x1>
	lcd_writeChar('.');
     b94:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <auxTemperatureVoltage>
	lcd_writeChar(auxTemperatureVoltage / 100 + 48);
     b98:	8e e2       	ldi	r24, 0x2E	; 46
     b9a:	76 df       	rcall	.-276    	; 0xa88 <lcd_writeChar>
     b9c:	20 91 78 03 	lds	r18, 0x0378	; 0x800378 <auxTemperatureVoltage>
     ba0:	30 91 79 03 	lds	r19, 0x0379	; 0x800379 <auxTemperatureVoltage+0x1>
     ba4:	36 95       	lsr	r19
     ba6:	27 95       	ror	r18
     ba8:	36 95       	lsr	r19
     baa:	27 95       	ror	r18
     bac:	ab e7       	ldi	r26, 0x7B	; 123
     bae:	b4 e1       	ldi	r27, 0x14	; 20
     bb0:	e6 d3       	rcall	.+1996   	; 0x137e <__umulhisi3>
     bb2:	96 95       	lsr	r25
	auxTemperatureVoltage = temperatureVoltage % 100;
     bb4:	87 95       	ror	r24
     bb6:	80 5d       	subi	r24, 0xD0	; 208
     bb8:	67 df       	rcall	.-306    	; 0xa88 <lcd_writeChar>
     bba:	96 01       	movw	r18, r12
     bbc:	36 95       	lsr	r19
     bbe:	27 95       	ror	r18
     bc0:	36 95       	lsr	r19
     bc2:	27 95       	ror	r18
     bc4:	ab e7       	ldi	r26, 0x7B	; 123
     bc6:	b4 e1       	ldi	r27, 0x14	; 20
     bc8:	da d3       	rcall	.+1972   	; 0x137e <__umulhisi3>
     bca:	9c 01       	movw	r18, r24
     bcc:	36 95       	lsr	r19
     bce:	27 95       	ror	r18
     bd0:	44 e6       	ldi	r20, 0x64	; 100
     bd2:	42 9f       	mul	r20, r18
     bd4:	c0 01       	movw	r24, r0
     bd6:	43 9f       	mul	r20, r19
     bd8:	90 0d       	add	r25, r0
     bda:	11 24       	eor	r1, r1
     bdc:	96 01       	movw	r18, r12
     bde:	28 1b       	sub	r18, r24
	lcd_writeChar(auxTemperatureVoltage / 10 + 48);
     be0:	39 0b       	sbc	r19, r25
     be2:	30 93 79 03 	sts	0x0379, r19	; 0x800379 <auxTemperatureVoltage+0x1>
     be6:	20 93 78 03 	sts	0x0378, r18	; 0x800378 <auxTemperatureVoltage>
     bea:	ad ec       	ldi	r26, 0xCD	; 205
     bec:	bc ec       	ldi	r27, 0xCC	; 204
     bee:	c7 d3       	rcall	.+1934   	; 0x137e <__umulhisi3>
     bf0:	96 95       	lsr	r25
     bf2:	87 95       	ror	r24
     bf4:	96 95       	lsr	r25
     bf6:	87 95       	ror	r24
	auxTemperatureVoltage = temperatureVoltage % 10;
     bf8:	96 95       	lsr	r25
     bfa:	87 95       	ror	r24
     bfc:	80 5d       	subi	r24, 0xD0	; 208
     bfe:	44 df       	rcall	.-376    	; 0xa88 <lcd_writeChar>
     c00:	96 01       	movw	r18, r12
     c02:	ad ec       	ldi	r26, 0xCD	; 205
     c04:	bc ec       	ldi	r27, 0xCC	; 204
     c06:	bb d3       	rcall	.+1910   	; 0x137e <__umulhisi3>
     c08:	96 95       	lsr	r25
     c0a:	87 95       	ror	r24
     c0c:	96 95       	lsr	r25
     c0e:	87 95       	ror	r24
     c10:	96 95       	lsr	r25
     c12:	87 95       	ror	r24
     c14:	9c 01       	movw	r18, r24
     c16:	22 0f       	add	r18, r18
     c18:	33 1f       	adc	r19, r19
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	82 0f       	add	r24, r18
     c28:	93 1f       	adc	r25, r19
     c2a:	96 01       	movw	r18, r12
     c2c:	28 1b       	sub	r18, r24
     c2e:	39 0b       	sbc	r19, r25
	lcd_writeChar(auxTemperatureVoltage + 48);
     c30:	c9 01       	movw	r24, r18
     c32:	30 93 79 03 	sts	0x0379, r19	; 0x800379 <auxTemperatureVoltage+0x1>
	lcd_writeChar('V');
     c36:	20 93 78 03 	sts	0x0378, r18	; 0x800378 <auxTemperatureVoltage>
     c3a:	80 5d       	subi	r24, 0xD0	; 208
     c3c:	25 df       	rcall	.-438    	; 0xa88 <lcd_writeChar>
     c3e:	86 e5       	ldi	r24, 0x56	; 86
     c40:	23 df       	rcall	.-442    	; 0xa88 <lcd_writeChar>
     c42:	ff 90       	pop	r15
     c44:	ef 90       	pop	r14
     c46:	df 90       	pop	r13
     c48:	cf 90       	pop	r12
     c4a:	08 95       	ret

00000c4c <lcd_displayMenu>:
	for(index = 0; index < stringLength; index++){
		lcd_writeChar(string[index]);
	}
}

void lcd_displayMenu(u16 menuState){
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
	switch(menuState){
     c50:	81 15       	cp	r24, r1
     c52:	21 e3       	ldi	r18, 0x31	; 49
     c54:	92 07       	cpc	r25, r18
     c56:	09 f4       	brne	.+2      	; 0xc5a <lcd_displayMenu+0xe>
     c58:	f5 c0       	rjmp	.+490    	; 0xe44 <lcd_displayMenu+0x1f8>
     c5a:	a0 f5       	brcc	.+104    	; 0xcc4 <lcd_displayMenu+0x78>
     c5c:	81 15       	cp	r24, r1
     c5e:	22 e1       	ldi	r18, 0x12	; 18
     c60:	92 07       	cpc	r25, r18
     c62:	09 f4       	brne	.+2      	; 0xc66 <lcd_displayMenu+0x1a>
     c64:	ad c0       	rjmp	.+346    	; 0xdc0 <lcd_displayMenu+0x174>
     c66:	a0 f4       	brcc	.+40     	; 0xc90 <lcd_displayMenu+0x44>
     c68:	81 15       	cp	r24, r1
     c6a:	20 e1       	ldi	r18, 0x10	; 16
     c6c:	92 07       	cpc	r25, r18
     c6e:	09 f4       	brne	.+2      	; 0xc72 <lcd_displayMenu+0x26>
     c70:	6c c0       	rjmp	.+216    	; 0xd4a <lcd_displayMenu+0xfe>
     c72:	20 f4       	brcc	.+8      	; 0xc7c <lcd_displayMenu+0x30>
     c74:	89 2b       	or	r24, r25
     c76:	09 f4       	brne	.+2      	; 0xc7a <lcd_displayMenu+0x2e>
     c78:	5f c0       	rjmp	.+190    	; 0xd38 <lcd_displayMenu+0xec>
     c7a:	45 c1       	rjmp	.+650    	; 0xf06 <lcd_displayMenu+0x2ba>
     c7c:	81 15       	cp	r24, r1
     c7e:	21 e1       	ldi	r18, 0x11	; 17
     c80:	92 07       	cpc	r25, r18
     c82:	09 f4       	brne	.+2      	; 0xc86 <lcd_displayMenu+0x3a>
     c84:	86 c0       	rjmp	.+268    	; 0xd92 <lcd_displayMenu+0x146>
     c86:	80 31       	cpi	r24, 0x10	; 16
     c88:	91 41       	sbci	r25, 0x11	; 17
     c8a:	09 f4       	brne	.+2      	; 0xc8e <lcd_displayMenu+0x42>
     c8c:	8b c0       	rjmp	.+278    	; 0xda4 <lcd_displayMenu+0x158>
     c8e:	3b c1       	rjmp	.+630    	; 0xf06 <lcd_displayMenu+0x2ba>
     c90:	81 15       	cp	r24, r1
     c92:	21 e2       	ldi	r18, 0x21	; 33
     c94:	92 07       	cpc	r25, r18
     c96:	09 f4       	brne	.+2      	; 0xc9a <lcd_displayMenu+0x4e>
     c98:	a5 c0       	rjmp	.+330    	; 0xde4 <lcd_displayMenu+0x198>
     c9a:	50 f4       	brcc	.+20     	; 0xcb0 <lcd_displayMenu+0x64>
     c9c:	81 15       	cp	r24, r1
     c9e:	23 e1       	ldi	r18, 0x13	; 19
     ca0:	92 07       	cpc	r25, r18
     ca2:	09 f4       	brne	.+2      	; 0xca6 <lcd_displayMenu+0x5a>
     ca4:	96 c0       	rjmp	.+300    	; 0xdd2 <lcd_displayMenu+0x186>
     ca6:	81 15       	cp	r24, r1
     ca8:	90 42       	sbci	r25, 0x20	; 32
     caa:	09 f4       	brne	.+2      	; 0xcae <lcd_displayMenu+0x62>
     cac:	57 c0       	rjmp	.+174    	; 0xd5c <lcd_displayMenu+0x110>
     cae:	2b c1       	rjmp	.+598    	; 0xf06 <lcd_displayMenu+0x2ba>
     cb0:	81 15       	cp	r24, r1
     cb2:	22 e2       	ldi	r18, 0x22	; 34
     cb4:	92 07       	cpc	r25, r18
     cb6:	09 f4       	brne	.+2      	; 0xcba <lcd_displayMenu+0x6e>
     cb8:	ad c0       	rjmp	.+346    	; 0xe14 <lcd_displayMenu+0x1c8>
     cba:	81 15       	cp	r24, r1
     cbc:	90 43       	sbci	r25, 0x30	; 48
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <lcd_displayMenu+0x76>
     cc0:	56 c0       	rjmp	.+172    	; 0xd6e <lcd_displayMenu+0x122>
     cc2:	21 c1       	rjmp	.+578    	; 0xf06 <lcd_displayMenu+0x2ba>
     cc4:	81 15       	cp	r24, r1
     cc6:	25 e4       	ldi	r18, 0x45	; 69
     cc8:	92 07       	cpc	r25, r18
     cca:	09 f4       	brne	.+2      	; 0xcce <lcd_displayMenu+0x82>
     ccc:	e7 c0       	rjmp	.+462    	; 0xe9c <lcd_displayMenu+0x250>
     cce:	d0 f4       	brcc	.+52     	; 0xd04 <lcd_displayMenu+0xb8>
     cd0:	81 15       	cp	r24, r1
     cd2:	22 e4       	ldi	r18, 0x42	; 66
     cd4:	92 07       	cpc	r25, r18
     cd6:	09 f4       	brne	.+2      	; 0xcda <lcd_displayMenu+0x8e>
     cd8:	c6 c0       	rjmp	.+396    	; 0xe66 <lcd_displayMenu+0x21a>
     cda:	50 f4       	brcc	.+20     	; 0xcf0 <lcd_displayMenu+0xa4>
     cdc:	81 15       	cp	r24, r1
     cde:	20 e4       	ldi	r18, 0x40	; 64
     ce0:	92 07       	cpc	r25, r18
     ce2:	09 f4       	brne	.+2      	; 0xce6 <lcd_displayMenu+0x9a>
     ce4:	4d c0       	rjmp	.+154    	; 0xd80 <lcd_displayMenu+0x134>
     ce6:	81 15       	cp	r24, r1
     ce8:	91 44       	sbci	r25, 0x41	; 65
     cea:	09 f4       	brne	.+2      	; 0xcee <lcd_displayMenu+0xa2>
     cec:	b3 c0       	rjmp	.+358    	; 0xe54 <lcd_displayMenu+0x208>
     cee:	0b c1       	rjmp	.+534    	; 0xf06 <lcd_displayMenu+0x2ba>
     cf0:	81 15       	cp	r24, r1
     cf2:	23 e4       	ldi	r18, 0x43	; 67
     cf4:	92 07       	cpc	r25, r18
     cf6:	09 f4       	brne	.+2      	; 0xcfa <lcd_displayMenu+0xae>
     cf8:	bf c0       	rjmp	.+382    	; 0xe78 <lcd_displayMenu+0x22c>
     cfa:	81 15       	cp	r24, r1
     cfc:	94 44       	sbci	r25, 0x44	; 68
     cfe:	09 f4       	brne	.+2      	; 0xd02 <lcd_displayMenu+0xb6>
     d00:	c4 c0       	rjmp	.+392    	; 0xe8a <lcd_displayMenu+0x23e>
     d02:	01 c1       	rjmp	.+514    	; 0xf06 <lcd_displayMenu+0x2ba>
     d04:	81 15       	cp	r24, r1
     d06:	28 e4       	ldi	r18, 0x48	; 72
     d08:	92 07       	cpc	r25, r18
     d0a:	09 f4       	brne	.+2      	; 0xd0e <lcd_displayMenu+0xc2>
     d0c:	e2 c0       	rjmp	.+452    	; 0xed2 <lcd_displayMenu+0x286>
     d0e:	50 f4       	brcc	.+20     	; 0xd24 <lcd_displayMenu+0xd8>
     d10:	81 15       	cp	r24, r1
     d12:	26 e4       	ldi	r18, 0x46	; 70
     d14:	92 07       	cpc	r25, r18
     d16:	09 f4       	brne	.+2      	; 0xd1a <lcd_displayMenu+0xce>
     d18:	ca c0       	rjmp	.+404    	; 0xeae <lcd_displayMenu+0x262>
     d1a:	81 15       	cp	r24, r1
     d1c:	97 44       	sbci	r25, 0x47	; 71
     d1e:	09 f4       	brne	.+2      	; 0xd22 <lcd_displayMenu+0xd6>
     d20:	cf c0       	rjmp	.+414    	; 0xec0 <lcd_displayMenu+0x274>
     d22:	f1 c0       	rjmp	.+482    	; 0xf06 <lcd_displayMenu+0x2ba>
     d24:	81 15       	cp	r24, r1
     d26:	29 e4       	ldi	r18, 0x49	; 73
     d28:	92 07       	cpc	r25, r18
     d2a:	09 f4       	brne	.+2      	; 0xd2e <lcd_displayMenu+0xe2>
     d2c:	db c0       	rjmp	.+438    	; 0xee4 <lcd_displayMenu+0x298>
     d2e:	81 15       	cp	r24, r1
     d30:	9a 44       	sbci	r25, 0x4A	; 74
     d32:	09 f4       	brne	.+2      	; 0xd36 <lcd_displayMenu+0xea>
     d34:	e0 c0       	rjmp	.+448    	; 0xef6 <lcd_displayMenu+0x2aa>
		case 0x0000:
			lcd_clearDisplay();
     d36:	e7 c0       	rjmp	.+462    	; 0xf06 <lcd_displayMenu+0x2ba>
			lcd_writeString("Welcome!");
     d38:	e2 dd       	rcall	.-1084   	; 0x8fe <lcd_clearDisplay>
     d3a:	80 e0       	ldi	r24, 0x00	; 0
			lcd_newLine();
     d3c:	91 e0       	ldi	r25, 0x01	; 1
			lcd_writeString("Press OK");
     d3e:	c1 de       	rcall	.-638    	; 0xac2 <lcd_writeString>
     d40:	88 de       	rcall	.-752    	; 0xa52 <lcd_newLine>
			break;
     d42:	89 e0       	ldi	r24, 0x09	; 9
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	bd de       	rcall	.-646    	; 0xac2 <lcd_writeString>
     d48:	de c0       	rjmp	.+444    	; 0xf06 <lcd_displayMenu+0x2ba>
     d4a:	d9 dd       	rcall	.-1102   	; 0x8fe <lcd_clearDisplay>
     d4c:	85 e3       	ldi	r24, 0x35	; 53
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	b8 de       	rcall	.-656    	; 0xac2 <lcd_writeString>
     d52:	7f de       	rcall	.-770    	; 0xa52 <lcd_newLine>
     d54:	8f e3       	ldi	r24, 0x3F	; 63
     d56:	91 e0       	ldi	r25, 0x01	; 1
     d58:	b4 de       	rcall	.-664    	; 0xac2 <lcd_writeString>
     d5a:	d5 c0       	rjmp	.+426    	; 0xf06 <lcd_displayMenu+0x2ba>
     d5c:	d0 dd       	rcall	.-1120   	; 0x8fe <lcd_clearDisplay>
     d5e:	8a e4       	ldi	r24, 0x4A	; 74
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	af de       	rcall	.-674    	; 0xac2 <lcd_writeString>
     d64:	76 de       	rcall	.-788    	; 0xa52 <lcd_newLine>
     d66:	84 e5       	ldi	r24, 0x54	; 84
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	ab de       	rcall	.-682    	; 0xac2 <lcd_writeString>
     d6c:	cc c0       	rjmp	.+408    	; 0xf06 <lcd_displayMenu+0x2ba>
     d6e:	c7 dd       	rcall	.-1138   	; 0x8fe <lcd_clearDisplay>
     d70:	8f e3       	ldi	r24, 0x3F	; 63
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	a6 de       	rcall	.-692    	; 0xac2 <lcd_writeString>
     d76:	6d de       	rcall	.-806    	; 0xa52 <lcd_newLine>
     d78:	8f e5       	ldi	r24, 0x5F	; 95
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	a2 de       	rcall	.-700    	; 0xac2 <lcd_writeString>
     d7e:	c3 c0       	rjmp	.+390    	; 0xf06 <lcd_displayMenu+0x2ba>
     d80:	be dd       	rcall	.-1156   	; 0x8fe <lcd_clearDisplay>
     d82:	8e e6       	ldi	r24, 0x6E	; 110
     d84:	91 e0       	ldi	r25, 0x01	; 1
     d86:	9d de       	rcall	.-710    	; 0xac2 <lcd_writeString>
     d88:	64 de       	rcall	.-824    	; 0xa52 <lcd_newLine>
     d8a:	8d e7       	ldi	r24, 0x7D	; 125
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	99 de       	rcall	.-718    	; 0xac2 <lcd_writeString>
     d90:	ba c0       	rjmp	.+372    	; 0xf06 <lcd_displayMenu+0x2ba>
     d92:	b5 dd       	rcall	.-1174   	; 0x8fe <lcd_clearDisplay>
     d94:	8a e8       	ldi	r24, 0x8A	; 138
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	94 de       	rcall	.-728    	; 0xac2 <lcd_writeString>
     d9a:	5b de       	rcall	.-842    	; 0xa52 <lcd_newLine>
     d9c:	88 e9       	ldi	r24, 0x98	; 152
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	90 de       	rcall	.-736    	; 0xac2 <lcd_writeString>
     da2:	b1 c0       	rjmp	.+354    	; 0xf06 <lcd_displayMenu+0x2ba>
     da4:	ac dd       	rcall	.-1192   	; 0x8fe <lcd_clearDisplay>
     da6:	84 ea       	ldi	r24, 0xA4	; 164
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	8b de       	rcall	.-746    	; 0xac2 <lcd_writeString>
     dac:	c0 e1       	ldi	r28, 0x10	; 16
     dae:	d0 e0       	ldi	r29, 0x00	; 0
     db0:	ce 01       	movw	r24, r28
     db2:	d2 dc       	rcall	.-1628   	; 0x758 <eeprom_read>
     db4:	69 de       	rcall	.-814    	; 0xa88 <lcd_writeChar>
     db6:	21 96       	adiw	r28, 0x01	; 1
     db8:	ca 31       	cpi	r28, 0x1A	; 26
     dba:	d1 05       	cpc	r29, r1
     dbc:	c9 f7       	brne	.-14     	; 0xdb0 <lcd_displayMenu+0x164>
     dbe:	a3 c0       	rjmp	.+326    	; 0xf06 <lcd_displayMenu+0x2ba>
     dc0:	9e dd       	rcall	.-1220   	; 0x8fe <lcd_clearDisplay>
     dc2:	8b ea       	ldi	r24, 0xAB	; 171
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	7d de       	rcall	.-774    	; 0xac2 <lcd_writeString>
     dc8:	44 de       	rcall	.-888    	; 0xa52 <lcd_newLine>
     dca:	89 eb       	ldi	r24, 0xB9	; 185
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	79 de       	rcall	.-782    	; 0xac2 <lcd_writeString>
     dd0:	9a c0       	rjmp	.+308    	; 0xf06 <lcd_displayMenu+0x2ba>
     dd2:	95 dd       	rcall	.-1238   	; 0x8fe <lcd_clearDisplay>
     dd4:	88 e9       	ldi	r24, 0x98	; 152
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	74 de       	rcall	.-792    	; 0xac2 <lcd_writeString>
     dda:	3b de       	rcall	.-906    	; 0xa52 <lcd_newLine>
     ddc:	85 ec       	ldi	r24, 0xC5	; 197
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	70 de       	rcall	.-800    	; 0xac2 <lcd_writeString>
     de2:	91 c0       	rjmp	.+290    	; 0xf06 <lcd_displayMenu+0x2ba>
     de4:	8c dd       	rcall	.-1256   	; 0x8fe <lcd_clearDisplay>
     de6:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <manualMode>
     dea:	88 23       	and	r24, r24
     dec:	59 f0       	breq	.+22     	; 0xe04 <lcd_displayMenu+0x1b8>
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	09 f0       	breq	.+2      	; 0xdf4 <lcd_displayMenu+0x1a8>
     df2:	89 c0       	rjmp	.+274    	; 0xf06 <lcd_displayMenu+0x2ba>
     df4:	83 ed       	ldi	r24, 0xD3	; 211
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	64 de       	rcall	.-824    	; 0xac2 <lcd_writeString>
     dfa:	2b de       	rcall	.-938    	; 0xa52 <lcd_newLine>
     dfc:	83 ee       	ldi	r24, 0xE3	; 227
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	60 de       	rcall	.-832    	; 0xac2 <lcd_writeString>
     e02:	81 c0       	rjmp	.+258    	; 0xf06 <lcd_displayMenu+0x2ba>
     e04:	84 ef       	ldi	r24, 0xF4	; 244
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	5c de       	rcall	.-840    	; 0xac2 <lcd_writeString>
     e0a:	23 de       	rcall	.-954    	; 0xa52 <lcd_newLine>
     e0c:	84 e0       	ldi	r24, 0x04	; 4
     e0e:	92 e0       	ldi	r25, 0x02	; 2
     e10:	58 de       	rcall	.-848    	; 0xac2 <lcd_writeString>
     e12:	79 c0       	rjmp	.+242    	; 0xf06 <lcd_displayMenu+0x2ba>
     e14:	74 dd       	rcall	.-1304   	; 0x8fe <lcd_clearDisplay>
     e16:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <manualMode>
     e1a:	88 23       	and	r24, r24
     e1c:	59 f0       	breq	.+22     	; 0xe34 <lcd_displayMenu+0x1e8>
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	09 f0       	breq	.+2      	; 0xe24 <lcd_displayMenu+0x1d8>
     e22:	71 c0       	rjmp	.+226    	; 0xf06 <lcd_displayMenu+0x2ba>
     e24:	85 e1       	ldi	r24, 0x15	; 21
     e26:	92 e0       	ldi	r25, 0x02	; 2
     e28:	4c de       	rcall	.-872    	; 0xac2 <lcd_writeString>
     e2a:	13 de       	rcall	.-986    	; 0xa52 <lcd_newLine>
     e2c:	85 e2       	ldi	r24, 0x25	; 37
     e2e:	92 e0       	ldi	r25, 0x02	; 2
     e30:	48 de       	rcall	.-880    	; 0xac2 <lcd_writeString>
     e32:	69 c0       	rjmp	.+210    	; 0xf06 <lcd_displayMenu+0x2ba>
     e34:	86 e3       	ldi	r24, 0x36	; 54
     e36:	92 e0       	ldi	r25, 0x02	; 2
     e38:	44 de       	rcall	.-888    	; 0xac2 <lcd_writeString>
     e3a:	0b de       	rcall	.-1002   	; 0xa52 <lcd_newLine>
     e3c:	86 e4       	ldi	r24, 0x46	; 70
     e3e:	92 e0       	ldi	r25, 0x02	; 2
     e40:	40 de       	rcall	.-896    	; 0xac2 <lcd_writeString>
     e42:	61 c0       	rjmp	.+194    	; 0xf06 <lcd_displayMenu+0x2ba>
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	47 dc       	rcall	.-1906   	; 0x6d6 <adc_singleRead>
     e48:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <temperatureVoltage+0x1>
     e4c:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <temperatureVoltage>
     e50:	54 de       	rcall	.-856    	; 0xafa <lcd_displayTemperature>
     e52:	59 c0       	rjmp	.+178    	; 0xf06 <lcd_displayMenu+0x2ba>
     e54:	54 dd       	rcall	.-1368   	; 0x8fe <lcd_clearDisplay>
     e56:	87 e5       	ldi	r24, 0x57	; 87
     e58:	92 e0       	ldi	r25, 0x02	; 2
     e5a:	33 de       	rcall	.-922    	; 0xac2 <lcd_writeString>
     e5c:	fa dd       	rcall	.-1036   	; 0xa52 <lcd_newLine>
     e5e:	85 e6       	ldi	r24, 0x65	; 101
     e60:	92 e0       	ldi	r25, 0x02	; 2
     e62:	2f de       	rcall	.-930    	; 0xac2 <lcd_writeString>
     e64:	50 c0       	rjmp	.+160    	; 0xf06 <lcd_displayMenu+0x2ba>
     e66:	4b dd       	rcall	.-1386   	; 0x8fe <lcd_clearDisplay>
     e68:	83 e7       	ldi	r24, 0x73	; 115
     e6a:	92 e0       	ldi	r25, 0x02	; 2
     e6c:	2a de       	rcall	.-940    	; 0xac2 <lcd_writeString>
     e6e:	f1 dd       	rcall	.-1054   	; 0xa52 <lcd_newLine>
     e70:	81 e8       	ldi	r24, 0x81	; 129
     e72:	92 e0       	ldi	r25, 0x02	; 2
     e74:	26 de       	rcall	.-948    	; 0xac2 <lcd_writeString>
     e76:	47 c0       	rjmp	.+142    	; 0xf06 <lcd_displayMenu+0x2ba>
     e78:	42 dd       	rcall	.-1404   	; 0x8fe <lcd_clearDisplay>
     e7a:	85 e6       	ldi	r24, 0x65	; 101
     e7c:	92 e0       	ldi	r25, 0x02	; 2
     e7e:	21 de       	rcall	.-958    	; 0xac2 <lcd_writeString>
     e80:	e8 dd       	rcall	.-1072   	; 0xa52 <lcd_newLine>
     e82:	8f e8       	ldi	r24, 0x8F	; 143
     e84:	92 e0       	ldi	r25, 0x02	; 2
     e86:	1d de       	rcall	.-966    	; 0xac2 <lcd_writeString>
     e88:	3e c0       	rjmp	.+124    	; 0xf06 <lcd_displayMenu+0x2ba>
     e8a:	39 dd       	rcall	.-1422   	; 0x8fe <lcd_clearDisplay>
     e8c:	8d e9       	ldi	r24, 0x9D	; 157
     e8e:	92 e0       	ldi	r25, 0x02	; 2
     e90:	18 de       	rcall	.-976    	; 0xac2 <lcd_writeString>
     e92:	df dd       	rcall	.-1090   	; 0xa52 <lcd_newLine>
     e94:	8b ea       	ldi	r24, 0xAB	; 171
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	14 de       	rcall	.-984    	; 0xac2 <lcd_writeString>
     e9a:	35 c0       	rjmp	.+106    	; 0xf06 <lcd_displayMenu+0x2ba>
     e9c:	30 dd       	rcall	.-1440   	; 0x8fe <lcd_clearDisplay>
     e9e:	89 eb       	ldi	r24, 0xB9	; 185
     ea0:	92 e0       	ldi	r25, 0x02	; 2
     ea2:	0f de       	rcall	.-994    	; 0xac2 <lcd_writeString>
     ea4:	d6 dd       	rcall	.-1108   	; 0xa52 <lcd_newLine>
     ea6:	87 ec       	ldi	r24, 0xC7	; 199
     ea8:	92 e0       	ldi	r25, 0x02	; 2
     eaa:	0b de       	rcall	.-1002   	; 0xac2 <lcd_writeString>
     eac:	2c c0       	rjmp	.+88     	; 0xf06 <lcd_displayMenu+0x2ba>
     eae:	27 dd       	rcall	.-1458   	; 0x8fe <lcd_clearDisplay>
     eb0:	85 ed       	ldi	r24, 0xD5	; 213
     eb2:	92 e0       	ldi	r25, 0x02	; 2
     eb4:	06 de       	rcall	.-1012   	; 0xac2 <lcd_writeString>
     eb6:	cd dd       	rcall	.-1126   	; 0xa52 <lcd_newLine>
     eb8:	83 ee       	ldi	r24, 0xE3	; 227
     eba:	92 e0       	ldi	r25, 0x02	; 2
     ebc:	02 de       	rcall	.-1020   	; 0xac2 <lcd_writeString>
     ebe:	23 c0       	rjmp	.+70     	; 0xf06 <lcd_displayMenu+0x2ba>
     ec0:	1e dd       	rcall	.-1476   	; 0x8fe <lcd_clearDisplay>
     ec2:	81 ef       	ldi	r24, 0xF1	; 241
     ec4:	92 e0       	ldi	r25, 0x02	; 2
     ec6:	fd dd       	rcall	.-1030   	; 0xac2 <lcd_writeString>
     ec8:	c4 dd       	rcall	.-1144   	; 0xa52 <lcd_newLine>
     eca:	8f ef       	ldi	r24, 0xFF	; 255
     ecc:	92 e0       	ldi	r25, 0x02	; 2
     ece:	f9 dd       	rcall	.-1038   	; 0xac2 <lcd_writeString>
     ed0:	1a c0       	rjmp	.+52     	; 0xf06 <lcd_displayMenu+0x2ba>
     ed2:	15 dd       	rcall	.-1494   	; 0x8fe <lcd_clearDisplay>
     ed4:	8d e0       	ldi	r24, 0x0D	; 13
     ed6:	93 e0       	ldi	r25, 0x03	; 3
     ed8:	f4 dd       	rcall	.-1048   	; 0xac2 <lcd_writeString>
     eda:	bb dd       	rcall	.-1162   	; 0xa52 <lcd_newLine>
     edc:	8b e1       	ldi	r24, 0x1B	; 27
     ede:	93 e0       	ldi	r25, 0x03	; 3
     ee0:	f0 dd       	rcall	.-1056   	; 0xac2 <lcd_writeString>
     ee2:	11 c0       	rjmp	.+34     	; 0xf06 <lcd_displayMenu+0x2ba>
     ee4:	0c dd       	rcall	.-1512   	; 0x8fe <lcd_clearDisplay>
     ee6:	89 e2       	ldi	r24, 0x29	; 41
     ee8:	93 e0       	ldi	r25, 0x03	; 3
     eea:	eb dd       	rcall	.-1066   	; 0xac2 <lcd_writeString>
     eec:	b2 dd       	rcall	.-1180   	; 0xa52 <lcd_newLine>
     eee:	87 e3       	ldi	r24, 0x37	; 55
     ef0:	93 e0       	ldi	r25, 0x03	; 3
     ef2:	e7 dd       	rcall	.-1074   	; 0xac2 <lcd_writeString>
     ef4:	08 c0       	rjmp	.+16     	; 0xf06 <lcd_displayMenu+0x2ba>
     ef6:	03 dd       	rcall	.-1530   	; 0x8fe <lcd_clearDisplay>
     ef8:	85 e4       	ldi	r24, 0x45	; 69
     efa:	93 e0       	ldi	r25, 0x03	; 3
     efc:	e2 dd       	rcall	.-1084   	; 0xac2 <lcd_writeString>
     efe:	a9 dd       	rcall	.-1198   	; 0xa52 <lcd_newLine>
     f00:	83 e5       	ldi	r24, 0x53	; 83
     f02:	93 e0       	ldi	r25, 0x03	; 3
     f04:	de dd       	rcall	.-1092   	; 0xac2 <lcd_writeString>
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	08 95       	ret

00000f0c <setBit>:
 */ 

#include "math.h"

void setBit(volatile u8 *registerName, u8 position){
	*registerName |= (1 << position);
     f0c:	fc 01       	movw	r30, r24
     f0e:	40 81       	ld	r20, Z
     f10:	21 e0       	ldi	r18, 0x01	; 1
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <setBit+0xe>
     f16:	22 0f       	add	r18, r18
     f18:	33 1f       	adc	r19, r19
     f1a:	6a 95       	dec	r22
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <setBit+0xa>
     f1e:	24 2b       	or	r18, r20
     f20:	20 83       	st	Z, r18
     f22:	08 95       	ret

00000f24 <clearBit>:
}

void clearBit(volatile u8 *registerName, u8 position){
     f24:	fc 01       	movw	r30, r24
	*registerName &= ~(1 << position);
     f26:	90 81       	ld	r25, Z
     f28:	21 e0       	ldi	r18, 0x01	; 1
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <clearBit+0xe>
     f2e:	22 0f       	add	r18, r18
     f30:	33 1f       	adc	r19, r19
     f32:	6a 95       	dec	r22
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <clearBit+0xa>
     f36:	20 95       	com	r18
     f38:	29 23       	and	r18, r25
     f3a:	20 83       	st	Z, r18
     f3c:	08 95       	ret

00000f3e <toggleBit>:
}

void toggleBit(volatile u8 *registerName, u8 position){
	*registerName ^= (1 << position);
     f3e:	fc 01       	movw	r30, r24
     f40:	40 81       	ld	r20, Z
     f42:	21 e0       	ldi	r18, 0x01	; 1
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <toggleBit+0xe>
     f48:	22 0f       	add	r18, r18
     f4a:	33 1f       	adc	r19, r19
     f4c:	6a 95       	dec	r22
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <toggleBit+0xa>
     f50:	24 27       	eor	r18, r20
     f52:	20 83       	st	Z, r18
     f54:	08 95       	ret

00000f56 <updateBit>:
}

void updateBit(volatile u8 *registerName, u8 position, u8 value){
     f56:	fc 01       	movw	r30, r24
     f58:	94 2f       	mov	r25, r20
	u8 newValue = value << position;
	newValue |= (*registerName & ~(1 << position));
     f5a:	20 81       	ld	r18, Z
     f5c:	41 e0       	ldi	r20, 0x01	; 1
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	06 2e       	mov	r0, r22
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <updateBit+0x12>
     f64:	44 0f       	add	r20, r20
     f66:	55 1f       	adc	r21, r21
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <updateBit+0xe>
     f6c:	40 95       	com	r20
     f6e:	50 95       	com	r21
     f70:	24 23       	and	r18, r20
     f72:	49 2f       	mov	r20, r25
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <updateBit+0x26>
     f78:	44 0f       	add	r20, r20
     f7a:	55 1f       	adc	r21, r21
     f7c:	6a 95       	dec	r22
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <updateBit+0x22>
     f80:	42 2b       	or	r20, r18
	*registerName = newValue;
     f82:	40 83       	st	Z, r20
     f84:	08 95       	ret

00000f86 <checkBit>:
}

bitValue checkBit(u8 registerName, u8 position){
	return (registerName >> position) & 1;
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <checkBit+0x8>
     f8a:	95 95       	asr	r25
     f8c:	87 95       	ror	r24
     f8e:	6a 95       	dec	r22
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <checkBit+0x4>
     f92:	81 70       	andi	r24, 0x01	; 1
     f94:	08 95       	ret

00000f96 <spi_init>:
void spi_start(){
	setBit(&SPCR, SPE);
}

void spi_stop(){
	clearBit(&SPCR, SPE);
     f96:	64 e0       	ldi	r22, 0x04	; 4
     f98:	8c e4       	ldi	r24, 0x4C	; 76
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	b7 df       	rcall	.-146    	; 0xf0c <setBit>
     f9e:	64 e0       	ldi	r22, 0x04	; 4
     fa0:	84 e2       	ldi	r24, 0x24	; 36
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	b3 df       	rcall	.-154    	; 0xf0c <setBit>
     fa6:	65 e0       	ldi	r22, 0x05	; 5
     fa8:	84 e2       	ldi	r24, 0x24	; 36
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	af df       	rcall	.-162    	; 0xf0c <setBit>
     fae:	67 e0       	ldi	r22, 0x07	; 7
     fb0:	84 e2       	ldi	r24, 0x24	; 36
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	ab df       	rcall	.-170    	; 0xf0c <setBit>
     fb6:	66 e0       	ldi	r22, 0x06	; 6
     fb8:	84 e2       	ldi	r24, 0x24	; 36
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	b3 df       	rcall	.-154    	; 0xf24 <clearBit>
     fbe:	65 e0       	ldi	r22, 0x05	; 5
     fc0:	8c e4       	ldi	r24, 0x4C	; 76
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	af df       	rcall	.-162    	; 0xf24 <clearBit>
     fc6:	63 e0       	ldi	r22, 0x03	; 3
     fc8:	8c e4       	ldi	r24, 0x4C	; 76
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	ab df       	rcall	.-170    	; 0xf24 <clearBit>
     fce:	62 e0       	ldi	r22, 0x02	; 2
     fd0:	8c e4       	ldi	r24, 0x4C	; 76
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a7 df       	rcall	.-178    	; 0xf24 <clearBit>
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	8c e4       	ldi	r24, 0x4C	; 76
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	a3 df       	rcall	.-186    	; 0xf24 <clearBit>
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	8c e4       	ldi	r24, 0x4C	; 76
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	9f df       	rcall	.-194    	; 0xf24 <clearBit>
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	8c e4       	ldi	r24, 0x4C	; 76
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	9b cf       	rjmp	.-202    	; 0xf24 <clearBit>
     fee:	08 95       	ret

00000ff0 <spi_start>:
     ff0:	66 e0       	ldi	r22, 0x06	; 6
     ff2:	8c e4       	ldi	r24, 0x4C	; 76
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	8a cf       	rjmp	.-236    	; 0xf0c <setBit>
     ff8:	08 95       	ret

00000ffa <spi_transferData>:
}

u8 spi_transferData(u8 data){
	SPDR = data;
     ffa:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
     ffc:	0d b4       	in	r0, 0x2d	; 45
     ffe:	07 fe       	sbrs	r0, 7
    1000:	fd cf       	rjmp	.-6      	; 0xffc <spi_transferData+0x2>
	data = SPDR;
    1002:	8e b5       	in	r24, 0x2e	; 46
	return data;
}
    1004:	08 95       	ret

00001006 <spi_readData>:

u8 spi_readData(){
	u8 value = 0;
	value = spi_transferData(0x00);
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	f8 cf       	rjmp	.-16     	; 0xffa <spi_transferData>
	return value;
}
    100a:	08 95       	ret

0000100c <spi_writeData>:

void spi_writeData(u8 data){
    100c:	f6 cf       	rjmp	.-20     	; 0xffa <spi_transferData>
    100e:	08 95       	ret

00001010 <__vector_20>:
extern volatile u8 dcSpeedLeft;
extern volatile u8 dcSpeedRight;
extern volatile u8 cannonState;
extern volatile u8 rotatingFlag;

ISR(USART0_RX_vect){
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	0b b6       	in	r0, 0x3b	; 59
    101c:	0f 92       	push	r0
    101e:	2f 93       	push	r18
    1020:	3f 93       	push	r19
    1022:	4f 93       	push	r20
    1024:	5f 93       	push	r21
    1026:	6f 93       	push	r22
    1028:	7f 93       	push	r23
    102a:	8f 93       	push	r24
    102c:	9f 93       	push	r25
    102e:	af 93       	push	r26
    1030:	bf 93       	push	r27
    1032:	ef 93       	push	r30
    1034:	ff 93       	push	r31
	aux = UDR0;
    1036:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    103a:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <aux>
	eeprom_write(aux, eepromUnreadMessageAddress);
    103e:	60 91 69 03 	lds	r22, 0x0369	; 0x800369 <eepromUnreadMessageAddress>
    1042:	70 91 6a 03 	lds	r23, 0x036A	; 0x80036a <eepromUnreadMessageAddress+0x1>
    1046:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <aux>
    104a:	9c db       	rcall	.-2248   	; 0x784 <eeprom_write>
	eepromUnreadMessageAddress++;
    104c:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <eepromUnreadMessageAddress>
    1050:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <eepromUnreadMessageAddress+0x1>
    1054:	01 96       	adiw	r24, 0x01	; 1
    1056:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <eepromUnreadMessageAddress+0x1>
    105a:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <eepromUnreadMessageAddress>
	if(eepromUnreadMessageAddress == 0x01A){
    105e:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <eepromUnreadMessageAddress>
    1062:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <eepromUnreadMessageAddress+0x1>
    1066:	4a 97       	sbiw	r24, 0x1a	; 26
    1068:	31 f4       	brne	.+12     	; 0x1076 <__vector_20+0x66>
		eepromUnreadMessageAddress = 0x010;
    106a:	80 e1       	ldi	r24, 0x10	; 16
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <eepromUnreadMessageAddress+0x1>
    1072:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <eepromUnreadMessageAddress>
	}
}
    1076:	ff 91       	pop	r31
    1078:	ef 91       	pop	r30
    107a:	bf 91       	pop	r27
    107c:	af 91       	pop	r26
    107e:	9f 91       	pop	r25
    1080:	8f 91       	pop	r24
    1082:	7f 91       	pop	r23
    1084:	6f 91       	pop	r22
    1086:	5f 91       	pop	r21
    1088:	4f 91       	pop	r20
    108a:	3f 91       	pop	r19
    108c:	2f 91       	pop	r18
    108e:	0f 90       	pop	r0
    1090:	0b be       	out	0x3b, r0	; 59
    1092:	0f 90       	pop	r0
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	0f 90       	pop	r0
    1098:	1f 90       	pop	r1
    109a:	18 95       	reti

0000109c <uart_init>:

void uart_init(syncMode uartMode, parity uartParity, stopBits uartStop, baudRate uartBaudRate){
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	08 2f       	mov	r16, r24
    10a6:	16 2f       	mov	r17, r22
    10a8:	d4 2f       	mov	r29, r20
    10aa:	c2 2f       	mov	r28, r18
	setBit(&DDRD, 1);
    10ac:	61 e0       	ldi	r22, 0x01	; 1
    10ae:	8a e2       	ldi	r24, 0x2A	; 42
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	2c df       	rcall	.-424    	; 0xf0c <setBit>
	clearBit(&DDRD, 0);
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	8a e2       	ldi	r24, 0x2A	; 42
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	34 df       	rcall	.-408    	; 0xf24 <clearBit>
	/** Double speed disabled */
	clearBit(&UCSR0A, U2X0);
    10bc:	61 e0       	ldi	r22, 0x01	; 1
    10be:	80 ec       	ldi	r24, 0xC0	; 192
    10c0:	90 e0       	ldi	r25, 0x00	; 0
	/** 8 bit data frame */
	clearBit(&UCSR0B, UCSZ02);
    10c2:	30 df       	rcall	.-416    	; 0xf24 <clearBit>
    10c4:	62 e0       	ldi	r22, 0x02	; 2
    10c6:	81 ec       	ldi	r24, 0xC1	; 193
	setBit(&UCSR0C, UCSZ01);
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	2c df       	rcall	.-424    	; 0xf24 <clearBit>
    10cc:	62 e0       	ldi	r22, 0x02	; 2
    10ce:	82 ec       	ldi	r24, 0xC2	; 194
	setBit(&UCSR0C, UCSZ00);
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	1c df       	rcall	.-456    	; 0xf0c <setBit>
    10d4:	61 e0       	ldi	r22, 0x01	; 1
    10d6:	82 ec       	ldi	r24, 0xC2	; 194
	/** Asynchronous or synchronous mode */
	clearBit(&UCSR0C, UMSEL01);
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	18 df       	rcall	.-464    	; 0xf0c <setBit>
    10dc:	67 e0       	ldi	r22, 0x07	; 7
    10de:	82 ec       	ldi	r24, 0xC2	; 194
	updateBit(&UCSR0C, UMSEL00, uartMode);
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	20 df       	rcall	.-448    	; 0xf24 <clearBit>
    10e4:	40 2f       	mov	r20, r16
    10e6:	66 e0       	ldi	r22, 0x06	; 6
	/** Odd or even parity mode */
	setBit(&UCSR0C, UPM01);
    10e8:	82 ec       	ldi	r24, 0xC2	; 194
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	34 df       	rcall	.-408    	; 0xf56 <updateBit>
	updateBit(&UCSR0C, UPM00, uartParity);
    10ee:	65 e0       	ldi	r22, 0x05	; 5
    10f0:	82 ec       	ldi	r24, 0xC2	; 194
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0b df       	rcall	.-490    	; 0xf0c <setBit>
    10f6:	41 2f       	mov	r20, r17
	/** Number of stop bits */
	updateBit(&UCSR0C, USBS0, uartStop);
    10f8:	64 e0       	ldi	r22, 0x04	; 4
    10fa:	82 ec       	ldi	r24, 0xC2	; 194
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	2b df       	rcall	.-426    	; 0xf56 <updateBit>
    1100:	4d 2f       	mov	r20, r29
	/** Baud rate */
	UBRR0 = uartBaudRate;
    1102:	63 e0       	ldi	r22, 0x03	; 3
    1104:	82 ec       	ldi	r24, 0xC2	; 194
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	26 df       	rcall	.-436    	; 0xf56 <updateBit>
    110a:	2c 2f       	mov	r18, r28
    110c:	30 e0       	ldi	r19, 0x00	; 0
	/** Interrupt mode on Receive enabled*/
	setBit(&UCSR0B, RXCIE0);
    110e:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1112:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1116:	67 e0       	ldi	r22, 0x07	; 7
}
    1118:	81 ec       	ldi	r24, 0xC1	; 193
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	f7 de       	rcall	.-530    	; 0xf0c <setBit>
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	08 95       	ret

00001128 <uart_start>:

void uart_start(bool uartTx, bool uartRx){
    1128:	cf 93       	push	r28
    112a:	c8 2f       	mov	r28, r24
    112c:	46 2f       	mov	r20, r22
	updateBit(&UCSR0B, RXEN0, uartRx);
    112e:	64 e0       	ldi	r22, 0x04	; 4
    1130:	81 ec       	ldi	r24, 0xC1	; 193
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	10 df       	rcall	.-480    	; 0xf56 <updateBit>
	updateBit(&UCSR0B, TXEN0, uartTx);
    1136:	4c 2f       	mov	r20, r28
    1138:	63 e0       	ldi	r22, 0x03	; 3
    113a:	81 ec       	ldi	r24, 0xC1	; 193
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0b df       	rcall	.-490    	; 0xf56 <updateBit>
	
}
    1140:	cf 91       	pop	r28
    1142:	08 95       	ret

00001144 <__fixunssfsi>:
    1144:	98 d0       	rcall	.+304    	; 0x1276 <__fp_splitA>
    1146:	88 f0       	brcs	.+34     	; 0x116a <__fixunssfsi+0x26>
    1148:	9f 57       	subi	r25, 0x7F	; 127
    114a:	90 f0       	brcs	.+36     	; 0x1170 <__fixunssfsi+0x2c>
    114c:	b9 2f       	mov	r27, r25
    114e:	99 27       	eor	r25, r25
    1150:	b7 51       	subi	r27, 0x17	; 23
    1152:	a0 f0       	brcs	.+40     	; 0x117c <__fixunssfsi+0x38>
    1154:	d1 f0       	breq	.+52     	; 0x118a <__fixunssfsi+0x46>
    1156:	66 0f       	add	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	88 1f       	adc	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	1a f0       	brmi	.+6      	; 0x1166 <__fixunssfsi+0x22>
    1160:	ba 95       	dec	r27
    1162:	c9 f7       	brne	.-14     	; 0x1156 <__fixunssfsi+0x12>
    1164:	12 c0       	rjmp	.+36     	; 0x118a <__fixunssfsi+0x46>
    1166:	b1 30       	cpi	r27, 0x01	; 1
    1168:	81 f0       	breq	.+32     	; 0x118a <__fixunssfsi+0x46>
    116a:	9f d0       	rcall	.+318    	; 0x12aa <__fp_zero>
    116c:	b1 e0       	ldi	r27, 0x01	; 1
    116e:	08 95       	ret
    1170:	9c c0       	rjmp	.+312    	; 0x12aa <__fp_zero>
    1172:	67 2f       	mov	r22, r23
    1174:	78 2f       	mov	r23, r24
    1176:	88 27       	eor	r24, r24
    1178:	b8 5f       	subi	r27, 0xF8	; 248
    117a:	39 f0       	breq	.+14     	; 0x118a <__fixunssfsi+0x46>
    117c:	b9 3f       	cpi	r27, 0xF9	; 249
    117e:	cc f3       	brlt	.-14     	; 0x1172 <__fixunssfsi+0x2e>
    1180:	86 95       	lsr	r24
    1182:	77 95       	ror	r23
    1184:	67 95       	ror	r22
    1186:	b3 95       	inc	r27
    1188:	d9 f7       	brne	.-10     	; 0x1180 <__fixunssfsi+0x3c>
    118a:	3e f4       	brtc	.+14     	; 0x119a <__fixunssfsi+0x56>
    118c:	90 95       	com	r25
    118e:	80 95       	com	r24
    1190:	70 95       	com	r23
    1192:	61 95       	neg	r22
    1194:	7f 4f       	sbci	r23, 0xFF	; 255
    1196:	8f 4f       	sbci	r24, 0xFF	; 255
    1198:	9f 4f       	sbci	r25, 0xFF	; 255
    119a:	08 95       	ret

0000119c <__floatunsisf>:
    119c:	e8 94       	clt
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <__floatsisf+0x12>

000011a0 <__floatsisf>:
    11a0:	97 fb       	bst	r25, 7
    11a2:	3e f4       	brtc	.+14     	; 0x11b2 <__floatsisf+0x12>
    11a4:	90 95       	com	r25
    11a6:	80 95       	com	r24
    11a8:	70 95       	com	r23
    11aa:	61 95       	neg	r22
    11ac:	7f 4f       	sbci	r23, 0xFF	; 255
    11ae:	8f 4f       	sbci	r24, 0xFF	; 255
    11b0:	9f 4f       	sbci	r25, 0xFF	; 255
    11b2:	99 23       	and	r25, r25
    11b4:	a9 f0       	breq	.+42     	; 0x11e0 <__floatsisf+0x40>
    11b6:	f9 2f       	mov	r31, r25
    11b8:	96 e9       	ldi	r25, 0x96	; 150
    11ba:	bb 27       	eor	r27, r27
    11bc:	93 95       	inc	r25
    11be:	f6 95       	lsr	r31
    11c0:	87 95       	ror	r24
    11c2:	77 95       	ror	r23
    11c4:	67 95       	ror	r22
    11c6:	b7 95       	ror	r27
    11c8:	f1 11       	cpse	r31, r1
    11ca:	f8 cf       	rjmp	.-16     	; 0x11bc <__floatsisf+0x1c>
    11cc:	fa f4       	brpl	.+62     	; 0x120c <__floatsisf+0x6c>
    11ce:	bb 0f       	add	r27, r27
    11d0:	11 f4       	brne	.+4      	; 0x11d6 <__floatsisf+0x36>
    11d2:	60 ff       	sbrs	r22, 0
    11d4:	1b c0       	rjmp	.+54     	; 0x120c <__floatsisf+0x6c>
    11d6:	6f 5f       	subi	r22, 0xFF	; 255
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255
    11da:	8f 4f       	sbci	r24, 0xFF	; 255
    11dc:	9f 4f       	sbci	r25, 0xFF	; 255
    11de:	16 c0       	rjmp	.+44     	; 0x120c <__floatsisf+0x6c>
    11e0:	88 23       	and	r24, r24
    11e2:	11 f0       	breq	.+4      	; 0x11e8 <__floatsisf+0x48>
    11e4:	96 e9       	ldi	r25, 0x96	; 150
    11e6:	11 c0       	rjmp	.+34     	; 0x120a <__floatsisf+0x6a>
    11e8:	77 23       	and	r23, r23
    11ea:	21 f0       	breq	.+8      	; 0x11f4 <__floatsisf+0x54>
    11ec:	9e e8       	ldi	r25, 0x8E	; 142
    11ee:	87 2f       	mov	r24, r23
    11f0:	76 2f       	mov	r23, r22
    11f2:	05 c0       	rjmp	.+10     	; 0x11fe <__floatsisf+0x5e>
    11f4:	66 23       	and	r22, r22
    11f6:	71 f0       	breq	.+28     	; 0x1214 <__floatsisf+0x74>
    11f8:	96 e8       	ldi	r25, 0x86	; 134
    11fa:	86 2f       	mov	r24, r22
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	60 e0       	ldi	r22, 0x00	; 0
    1200:	2a f0       	brmi	.+10     	; 0x120c <__floatsisf+0x6c>
    1202:	9a 95       	dec	r25
    1204:	66 0f       	add	r22, r22
    1206:	77 1f       	adc	r23, r23
    1208:	88 1f       	adc	r24, r24
    120a:	da f7       	brpl	.-10     	; 0x1202 <__floatsisf+0x62>
    120c:	88 0f       	add	r24, r24
    120e:	96 95       	lsr	r25
    1210:	87 95       	ror	r24
    1212:	97 f9       	bld	r25, 7
    1214:	08 95       	ret

00001216 <__fp_inf>:
    1216:	97 f9       	bld	r25, 7
    1218:	9f 67       	ori	r25, 0x7F	; 127
    121a:	80 e8       	ldi	r24, 0x80	; 128
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	08 95       	ret

00001222 <__fp_nan>:
    1222:	9f ef       	ldi	r25, 0xFF	; 255
    1224:	80 ec       	ldi	r24, 0xC0	; 192
    1226:	08 95       	ret

00001228 <__fp_pscA>:
    1228:	00 24       	eor	r0, r0
    122a:	0a 94       	dec	r0
    122c:	16 16       	cp	r1, r22
    122e:	17 06       	cpc	r1, r23
    1230:	18 06       	cpc	r1, r24
    1232:	09 06       	cpc	r0, r25
    1234:	08 95       	ret

00001236 <__fp_pscB>:
    1236:	00 24       	eor	r0, r0
    1238:	0a 94       	dec	r0
    123a:	12 16       	cp	r1, r18
    123c:	13 06       	cpc	r1, r19
    123e:	14 06       	cpc	r1, r20
    1240:	05 06       	cpc	r0, r21
    1242:	08 95       	ret

00001244 <__fp_round>:
    1244:	09 2e       	mov	r0, r25
    1246:	03 94       	inc	r0
    1248:	00 0c       	add	r0, r0
    124a:	11 f4       	brne	.+4      	; 0x1250 <__fp_round+0xc>
    124c:	88 23       	and	r24, r24
    124e:	52 f0       	brmi	.+20     	; 0x1264 <__fp_round+0x20>
    1250:	bb 0f       	add	r27, r27
    1252:	40 f4       	brcc	.+16     	; 0x1264 <__fp_round+0x20>
    1254:	bf 2b       	or	r27, r31
    1256:	11 f4       	brne	.+4      	; 0x125c <__fp_round+0x18>
    1258:	60 ff       	sbrs	r22, 0
    125a:	04 c0       	rjmp	.+8      	; 0x1264 <__fp_round+0x20>
    125c:	6f 5f       	subi	r22, 0xFF	; 255
    125e:	7f 4f       	sbci	r23, 0xFF	; 255
    1260:	8f 4f       	sbci	r24, 0xFF	; 255
    1262:	9f 4f       	sbci	r25, 0xFF	; 255
    1264:	08 95       	ret

00001266 <__fp_split3>:
    1266:	57 fd       	sbrc	r21, 7
    1268:	90 58       	subi	r25, 0x80	; 128
    126a:	44 0f       	add	r20, r20
    126c:	55 1f       	adc	r21, r21
    126e:	59 f0       	breq	.+22     	; 0x1286 <__fp_splitA+0x10>
    1270:	5f 3f       	cpi	r21, 0xFF	; 255
    1272:	71 f0       	breq	.+28     	; 0x1290 <__fp_splitA+0x1a>
    1274:	47 95       	ror	r20

00001276 <__fp_splitA>:
    1276:	88 0f       	add	r24, r24
    1278:	97 fb       	bst	r25, 7
    127a:	99 1f       	adc	r25, r25
    127c:	61 f0       	breq	.+24     	; 0x1296 <__fp_splitA+0x20>
    127e:	9f 3f       	cpi	r25, 0xFF	; 255
    1280:	79 f0       	breq	.+30     	; 0x12a0 <__fp_splitA+0x2a>
    1282:	87 95       	ror	r24
    1284:	08 95       	ret
    1286:	12 16       	cp	r1, r18
    1288:	13 06       	cpc	r1, r19
    128a:	14 06       	cpc	r1, r20
    128c:	55 1f       	adc	r21, r21
    128e:	f2 cf       	rjmp	.-28     	; 0x1274 <__fp_split3+0xe>
    1290:	46 95       	lsr	r20
    1292:	f1 df       	rcall	.-30     	; 0x1276 <__fp_splitA>
    1294:	08 c0       	rjmp	.+16     	; 0x12a6 <__fp_splitA+0x30>
    1296:	16 16       	cp	r1, r22
    1298:	17 06       	cpc	r1, r23
    129a:	18 06       	cpc	r1, r24
    129c:	99 1f       	adc	r25, r25
    129e:	f1 cf       	rjmp	.-30     	; 0x1282 <__fp_splitA+0xc>
    12a0:	86 95       	lsr	r24
    12a2:	71 05       	cpc	r23, r1
    12a4:	61 05       	cpc	r22, r1
    12a6:	08 94       	sec
    12a8:	08 95       	ret

000012aa <__fp_zero>:
    12aa:	e8 94       	clt

000012ac <__fp_szero>:
    12ac:	bb 27       	eor	r27, r27
    12ae:	66 27       	eor	r22, r22
    12b0:	77 27       	eor	r23, r23
    12b2:	cb 01       	movw	r24, r22
    12b4:	97 f9       	bld	r25, 7
    12b6:	08 95       	ret

000012b8 <__mulsf3>:
    12b8:	0b d0       	rcall	.+22     	; 0x12d0 <__mulsf3x>
    12ba:	c4 cf       	rjmp	.-120    	; 0x1244 <__fp_round>
    12bc:	b5 df       	rcall	.-150    	; 0x1228 <__fp_pscA>
    12be:	28 f0       	brcs	.+10     	; 0x12ca <__mulsf3+0x12>
    12c0:	ba df       	rcall	.-140    	; 0x1236 <__fp_pscB>
    12c2:	18 f0       	brcs	.+6      	; 0x12ca <__mulsf3+0x12>
    12c4:	95 23       	and	r25, r21
    12c6:	09 f0       	breq	.+2      	; 0x12ca <__mulsf3+0x12>
    12c8:	a6 cf       	rjmp	.-180    	; 0x1216 <__fp_inf>
    12ca:	ab cf       	rjmp	.-170    	; 0x1222 <__fp_nan>
    12cc:	11 24       	eor	r1, r1
    12ce:	ee cf       	rjmp	.-36     	; 0x12ac <__fp_szero>

000012d0 <__mulsf3x>:
    12d0:	ca df       	rcall	.-108    	; 0x1266 <__fp_split3>
    12d2:	a0 f3       	brcs	.-24     	; 0x12bc <__mulsf3+0x4>

000012d4 <__mulsf3_pse>:
    12d4:	95 9f       	mul	r25, r21
    12d6:	d1 f3       	breq	.-12     	; 0x12cc <__mulsf3+0x14>
    12d8:	95 0f       	add	r25, r21
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	55 1f       	adc	r21, r21
    12de:	62 9f       	mul	r22, r18
    12e0:	f0 01       	movw	r30, r0
    12e2:	72 9f       	mul	r23, r18
    12e4:	bb 27       	eor	r27, r27
    12e6:	f0 0d       	add	r31, r0
    12e8:	b1 1d       	adc	r27, r1
    12ea:	63 9f       	mul	r22, r19
    12ec:	aa 27       	eor	r26, r26
    12ee:	f0 0d       	add	r31, r0
    12f0:	b1 1d       	adc	r27, r1
    12f2:	aa 1f       	adc	r26, r26
    12f4:	64 9f       	mul	r22, r20
    12f6:	66 27       	eor	r22, r22
    12f8:	b0 0d       	add	r27, r0
    12fa:	a1 1d       	adc	r26, r1
    12fc:	66 1f       	adc	r22, r22
    12fe:	82 9f       	mul	r24, r18
    1300:	22 27       	eor	r18, r18
    1302:	b0 0d       	add	r27, r0
    1304:	a1 1d       	adc	r26, r1
    1306:	62 1f       	adc	r22, r18
    1308:	73 9f       	mul	r23, r19
    130a:	b0 0d       	add	r27, r0
    130c:	a1 1d       	adc	r26, r1
    130e:	62 1f       	adc	r22, r18
    1310:	83 9f       	mul	r24, r19
    1312:	a0 0d       	add	r26, r0
    1314:	61 1d       	adc	r22, r1
    1316:	22 1f       	adc	r18, r18
    1318:	74 9f       	mul	r23, r20
    131a:	33 27       	eor	r19, r19
    131c:	a0 0d       	add	r26, r0
    131e:	61 1d       	adc	r22, r1
    1320:	23 1f       	adc	r18, r19
    1322:	84 9f       	mul	r24, r20
    1324:	60 0d       	add	r22, r0
    1326:	21 1d       	adc	r18, r1
    1328:	82 2f       	mov	r24, r18
    132a:	76 2f       	mov	r23, r22
    132c:	6a 2f       	mov	r22, r26
    132e:	11 24       	eor	r1, r1
    1330:	9f 57       	subi	r25, 0x7F	; 127
    1332:	50 40       	sbci	r21, 0x00	; 0
    1334:	8a f0       	brmi	.+34     	; 0x1358 <__mulsf3_pse+0x84>
    1336:	e1 f0       	breq	.+56     	; 0x1370 <__mulsf3_pse+0x9c>
    1338:	88 23       	and	r24, r24
    133a:	4a f0       	brmi	.+18     	; 0x134e <__mulsf3_pse+0x7a>
    133c:	ee 0f       	add	r30, r30
    133e:	ff 1f       	adc	r31, r31
    1340:	bb 1f       	adc	r27, r27
    1342:	66 1f       	adc	r22, r22
    1344:	77 1f       	adc	r23, r23
    1346:	88 1f       	adc	r24, r24
    1348:	91 50       	subi	r25, 0x01	; 1
    134a:	50 40       	sbci	r21, 0x00	; 0
    134c:	a9 f7       	brne	.-22     	; 0x1338 <__mulsf3_pse+0x64>
    134e:	9e 3f       	cpi	r25, 0xFE	; 254
    1350:	51 05       	cpc	r21, r1
    1352:	70 f0       	brcs	.+28     	; 0x1370 <__mulsf3_pse+0x9c>
    1354:	60 cf       	rjmp	.-320    	; 0x1216 <__fp_inf>
    1356:	aa cf       	rjmp	.-172    	; 0x12ac <__fp_szero>
    1358:	5f 3f       	cpi	r21, 0xFF	; 255
    135a:	ec f3       	brlt	.-6      	; 0x1356 <__mulsf3_pse+0x82>
    135c:	98 3e       	cpi	r25, 0xE8	; 232
    135e:	dc f3       	brlt	.-10     	; 0x1356 <__mulsf3_pse+0x82>
    1360:	86 95       	lsr	r24
    1362:	77 95       	ror	r23
    1364:	67 95       	ror	r22
    1366:	b7 95       	ror	r27
    1368:	f7 95       	ror	r31
    136a:	e7 95       	ror	r30
    136c:	9f 5f       	subi	r25, 0xFF	; 255
    136e:	c1 f7       	brne	.-16     	; 0x1360 <__mulsf3_pse+0x8c>
    1370:	fe 2b       	or	r31, r30
    1372:	88 0f       	add	r24, r24
    1374:	91 1d       	adc	r25, r1
    1376:	96 95       	lsr	r25
    1378:	87 95       	ror	r24
    137a:	97 f9       	bld	r25, 7
    137c:	08 95       	ret

0000137e <__umulhisi3>:
    137e:	a2 9f       	mul	r26, r18
    1380:	b0 01       	movw	r22, r0
    1382:	b3 9f       	mul	r27, r19
    1384:	c0 01       	movw	r24, r0
    1386:	a3 9f       	mul	r26, r19
    1388:	70 0d       	add	r23, r0
    138a:	81 1d       	adc	r24, r1
    138c:	11 24       	eor	r1, r1
    138e:	91 1d       	adc	r25, r1
    1390:	b2 9f       	mul	r27, r18
    1392:	70 0d       	add	r23, r0
    1394:	81 1d       	adc	r24, r1
    1396:	11 24       	eor	r1, r1
    1398:	91 1d       	adc	r25, r1
    139a:	08 95       	ret

0000139c <_exit>:
    139c:	f8 94       	cli

0000139e <__stop_program>:
    139e:	ff cf       	rjmp	.-2      	; 0x139e <__stop_program>
