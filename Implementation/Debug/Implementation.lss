
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000248  00800100  00003d44  00003dd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  00800348  00800348  00004020  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004050  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000687c  00000000  00000000  000042c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001296  00000000  00000000  0000ab3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b7d  00000000  00000000  0000bdd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c0  00000000  00000000  0000e950  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b3b  00000000  00000000  0000ef10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002886  00000000  00000000  0000fa4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  000122d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	81 c1       	rjmp	.+770    	; 0x318 <__vector_5>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <__vector_20>
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__vector_34>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e4       	ldi	r30, 0x44	; 68
      a0:	fd e3       	ldi	r31, 0x3D	; 61
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 34       	cpi	r26, 0x48	; 72
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	a8 e4       	ldi	r26, 0x48	; 72
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 39       	cpi	r26, 0x9C	; 156
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	4b d5       	rcall	.+2710   	; 0xb5a <main>
      c4:	0c 94 a0 1e 	jmp	0x3d40	; 0x3d40 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <__vector_34>:
volatile bool dateConfirmation;
volatile u8 secondCounter;
volatile u8 eventVector[10];
volatile u8 eventIndex;

ISR(TIMER3_OVF_vect){
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	0b b6       	in	r0, 0x3b	; 59
      d6:	0f 92       	push	r0
      d8:	0f 93       	push	r16
      da:	1f 93       	push	r17
      dc:	2f 93       	push	r18
      de:	3f 93       	push	r19
      e0:	4f 93       	push	r20
      e2:	5f 93       	push	r21
      e4:	6f 93       	push	r22
      e6:	7f 93       	push	r23
      e8:	8f 93       	push	r24
      ea:	9f 93       	push	r25
      ec:	af 93       	push	r26
      ee:	bf 93       	push	r27
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	ef 93       	push	r30
      f6:	ff 93       	push	r31
	TCNT3 = 34285;
      f8:	8d ee       	ldi	r24, 0xED	; 237
      fa:	95 e8       	ldi	r25, 0x85	; 133
      fc:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     100:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
	secondCounter++;
     104:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <secondCounter>
     108:	8f 5f       	subi	r24, 0xFF	; 255
     10a:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <secondCounter>
	if(secondCounter >= 60){
     10e:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <secondCounter>
     112:	8c 33       	cpi	r24, 0x3C	; 60
     114:	98 f0       	brcs	.+38     	; 0x13c <__vector_34+0x72>
		secondCounter = 0;
     116:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <secondCounter>
		date[1]++;
     11a:	e0 e0       	ldi	r30, 0x00	; 0
     11c:	f1 e0       	ldi	r31, 0x01	; 1
     11e:	81 81       	ldd	r24, Z+1	; 0x01
     120:	8f 5f       	subi	r24, 0xFF	; 255
     122:	81 83       	std	Z+1, r24	; 0x01
		if(date[1] >= 60){
     124:	8c 33       	cpi	r24, 0x3C	; 60
     126:	50 f0       	brcs	.+20     	; 0x13c <__vector_34+0x72>
			date[0]++;
     128:	80 81       	ld	r24, Z
     12a:	8f 5f       	subi	r24, 0xFF	; 255
     12c:	80 83       	st	Z, r24
			date[1] = 0;
     12e:	11 82       	std	Z+1, r1	; 0x01
			if(date[0] >= 24){
     130:	88 31       	cpi	r24, 0x18	; 24
     132:	20 f0       	brcs	.+8      	; 0x13c <__vector_34+0x72>
				date[0] = 0;
     134:	10 82       	st	Z, r1
				date[2]++;
     136:	82 81       	ldd	r24, Z+2	; 0x02
     138:	8f 5f       	subi	r24, 0xFF	; 255
     13a:	82 83       	std	Z+2, r24	; 0x02
			}
		}
	}
	pinChangeFlag = TRUE;
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <pinChangeFlag>
	if(loggedIn == TRUE){
     142:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <loggedIn>
     146:	81 30       	cpi	r24, 0x01	; 1
     148:	09 f0       	breq	.+2      	; 0x14c <__vector_34+0x82>
     14a:	cf c0       	rjmp	.+414    	; 0x2ea <__vector_34+0x220>
		if(sendTempFlag == TRUE){
     14c:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <__data_end>
     150:	81 30       	cpi	r24, 0x01	; 1
     152:	a9 f5       	brne	.+106    	; 0x1be <__vector_34+0xf4>
			sendTempFlag = FALSE;
     154:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <__data_end>
			temperatureVoltage = adc_singleRead(0);
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	93 d5       	rcall	.+2854   	; 0xc82 <adc_singleRead>
     15c:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <temperatureVoltage+0x1>
     160:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <temperatureVoltage>
			temperatureVoltage = temperatureVoltage * 4.49657869012707722;
     164:	60 91 82 03 	lds	r22, 0x0382	; 0x800382 <temperatureVoltage>
     168:	70 91 83 03 	lds	r23, 0x0383	; 0x800383 <temperatureVoltage+0x1>
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__floatunsisf>
     174:	29 ef       	ldi	r18, 0xF9	; 249
     176:	33 ee       	ldi	r19, 0xE3	; 227
     178:	4f e8       	ldi	r20, 0x8F	; 143
     17a:	50 e4       	ldi	r21, 0x40	; 64
     17c:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__mulsf3>
     180:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__fixunssfsi>
     184:	70 93 83 03 	sts	0x0383, r23	; 0x800383 <temperatureVoltage+0x1>
     188:	60 93 82 03 	sts	0x0382, r22	; 0x800382 <temperatureVoltage>
			s16 aux = (temperatureVoltage - 750);
     18c:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <temperatureVoltage>
     190:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <temperatureVoltage+0x1>
     194:	8e 5e       	subi	r24, 0xEE	; 238
     196:	92 40       	sbci	r25, 0x02	; 2
			aux /= 10;
     198:	2a e0       	ldi	r18, 0x0A	; 10
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	b9 01       	movw	r22, r18
     19e:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__divmodhi4>
			aux += 25;
     1a2:	cb 01       	movw	r24, r22
     1a4:	49 96       	adiw	r24, 0x19	; 25
			uart_transmit((aux/10) + 48);
     1a6:	b9 01       	movw	r22, r18
     1a8:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__divmodhi4>
     1ac:	c8 2f       	mov	r28, r24
     1ae:	80 e3       	ldi	r24, 0x30	; 48
     1b0:	86 0f       	add	r24, r22
     1b2:	0e 94 28 1c 	call	0x3850	; 0x3850 <uart_transmit>
			uart_transmit((aux%10) + 48);
     1b6:	80 e3       	ldi	r24, 0x30	; 48
     1b8:	8c 0f       	add	r24, r28
     1ba:	0e 94 28 1c 	call	0x3850	; 0x3850 <uart_transmit>
		}
		if(menuState == 0x3100){
     1be:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     1c2:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     1c6:	81 15       	cp	r24, r1
     1c8:	91 43       	sbci	r25, 0x31	; 49
			temperatureVoltage = adc_singleRead(0);
     1ca:	61 f4       	brne	.+24     	; 0x1e4 <__vector_34+0x11a>
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	59 d5       	rcall	.+2738   	; 0xc82 <adc_singleRead>
     1d0:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <temperatureVoltage+0x1>
     1d4:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <temperatureVoltage>
			lcd_displayTemperature(temperatureVoltage);
     1d8:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <temperatureVoltage>
     1dc:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <temperatureVoltage+0x1>
     1e0:	87 d7       	rcall	.+3854   	; 0x10f0 <lcd_displayTemperature>
		}
		else if((menuState == 0x0000) && (lockScreen == TRUE)){
     1e2:	18 c0       	rjmp	.+48     	; 0x214 <__vector_34+0x14a>
     1e4:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     1e8:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     1ec:	89 2b       	or	r24, r25
     1ee:	91 f4       	brne	.+36     	; 0x214 <__vector_34+0x14a>
     1f0:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <lockScreen>
			temperatureVoltage = adc_singleRead(0);
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	71 f4       	brne	.+28     	; 0x214 <__vector_34+0x14a>
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	43 d5       	rcall	.+2694   	; 0xc82 <adc_singleRead>
     1fc:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <temperatureVoltage+0x1>
     200:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <temperatureVoltage>
			lcd_displayLockScreen(temperatureVoltage, &date[0]);
     204:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <temperatureVoltage>
     208:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <temperatureVoltage+0x1>
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	71 e0       	ldi	r23, 0x01	; 1
		}
		floodVoltage = adc_singleRead(1);
     210:	0e 94 56 1a 	call	0x34ac	; 0x34ac <lcd_displayLockScreen>
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	35 d5       	rcall	.+2666   	; 0xc82 <adc_singleRead>
     218:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <floodVoltage+0x1>
     21c:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <floodVoltage>
		if((floodVoltage > 0x70) && (emergencyTrigger == FALSE)){
     220:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <floodVoltage>
     224:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <floodVoltage+0x1>
     228:	81 37       	cpi	r24, 0x71	; 113
     22a:	91 05       	cpc	r25, r1
     22c:	08 f4       	brcc	.+2      	; 0x230 <__vector_34+0x166>
     22e:	51 c0       	rjmp	.+162    	; 0x2d2 <__vector_34+0x208>
     230:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <emergencyTrigger>
     234:	81 11       	cpse	r24, r1
			emergencyTrigger = TRUE;
     236:	4d c0       	rjmp	.+154    	; 0x2d2 <__vector_34+0x208>
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <emergencyTrigger>
			eventVector[eventIndex++] = 1;
     23e:	e0 91 55 03 	lds	r30, 0x0355	; 0x800355 <eventIndex>
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	9e 0f       	add	r25, r30
     246:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <eventIndex>
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	e4 59       	subi	r30, 0x94	; 148
     24e:	fc 4f       	sbci	r31, 0xFC	; 252
     250:	80 83       	st	Z, r24
     252:	c0 e0       	ldi	r28, 0x00	; 0
     254:	d1 e0       	ldi	r29, 0x01	; 1
			for(u8 i = 0; i < 4; i++){
				eeprom_write(date[i], eepromEventAddress);
     256:	04 e0       	ldi	r16, 0x04	; 4
     258:	11 e0       	ldi	r17, 0x01	; 1
     25a:	60 91 84 03 	lds	r22, 0x0384	; 0x800384 <eepromEventAddress>
     25e:	70 91 85 03 	lds	r23, 0x0385	; 0x800385 <eepromEventAddress+0x1>
				eepromEventAddress++;
     262:	89 91       	ld	r24, Y+
     264:	70 d5       	rcall	.+2784   	; 0xd46 <eeprom_write>
     266:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <eepromEventAddress>
     26a:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <eepromEventAddress+0x1>
     26e:	01 96       	adiw	r24, 0x01	; 1
     270:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <eepromEventAddress+0x1>
		}
		floodVoltage = adc_singleRead(1);
		if((floodVoltage > 0x70) && (emergencyTrigger == FALSE)){
			emergencyTrigger = TRUE;
			eventVector[eventIndex++] = 1;
			for(u8 i = 0; i < 4; i++){
     274:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <eepromEventAddress>
     278:	c0 17       	cp	r28, r16
				eeprom_write(date[i], eepromEventAddress);
				eepromEventAddress++;
			}
			if(eventIndex >= 10){
     27a:	d1 07       	cpc	r29, r17
     27c:	71 f7       	brne	.-36     	; 0x25a <__vector_34+0x190>
     27e:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <eventIndex>
				eventIndex = 0;
     282:	8a 30       	cpi	r24, 0x0A	; 10
     284:	10 f0       	brcs	.+4      	; 0x28a <__vector_34+0x1c0>
			}
			eepromEventAddress &= 0xFF0;
     286:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <eventIndex>
     28a:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <eepromEventAddress>
     28e:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <eepromEventAddress+0x1>
     292:	80 7f       	andi	r24, 0xF0	; 240
     294:	9f 70       	andi	r25, 0x0F	; 15
     296:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <eepromEventAddress+0x1>
			eepromEventAddress += 0x010;
     29a:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <eepromEventAddress>
     29e:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <eepromEventAddress>
     2a2:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <eepromEventAddress+0x1>
     2a6:	40 96       	adiw	r24, 0x10	; 16
     2a8:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <eepromEventAddress+0x1>
			if(eepromEventAddress >= 0x2B0){
     2ac:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <eepromEventAddress>
     2b0:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <eepromEventAddress>
     2b4:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <eepromEventAddress+0x1>
     2b8:	80 3b       	cpi	r24, 0xB0	; 176
				eepromEventAddress = 0x210;
     2ba:	92 40       	sbci	r25, 0x02	; 2
     2bc:	30 f0       	brcs	.+12     	; 0x2ca <__vector_34+0x200>
     2be:	80 e1       	ldi	r24, 0x10	; 16
     2c0:	92 e0       	ldi	r25, 0x02	; 2
     2c2:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <eepromEventAddress+0x1>
			}
			uart_transmit('f');
     2c6:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <eepromEventAddress>
     2ca:	86 e6       	ldi	r24, 0x66	; 102
     2cc:	0e 94 28 1c 	call	0x3850	; 0x3850 <uart_transmit>
		}
		else if((floodVoltage < 0x10) && (emergencyTrigger == TRUE)){
     2d0:	0c c0       	rjmp	.+24     	; 0x2ea <__vector_34+0x220>
     2d2:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <floodVoltage>
     2d6:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <floodVoltage+0x1>
     2da:	40 97       	sbiw	r24, 0x10	; 16
     2dc:	30 f4       	brcc	.+12     	; 0x2ea <__vector_34+0x220>
     2de:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <emergencyTrigger>
			emergencyTrigger = FALSE;
     2e2:	81 30       	cpi	r24, 0x01	; 1
     2e4:	11 f4       	brne	.+4      	; 0x2ea <__vector_34+0x220>
		}
	}
}
     2e6:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <emergencyTrigger>
     2ea:	ff 91       	pop	r31
     2ec:	ef 91       	pop	r30
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	bf 91       	pop	r27
     2f4:	af 91       	pop	r26
     2f6:	9f 91       	pop	r25
     2f8:	8f 91       	pop	r24
     2fa:	7f 91       	pop	r23
     2fc:	6f 91       	pop	r22
     2fe:	5f 91       	pop	r21
     300:	4f 91       	pop	r20
     302:	3f 91       	pop	r19
     304:	2f 91       	pop	r18
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	0f 90       	pop	r0
     30c:	0b be       	out	0x3b, r0	; 59
     30e:	0f 90       	pop	r0
     310:	0f be       	out	0x3f, r0	; 63
     312:	0f 90       	pop	r0
     314:	1f 90       	pop	r1
     316:	18 95       	reti

00000318 <__vector_5>:

ISR(PCINT1_vect){
     318:	1f 92       	push	r1
     31a:	0f 92       	push	r0
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	0f 92       	push	r0
     320:	11 24       	eor	r1, r1
     322:	0b b6       	in	r0, 0x3b	; 59
     324:	0f 92       	push	r0
     326:	0f 93       	push	r16
     328:	1f 93       	push	r17
     32a:	2f 93       	push	r18
     32c:	3f 93       	push	r19
     32e:	4f 93       	push	r20
     330:	5f 93       	push	r21
     332:	6f 93       	push	r22
     334:	7f 93       	push	r23
     336:	8f 93       	push	r24
     338:	9f 93       	push	r25
     33a:	af 93       	push	r26
     33c:	bf 93       	push	r27
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	ef 93       	push	r30
     344:	ff 93       	push	r31
	if(pinChangeFlag == TRUE){
     346:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <pinChangeFlag>
     34a:	81 30       	cpi	r24, 0x01	; 1
     34c:	09 f0       	breq	.+2      	; 0x350 <__vector_5+0x38>
     34e:	49 c3       	rjmp	.+1682   	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
		if(loggedIn == FALSE)
     350:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <loggedIn>
     354:	81 11       	cpse	r24, r1
     356:	5a c0       	rjmp	.+180    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		{
			switch(passwordCounter){
     358:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <passwordCounter>
     35c:	81 30       	cpi	r24, 0x01	; 1
     35e:	c1 f0       	breq	.+48     	; 0x390 <__vector_5+0x78>
     360:	28 f0       	brcs	.+10     	; 0x36c <__vector_5+0x54>
     362:	82 30       	cpi	r24, 0x02	; 2
     364:	39 f1       	breq	.+78     	; 0x3b4 <__vector_5+0x9c>
     366:	83 30       	cpi	r24, 0x03	; 3
     368:	b9 f1       	breq	.+110    	; 0x3d8 <__vector_5+0xc0>
     36a:	4d c0       	rjmp	.+154    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
				case 0:
					if(checkBit(PINB, 0) == 0){
     36c:	83 b1       	in	r24, 0x03	; 3
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	0e 94 8f 1b 	call	0x371e	; 0x371e <checkBit>
     374:	81 11       	cpse	r24, r1
     376:	09 c0       	rjmp	.+18     	; 0x38a <__vector_5+0x72>
						passwordCounter++;
     378:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <passwordCounter>
     37c:	8f 5f       	subi	r24, 0xFF	; 255
     37e:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <passwordCounter>
						gpio_out_toggle(PA, 4);
     382:	64 e0       	ldi	r22, 0x04	; 4
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	9a d5       	rcall	.+2868   	; 0xebc <gpio_out_toggle>
     388:	3e c0       	rjmp	.+124    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
					}
					else{
						passwordCounter = 0;
     38a:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <passwordCounter>
     38e:	3b c0       	rjmp	.+118    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
					}
					break;
				case 1:
					if(checkBit(PINB, 1) == 0){
     390:	83 b1       	in	r24, 0x03	; 3
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	0e 94 8f 1b 	call	0x371e	; 0x371e <checkBit>
     398:	81 11       	cpse	r24, r1
     39a:	09 c0       	rjmp	.+18     	; 0x3ae <__vector_5+0x96>
						passwordCounter++;
     39c:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <passwordCounter>
     3a0:	8f 5f       	subi	r24, 0xFF	; 255
     3a2:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <passwordCounter>
						gpio_out_toggle(PA, 4);
     3a6:	64 e0       	ldi	r22, 0x04	; 4
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	88 d5       	rcall	.+2832   	; 0xebc <gpio_out_toggle>
     3ac:	2c c0       	rjmp	.+88     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
					}
					else{
						passwordCounter = 0;
     3ae:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <passwordCounter>
     3b2:	29 c0       	rjmp	.+82     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
					}
					break;
				case 2:
					if(checkBit(PINB, 2) == 0){
     3b4:	83 b1       	in	r24, 0x03	; 3
     3b6:	62 e0       	ldi	r22, 0x02	; 2
     3b8:	0e 94 8f 1b 	call	0x371e	; 0x371e <checkBit>
     3bc:	81 11       	cpse	r24, r1
     3be:	09 c0       	rjmp	.+18     	; 0x3d2 <__vector_5+0xba>
						passwordCounter++;
     3c0:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <passwordCounter>
     3c4:	8f 5f       	subi	r24, 0xFF	; 255
     3c6:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <passwordCounter>
						gpio_out_toggle(PA, 4);
     3ca:	64 e0       	ldi	r22, 0x04	; 4
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	76 d5       	rcall	.+2796   	; 0xebc <gpio_out_toggle>
					}
					else{
						passwordCounter = 0;
     3d0:	1a c0       	rjmp	.+52     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3d2:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <passwordCounter>
					}
					break;
				case 3:
					if(checkBit(PINB, 3) == 0){
     3d6:	17 c0       	rjmp	.+46     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3d8:	83 b1       	in	r24, 0x03	; 3
     3da:	63 e0       	ldi	r22, 0x03	; 3
     3dc:	0e 94 8f 1b 	call	0x371e	; 0x371e <checkBit>
						loggedIn = TRUE;
     3e0:	81 11       	cpse	r24, r1
						lcd_clearDisplay();
						lcd_writeString("Welcome!");
     3e2:	0f c0       	rjmp	.+30     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <loggedIn>
						lcd_newLine();
						lcd_writeString("Press OK");
     3ea:	84 d5       	rcall	.+2824   	; 0xef4 <lcd_clearDisplay>
     3ec:	85 e0       	ldi	r24, 0x05	; 5
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	63 d6       	rcall	.+3270   	; 0x10b8 <lcd_writeString>
						gpio_out_toggle(PA, 4);
     3f2:	2a d6       	rcall	.+3156   	; 0x1048 <lcd_newLine>
     3f4:	8e e0       	ldi	r24, 0x0E	; 14
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	5f d6       	rcall	.+3262   	; 0x10b8 <lcd_writeString>
     3fa:	64 e0       	ldi	r22, 0x04	; 4
					}
					else{
						passwordCounter = 0;
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	5e d5       	rcall	.+2748   	; 0xebc <gpio_out_toggle>
					}
					break;
				default:
					break;
			}
			pinChangeFlag = FALSE;
     400:	02 c0       	rjmp	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     402:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <passwordCounter>
		}
		else
		{
			if((menuState == 0x0000) && (menuLevel == 0)){
     406:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <pinChangeFlag>
     40a:	eb c2       	rjmp	.+1494   	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
     40c:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     410:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     414:	89 2b       	or	r24, r25
     416:	c9 f4       	brne	.+50     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     418:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
				if(checkBit(PINB, 0) == 0){
     41c:	81 11       	cpse	r24, r1
     41e:	15 c0       	rjmp	.+42     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     420:	83 b1       	in	r24, 0x03	; 3
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	0e 94 8f 1b 	call	0x371e	; 0x371e <checkBit>
					menuState += 0x1000;
     428:	81 11       	cpse	r24, r1
     42a:	c0 c2       	rjmp	.+1408   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     42c:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     430:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     434:	90 5f       	subi	r25, 0xF0	; 240
     436:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <menuState+0x1>
					menuLevel++;
     43a:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <menuState>
     43e:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
     442:	8f 5f       	subi	r24, 0xFF	; 255
				}
			}
			else if(checkBit(PINB, 3) == 0){ // up
     444:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <menuLevel>
     448:	b1 c2       	rjmp	.+1378   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     44a:	83 b1       	in	r24, 0x03	; 3
     44c:	63 e0       	ldi	r22, 0x03	; 3
     44e:	0e 94 8f 1b 	call	0x371e	; 0x371e <checkBit>
				switch(menuLevel){
     452:	81 11       	cpse	r24, r1
     454:	6d c0       	rjmp	.+218    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     456:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
     45a:	82 30       	cpi	r24, 0x02	; 2
     45c:	b9 f0       	breq	.+46     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     45e:	83 30       	cpi	r24, 0x03	; 3
     460:	49 f1       	breq	.+82     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
					case 1:
						if(menuState != 0x1000){
     462:	81 30       	cpi	r24, 0x01	; 1
     464:	09 f0       	breq	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     466:	a2 c2       	rjmp	.+1348   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     468:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     46c:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     470:	81 15       	cp	r24, r1
							menuState -= 0x1000;
     472:	90 41       	sbci	r25, 0x10	; 16
     474:	09 f4       	brne	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     476:	9a c2       	rjmp	.+1332   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     478:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     47c:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     480:	90 51       	subi	r25, 0x10	; 16
     482:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <menuState+0x1>
						}
						break;
					case 2:
						if((menuState & 0x0F00) != 0x0100){
     486:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <menuState>
     48a:	90 c2       	rjmp	.+1312   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     48c:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     490:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     494:	88 27       	eor	r24, r24
     496:	9f 70       	andi	r25, 0x0F	; 15
     498:	81 15       	cp	r24, r1
							menuState -= 0x0100;
     49a:	91 40       	sbci	r25, 0x01	; 1
     49c:	09 f4       	brne	.+2      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     49e:	86 c2       	rjmp	.+1292   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     4a0:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     4a4:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     4a8:	9a 95       	dec	r25
     4aa:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <menuState+0x1>
						}
						break;
					case 3:
						switch(menuState & 0xF000){
     4ae:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <menuState>
     4b2:	7c c2       	rjmp	.+1272   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     4b4:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     4b8:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     4bc:	88 27       	eor	r24, r24
     4be:	90 7f       	andi	r25, 0xF0	; 240
     4c0:	81 15       	cp	r24, r1
							case 0x1000:
								switch(menuState & 0x0F00){
     4c2:	90 41       	sbci	r25, 0x10	; 16
     4c4:	09 f0       	breq	.+2      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4c6:	72 c2       	rjmp	.+1252   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     4c8:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     4cc:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     4d0:	88 27       	eor	r24, r24
     4d2:	9f 70       	andi	r25, 0x0F	; 15
     4d4:	81 15       	cp	r24, r1
     4d6:	31 e0       	ldi	r19, 0x01	; 1
     4d8:	93 07       	cpc	r25, r19
     4da:	21 f0       	breq	.+8      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4dc:	81 15       	cp	r24, r1
									case 0x0100:
										if((menuState & 0x00F0) != 0x0010){
     4de:	92 40       	sbci	r25, 0x02	; 2
     4e0:	a1 f0       	breq	.+40     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     4e2:	64 c2       	rjmp	.+1224   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     4e4:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     4e8:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     4ec:	80 7f       	andi	r24, 0xF0	; 240
     4ee:	99 27       	eor	r25, r25
											menuState -= 0x0010;
     4f0:	40 97       	sbiw	r24, 0x10	; 16
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4f4:	5b c2       	rjmp	.+1206   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     4f6:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     4fa:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     4fe:	40 97       	sbiw	r24, 0x10	; 16
     500:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <menuState+0x1>
										}
										break;
									case 0x0200:
										if((menuState & 0x00F0) != 0x0010){
     504:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <menuState>
     508:	51 c2       	rjmp	.+1186   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     50a:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     50e:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     512:	80 7f       	andi	r24, 0xF0	; 240
     514:	99 27       	eor	r25, r25
											menuState -= 0x0010;
     516:	40 97       	sbiw	r24, 0x10	; 16
     518:	09 f4       	brne	.+2      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     51a:	48 c2       	rjmp	.+1168   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     51c:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     520:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     524:	40 97       	sbiw	r24, 0x10	; 16
     526:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <menuState+0x1>
						break;
					default:
						break;
				}
			}
			else if(checkBit(PINB, 2) == 0){ // down
     52a:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <menuState>
     52e:	3e c2       	rjmp	.+1148   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     530:	83 b1       	in	r24, 0x03	; 3
     532:	62 e0       	ldi	r22, 0x02	; 2
     534:	0e 94 8f 1b 	call	0x371e	; 0x371e <checkBit>
				switch(menuLevel){
     538:	81 11       	cpse	r24, r1
     53a:	aa c0       	rjmp	.+340    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
     53c:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
     540:	82 30       	cpi	r24, 0x02	; 2
     542:	c1 f0       	breq	.+48     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
     544:	83 30       	cpi	r24, 0x03	; 3
     546:	09 f4       	brne	.+2      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     548:	63 c0       	rjmp	.+198    	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
					case 1:
						if(menuState != 0x4000){
     54a:	81 30       	cpi	r24, 0x01	; 1
     54c:	09 f0       	breq	.+2      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     54e:	2e c2       	rjmp	.+1116   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     550:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     554:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     558:	81 15       	cp	r24, r1
							menuState += 0x1000;
     55a:	90 44       	sbci	r25, 0x40	; 64
     55c:	09 f4       	brne	.+2      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
     55e:	26 c2       	rjmp	.+1100   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     560:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     564:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     568:	90 5f       	subi	r25, 0xF0	; 240
     56a:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <menuState+0x1>
						}
						break;
					case 2:
						switch(menuState & 0xF000){
     56e:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <menuState>
     572:	1c c2       	rjmp	.+1080   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     574:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     578:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     57c:	88 27       	eor	r24, r24
     57e:	90 7f       	andi	r25, 0xF0	; 240
     580:	81 15       	cp	r24, r1
     582:	20 e2       	ldi	r18, 0x20	; 32
     584:	92 07       	cpc	r25, r18
     586:	e1 f0       	breq	.+56     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     588:	81 15       	cp	r24, r1
     58a:	30 e4       	ldi	r19, 0x40	; 64
     58c:	93 07       	cpc	r25, r19
     58e:	61 f1       	breq	.+88     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     590:	81 15       	cp	r24, r1
							case 0x1000:
								if((menuState & 0x0F00) != 0x0300){
     592:	90 41       	sbci	r25, 0x10	; 16
     594:	09 f0       	breq	.+2      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     596:	0a c2       	rjmp	.+1044   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     598:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     59c:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     5a0:	88 27       	eor	r24, r24
     5a2:	9f 70       	andi	r25, 0x0F	; 15
     5a4:	81 15       	cp	r24, r1
									menuState += 0x0100;
     5a6:	93 40       	sbci	r25, 0x03	; 3
     5a8:	09 f4       	brne	.+2      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
     5aa:	00 c2       	rjmp	.+1024   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     5ac:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     5b0:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     5b4:	93 95       	inc	r25
     5b6:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <menuState+0x1>
								}
								break;
							case 0x2000:
								if((menuState & 0x0F00) != 0x0200){
     5ba:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <menuState>
     5be:	f6 c1       	rjmp	.+1004   	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     5c0:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     5c4:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     5c8:	88 27       	eor	r24, r24
     5ca:	9f 70       	andi	r25, 0x0F	; 15
     5cc:	81 15       	cp	r24, r1
									menuState += 0x0100;
     5ce:	92 40       	sbci	r25, 0x02	; 2
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
     5d2:	ec c1       	rjmp	.+984    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     5d4:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     5d8:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     5dc:	93 95       	inc	r25
     5de:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <menuState+0x1>
								}
								break;
							case 0x3000:
								break;
							case 0x4000:
								if((menuState & 0x0F00) != 0x0A00){
     5e2:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <menuState>
     5e6:	e2 c1       	rjmp	.+964    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     5e8:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     5ec:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     5f0:	88 27       	eor	r24, r24
     5f2:	9f 70       	andi	r25, 0x0F	; 15
     5f4:	81 15       	cp	r24, r1
									menuState += 0x0100;
     5f6:	9a 40       	sbci	r25, 0x0A	; 10
     5f8:	09 f4       	brne	.+2      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
     5fa:	d8 c1       	rjmp	.+944    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     5fc:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     600:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     604:	93 95       	inc	r25
     606:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <menuState+0x1>
							default:
								break;
						}
						break;
					case 3:
						switch(menuState & 0xF000){
     60a:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <menuState>
     60e:	ce c1       	rjmp	.+924    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     610:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     614:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     618:	88 27       	eor	r24, r24
     61a:	90 7f       	andi	r25, 0xF0	; 240
     61c:	81 15       	cp	r24, r1
							case 0x1000:
								switch(menuState & 0x0F00){
     61e:	90 41       	sbci	r25, 0x10	; 16
     620:	09 f0       	breq	.+2      	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
     622:	c4 c1       	rjmp	.+904    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     624:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     628:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     62c:	88 27       	eor	r24, r24
     62e:	9f 70       	andi	r25, 0x0F	; 15
     630:	81 15       	cp	r24, r1
     632:	31 e0       	ldi	r19, 0x01	; 1
     634:	93 07       	cpc	r25, r19
     636:	21 f0       	breq	.+8      	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
     638:	81 15       	cp	r24, r1
									case 0x0100:
										if((menuState & 0x00F0) != 0x00A0){
     63a:	92 40       	sbci	r25, 0x02	; 2
     63c:	a9 f0       	breq	.+42     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
     63e:	b6 c1       	rjmp	.+876    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     640:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     644:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     648:	80 7f       	andi	r24, 0xF0	; 240
     64a:	99 27       	eor	r25, r25
     64c:	80 3a       	cpi	r24, 0xA0	; 160
											menuState += 0x0010;
     64e:	91 05       	cpc	r25, r1
     650:	09 f4       	brne	.+2      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     652:	ac c1       	rjmp	.+856    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     654:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     658:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     65c:	40 96       	adiw	r24, 0x10	; 16
     65e:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <menuState+0x1>
										}
										break;
									case 0x0200:
										if((menuState & 0x00F0) != 0x00A0){
     662:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <menuState>
     666:	a2 c1       	rjmp	.+836    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     668:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     66c:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     670:	80 7f       	andi	r24, 0xF0	; 240
     672:	99 27       	eor	r25, r25
     674:	80 3a       	cpi	r24, 0xA0	; 160
											menuState += 0x0010;
     676:	91 05       	cpc	r25, r1
     678:	09 f4       	brne	.+2      	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
     67a:	98 c1       	rjmp	.+816    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     67c:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     680:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     684:	40 96       	adiw	r24, 0x10	; 16
     686:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <menuState+0x1>
						break;
					default:
						break;
				}
			}
			else if(checkBit(PINB, 1) == 0){ // back
     68a:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <menuState>
     68e:	8e c1       	rjmp	.+796    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     690:	83 b1       	in	r24, 0x03	; 3
     692:	61 e0       	ldi	r22, 0x01	; 1
     694:	0e 94 8f 1b 	call	0x371e	; 0x371e <checkBit>
				menuLevel--;
     698:	81 11       	cpse	r24, r1
     69a:	29 c0       	rjmp	.+82     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
     69c:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
				switch(menuLevel){
     6a0:	81 50       	subi	r24, 0x01	; 1
     6a2:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <menuLevel>
     6a6:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	59 f0       	breq	.+22     	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
     6ae:	18 f0       	brcs	.+6      	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
					case 0:
						menuState = 0x0000;
     6b0:	82 30       	cpi	r24, 0x02	; 2
     6b2:	99 f0       	breq	.+38     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
     6b4:	7b c1       	rjmp	.+758    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     6b6:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <menuState+0x1>
						lockScreen = TRUE;
     6ba:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <menuState>
					case 1:
						menuState &= 0xF000;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <lockScreen>
     6c4:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     6c8:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     6cc:	88 27       	eor	r24, r24
     6ce:	90 7f       	andi	r25, 0xF0	; 240
     6d0:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <menuState+0x1>
						break;
					case 2:
						menuState &= 0xFF00;
     6d4:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <menuState>
     6d8:	69 c1       	rjmp	.+722    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     6da:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     6de:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     6e2:	88 27       	eor	r24, r24
     6e4:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <menuState+0x1>
						break;
					default:
						break;
				}
			}
			else if(checkBit(PINB, 0) == 0){ // ok
     6e8:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <menuState>
     6ec:	5f c1       	rjmp	.+702    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     6ee:	83 b1       	in	r24, 0x03	; 3
     6f0:	60 e0       	ldi	r22, 0x00	; 0
     6f2:	0e 94 8f 1b 	call	0x371e	; 0x371e <checkBit>
				menuLevel++;
     6f6:	81 11       	cpse	r24, r1
     6f8:	59 c1       	rjmp	.+690    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     6fa:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
				switch(menuLevel){
     6fe:	8f 5f       	subi	r24, 0xFF	; 255
     700:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <menuLevel>
     704:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
     708:	82 30       	cpi	r24, 0x02	; 2
     70a:	b1 f0       	breq	.+44     	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
     70c:	18 f4       	brcc	.+6      	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
     70e:	81 30       	cpi	r24, 0x01	; 1
     710:	39 f0       	breq	.+14     	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
     712:	4c c1       	rjmp	.+664    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     714:	83 30       	cpi	r24, 0x03	; 3
     716:	d1 f0       	breq	.+52     	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
     718:	84 30       	cpi	r24, 0x04	; 4
					case 1:
						menuState += 0x1000;
     71a:	09 f4       	brne	.+2      	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
     71c:	6a c0       	rjmp	.+212    	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
     71e:	46 c1       	rjmp	.+652    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     720:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     724:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     728:	90 5f       	subi	r25, 0xF0	; 240
     72a:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <menuState+0x1>
						lockScreen = FALSE;
     72e:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <menuState>
						break;
					case 2:
						menuState += 0x0100;
     732:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <lockScreen>
     736:	3a c1       	rjmp	.+628    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     738:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     73c:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     740:	93 95       	inc	r25
     742:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <menuState+0x1>
						break;
					case 3:
						if(menuState == 0x2100){
     746:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <menuState>
     74a:	30 c1       	rjmp	.+608    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     74c:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     750:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
							manualMode = TRUE;
     754:	81 15       	cp	r24, r1
     756:	91 42       	sbci	r25, 0x21	; 33
     758:	49 f4       	brne	.+18     	; 0x76c <__LOCK_REGION_LENGTH__+0x36c>
							menuLevel--;
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <manualMode>
     760:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
     764:	81 50       	subi	r24, 0x01	; 1
						}
						else if(menuState == 0x2200){
     766:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <menuLevel>
     76a:	20 c1       	rjmp	.+576    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     76c:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     770:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
							manualMode = FALSE;
     774:	81 15       	cp	r24, r1
     776:	92 42       	sbci	r25, 0x22	; 34
							menuLevel--;
     778:	41 f4       	brne	.+16     	; 0x78a <__LOCK_REGION_LENGTH__+0x38a>
     77a:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <manualMode>
     77e:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
     782:	81 50       	subi	r24, 0x01	; 1
						}
						else if((menuState == 0x1100) || (menuState == 0x1200)){
     784:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <menuLevel>
     788:	11 c1       	rjmp	.+546    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     78a:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     78e:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     792:	81 15       	cp	r24, r1
     794:	91 41       	sbci	r25, 0x11	; 17
     796:	39 f0       	breq	.+14     	; 0x7a6 <__LOCK_REGION_LENGTH__+0x3a6>
     798:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     79c:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
							menuState += 0x0010;
     7a0:	81 15       	cp	r24, r1
     7a2:	92 41       	sbci	r25, 0x12	; 18
     7a4:	51 f4       	brne	.+20     	; 0x7ba <__LOCK_REGION_LENGTH__+0x3ba>
     7a6:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     7aa:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     7ae:	40 96       	adiw	r24, 0x10	; 16
     7b0:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <menuState+0x1>
						}
						else if((menuState & 0xF000) == 0x4000){
     7b4:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <menuState>
     7b8:	f9 c0       	rjmp	.+498    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     7ba:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     7be:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     7c2:	88 27       	eor	r24, r24
     7c4:	90 7f       	andi	r25, 0xF0	; 240
     7c6:	81 15       	cp	r24, r1
							u8 index = ((menuState & 0x0F00) >> 8) - 1;
     7c8:	90 44       	sbci	r25, 0x40	; 64
     7ca:	09 f0       	breq	.+2      	; 0x7ce <__LOCK_REGION_LENGTH__+0x3ce>
     7cc:	ef c0       	rjmp	.+478    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     7ce:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
							eventVector[index] = 0;
     7d2:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     7d6:	88 27       	eor	r24, r24
     7d8:	9f 70       	andi	r25, 0x0F	; 15
     7da:	ef ef       	ldi	r30, 0xFF	; 255
     7dc:	e9 0f       	add	r30, r25
     7de:	f0 e0       	ldi	r31, 0x00	; 0
							menuLevel--;
     7e0:	e4 59       	subi	r30, 0x94	; 148
     7e2:	fc 4f       	sbci	r31, 0xFC	; 252
     7e4:	10 82       	st	Z, r1
     7e6:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
     7ea:	81 50       	subi	r24, 0x01	; 1
						}
						break;
					case 4:
						menuLevel--;
     7ec:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <menuLevel>
     7f0:	dd c0       	rjmp	.+442    	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     7f2:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <menuLevel>
						if((menuState & 0xFF00) == 0x1100){
     7f6:	81 50       	subi	r24, 0x01	; 1
     7f8:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <menuLevel>
     7fc:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     800:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     804:	88 27       	eor	r24, r24
     806:	81 15       	cp	r24, r1
							u8 index = ((menuState & 0x00F0) >> 4) - 1;
     808:	91 41       	sbci	r25, 0x11	; 17
     80a:	09 f0       	breq	.+2      	; 0x80e <__LOCK_REGION_LENGTH__+0x40e>
     80c:	a8 c0       	rjmp	.+336    	; 0x95e <__LOCK_REGION_LENGTH__+0x55e>
     80e:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
							unreadMessageVector[index] = 0;
     812:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     816:	80 7f       	andi	r24, 0xF0	; 240
     818:	99 27       	eor	r25, r25
     81a:	92 95       	swap	r25
     81c:	82 95       	swap	r24
     81e:	8f 70       	andi	r24, 0x0F	; 15
     820:	89 27       	eor	r24, r25
     822:	9f 70       	andi	r25, 0x0F	; 15
     824:	89 27       	eor	r24, r25
     826:	81 50       	subi	r24, 0x01	; 1
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	fc 01       	movw	r30, r24
     82c:	e5 5b       	subi	r30, 0xB5	; 181
									break;
								}
								else{
									eepromReadMessageAddress += 0x10;
									if(eepromReadMessageAddress >= 0x1B0){
										eepromReadMessageAddress = 0x110;
     82e:	fc 4f       	sbci	r31, 0xFC	; 252
     830:	10 82       	st	Z, r1
							unreadMessageVector[index] = 0;
							u8 ok = 0, counter = 0, aux;
							u16 address = 0;
							while(counter <= 10){
								counter++;
								if(readMessageVector[((eepromReadMessageAddress & 0xF0) - 0x10) >> 4] == 0){
     832:	2b e0       	ldi	r18, 0x0B	; 11
     834:	60 e1       	ldi	r22, 0x10	; 16
     836:	71 e0       	ldi	r23, 0x01	; 1
     838:	e0 91 95 03 	lds	r30, 0x0395	; 0x800395 <eepromReadMessageAddress>
     83c:	f0 91 96 03 	lds	r31, 0x0396	; 0x800396 <eepromReadMessageAddress+0x1>
     840:	e0 7f       	andi	r30, 0xF0	; 240
     842:	ff 27       	eor	r31, r31
     844:	70 97       	sbiw	r30, 0x10	; 16
     846:	f2 95       	swap	r31
     848:	e2 95       	swap	r30
     84a:	ef 70       	andi	r30, 0x0F	; 15
     84c:	ef 27       	eor	r30, r31
     84e:	ff 70       	andi	r31, 0x0F	; 15
     850:	ef 27       	eor	r30, r31
     852:	e9 5a       	subi	r30, 0xA9	; 169
     854:	fc 4f       	sbci	r31, 0xFC	; 252
									ok = 1;
									break;
								}
								else{
									eepromReadMessageAddress += 0x10;
     856:	30 81       	ld	r19, Z
     858:	33 23       	and	r19, r19
     85a:	c1 f0       	breq	.+48     	; 0x88c <__LOCK_REGION_LENGTH__+0x48c>
     85c:	40 91 95 03 	lds	r20, 0x0395	; 0x800395 <eepromReadMessageAddress>
     860:	50 91 96 03 	lds	r21, 0x0396	; 0x800396 <eepromReadMessageAddress+0x1>
     864:	40 5f       	subi	r20, 0xF0	; 240
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	50 93 96 03 	sts	0x0396, r21	; 0x800396 <eepromReadMessageAddress+0x1>
									if(eepromReadMessageAddress >= 0x1B0){
     86c:	40 93 95 03 	sts	0x0395, r20	; 0x800395 <eepromReadMessageAddress>
     870:	40 91 95 03 	lds	r20, 0x0395	; 0x800395 <eepromReadMessageAddress>
     874:	50 91 96 03 	lds	r21, 0x0396	; 0x800396 <eepromReadMessageAddress+0x1>
										eepromReadMessageAddress = 0x110;
     878:	40 3b       	cpi	r20, 0xB0	; 176
     87a:	51 40       	sbci	r21, 0x01	; 1
     87c:	20 f0       	brcs	.+8      	; 0x886 <__LOCK_REGION_LENGTH__+0x486>
     87e:	70 93 96 03 	sts	0x0396, r23	; 0x800396 <eepromReadMessageAddress+0x1>
						if((menuState & 0xFF00) == 0x1100){
							u8 index = ((menuState & 0x00F0) >> 4) - 1;
							unreadMessageVector[index] = 0;
							u8 ok = 0, counter = 0, aux;
							u16 address = 0;
							while(counter <= 10){
     882:	60 93 95 03 	sts	0x0395, r22	; 0x800395 <eepromReadMessageAddress>
									}
								}
							}
							if(ok == 1){
								for(u8 i = 0; i < 13; i++){
									address = 0x0010 + (index << 4) + i;
     886:	21 50       	subi	r18, 0x01	; 1
     888:	b9 f6       	brne	.-82     	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
     88a:	98 c0       	rjmp	.+304    	; 0x9bc <__LOCK_REGION_LENGTH__+0x5bc>
     88c:	82 95       	swap	r24
     88e:	92 95       	swap	r25
     890:	90 7f       	andi	r25, 0xF0	; 240
     892:	98 27       	eor	r25, r24
     894:	80 7f       	andi	r24, 0xF0	; 240
     896:	98 27       	eor	r25, r24
									aux = eeprom_read(address);
     898:	8c 01       	movw	r16, r24
     89a:	00 5f       	subi	r16, 0xF0	; 240
     89c:	1f 4f       	sbci	r17, 0xFF	; 255
									eeprom_write(aux, eepromReadMessageAddress);
     89e:	ec 01       	movw	r28, r24
     8a0:	6d 96       	adiw	r28, 0x1d	; 29
     8a2:	c8 01       	movw	r24, r16
     8a4:	36 d2       	rcall	.+1132   	; 0xd12 <eeprom_read>
     8a6:	60 91 95 03 	lds	r22, 0x0395	; 0x800395 <eepromReadMessageAddress>
									eepromReadMessageAddress++;
     8aa:	70 91 96 03 	lds	r23, 0x0396	; 0x800396 <eepromReadMessageAddress+0x1>
     8ae:	4b d2       	rcall	.+1174   	; 0xd46 <eeprom_write>
     8b0:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <eepromReadMessageAddress>
     8b4:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <eepromReadMessageAddress+0x1>
     8b8:	01 96       	adiw	r24, 0x01	; 1
     8ba:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <eepromReadMessageAddress+0x1>
									if((eepromReadMessageAddress & 0x00F) >= 0x00D){
     8be:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <eepromReadMessageAddress>
     8c2:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <eepromReadMessageAddress>
     8c6:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <eepromReadMessageAddress+0x1>
     8ca:	8f 70       	andi	r24, 0x0F	; 15
										eepromReadMessageAddress &= 0xFF0;
     8cc:	99 27       	eor	r25, r25
     8ce:	0d 97       	sbiw	r24, 0x0d	; 13
     8d0:	50 f0       	brcs	.+20     	; 0x8e6 <__LOCK_REGION_LENGTH__+0x4e6>
     8d2:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <eepromReadMessageAddress>
     8d6:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <eepromReadMessageAddress+0x1>
     8da:	80 7f       	andi	r24, 0xF0	; 240
     8dc:	9f 70       	andi	r25, 0x0F	; 15
     8de:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <eepromReadMessageAddress+0x1>
     8e2:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <eepromReadMessageAddress>
										eepromReadMessageAddress = 0x110;
									}
								}
							}
							if(ok == 1){
								for(u8 i = 0; i < 13; i++){
     8e6:	0f 5f       	subi	r16, 0xFF	; 255
     8e8:	1f 4f       	sbci	r17, 0xFF	; 255
									eepromReadMessageAddress++;
									if((eepromReadMessageAddress & 0x00F) >= 0x00D){
										eepromReadMessageAddress &= 0xFF0;
									}
								}
								readMessageVector[((eepromReadMessageAddress & 0xF0) - 0x10) >> 4] = 1;
     8ea:	0c 17       	cp	r16, r28
     8ec:	1d 07       	cpc	r17, r29
     8ee:	c9 f6       	brne	.-78     	; 0x8a2 <__LOCK_REGION_LENGTH__+0x4a2>
     8f0:	e0 91 95 03 	lds	r30, 0x0395	; 0x800395 <eepromReadMessageAddress>
     8f4:	f0 91 96 03 	lds	r31, 0x0396	; 0x800396 <eepromReadMessageAddress+0x1>
     8f8:	e0 7f       	andi	r30, 0xF0	; 240
     8fa:	ff 27       	eor	r31, r31
     8fc:	70 97       	sbiw	r30, 0x10	; 16
     8fe:	f2 95       	swap	r31
     900:	e2 95       	swap	r30
     902:	ef 70       	andi	r30, 0x0F	; 15
     904:	ef 27       	eor	r30, r31
     906:	ff 70       	andi	r31, 0x0F	; 15
     908:	ef 27       	eor	r30, r31
     90a:	e9 5a       	subi	r30, 0xA9	; 169
								eepromReadMessageAddress = (eepromReadMessageAddress & 0xFF0) + 0x010;
     90c:	fc 4f       	sbci	r31, 0xFC	; 252
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	80 83       	st	Z, r24
     912:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <eepromReadMessageAddress>
     916:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <eepromReadMessageAddress+0x1>
     91a:	80 7f       	andi	r24, 0xF0	; 240
     91c:	9f 70       	andi	r25, 0x0F	; 15
     91e:	40 96       	adiw	r24, 0x10	; 16
     920:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <eepromReadMessageAddress+0x1>
								if(eepromReadMessageAddress >= 0x1B0){
     924:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <eepromReadMessageAddress>
     928:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <eepromReadMessageAddress>
									eepromReadMessageAddress = 0x110;
     92c:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <eepromReadMessageAddress+0x1>
     930:	80 3b       	cpi	r24, 0xB0	; 176
     932:	91 40       	sbci	r25, 0x01	; 1
     934:	30 f0       	brcs	.+12     	; 0x942 <__LOCK_REGION_LENGTH__+0x542>
     936:	80 e1       	ldi	r24, 0x10	; 16
								}
								lcd_clearDisplay();
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <eepromReadMessageAddress+0x1>
								lcd_writeString("Mesaj citit!");
     93e:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <eepromReadMessageAddress>
     942:	d8 d2       	rcall	.+1456   	; 0xef4 <lcd_clearDisplay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     944:	87 e1       	ldi	r24, 0x17	; 23
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	b7 d3       	rcall	.+1902   	; 0x10b8 <lcd_writeString>
     94a:	3f ef       	ldi	r19, 0xFF	; 255
     94c:	89 e6       	ldi	r24, 0x69	; 105
     94e:	98 e1       	ldi	r25, 0x18	; 24
     950:	31 50       	subi	r19, 0x01	; 1
     952:	80 40       	sbci	r24, 0x00	; 0
     954:	90 40       	sbci	r25, 0x00	; 0
     956:	e1 f7       	brne	.-8      	; 0x950 <__LOCK_REGION_LENGTH__+0x550>
								lcd_writeString("Inbox full!");
								_delay_ms(1000);
							}
						}
						else{
							if((menuState & 0xFF00) == 0x1200){
     958:	00 c0       	rjmp	.+0      	; 0x95a <__LOCK_REGION_LENGTH__+0x55a>
     95a:	00 00       	nop
     95c:	27 c0       	rjmp	.+78     	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     95e:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
     962:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     966:	88 27       	eor	r24, r24
								u8 index = ((menuState & 0x00F0) >> 4) - 1;
     968:	81 15       	cp	r24, r1
     96a:	92 41       	sbci	r25, 0x12	; 18
     96c:	f9 f4       	brne	.+62     	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     96e:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
								readMessageVector[index] = 0;
     972:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
     976:	80 7f       	andi	r24, 0xF0	; 240
     978:	99 27       	eor	r25, r25
     97a:	92 95       	swap	r25
     97c:	82 95       	swap	r24
     97e:	8f 70       	andi	r24, 0x0F	; 15
     980:	89 27       	eor	r24, r25
     982:	9f 70       	andi	r25, 0x0F	; 15
     984:	89 27       	eor	r24, r25
     986:	ef ef       	ldi	r30, 0xFF	; 255
								lcd_clearDisplay();
     988:	e8 0f       	add	r30, r24
     98a:	f0 e0       	ldi	r31, 0x00	; 0
								lcd_writeString("Mesaj sters!");
     98c:	e9 5a       	subi	r30, 0xA9	; 169
     98e:	fc 4f       	sbci	r31, 0xFC	; 252
     990:	10 82       	st	Z, r1
     992:	b0 d2       	rcall	.+1376   	; 0xef4 <lcd_clearDisplay>
     994:	84 e2       	ldi	r24, 0x24	; 36
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	8f d3       	rcall	.+1822   	; 0x10b8 <lcd_writeString>
     99a:	3f ef       	ldi	r19, 0xFF	; 255
     99c:	89 e6       	ldi	r24, 0x69	; 105
     99e:	98 e1       	ldi	r25, 0x18	; 24
     9a0:	31 50       	subi	r19, 0x01	; 1
						}
					default:
						break;
				}
			}
			lcd_displayMenu(menuState);
     9a2:	80 40       	sbci	r24, 0x00	; 0
     9a4:	90 40       	sbci	r25, 0x00	; 0
     9a6:	e1 f7       	brne	.-8      	; 0x9a0 <__LOCK_REGION_LENGTH__+0x5a0>
     9a8:	00 c0       	rjmp	.+0      	; 0x9aa <__LOCK_REGION_LENGTH__+0x5aa>
     9aa:	00 00       	nop
			pinChangeFlag = FALSE;
     9ac:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <menuState>
		}
	}
}
     9b0:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <menuState+0x1>
								lcd_clearDisplay();
								lcd_writeString("Mesaj citit!");
								_delay_ms(1000);
							}
							else{
								unreadMessageVector[index] = 1;
     9b4:	cf d3       	rcall	.+1950   	; 0x1154 <lcd_displayMenu>
     9b6:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <pinChangeFlag>
     9ba:	13 c0       	rjmp	.+38     	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
								lcd_clearDisplay();
     9bc:	fc 01       	movw	r30, r24
     9be:	e5 5b       	subi	r30, 0xB5	; 181
								lcd_writeString("Inbox full!");
     9c0:	fc 4f       	sbci	r31, 0xFC	; 252
     9c2:	21 e0       	ldi	r18, 0x01	; 1
     9c4:	20 83       	st	Z, r18
     9c6:	96 d2       	rcall	.+1324   	; 0xef4 <lcd_clearDisplay>
     9c8:	81 e3       	ldi	r24, 0x31	; 49
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	75 d3       	rcall	.+1770   	; 0x10b8 <lcd_writeString>
     9ce:	2f ef       	ldi	r18, 0xFF	; 255
     9d0:	39 e6       	ldi	r19, 0x69	; 105
     9d2:	88 e1       	ldi	r24, 0x18	; 24
     9d4:	21 50       	subi	r18, 0x01	; 1
     9d6:	30 40       	sbci	r19, 0x00	; 0
     9d8:	80 40       	sbci	r24, 0x00	; 0
     9da:	e1 f7       	brne	.-8      	; 0x9d4 <__LOCK_REGION_LENGTH__+0x5d4>
			}
			lcd_displayMenu(menuState);
			pinChangeFlag = FALSE;
		}
	}
}
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <__LOCK_REGION_LENGTH__+0x5de>
     9de:	00 00       	nop
     9e0:	e5 cf       	rjmp	.-54     	; 0x9ac <__LOCK_REGION_LENGTH__+0x5ac>
     9e2:	ff 91       	pop	r31
     9e4:	ef 91       	pop	r30
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	bf 91       	pop	r27
     9ec:	af 91       	pop	r26
     9ee:	9f 91       	pop	r25
     9f0:	8f 91       	pop	r24
     9f2:	7f 91       	pop	r23
     9f4:	6f 91       	pop	r22
     9f6:	5f 91       	pop	r21
     9f8:	4f 91       	pop	r20
     9fa:	3f 91       	pop	r19
     9fc:	2f 91       	pop	r18
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
     a02:	0f 90       	pop	r0
     a04:	0b be       	out	0x3b, r0	; 59
     a06:	0f 90       	pop	r0
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	0f 90       	pop	r0
     a0c:	1f 90       	pop	r1
     a0e:	18 95       	reti

00000a10 <init>:

void init(){
	lcd_init();
     a10:	cf 93       	push	r28
	lcd_writeString("Enter password:");
     a12:	a6 d2       	rcall	.+1356   	; 0xf60 <lcd_init>
     a14:	8d e3       	ldi	r24, 0x3D	; 61
     a16:	91 e0       	ldi	r25, 0x01	; 1
	//lcd_resetCursor();
	loggedIn = FALSE;
     a18:	4f d3       	rcall	.+1694   	; 0x10b8 <lcd_writeString>
     a1a:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <loggedIn>
	pinChangeFlag = TRUE;
     a1e:	c1 e0       	ldi	r28, 0x01	; 1
     a20:	c0 93 49 03 	sts	0x0349, r28	; 0x800349 <pinChangeFlag>
	passwordCounter = 0;
     a24:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <passwordCounter>
	menuState = 0x0000;
     a28:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <menuState+0x1>
     a2c:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <menuState>
	menuLevel = 0;
     a30:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <menuLevel>
	manualMode = TRUE;
     a34:	c0 93 87 03 	sts	0x0387, r28	; 0x800387 <manualMode>
	eepromUnreadMessageAddress = 0x010;
     a38:	80 e1       	ldi	r24, 0x10	; 16
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <eepromUnreadMessageAddress+0x1>
     a40:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <eepromUnreadMessageAddress>
	eepromReadMessageAddress = 0x110;
     a44:	80 e1       	ldi	r24, 0x10	; 16
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <eepromReadMessageAddress+0x1>
     a4c:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <eepromReadMessageAddress>
	eepromEventAddress = 0x210;
     a50:	80 e1       	ldi	r24, 0x10	; 16
     a52:	92 e0       	ldi	r25, 0x02	; 2
     a54:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <eepromEventAddress+0x1>
     a58:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <eepromEventAddress>
	gpio_init(PB, 0, INPUT, USE_PULL);
     a5c:	21 e0       	ldi	r18, 0x01	; 1
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	81 e0       	ldi	r24, 0x01	; 1
	gpio_init(PB, 1, INPUT, USE_PULL);
     a64:	ae d1       	rcall	.+860    	; 0xdc2 <gpio_init>
     a66:	21 e0       	ldi	r18, 0x01	; 1
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	61 e0       	ldi	r22, 0x01	; 1
	gpio_init(PB, 2, INPUT, USE_PULL);
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	a9 d1       	rcall	.+850    	; 0xdc2 <gpio_init>
     a70:	21 e0       	ldi	r18, 0x01	; 1
     a72:	40 e0       	ldi	r20, 0x00	; 0
	gpio_init(PB, 3, INPUT, USE_PULL);
     a74:	62 e0       	ldi	r22, 0x02	; 2
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	a4 d1       	rcall	.+840    	; 0xdc2 <gpio_init>
     a7a:	21 e0       	ldi	r18, 0x01	; 1
     a7c:	40 e0       	ldi	r20, 0x00	; 0
     a7e:	63 e0       	ldi	r22, 0x03	; 3
	PCMSK1 = 0x0F;
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	9f d1       	rcall	.+830    	; 0xdc2 <gpio_init>
     a84:	8f e0       	ldi	r24, 0x0F	; 15
	TCCR3A = 0x00;
     a86:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	TCCR3C = 0x00;
     a8a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TIMSK3 = 0x01;
     a8e:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__TEXT_REGION_LENGTH__+0x7e0092>
	setBit(&PCICR, PCIE1);
     a92:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     a96:	61 e0       	ldi	r22, 0x01	; 1
     a98:	88 e6       	ldi	r24, 0x68	; 104
	gpio_init(PA, 4, OUTPUT, NO_PULL);
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <setBit>
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	41 e0       	ldi	r20, 0x01	; 1
	gpio_init(PA, 0, INPUT, NO_PULL);
     aa4:	64 e0       	ldi	r22, 0x04	; 4
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	8c d1       	rcall	.+792    	; 0xdc2 <gpio_init>
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
	adc_init(_10BIT, ADC_PRESCALER_16, SINGLE_CONVERSION);
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	87 d1       	rcall	.+782    	; 0xdc2 <gpio_init>
     ab4:	40 e0       	ldi	r20, 0x00	; 0
     ab6:	64 e0       	ldi	r22, 0x04	; 4
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	53 d0       	rcall	.+166    	; 0xb62 <adc_init>
     abc:	ea e7       	ldi	r30, 0x7A	; 122
     abe:	f3 e0       	ldi	r31, 0x03	; 3
	for(int i = 1; i < 8; i++){
     ac0:	81 e8       	ldi	r24, 0x81	; 129
     ac2:	93 e0       	ldi	r25, 0x03	; 3
		channelsEnabled[i] = 0;
	}
	channelsEnabled[0] = 1;
     ac4:	11 92       	st	Z+, r1
     ac6:	8e 17       	cp	r24, r30
     ac8:	9f 07       	cpc	r25, r31
     aca:	e1 f7       	brne	.-8      	; 0xac4 <init+0xb4>
	channelsEnabled[1] = 1;
     acc:	e9 e7       	ldi	r30, 0x79	; 121
	adc_start(channelsEnabled);
     ace:	f3 e0       	ldi	r31, 0x03	; 3
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	80 83       	st	Z, r24
	TCCR3B = 0x04;
     ad4:	81 83       	std	Z+1, r24	; 0x01
     ad6:	cf 01       	movw	r24, r30
     ad8:	9b d0       	rcall	.+310    	; 0xc10 <adc_start>
	TCNT3 = 34285;
     ada:	84 e0       	ldi	r24, 0x04	; 4
     adc:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
     ae0:	8d ee       	ldi	r24, 0xED	; 237
     ae2:	95 e8       	ldi	r25, 0x85	; 133
	uart_init(ASYNCHRONOUS, EVEN, _2BIT, _19200);
     ae4:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     ae8:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
     aec:	29 e1       	ldi	r18, 0x19	; 25
	uart_start(TRUE, TRUE);
     aee:	41 e0       	ldi	r20, 0x01	; 1
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <uart_init>
	eeprom_init();
     af8:	61 e0       	ldi	r22, 0x01	; 1
	for(int i = 0; i < 13; i++){
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	0e 94 1a 1c 	call	0x3834	; 0x3834 <uart_start>
		messageBuffer[i] = ' ';
     b00:	03 d1       	rcall	.+518    	; 0xd08 <eeprom_init>
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	20 e2       	ldi	r18, 0x20	; 32
		if(i < 10){
     b08:	fc 01       	movw	r30, r24
     b0a:	e8 57       	subi	r30, 0x78	; 120
     b0c:	fc 4f       	sbci	r31, 0xFC	; 252
			unreadMessageVector[i] = 0;
     b0e:	20 83       	st	Z, r18
     b10:	8a 30       	cpi	r24, 0x0A	; 10
     b12:	91 05       	cpc	r25, r1
     b14:	64 f4       	brge	.+24     	; 0xb2e <init+0x11e>
			readMessageVector[i] = 0;
     b16:	fc 01       	movw	r30, r24
     b18:	e5 5b       	subi	r30, 0xB5	; 181
     b1a:	fc 4f       	sbci	r31, 0xFC	; 252
     b1c:	10 82       	st	Z, r1
			eventVector[i] = 0;
     b1e:	fc 01       	movw	r30, r24
     b20:	e9 5a       	subi	r30, 0xA9	; 169
     b22:	fc 4f       	sbci	r31, 0xFC	; 252
     b24:	10 82       	st	Z, r1
	TCCR3B = 0x04;
	TCNT3 = 34285;
	uart_init(ASYNCHRONOUS, EVEN, _2BIT, _19200);
	uart_start(TRUE, TRUE);
	eeprom_init();
	for(int i = 0; i < 13; i++){
     b26:	fc 01       	movw	r30, r24
     b28:	e4 59       	subi	r30, 0x94	; 148
     b2a:	fc 4f       	sbci	r31, 0xFC	; 252
     b2c:	10 82       	st	Z, r1
			unreadMessageVector[i] = 0;
			readMessageVector[i] = 0;
			eventVector[i] = 0;
		}
	}
	messageBufferIndex = 0;
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	8d 30       	cpi	r24, 0x0D	; 13
	lockScreen = FALSE;
     b32:	91 05       	cpc	r25, r1
     b34:	49 f7       	brne	.-46     	; 0xb08 <init+0xf8>
	emergencyTrigger = FALSE;
     b36:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <messageBufferIndex>
	dateIndex = 0;
     b3a:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <lockScreen>
	dateConfirmation = FALSE;
     b3e:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <emergencyTrigger>
	secondCounter = 0;
     b42:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <dateIndex>
	eventIndex = 0;
     b46:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <dateConfirmation>
	sendTempFlag = FALSE;
     b4a:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <secondCounter>
}
     b4e:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <eventIndex>
     b52:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <__data_end>
     b56:	cf 91       	pop	r28
     b58:	08 95       	ret

00000b5a <main>:

int main(void)
{
	disableJTAG();
	init();
     b5a:	2f d1       	rcall	.+606    	; 0xdba <disableJTAG>
     b5c:	59 df       	rcall	.-334    	; 0xa10 <init>
	sei();
     b5e:	78 94       	sei
     b60:	ff cf       	rjmp	.-2      	; 0xb60 <main+0x6>

00000b62 <adc_init>:
void adc_stop(u8 *channelsEnabled){
	u8 channel;
	clearBit(&ADCSRA, ADEN);
	for (channel = 0; channel < 8; channel++)
		updateBit(&DIDR0, 1 << channel, ~channelsEnabled[channel]);
}
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	18 2f       	mov	r17, r24
     b6a:	c6 2f       	mov	r28, r22
     b6c:	d4 2f       	mov	r29, r20
     b6e:	67 e0       	ldi	r22, 0x07	; 7
     b70:	8c e7       	ldi	r24, 0x7C	; 124
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <clearBit>
     b78:	66 e0       	ldi	r22, 0x06	; 6
     b7a:	8c e7       	ldi	r24, 0x7C	; 124
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <setBit>
     b82:	41 2f       	mov	r20, r17
     b84:	65 e0       	ldi	r22, 0x05	; 5
     b86:	8c e7       	ldi	r24, 0x7C	; 124
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 77 1b 	call	0x36ee	; 0x36ee <updateBit>
     b8e:	64 e0       	ldi	r22, 0x04	; 4
     b90:	8c e7       	ldi	r24, 0x7C	; 124
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <clearBit>
     b98:	63 e0       	ldi	r22, 0x03	; 3
     b9a:	8c e7       	ldi	r24, 0x7C	; 124
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <clearBit>
     ba2:	c2 fb       	bst	r28, 2
     ba4:	44 27       	eor	r20, r20
     ba6:	40 f9       	bld	r20, 0
     ba8:	62 e0       	ldi	r22, 0x02	; 2
     baa:	8a e7       	ldi	r24, 0x7A	; 122
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 77 1b 	call	0x36ee	; 0x36ee <updateBit>
     bb2:	c1 fb       	bst	r28, 1
     bb4:	44 27       	eor	r20, r20
     bb6:	40 f9       	bld	r20, 0
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	8a e7       	ldi	r24, 0x7A	; 122
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 77 1b 	call	0x36ee	; 0x36ee <updateBit>
     bc2:	4c 2f       	mov	r20, r28
     bc4:	41 70       	andi	r20, 0x01	; 1
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	8a e7       	ldi	r24, 0x7A	; 122
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 77 1b 	call	0x36ee	; 0x36ee <updateBit>
     bd0:	d1 11       	cpse	r29, r1
     bd2:	06 c0       	rjmp	.+12     	; 0xbe0 <adc_init+0x7e>
     bd4:	65 e0       	ldi	r22, 0x05	; 5
     bd6:	8a e7       	ldi	r24, 0x7A	; 122
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <clearBit>
     bde:	14 c0       	rjmp	.+40     	; 0xc08 <adc_init+0xa6>
     be0:	65 e0       	ldi	r22, 0x05	; 5
     be2:	8a e7       	ldi	r24, 0x7A	; 122
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <setBit>
     bea:	62 e0       	ldi	r22, 0x02	; 2
     bec:	8b e7       	ldi	r24, 0x7B	; 123
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <clearBit>
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	8b e7       	ldi	r24, 0x7B	; 123
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <clearBit>
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	8b e7       	ldi	r24, 0x7B	; 123
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <clearBit>
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	08 95       	ret

00000c10 <adc_start>:
     c10:	ef 92       	push	r14
     c12:	ff 92       	push	r15
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	d8 2f       	mov	r29, r24
     c1e:	c9 2f       	mov	r28, r25
     c20:	67 e0       	ldi	r22, 0x07	; 7
     c22:	8a e7       	ldi	r24, 0x7A	; 122
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <setBit>
     c2a:	0d 2f       	mov	r16, r29
     c2c:	1c 2f       	mov	r17, r28
     c2e:	c0 e0       	ldi	r28, 0x00	; 0
     c30:	d0 e0       	ldi	r29, 0x00	; 0
     c32:	ee 24       	eor	r14, r14
     c34:	e3 94       	inc	r14
     c36:	f1 2c       	mov	r15, r1
     c38:	f8 01       	movw	r30, r16
     c3a:	41 91       	ld	r20, Z+
     c3c:	8f 01       	movw	r16, r30
     c3e:	b7 01       	movw	r22, r14
     c40:	0c 2e       	mov	r0, r28
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <adc_start+0x38>
     c44:	66 0f       	add	r22, r22
     c46:	77 1f       	adc	r23, r23
     c48:	0a 94       	dec	r0
     c4a:	e2 f7       	brpl	.-8      	; 0xc44 <adc_start+0x34>
     c4c:	8e e7       	ldi	r24, 0x7E	; 126
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 77 1b 	call	0x36ee	; 0x36ee <updateBit>
     c54:	21 96       	adiw	r28, 0x01	; 1
     c56:	c8 30       	cpi	r28, 0x08	; 8
     c58:	d1 05       	cpc	r29, r1
     c5a:	71 f7       	brne	.-36     	; 0xc38 <adc_start+0x28>
     c5c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     c60:	65 e0       	ldi	r22, 0x05	; 5
     c62:	0e 94 8f 1b 	call	0x371e	; 0x371e <checkBit>
     c66:	88 23       	and	r24, r24
     c68:	29 f0       	breq	.+10     	; 0xc74 <adc_start+0x64>
     c6a:	66 e0       	ldi	r22, 0x06	; 6
     c6c:	8a e7       	ldi	r24, 0x7A	; 122
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <setBit>
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	08 95       	ret

00000c82 <adc_singleRead>:

u16 adc_singleRead(u8 channel){
	u16 readValue = 0;
	u16 temp = 0;
	ADMUX = channel | (ADMUX & 0b11111000);
     c82:	ec e7       	ldi	r30, 0x7C	; 124
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	90 81       	ld	r25, Z
     c88:	98 7f       	andi	r25, 0xF8	; 248
     c8a:	89 2b       	or	r24, r25
     c8c:	80 83       	st	Z, r24
	if(!checkBit(ADCSRA, ADATE))
     c8e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     c92:	65 e0       	ldi	r22, 0x05	; 5
     c94:	0e 94 8f 1b 	call	0x371e	; 0x371e <checkBit>
     c98:	81 11       	cpse	r24, r1
     c9a:	0b c0       	rjmp	.+22     	; 0xcb2 <adc_singleRead+0x30>
	{
		setBit(&ADCSRA, ADSC);
     c9c:	66 e0       	ldi	r22, 0x06	; 6
     c9e:	8a e7       	ldi	r24, 0x7A	; 122
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <setBit>
		while(!(ADCSRA & (1<<ADIF)));
     ca6:	ea e7       	ldi	r30, 0x7A	; 122
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	84 ff       	sbrs	r24, 4
     cae:	fd cf       	rjmp	.-6      	; 0xcaa <adc_singleRead+0x28>
     cb0:	14 c0       	rjmp	.+40     	; 0xcda <adc_singleRead+0x58>
	}
	else
	{
		setBit(&ADCSRA, ADIF);
     cb2:	64 e0       	ldi	r22, 0x04	; 4
     cb4:	8a e7       	ldi	r24, 0x7A	; 122
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <setBit>
		while(!(ADCSRA & (1<<ADIF)));
     cbc:	ea e7       	ldi	r30, 0x7A	; 122
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	84 ff       	sbrs	r24, 4
     cc4:	fd cf       	rjmp	.-6      	; 0xcc0 <adc_singleRead+0x3e>
		setBit(&ADCSRA, ADIF);
     cc6:	64 e0       	ldi	r22, 0x04	; 4
     cc8:	8a e7       	ldi	r24, 0x7A	; 122
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <setBit>
		while(!(ADCSRA & (1<<ADIF)));
     cd0:	ea e7       	ldi	r30, 0x7A	; 122
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	84 ff       	sbrs	r24, 4
     cd8:	fd cf       	rjmp	.-6      	; 0xcd4 <adc_singleRead+0x52>
		
	}
	switch(checkBit(ADMUX, ADLAR))
     cda:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     cde:	65 e0       	ldi	r22, 0x05	; 5
     ce0:	0e 94 8f 1b 	call	0x371e	; 0x371e <checkBit>
     ce4:	88 23       	and	r24, r24
     ce6:	31 f0       	breq	.+12     	; 0xcf4 <adc_singleRead+0x72>
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	59 f4       	brne	.+22     	; 0xd02 <adc_singleRead+0x80>
	{
		case 1:
			readValue = ADCH;
     cec:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     cf0:	90 e0       	ldi	r25, 0x00	; 0
			break;
     cf2:	08 95       	ret
		case 0:
			readValue = ADCL;
     cf4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
			temp = ADCH;
     cf8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
			readValue |= (temp << 8);
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	92 2b       	or	r25, r18
		break;
     d00:	08 95       	ret
	for (channel = 0; channel < 8; channel++)
		updateBit(&DIDR0, 1 << channel, ~channelsEnabled[channel]);
}

u16 adc_singleRead(u8 channel){
	u16 readValue = 0;
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 e0       	ldi	r25, 0x00	; 0
			temp = ADCH;
			readValue |= (temp << 8);
		break;
	}
	return readValue;
}
     d06:	08 95       	ret

00000d08 <eeprom_init>:
#include "spi.h"
#include "gpio.h"
#include "uart.h"

void eeprom_init(){
	spi_init();
     d08:	0e 94 97 1b 	call	0x372e	; 0x372e <spi_init>
	spi_start();
     d0c:	0c 94 c4 1b 	jmp	0x3788	; 0x3788 <spi_start>
     d10:	08 95       	ret

00000d12 <eeprom_read>:
}

u8 eeprom_read(u16 address){
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	c8 2f       	mov	r28, r24
     d18:	d9 2f       	mov	r29, r25
	u8 value = 0x00;
	gpio_out_reset(PB, 4);
     d1a:	64 e0       	ldi	r22, 0x04	; 4
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	b2 d0       	rcall	.+356    	; 0xe84 <gpio_out_reset>
	spi_writeData(0x03);
     d20:	83 e0       	ldi	r24, 0x03	; 3
     d22:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <spi_writeData>
	spi_writeData((u8)(address >> 8));
     d26:	8d 2f       	mov	r24, r29
     d28:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <spi_writeData>
	spi_writeData((u8)(address));
     d2c:	8c 2f       	mov	r24, r28
     d2e:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <spi_writeData>
	value = spi_readData();
     d32:	0e 94 cf 1b 	call	0x379e	; 0x379e <spi_readData>
     d36:	c8 2f       	mov	r28, r24
	gpio_out_set(PB, 4);
     d38:	64 e0       	ldi	r22, 0x04	; 4
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	87 d0       	rcall	.+270    	; 0xe4c <gpio_out_set>
	return value;
}
     d3e:	8c 2f       	mov	r24, r28
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <eeprom_write>:

void eeprom_write(u8 data, u16 address){
     d46:	1f 93       	push	r17
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	c8 2f       	mov	r28, r24
     d4e:	d6 2f       	mov	r29, r22
     d50:	17 2f       	mov	r17, r23
	gpio_out_reset(PB, 4);
     d52:	64 e0       	ldi	r22, 0x04	; 4
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	96 d0       	rcall	.+300    	; 0xe84 <gpio_out_reset>
	spi_writeData(0x06);
     d58:	86 e0       	ldi	r24, 0x06	; 6
     d5a:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <spi_writeData>
	gpio_out_set(PB, 4);
     d5e:	64 e0       	ldi	r22, 0x04	; 4
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	74 d0       	rcall	.+232    	; 0xe4c <gpio_out_set>
     d64:	8f e1       	ldi	r24, 0x1F	; 31
     d66:	9e e4       	ldi	r25, 0x4E	; 78
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <eeprom_write+0x22>
     d6c:	00 c0       	rjmp	.+0      	; 0xd6e <eeprom_write+0x28>
	_delay_ms(10);
	gpio_out_reset(PB, 4);
     d6e:	00 00       	nop
     d70:	64 e0       	ldi	r22, 0x04	; 4
     d72:	81 e0       	ldi	r24, 0x01	; 1
	spi_writeData(0x02);
     d74:	87 d0       	rcall	.+270    	; 0xe84 <gpio_out_reset>
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <spi_writeData>
	spi_writeData((u8)(address >> 8));
     d7c:	81 2f       	mov	r24, r17
     d7e:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <spi_writeData>
	spi_writeData((u8)(address));
     d82:	8d 2f       	mov	r24, r29
     d84:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <spi_writeData>
	spi_writeData(data);
     d88:	8c 2f       	mov	r24, r28
	gpio_out_set(PB, 4);
     d8a:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <spi_writeData>
     d8e:	64 e0       	ldi	r22, 0x04	; 4
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	5c d0       	rcall	.+184    	; 0xe4c <gpio_out_set>
     d94:	8f e1       	ldi	r24, 0x1F	; 31
     d96:	9e e4       	ldi	r25, 0x4E	; 78
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <eeprom_write+0x52>
	_delay_ms(10);
	gpio_out_reset(PB, 4);
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <eeprom_write+0x58>
     d9e:	00 00       	nop
     da0:	64 e0       	ldi	r22, 0x04	; 4
	spi_writeData(0x04);
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	6f d0       	rcall	.+222    	; 0xe84 <gpio_out_reset>
	gpio_out_set(PB, 4);
     da6:	84 e0       	ldi	r24, 0x04	; 4
     da8:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <spi_writeData>
     dac:	64 e0       	ldi	r22, 0x04	; 4
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	4d d0       	rcall	.+154    	; 0xe4c <gpio_out_set>
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	08 95       	ret

00000dba <disableJTAG>:
			break;
		case PC:
			clearBit(&PORTC, _number);
			break;
		case PD:
			clearBit(&PORTD, _number);
     dba:	80 e8       	ldi	r24, 0x80	; 128
     dbc:	85 bf       	out	0x35, r24	; 53
     dbe:	85 bf       	out	0x35, r24	; 53
     dc0:	08 95       	ret

00000dc2 <gpio_init>:
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	d6 2f       	mov	r29, r22
     dca:	c4 2f       	mov	r28, r20
     dcc:	12 2f       	mov	r17, r18
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	99 f0       	breq	.+38     	; 0xdf8 <gpio_init+0x36>
     dd2:	28 f0       	brcs	.+10     	; 0xdde <gpio_init+0x1c>
     dd4:	82 30       	cpi	r24, 0x02	; 2
     dd6:	e9 f0       	breq	.+58     	; 0xe12 <gpio_init+0x50>
     dd8:	83 30       	cpi	r24, 0x03	; 3
     dda:	41 f1       	breq	.+80     	; 0xe2c <gpio_init+0x6a>
     ddc:	33 c0       	rjmp	.+102    	; 0xe44 <gpio_init+0x82>
     dde:	81 e2       	ldi	r24, 0x21	; 33
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 77 1b 	call	0x36ee	; 0x36ee <updateBit>
     de6:	c1 11       	cpse	r28, r1
     de8:	2d c0       	rjmp	.+90     	; 0xe44 <gpio_init+0x82>
     dea:	41 2f       	mov	r20, r17
     dec:	6d 2f       	mov	r22, r29
     dee:	82 e2       	ldi	r24, 0x22	; 34
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 77 1b 	call	0x36ee	; 0x36ee <updateBit>
     df6:	26 c0       	rjmp	.+76     	; 0xe44 <gpio_init+0x82>
     df8:	84 e2       	ldi	r24, 0x24	; 36
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 77 1b 	call	0x36ee	; 0x36ee <updateBit>
     e00:	c1 11       	cpse	r28, r1
     e02:	20 c0       	rjmp	.+64     	; 0xe44 <gpio_init+0x82>
     e04:	41 2f       	mov	r20, r17
     e06:	6d 2f       	mov	r22, r29
     e08:	85 e2       	ldi	r24, 0x25	; 37
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 77 1b 	call	0x36ee	; 0x36ee <updateBit>
     e10:	19 c0       	rjmp	.+50     	; 0xe44 <gpio_init+0x82>
     e12:	87 e2       	ldi	r24, 0x27	; 39
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 77 1b 	call	0x36ee	; 0x36ee <updateBit>
     e1a:	c1 11       	cpse	r28, r1
     e1c:	13 c0       	rjmp	.+38     	; 0xe44 <gpio_init+0x82>
     e1e:	41 2f       	mov	r20, r17
     e20:	6d 2f       	mov	r22, r29
     e22:	88 e2       	ldi	r24, 0x28	; 40
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 77 1b 	call	0x36ee	; 0x36ee <updateBit>
     e2a:	0c c0       	rjmp	.+24     	; 0xe44 <gpio_init+0x82>
     e2c:	8a e2       	ldi	r24, 0x2A	; 42
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 77 1b 	call	0x36ee	; 0x36ee <updateBit>
     e34:	c1 11       	cpse	r28, r1
     e36:	06 c0       	rjmp	.+12     	; 0xe44 <gpio_init+0x82>
     e38:	41 2f       	mov	r20, r17
     e3a:	6d 2f       	mov	r22, r29
     e3c:	8b e2       	ldi	r24, 0x2B	; 43
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 77 1b 	call	0x36ee	; 0x36ee <updateBit>
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	08 95       	ret

00000e4c <gpio_out_set>:
	}
}
	

void gpio_out_set(port _port, u8 _number){
	switch(_port){
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	59 f0       	breq	.+22     	; 0xe66 <gpio_out_set+0x1a>
     e50:	28 f0       	brcs	.+10     	; 0xe5c <gpio_out_set+0x10>
     e52:	82 30       	cpi	r24, 0x02	; 2
     e54:	69 f0       	breq	.+26     	; 0xe70 <gpio_out_set+0x24>
     e56:	83 30       	cpi	r24, 0x03	; 3
     e58:	81 f0       	breq	.+32     	; 0xe7a <gpio_out_set+0x2e>
     e5a:	08 95       	ret
		case PA:
			setBit(&PORTA, _number);
     e5c:	82 e2       	ldi	r24, 0x22	; 34
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <setBit>
			break;
     e64:	08 95       	ret
		case PB:
			setBit(&PORTB, _number);
     e66:	85 e2       	ldi	r24, 0x25	; 37
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <setBit>
			break;
     e6e:	08 95       	ret
		case PC:
			setBit(&PORTC, _number);
     e70:	88 e2       	ldi	r24, 0x28	; 40
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <setBit>
			break;
     e78:	08 95       	ret
		case PD:
			setBit(&PORTD, _number);
     e7a:	8b e2       	ldi	r24, 0x2B	; 43
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <setBit>
     e82:	08 95       	ret

00000e84 <gpio_out_reset>:
			break;
	}
}

void gpio_out_reset(port _port, u8 _number){
	switch(_port){
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	59 f0       	breq	.+22     	; 0xe9e <gpio_out_reset+0x1a>
     e88:	28 f0       	brcs	.+10     	; 0xe94 <gpio_out_reset+0x10>
     e8a:	82 30       	cpi	r24, 0x02	; 2
     e8c:	69 f0       	breq	.+26     	; 0xea8 <gpio_out_reset+0x24>
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	81 f0       	breq	.+32     	; 0xeb2 <gpio_out_reset+0x2e>
     e92:	08 95       	ret
		case PA:
			clearBit(&PORTA, _number);
     e94:	82 e2       	ldi	r24, 0x22	; 34
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0c 94 5e 1b 	jmp	0x36bc	; 0x36bc <clearBit>
			break;
     e9c:	08 95       	ret
		case PB:
			clearBit(&PORTB, _number);
     e9e:	85 e2       	ldi	r24, 0x25	; 37
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0c 94 5e 1b 	jmp	0x36bc	; 0x36bc <clearBit>
			break;
     ea6:	08 95       	ret
		case PC:
			clearBit(&PORTC, _number);
     ea8:	88 e2       	ldi	r24, 0x28	; 40
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0c 94 5e 1b 	jmp	0x36bc	; 0x36bc <clearBit>
			break;
     eb0:	08 95       	ret
		case PD:
			clearBit(&PORTD, _number);
     eb2:	8b e2       	ldi	r24, 0x2B	; 43
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0c 94 5e 1b 	jmp	0x36bc	; 0x36bc <clearBit>
     eba:	08 95       	ret

00000ebc <gpio_out_toggle>:
			break;
	}
}

void gpio_out_toggle(port _port, u8 _number){
	switch(_port){
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	59 f0       	breq	.+22     	; 0xed6 <gpio_out_toggle+0x1a>
     ec0:	28 f0       	brcs	.+10     	; 0xecc <gpio_out_toggle+0x10>
     ec2:	82 30       	cpi	r24, 0x02	; 2
     ec4:	69 f0       	breq	.+26     	; 0xee0 <gpio_out_toggle+0x24>
     ec6:	83 30       	cpi	r24, 0x03	; 3
     ec8:	81 f0       	breq	.+32     	; 0xeea <gpio_out_toggle+0x2e>
     eca:	08 95       	ret
		case PA:
			toggleBit(&PORTA, _number);
     ecc:	82 e2       	ldi	r24, 0x22	; 34
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <toggleBit>
			break;
     ed4:	08 95       	ret
		case PB:
			toggleBit(&PORTB, _number);
     ed6:	85 e2       	ldi	r24, 0x25	; 37
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <toggleBit>
			break;
     ede:	08 95       	ret
		case PC:
			toggleBit(&PORTC, _number);
     ee0:	88 e2       	ldi	r24, 0x28	; 40
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <toggleBit>
			break;
     ee8:	08 95       	ret
		case PD:
			toggleBit(&PORTD, _number);
     eea:	8b e2       	ldi	r24, 0x2B	; 43
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <toggleBit>
     ef2:	08 95       	ret

00000ef4 <lcd_clearDisplay>:
volatile u8 minute;
volatile u8 day;
volatile u8 month;

void lcd_clearDisplay(){
	gpio_out_reset(PD, 5);
     ef4:	65 e0       	ldi	r22, 0x05	; 5
     ef6:	83 e0       	ldi	r24, 0x03	; 3
     ef8:	c5 df       	rcall	.-118    	; 0xe84 <gpio_out_reset>
	gpio_out_reset(PD, 6);
     efa:	66 e0       	ldi	r22, 0x06	; 6
     efc:	83 e0       	ldi	r24, 0x03	; 3
     efe:	c2 df       	rcall	.-124    	; 0xe84 <gpio_out_reset>
	PORTC = 0x01;
     f00:	81 e0       	ldi	r24, 0x01	; 1
	gpio_out_set(PD, 4);
     f02:	88 b9       	out	0x08, r24	; 8
     f04:	64 e0       	ldi	r22, 0x04	; 4
     f06:	83 e0       	ldi	r24, 0x03	; 3
     f08:	a1 df       	rcall	.-190    	; 0xe4c <gpio_out_set>
     f0a:	8f e0       	ldi	r24, 0x0F	; 15
     f0c:	97 e2       	ldi	r25, 0x27	; 39
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <lcd_clearDisplay+0x1a>
	_delay_ms(5);
	gpio_out_reset(PD, 4);
     f12:	00 c0       	rjmp	.+0      	; 0xf14 <lcd_clearDisplay+0x20>
     f14:	00 00       	nop
     f16:	64 e0       	ldi	r22, 0x04	; 4
     f18:	83 e0       	ldi	r24, 0x03	; 3
     f1a:	b4 df       	rcall	.-152    	; 0xe84 <gpio_out_reset>
     f1c:	8f e0       	ldi	r24, 0x0F	; 15
     f1e:	97 e2       	ldi	r25, 0x27	; 39
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	f1 f7       	brne	.-4      	; 0xf20 <lcd_clearDisplay+0x2c>
     f24:	00 c0       	rjmp	.+0      	; 0xf26 <lcd_clearDisplay+0x32>
     f26:	00 00       	nop
     f28:	08 95       	ret

00000f2a <lcd_resetCursor>:
	_delay_ms(5);
}

void lcd_resetCursor(){
	/* Set DDRAM address to 00H */
	gpio_out_reset(PD, 5);
     f2a:	65 e0       	ldi	r22, 0x05	; 5
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	aa df       	rcall	.-172    	; 0xe84 <gpio_out_reset>
	gpio_out_reset(PD, 6);
     f30:	66 e0       	ldi	r22, 0x06	; 6
     f32:	83 e0       	ldi	r24, 0x03	; 3
     f34:	a7 df       	rcall	.-178    	; 0xe84 <gpio_out_reset>
	PORTC = 0x80;
     f36:	80 e8       	ldi	r24, 0x80	; 128
	gpio_out_set(PD, 4);
     f38:	88 b9       	out	0x08, r24	; 8
     f3a:	64 e0       	ldi	r22, 0x04	; 4
     f3c:	83 e0       	ldi	r24, 0x03	; 3
     f3e:	86 df       	rcall	.-244    	; 0xe4c <gpio_out_set>
     f40:	8f e0       	ldi	r24, 0x0F	; 15
     f42:	97 e2       	ldi	r25, 0x27	; 39
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <lcd_resetCursor+0x1a>
	_delay_ms(5);
	gpio_out_reset(PD, 4);
     f48:	00 c0       	rjmp	.+0      	; 0xf4a <lcd_resetCursor+0x20>
     f4a:	00 00       	nop
     f4c:	64 e0       	ldi	r22, 0x04	; 4
     f4e:	83 e0       	ldi	r24, 0x03	; 3
     f50:	99 df       	rcall	.-206    	; 0xe84 <gpio_out_reset>
     f52:	8f e0       	ldi	r24, 0x0F	; 15
     f54:	97 e2       	ldi	r25, 0x27	; 39
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <lcd_resetCursor+0x2c>
     f5a:	00 c0       	rjmp	.+0      	; 0xf5c <lcd_resetCursor+0x32>
     f5c:	00 00       	nop
     f5e:	08 95       	ret

00000f60 <lcd_init>:
	_delay_ms(5);
}

void lcd_init(){
     f60:	cf 93       	push	r28
     f62:	c4 e0       	ldi	r28, 0x04	; 4
	int index;
	/* Enable, R/nW, RS */
	for(index = 4; index < 7; index++){
		gpio_init(PD, index, OUTPUT, NO_PULL);
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	41 e0       	ldi	r20, 0x01	; 1
     f68:	6c 2f       	mov	r22, r28
     f6a:	83 e0       	ldi	r24, 0x03	; 3
     f6c:	2a df       	rcall	.-428    	; 0xdc2 <gpio_init>
		gpio_out_reset(PD, index);
     f6e:	6c 2f       	mov	r22, r28
     f70:	83 e0       	ldi	r24, 0x03	; 3
     f72:	88 df       	rcall	.-240    	; 0xe84 <gpio_out_reset>
     f74:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_init(){
	int index;
	/* Enable, R/nW, RS */
	for(index = 4; index < 7; index++){
     f76:	c7 30       	cpi	r28, 0x07	; 7
     f78:	a9 f7       	brne	.-22     	; 0xf64 <lcd_init+0x4>
     f7a:	c0 e0       	ldi	r28, 0x00	; 0
		gpio_init(PD, index, OUTPUT, NO_PULL);
		gpio_out_reset(PD, index);
	}
	/* Data port */
	for(index = 0; index < 8; index++){
		gpio_init(PC, index, OUTPUT, NO_PULL);
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	41 e0       	ldi	r20, 0x01	; 1
     f80:	6c 2f       	mov	r22, r28
     f82:	82 e0       	ldi	r24, 0x02	; 2
		gpio_out_reset(PC, index);
     f84:	1e df       	rcall	.-452    	; 0xdc2 <gpio_init>
     f86:	6c 2f       	mov	r22, r28
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	7c df       	rcall	.-264    	; 0xe84 <gpio_out_reset>
     f8c:	cf 5f       	subi	r28, 0xFF	; 255
	for(index = 4; index < 7; index++){
		gpio_init(PD, index, OUTPUT, NO_PULL);
		gpio_out_reset(PD, index);
	}
	/* Data port */
	for(index = 0; index < 8; index++){
     f8e:	c8 30       	cpi	r28, 0x08	; 8
     f90:	a9 f7       	brne	.-22     	; 0xf7c <lcd_init+0x1c>
     f92:	2f ef       	ldi	r18, 0xFF	; 255
     f94:	89 e6       	ldi	r24, 0x69	; 105
     f96:	98 e1       	ldi	r25, 0x18	; 24
     f98:	21 50       	subi	r18, 0x01	; 1
     f9a:	80 40       	sbci	r24, 0x00	; 0
     f9c:	90 40       	sbci	r25, 0x00	; 0
     f9e:	e1 f7       	brne	.-8      	; 0xf98 <lcd_init+0x38>
		gpio_out_reset(PC, index);
	}
	
	_delay_ms(1000);
	/* Clear screen */
	lcd_clearDisplay();
     fa0:	00 c0       	rjmp	.+0      	; 0xfa2 <lcd_init+0x42>
	
	/* 8 data bits, 2 lines */
	gpio_out_reset(PD, 5);
     fa2:	00 00       	nop
     fa4:	a7 df       	rcall	.-178    	; 0xef4 <lcd_clearDisplay>
     fa6:	65 e0       	ldi	r22, 0x05	; 5
	gpio_out_reset(PD, 6);
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	6c df       	rcall	.-296    	; 0xe84 <gpio_out_reset>
     fac:	66 e0       	ldi	r22, 0x06	; 6
	PORTC = 0x38;
     fae:	83 e0       	ldi	r24, 0x03	; 3
     fb0:	69 df       	rcall	.-302    	; 0xe84 <gpio_out_reset>
	gpio_out_set(PD, 4);
     fb2:	88 e3       	ldi	r24, 0x38	; 56
     fb4:	88 b9       	out	0x08, r24	; 8
     fb6:	64 e0       	ldi	r22, 0x04	; 4
     fb8:	83 e0       	ldi	r24, 0x03	; 3
     fba:	48 df       	rcall	.-368    	; 0xe4c <gpio_out_set>
     fbc:	8f e0       	ldi	r24, 0x0F	; 15
     fbe:	97 e2       	ldi	r25, 0x27	; 39
     fc0:	01 97       	sbiw	r24, 0x01	; 1
	_delay_ms(5);
	gpio_out_reset(PD, 4);
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <lcd_init+0x60>
     fc4:	00 c0       	rjmp	.+0      	; 0xfc6 <lcd_init+0x66>
     fc6:	00 00       	nop
     fc8:	64 e0       	ldi	r22, 0x04	; 4
     fca:	83 e0       	ldi	r24, 0x03	; 3
     fcc:	5b df       	rcall	.-330    	; 0xe84 <gpio_out_reset>
     fce:	8f e0       	ldi	r24, 0x0F	; 15
     fd0:	97 e2       	ldi	r25, 0x27	; 39
	_delay_ms(5);
	
	/* Display on */
	gpio_out_reset(PD, 5);
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <lcd_init+0x72>
     fd6:	00 c0       	rjmp	.+0      	; 0xfd8 <lcd_init+0x78>
	gpio_out_reset(PD, 6);
     fd8:	00 00       	nop
     fda:	65 e0       	ldi	r22, 0x05	; 5
     fdc:	83 e0       	ldi	r24, 0x03	; 3
     fde:	52 df       	rcall	.-348    	; 0xe84 <gpio_out_reset>
	PORTC = 0x0D;
     fe0:	66 e0       	ldi	r22, 0x06	; 6
	gpio_out_set(PD, 4);
     fe2:	83 e0       	ldi	r24, 0x03	; 3
     fe4:	4f df       	rcall	.-354    	; 0xe84 <gpio_out_reset>
     fe6:	8d e0       	ldi	r24, 0x0D	; 13
     fe8:	88 b9       	out	0x08, r24	; 8
     fea:	64 e0       	ldi	r22, 0x04	; 4
     fec:	83 e0       	ldi	r24, 0x03	; 3
     fee:	2e df       	rcall	.-420    	; 0xe4c <gpio_out_set>
     ff0:	8f e0       	ldi	r24, 0x0F	; 15
	_delay_ms(5);
	gpio_out_reset(PD, 4);
     ff2:	97 e2       	ldi	r25, 0x27	; 39
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <lcd_init+0x94>
     ff8:	00 c0       	rjmp	.+0      	; 0xffa <lcd_init+0x9a>
     ffa:	00 00       	nop
     ffc:	64 e0       	ldi	r22, 0x04	; 4
     ffe:	83 e0       	ldi	r24, 0x03	; 3
    1000:	41 df       	rcall	.-382    	; 0xe84 <gpio_out_reset>
	_delay_ms(5);
	
	/* Cursor shift to the right */
	gpio_out_reset(PD, 5);
    1002:	8f e0       	ldi	r24, 0x0F	; 15
    1004:	97 e2       	ldi	r25, 0x27	; 39
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <lcd_init+0xa6>
	gpio_out_reset(PD, 6);
    100a:	00 c0       	rjmp	.+0      	; 0x100c <lcd_init+0xac>
    100c:	00 00       	nop
    100e:	65 e0       	ldi	r22, 0x05	; 5
	PORTC = 0x14;
    1010:	83 e0       	ldi	r24, 0x03	; 3
    1012:	38 df       	rcall	.-400    	; 0xe84 <gpio_out_reset>
	gpio_out_set(PD, 4);
    1014:	66 e0       	ldi	r22, 0x06	; 6
    1016:	83 e0       	ldi	r24, 0x03	; 3
    1018:	35 df       	rcall	.-406    	; 0xe84 <gpio_out_reset>
    101a:	84 e1       	ldi	r24, 0x14	; 20
    101c:	88 b9       	out	0x08, r24	; 8
    101e:	64 e0       	ldi	r22, 0x04	; 4
    1020:	83 e0       	ldi	r24, 0x03	; 3
    1022:	14 df       	rcall	.-472    	; 0xe4c <gpio_out_set>
    1024:	8f e0       	ldi	r24, 0x0F	; 15
	_delay_ms(5);
	gpio_out_reset(PD, 4);
    1026:	97 e2       	ldi	r25, 0x27	; 39
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <lcd_init+0xc8>
    102c:	00 c0       	rjmp	.+0      	; 0x102e <lcd_init+0xce>
    102e:	00 00       	nop
    1030:	64 e0       	ldi	r22, 0x04	; 4
    1032:	83 e0       	ldi	r24, 0x03	; 3
    1034:	27 df       	rcall	.-434    	; 0xe84 <gpio_out_reset>
    1036:	8f e0       	ldi	r24, 0x0F	; 15
    1038:	97 e2       	ldi	r25, 0x27	; 39
	_delay_ms(5);
	
	/* Set DDRAM address to 00H */
	lcd_resetCursor();
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <lcd_init+0xda>
}
    103e:	00 c0       	rjmp	.+0      	; 0x1040 <lcd_init+0xe0>
    1040:	00 00       	nop
    1042:	73 df       	rcall	.-282    	; 0xf2a <lcd_resetCursor>
    1044:	cf 91       	pop	r28
    1046:	08 95       	ret

00001048 <lcd_newLine>:

void lcd_newLine(){
	/* Set DDRAM address to 40H */
	gpio_out_reset(PD, 5);
    1048:	65 e0       	ldi	r22, 0x05	; 5
    104a:	83 e0       	ldi	r24, 0x03	; 3
    104c:	1b df       	rcall	.-458    	; 0xe84 <gpio_out_reset>
	gpio_out_reset(PD, 6);
    104e:	66 e0       	ldi	r22, 0x06	; 6
    1050:	83 e0       	ldi	r24, 0x03	; 3
    1052:	18 df       	rcall	.-464    	; 0xe84 <gpio_out_reset>
	PORTC = 0xC0;
    1054:	80 ec       	ldi	r24, 0xC0	; 192
	gpio_out_set(PD, 4);
    1056:	88 b9       	out	0x08, r24	; 8
    1058:	64 e0       	ldi	r22, 0x04	; 4
    105a:	83 e0       	ldi	r24, 0x03	; 3
    105c:	f7 de       	rcall	.-530    	; 0xe4c <gpio_out_set>
    105e:	8f e0       	ldi	r24, 0x0F	; 15
    1060:	97 e2       	ldi	r25, 0x27	; 39
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	f1 f7       	brne	.-4      	; 0x1062 <lcd_newLine+0x1a>
	_delay_ms(5);
	gpio_out_reset(PD, 4);
    1066:	00 c0       	rjmp	.+0      	; 0x1068 <lcd_newLine+0x20>
    1068:	00 00       	nop
    106a:	64 e0       	ldi	r22, 0x04	; 4
    106c:	83 e0       	ldi	r24, 0x03	; 3
    106e:	0a df       	rcall	.-492    	; 0xe84 <gpio_out_reset>
    1070:	8f e0       	ldi	r24, 0x0F	; 15
    1072:	97 e2       	ldi	r25, 0x27	; 39
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <lcd_newLine+0x2c>
    1078:	00 c0       	rjmp	.+0      	; 0x107a <lcd_newLine+0x32>
    107a:	00 00       	nop
    107c:	08 95       	ret

0000107e <lcd_writeChar>:
	_delay_ms(5);
}

void lcd_writeChar(char character){
    107e:	cf 93       	push	r28
    1080:	c8 2f       	mov	r28, r24
	gpio_out_reset(PD, 5);
    1082:	65 e0       	ldi	r22, 0x05	; 5
    1084:	83 e0       	ldi	r24, 0x03	; 3
    1086:	fe de       	rcall	.-516    	; 0xe84 <gpio_out_reset>
	gpio_out_set(PD, 6);
    1088:	66 e0       	ldi	r22, 0x06	; 6
    108a:	83 e0       	ldi	r24, 0x03	; 3
    108c:	df de       	rcall	.-578    	; 0xe4c <gpio_out_set>
	PORTC = character;
	gpio_out_set(PD, 4);
    108e:	c8 b9       	out	0x08, r28	; 8
    1090:	64 e0       	ldi	r22, 0x04	; 4
    1092:	83 e0       	ldi	r24, 0x03	; 3
    1094:	db de       	rcall	.-586    	; 0xe4c <gpio_out_set>
    1096:	8f e0       	ldi	r24, 0x0F	; 15
    1098:	97 e2       	ldi	r25, 0x27	; 39
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	f1 f7       	brne	.-4      	; 0x109a <lcd_writeChar+0x1c>
	_delay_ms(5);
	gpio_out_reset(PD, 4);
    109e:	00 c0       	rjmp	.+0      	; 0x10a0 <lcd_writeChar+0x22>
    10a0:	00 00       	nop
    10a2:	64 e0       	ldi	r22, 0x04	; 4
    10a4:	83 e0       	ldi	r24, 0x03	; 3
    10a6:	ee de       	rcall	.-548    	; 0xe84 <gpio_out_reset>
    10a8:	8f e0       	ldi	r24, 0x0F	; 15
    10aa:	97 e2       	ldi	r25, 0x27	; 39
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <lcd_writeChar+0x2e>
    10b0:	00 c0       	rjmp	.+0      	; 0x10b2 <lcd_writeChar+0x34>
	_delay_ms(5);
}
    10b2:	00 00       	nop
    10b4:	cf 91       	pop	r28
    10b6:	08 95       	ret

000010b8 <lcd_writeString>:

void lcd_writeString(char *string){
    10b8:	0f 93       	push	r16
    10ba:	1f 93       	push	r17
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
	int index;
	int stringLength = strlen(string);
    10c0:	fc 01       	movw	r30, r24
    10c2:	01 90       	ld	r0, Z+
    10c4:	00 20       	and	r0, r0
    10c6:	e9 f7       	brne	.-6      	; 0x10c2 <lcd_writeString+0xa>
    10c8:	31 97       	sbiw	r30, 0x01	; 1
    10ca:	e8 1b       	sub	r30, r24
    10cc:	f9 0b       	sbc	r31, r25
	for(index = 0; index < stringLength; index++){
    10ce:	1e 16       	cp	r1, r30
    10d0:	1f 06       	cpc	r1, r31
    10d2:	4c f4       	brge	.+18     	; 0x10e6 <lcd_writeString+0x2e>
    10d4:	ec 01       	movw	r28, r24
    10d6:	8c 01       	movw	r16, r24
    10d8:	0e 0f       	add	r16, r30
    10da:	1f 1f       	adc	r17, r31
		lcd_writeChar(string[index]);
    10dc:	89 91       	ld	r24, Y+
    10de:	cf df       	rcall	.-98     	; 0x107e <lcd_writeChar>
}

void lcd_writeString(char *string){
	int index;
	int stringLength = strlen(string);
	for(index = 0; index < stringLength; index++){
    10e0:	c0 17       	cp	r28, r16
    10e2:	d1 07       	cpc	r29, r17
    10e4:	d9 f7       	brne	.-10     	; 0x10dc <lcd_writeString+0x24>
		lcd_writeChar(string[index]);
	}
}
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	08 95       	ret

000010f0 <lcd_displayTemperature>:
			}
			break;
	}
}

void lcd_displayTemperature(u16 temperatureVoltage){
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
	temperatureVoltage = temperatureVoltage * 4.49657869012707722;
    10f8:	bc 01       	movw	r22, r24
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <__floatunsisf>
    1102:	29 ef       	ldi	r18, 0xF9	; 249
    1104:	33 ee       	ldi	r19, 0xE3	; 227
    1106:	4f e8       	ldi	r20, 0x8F	; 143
    1108:	50 e4       	ldi	r21, 0x40	; 64
    110a:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__mulsf3>
	s16 aux = (temperatureVoltage - 750);
    110e:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <__fixunssfsi>
    1112:	cb 01       	movw	r24, r22
    1114:	8e 5e       	subi	r24, 0xEE	; 238
    1116:	92 40       	sbci	r25, 0x02	; 2
	aux /= 10;
    1118:	0a e0       	ldi	r16, 0x0A	; 10
    111a:	10 e0       	ldi	r17, 0x00	; 0
    111c:	b8 01       	movw	r22, r16
    111e:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__divmodhi4>
	aux += 25;
    1122:	eb 01       	movw	r28, r22
	lcd_clearDisplay();
	lcd_resetCursor();
    1124:	69 96       	adiw	r28, 0x19	; 25
	lcd_writeString("3.Temp: ");
    1126:	e6 de       	rcall	.-564    	; 0xef4 <lcd_clearDisplay>
    1128:	00 df       	rcall	.-512    	; 0xf2a <lcd_resetCursor>
    112a:	8d e4       	ldi	r24, 0x4D	; 77
	lcd_writeChar(aux / 10 + 48);
    112c:	91 e0       	ldi	r25, 0x01	; 1
    112e:	c4 df       	rcall	.-120    	; 0x10b8 <lcd_writeString>
    1130:	ce 01       	movw	r24, r28
    1132:	b8 01       	movw	r22, r16
    1134:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__divmodhi4>
	aux = aux % 10;
	lcd_writeChar(aux + 48);
    1138:	c8 2f       	mov	r28, r24
    113a:	80 e3       	ldi	r24, 0x30	; 48
    113c:	86 0f       	add	r24, r22
	lcd_writeChar('C');
    113e:	9f df       	rcall	.-194    	; 0x107e <lcd_writeChar>
    1140:	80 e3       	ldi	r24, 0x30	; 48
    1142:	8c 0f       	add	r24, r28
}
    1144:	9c df       	rcall	.-200    	; 0x107e <lcd_writeChar>
    1146:	83 e4       	ldi	r24, 0x43	; 67
    1148:	9a df       	rcall	.-204    	; 0x107e <lcd_writeChar>
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	08 95       	ret

00001154 <lcd_displayMenu>:
	for(index = 0; index < stringLength; index++){
		lcd_writeChar(string[index]);
	}
}

void lcd_displayMenu(u16 menuState){
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
	switch(menuState){
    115c:	80 37       	cpi	r24, 0x70	; 112
    115e:	22 e1       	ldi	r18, 0x12	; 18
    1160:	92 07       	cpc	r25, r18
    1162:	09 f4       	brne	.+2      	; 0x1166 <lcd_displayMenu+0x12>
    1164:	1f c4       	rjmp	.+2110   	; 0x19a4 <lcd_displayMenu+0x850>
    1166:	08 f0       	brcs	.+2      	; 0x116a <lcd_displayMenu+0x16>
    1168:	72 c0       	rjmp	.+228    	; 0x124e <lcd_displayMenu+0xfa>
    116a:	80 37       	cpi	r24, 0x70	; 112
    116c:	f1 e1       	ldi	r31, 0x11	; 17
    116e:	9f 07       	cpc	r25, r31
    1170:	09 f4       	brne	.+2      	; 0x1174 <lcd_displayMenu+0x20>
    1172:	36 c2       	rjmp	.+1132   	; 0x15e0 <lcd_displayMenu+0x48c>
    1174:	98 f5       	brcc	.+102    	; 0x11dc <lcd_displayMenu+0x88>
    1176:	80 32       	cpi	r24, 0x20	; 32
    1178:	e1 e1       	ldi	r30, 0x11	; 17
    117a:	9e 07       	cpc	r25, r30
    117c:	09 f4       	brne	.+2      	; 0x1180 <lcd_displayMenu+0x2c>
    117e:	4a c1       	rjmp	.+660    	; 0x1414 <lcd_displayMenu+0x2c0>
    1180:	b0 f4       	brcc	.+44     	; 0x11ae <lcd_displayMenu+0x5a>
    1182:	81 15       	cp	r24, r1
    1184:	20 e1       	ldi	r18, 0x10	; 16
    1186:	92 07       	cpc	r25, r18
    1188:	09 f4       	brne	.+2      	; 0x118c <lcd_displayMenu+0x38>
    118a:	e4 c0       	rjmp	.+456    	; 0x1354 <lcd_displayMenu+0x200>
    118c:	28 f4       	brcc	.+10     	; 0x1198 <lcd_displayMenu+0x44>
    118e:	89 2b       	or	r24, r25
    1190:	09 f4       	brne	.+2      	; 0x1194 <lcd_displayMenu+0x40>
    1192:	d6 c0       	rjmp	.+428    	; 0x1340 <lcd_displayMenu+0x1ec>
    1194:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1198:	81 15       	cp	r24, r1
    119a:	f1 e1       	ldi	r31, 0x11	; 17
    119c:	9f 07       	cpc	r25, r31
    119e:	09 f4       	brne	.+2      	; 0x11a2 <lcd_displayMenu+0x4e>
    11a0:	01 c1       	rjmp	.+514    	; 0x13a4 <lcd_displayMenu+0x250>
    11a2:	80 31       	cpi	r24, 0x10	; 16
    11a4:	91 41       	sbci	r25, 0x11	; 17
    11a6:	09 f4       	brne	.+2      	; 0x11aa <lcd_displayMenu+0x56>
    11a8:	07 c1       	rjmp	.+526    	; 0x13b8 <lcd_displayMenu+0x264>
    11aa:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    11ae:	80 34       	cpi	r24, 0x40	; 64
    11b0:	e1 e1       	ldi	r30, 0x11	; 17
    11b2:	9e 07       	cpc	r25, r30
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <lcd_displayMenu+0x64>
    11b6:	8a c1       	rjmp	.+788    	; 0x14cc <lcd_displayMenu+0x378>
    11b8:	30 f4       	brcc	.+12     	; 0x11c6 <lcd_displayMenu+0x72>
    11ba:	80 33       	cpi	r24, 0x30	; 48
    11bc:	91 41       	sbci	r25, 0x11	; 17
    11be:	09 f4       	brne	.+2      	; 0x11c2 <lcd_displayMenu+0x6e>
    11c0:	57 c1       	rjmp	.+686    	; 0x1470 <lcd_displayMenu+0x31c>
    11c2:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    11c6:	80 35       	cpi	r24, 0x50	; 80
    11c8:	e1 e1       	ldi	r30, 0x11	; 17
    11ca:	9e 07       	cpc	r25, r30
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <lcd_displayMenu+0x7c>
    11ce:	ac c1       	rjmp	.+856    	; 0x1528 <lcd_displayMenu+0x3d4>
    11d0:	80 36       	cpi	r24, 0x60	; 96
    11d2:	91 41       	sbci	r25, 0x11	; 17
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <lcd_displayMenu+0x84>
    11d6:	d6 c1       	rjmp	.+940    	; 0x1584 <lcd_displayMenu+0x430>
    11d8:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    11dc:	80 31       	cpi	r24, 0x10	; 16
    11de:	22 e1       	ldi	r18, 0x12	; 18
    11e0:	92 07       	cpc	r25, r18
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <lcd_displayMenu+0x92>
    11e4:	bf c2       	rjmp	.+1406   	; 0x1764 <lcd_displayMenu+0x610>
    11e6:	b8 f4       	brcc	.+46     	; 0x1216 <lcd_displayMenu+0xc2>
    11e8:	80 39       	cpi	r24, 0x90	; 144
    11ea:	f1 e1       	ldi	r31, 0x11	; 17
    11ec:	9f 07       	cpc	r25, r31
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <lcd_displayMenu+0x9e>
    11f0:	53 c2       	rjmp	.+1190   	; 0x1698 <lcd_displayMenu+0x544>
    11f2:	30 f4       	brcc	.+12     	; 0x1200 <lcd_displayMenu+0xac>
    11f4:	80 38       	cpi	r24, 0x80	; 128
    11f6:	91 41       	sbci	r25, 0x11	; 17
    11f8:	09 f4       	brne	.+2      	; 0x11fc <lcd_displayMenu+0xa8>
    11fa:	20 c2       	rjmp	.+1088   	; 0x163c <lcd_displayMenu+0x4e8>
    11fc:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1200:	80 3a       	cpi	r24, 0xA0	; 160
    1202:	f1 e1       	ldi	r31, 0x11	; 17
    1204:	9f 07       	cpc	r25, r31
    1206:	09 f4       	brne	.+2      	; 0x120a <lcd_displayMenu+0xb6>
    1208:	75 c2       	rjmp	.+1258   	; 0x16f4 <lcd_displayMenu+0x5a0>
    120a:	81 15       	cp	r24, r1
    120c:	92 41       	sbci	r25, 0x12	; 18
    120e:	09 f4       	brne	.+2      	; 0x1212 <lcd_displayMenu+0xbe>
    1210:	9f c2       	rjmp	.+1342   	; 0x1750 <lcd_displayMenu+0x5fc>
    1212:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1216:	80 34       	cpi	r24, 0x40	; 64
    1218:	e2 e1       	ldi	r30, 0x12	; 18
    121a:	9e 07       	cpc	r25, r30
    121c:	09 f4       	brne	.+2      	; 0x1220 <lcd_displayMenu+0xcc>
    121e:	32 c3       	rjmp	.+1636   	; 0x1884 <lcd_displayMenu+0x730>
    1220:	58 f4       	brcc	.+22     	; 0x1238 <lcd_displayMenu+0xe4>
    1222:	80 32       	cpi	r24, 0x20	; 32
    1224:	22 e1       	ldi	r18, 0x12	; 18
    1226:	92 07       	cpc	r25, r18
    1228:	09 f4       	brne	.+2      	; 0x122c <lcd_displayMenu+0xd8>
    122a:	cc c2       	rjmp	.+1432   	; 0x17c4 <lcd_displayMenu+0x670>
    122c:	80 33       	cpi	r24, 0x30	; 48
    122e:	92 41       	sbci	r25, 0x12	; 18
    1230:	09 f4       	brne	.+2      	; 0x1234 <lcd_displayMenu+0xe0>
    1232:	f8 c2       	rjmp	.+1520   	; 0x1824 <lcd_displayMenu+0x6d0>
    1234:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1238:	80 35       	cpi	r24, 0x50	; 80
    123a:	f2 e1       	ldi	r31, 0x12	; 18
    123c:	9f 07       	cpc	r25, r31
    123e:	09 f4       	brne	.+2      	; 0x1242 <lcd_displayMenu+0xee>
    1240:	51 c3       	rjmp	.+1698   	; 0x18e4 <lcd_displayMenu+0x790>
    1242:	80 36       	cpi	r24, 0x60	; 96
    1244:	92 41       	sbci	r25, 0x12	; 18
    1246:	09 f4       	brne	.+2      	; 0x124a <lcd_displayMenu+0xf6>
    1248:	7d c3       	rjmp	.+1786   	; 0x1944 <lcd_displayMenu+0x7f0>
    124a:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    124e:	81 15       	cp	r24, r1
    1250:	e0 e4       	ldi	r30, 0x40	; 64
    1252:	9e 07       	cpc	r25, r30
    1254:	09 f4       	brne	.+2      	; 0x1258 <lcd_displayMenu+0x104>
    1256:	9c c0       	rjmp	.+312    	; 0x1390 <lcd_displayMenu+0x23c>
    1258:	a0 f5       	brcc	.+104    	; 0x12c2 <lcd_displayMenu+0x16e>
    125a:	81 15       	cp	r24, r1
    125c:	20 e2       	ldi	r18, 0x20	; 32
    125e:	92 07       	cpc	r25, r18
    1260:	09 f4       	brne	.+2      	; 0x1264 <lcd_displayMenu+0x110>
    1262:	82 c0       	rjmp	.+260    	; 0x1368 <lcd_displayMenu+0x214>
    1264:	b8 f4       	brcc	.+46     	; 0x1294 <lcd_displayMenu+0x140>
    1266:	80 39       	cpi	r24, 0x90	; 144
    1268:	f2 e1       	ldi	r31, 0x12	; 18
    126a:	9f 07       	cpc	r25, r31
    126c:	09 f4       	brne	.+2      	; 0x1270 <lcd_displayMenu+0x11c>
    126e:	fa c3       	rjmp	.+2036   	; 0x1a64 <lcd_displayMenu+0x910>
    1270:	30 f4       	brcc	.+12     	; 0x127e <lcd_displayMenu+0x12a>
    1272:	80 38       	cpi	r24, 0x80	; 128
    1274:	92 41       	sbci	r25, 0x12	; 18
    1276:	09 f4       	brne	.+2      	; 0x127a <lcd_displayMenu+0x126>
    1278:	c5 c3       	rjmp	.+1930   	; 0x1a04 <lcd_displayMenu+0x8b0>
    127a:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    127e:	80 3a       	cpi	r24, 0xA0	; 160
    1280:	f2 e1       	ldi	r31, 0x12	; 18
    1282:	9f 07       	cpc	r25, r31
    1284:	09 f4       	brne	.+2      	; 0x1288 <lcd_displayMenu+0x134>
    1286:	1e c4       	rjmp	.+2108   	; 0x1ac4 <lcd_displayMenu+0x970>
    1288:	81 15       	cp	r24, r1
    128a:	93 41       	sbci	r25, 0x13	; 19
    128c:	09 f4       	brne	.+2      	; 0x1290 <lcd_displayMenu+0x13c>
    128e:	4a c4       	rjmp	.+2196   	; 0x1b24 <lcd_displayMenu+0x9d0>
    1290:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1294:	81 15       	cp	r24, r1
    1296:	e2 e2       	ldi	r30, 0x22	; 34
    1298:	9e 07       	cpc	r25, r30
    129a:	09 f4       	brne	.+2      	; 0x129e <lcd_displayMenu+0x14a>
    129c:	68 c4       	rjmp	.+2256   	; 0x1b6e <lcd_displayMenu+0xa1a>
    129e:	30 f4       	brcc	.+12     	; 0x12ac <lcd_displayMenu+0x158>
    12a0:	81 15       	cp	r24, r1
    12a2:	91 42       	sbci	r25, 0x21	; 33
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <lcd_displayMenu+0x154>
    12a6:	48 c4       	rjmp	.+2192   	; 0x1b38 <lcd_displayMenu+0x9e4>
    12a8:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    12ac:	81 15       	cp	r24, r1
    12ae:	e0 e3       	ldi	r30, 0x30	; 48
    12b0:	9e 07       	cpc	r25, r30
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <lcd_displayMenu+0x162>
    12b4:	63 c0       	rjmp	.+198    	; 0x137c <lcd_displayMenu+0x228>
    12b6:	81 15       	cp	r24, r1
    12b8:	91 43       	sbci	r25, 0x31	; 49
    12ba:	09 f4       	brne	.+2      	; 0x12be <lcd_displayMenu+0x16a>
    12bc:	73 c4       	rjmp	.+2278   	; 0x1ba4 <lcd_displayMenu+0xa50>
    12be:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    12c2:	81 15       	cp	r24, r1
    12c4:	25 e4       	ldi	r18, 0x45	; 69
    12c6:	92 07       	cpc	r25, r18
    12c8:	11 f4       	brne	.+4      	; 0x12ce <lcd_displayMenu+0x17a>
    12ca:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <lcd_displayMenu+0x1414>
    12ce:	b8 f4       	brcc	.+46     	; 0x12fe <lcd_displayMenu+0x1aa>
    12d0:	81 15       	cp	r24, r1
    12d2:	f2 e4       	ldi	r31, 0x42	; 66
    12d4:	9f 07       	cpc	r25, r31
    12d6:	09 f4       	brne	.+2      	; 0x12da <lcd_displayMenu+0x186>
    12d8:	91 c5       	rjmp	.+2850   	; 0x1dfc <lcd_displayMenu+0xca8>
    12da:	30 f4       	brcc	.+12     	; 0x12e8 <lcd_displayMenu+0x194>
    12dc:	81 15       	cp	r24, r1
    12de:	91 44       	sbci	r25, 0x41	; 65
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <lcd_displayMenu+0x190>
    12e2:	69 c4       	rjmp	.+2258   	; 0x1bb6 <lcd_displayMenu+0xa62>
    12e4:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    12e8:	81 15       	cp	r24, r1
    12ea:	f3 e4       	ldi	r31, 0x43	; 67
    12ec:	9f 07       	cpc	r25, r31
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <lcd_displayMenu+0x19e>
    12f0:	b0 c6       	rjmp	.+3424   	; 0x2052 <lcd_displayMenu+0xefe>
    12f2:	81 15       	cp	r24, r1
    12f4:	94 44       	sbci	r25, 0x44	; 68
    12f6:	09 f4       	brne	.+2      	; 0x12fa <lcd_displayMenu+0x1a6>
    12f8:	f2 c7       	rjmp	.+4068   	; 0x22de <lcd_displayMenu+0x118a>
    12fa:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    12fe:	81 15       	cp	r24, r1
    1300:	e8 e4       	ldi	r30, 0x48	; 72
    1302:	9e 07       	cpc	r25, r30
    1304:	11 f4       	brne	.+4      	; 0x130a <lcd_displayMenu+0x1b6>
    1306:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <lcd_displayMenu+0x1bb2>
    130a:	68 f4       	brcc	.+26     	; 0x1326 <lcd_displayMenu+0x1d2>
    130c:	81 15       	cp	r24, r1
    130e:	26 e4       	ldi	r18, 0x46	; 70
    1310:	92 07       	cpc	r25, r18
    1312:	11 f4       	brne	.+4      	; 0x1318 <lcd_displayMenu+0x1c4>
    1314:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <lcd_displayMenu+0x169e>
    1318:	81 15       	cp	r24, r1
    131a:	97 44       	sbci	r25, 0x47	; 71
    131c:	11 f4       	brne	.+4      	; 0x1322 <lcd_displayMenu+0x1ce>
    131e:	0c 94 3e 15 	jmp	0x2a7c	; 0x2a7c <lcd_displayMenu+0x1928>
    1322:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1326:	81 15       	cp	r24, r1
    1328:	f9 e4       	ldi	r31, 0x49	; 73
    132a:	9f 07       	cpc	r25, r31
    132c:	11 f4       	brne	.+4      	; 0x1332 <lcd_displayMenu+0x1de>
    132e:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <lcd_displayMenu+0x1e3c>
    1332:	81 15       	cp	r24, r1
    1334:	9a 44       	sbci	r25, 0x4A	; 74
    1336:	11 f4       	brne	.+4      	; 0x133c <lcd_displayMenu+0x1e8>
    1338:	0c 94 0d 19 	jmp	0x321a	; 0x321a <lcd_displayMenu+0x20c6>
    133c:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
		case 0x0000:
			lcd_clearDisplay();
			lcd_writeString("Welcome!");
    1340:	d9 dd       	rcall	.-1102   	; 0xef4 <lcd_clearDisplay>
    1342:	85 e0       	ldi	r24, 0x05	; 5
			lcd_newLine();
    1344:	91 e0       	ldi	r25, 0x01	; 1
			lcd_writeString("Press OK");
    1346:	b8 de       	rcall	.-656    	; 0x10b8 <lcd_writeString>
    1348:	7f de       	rcall	.-770    	; 0x1048 <lcd_newLine>
    134a:	8e e0       	ldi	r24, 0x0E	; 14
			break;
		case 0x1000:
			lcd_clearDisplay();
    134c:	91 e0       	ldi	r25, 0x01	; 1
			lcd_writeString(">1.Mesaje");
    134e:	b4 de       	rcall	.-664    	; 0x10b8 <lcd_writeString>
    1350:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
			lcd_newLine();
			lcd_writeString(" 2.Control");
    1354:	cf dd       	rcall	.-1122   	; 0xef4 <lcd_clearDisplay>
    1356:	86 e5       	ldi	r24, 0x56	; 86
			break;
    1358:	91 e0       	ldi	r25, 0x01	; 1
		case 0x2000:
			lcd_clearDisplay();
    135a:	ae de       	rcall	.-676    	; 0x10b8 <lcd_writeString>
			lcd_writeString(" 1.Mesaje");
    135c:	75 de       	rcall	.-790    	; 0x1048 <lcd_newLine>
			lcd_newLine();
    135e:	80 e6       	ldi	r24, 0x60	; 96
			lcd_writeString(">2.Control");
    1360:	91 e0       	ldi	r25, 0x01	; 1
    1362:	aa de       	rcall	.-684    	; 0x10b8 <lcd_writeString>
			break;
    1364:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
		case 0x3000:
			lcd_clearDisplay();
			lcd_writeString(" 2.Control");
    1368:	c5 dd       	rcall	.-1142   	; 0xef4 <lcd_clearDisplay>
			lcd_newLine();
    136a:	8b e6       	ldi	r24, 0x6B	; 107
			lcd_writeString(">3.Temperatura");
    136c:	91 e0       	ldi	r25, 0x01	; 1
			break;
    136e:	a4 de       	rcall	.-696    	; 0x10b8 <lcd_writeString>
		case 0x4000:
			lcd_clearDisplay();
    1370:	6b de       	rcall	.-810    	; 0x1048 <lcd_newLine>
			lcd_writeString(" 3.Temperatura");
    1372:	85 e7       	ldi	r24, 0x75	; 117
    1374:	91 e0       	ldi	r25, 0x01	; 1
    1376:	a0 de       	rcall	.-704    	; 0x10b8 <lcd_writeString>
			lcd_newLine();
    1378:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
			lcd_writeString(">4.Inundatii");
    137c:	bb dd       	rcall	.-1162   	; 0xef4 <lcd_clearDisplay>
    137e:	80 e6       	ldi	r24, 0x60	; 96
    1380:	91 e0       	ldi	r25, 0x01	; 1
			break;
    1382:	9a de       	rcall	.-716    	; 0x10b8 <lcd_writeString>
    1384:	61 de       	rcall	.-830    	; 0x1048 <lcd_newLine>
		case 0x1100:
			lcd_clearDisplay();
    1386:	80 e8       	ldi	r24, 0x80	; 128
    1388:	91 e0       	ldi	r25, 0x01	; 1
			lcd_writeString(">1.1.Necitite");
    138a:	96 de       	rcall	.-724    	; 0x10b8 <lcd_writeString>
    138c:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
			lcd_newLine();
			lcd_writeString(" 1.2.Citite");
    1390:	b1 dd       	rcall	.-1182   	; 0xef4 <lcd_clearDisplay>
    1392:	8f e8       	ldi	r24, 0x8F	; 143
    1394:	91 e0       	ldi	r25, 0x01	; 1
			break;
    1396:	90 de       	rcall	.-736    	; 0x10b8 <lcd_writeString>
		case 0x1110:
			lcd_clearDisplay();
    1398:	57 de       	rcall	.-850    	; 0x1048 <lcd_newLine>
			lcd_writeString(">1.");
    139a:	8e e9       	ldi	r24, 0x9E	; 158
    139c:	91 e0       	ldi	r25, 0x01	; 1
    139e:	8c de       	rcall	.-744    	; 0x10b8 <lcd_writeString>
    13a0:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
			for(u16 i = 0x10; i < 0x1D; i++){
    13a4:	a7 dd       	rcall	.-1202   	; 0xef4 <lcd_clearDisplay>
				if(unreadMessageVector[0] == 1){
    13a6:	8b ea       	ldi	r24, 0xAB	; 171
    13a8:	91 e0       	ldi	r25, 0x01	; 1
    13aa:	86 de       	rcall	.-756    	; 0x10b8 <lcd_writeString>
    13ac:	4d de       	rcall	.-870    	; 0x1048 <lcd_newLine>
					lcd_writeChar(eeprom_read(i));
    13ae:	89 eb       	ldi	r24, 0xB9	; 185
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	82 de       	rcall	.-764    	; 0x10b8 <lcd_writeString>
    13b4:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
				}
				else{
					lcd_writeChar(' ');
    13b8:	9d dd       	rcall	.-1222   	; 0xef4 <lcd_clearDisplay>
    13ba:	85 ec       	ldi	r24, 0xC5	; 197
			lcd_writeString(" 1.2.Citite");
			break;
		case 0x1110:
			lcd_clearDisplay();
			lcd_writeString(">1.");
			for(u16 i = 0x10; i < 0x1D; i++){
    13bc:	91 e0       	ldi	r25, 0x01	; 1
    13be:	7c de       	rcall	.-776    	; 0x10b8 <lcd_writeString>
    13c0:	c0 e1       	ldi	r28, 0x10	; 16
				}
				else{
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
    13c2:	d0 e0       	ldi	r29, 0x00	; 0
    13c4:	0b e4       	ldi	r16, 0x4B	; 75
			lcd_writeString(" 2.");
    13c6:	13 e0       	ldi	r17, 0x03	; 3
    13c8:	f8 01       	movw	r30, r16
    13ca:	80 81       	ld	r24, Z
    13cc:	81 30       	cpi	r24, 0x01	; 1
			for(u16 i = 0x20; i < 0x2D; i++){
    13ce:	21 f4       	brne	.+8      	; 0x13d8 <lcd_displayMenu+0x284>
				if(unreadMessageVector[1] == 1){
    13d0:	ce 01       	movw	r24, r28
    13d2:	9f dc       	rcall	.-1730   	; 0xd12 <eeprom_read>
    13d4:	54 de       	rcall	.-856    	; 0x107e <lcd_writeChar>
					lcd_writeChar(eeprom_read(i));
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <lcd_displayMenu+0x288>
    13d8:	80 e2       	ldi	r24, 0x20	; 32
    13da:	51 de       	rcall	.-862    	; 0x107e <lcd_writeChar>
    13dc:	21 96       	adiw	r28, 0x01	; 1
				}
				else{
					lcd_writeChar(' ');
    13de:	cd 31       	cpi	r28, 0x1D	; 29
    13e0:	d1 05       	cpc	r29, r1
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(" 2.");
			for(u16 i = 0x20; i < 0x2D; i++){
    13e2:	91 f7       	brne	.-28     	; 0x13c8 <lcd_displayMenu+0x274>
    13e4:	31 de       	rcall	.-926    	; 0x1048 <lcd_newLine>
    13e6:	89 ec       	ldi	r24, 0xC9	; 201
    13e8:	91 e0       	ldi	r25, 0x01	; 1
    13ea:	66 de       	rcall	.-820    	; 0x10b8 <lcd_writeString>
    13ec:	c0 e2       	ldi	r28, 0x20	; 32
				}
			}
			break;
		case 0x1120:
			lcd_clearDisplay();
			lcd_writeString(" 1.");
    13ee:	d0 e0       	ldi	r29, 0x00	; 0
    13f0:	0b e4       	ldi	r16, 0x4B	; 75
			for(u16 i = 0x10; i < 0x1D; i++){
    13f2:	13 e0       	ldi	r17, 0x03	; 3
    13f4:	f8 01       	movw	r30, r16
				if(unreadMessageVector[0] == 1){
    13f6:	81 81       	ldd	r24, Z+1	; 0x01
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	21 f4       	brne	.+8      	; 0x1404 <lcd_displayMenu+0x2b0>
    13fc:	ce 01       	movw	r24, r28
    13fe:	89 dc       	rcall	.-1774   	; 0xd12 <eeprom_read>
					lcd_writeChar(eeprom_read(i));
    1400:	3e de       	rcall	.-900    	; 0x107e <lcd_writeChar>
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <lcd_displayMenu+0x2b4>
    1404:	80 e2       	ldi	r24, 0x20	; 32
    1406:	3b de       	rcall	.-906    	; 0x107e <lcd_writeChar>
    1408:	21 96       	adiw	r28, 0x01	; 1
				}
				else{
					lcd_writeChar(' ');
    140a:	cd 32       	cpi	r28, 0x2D	; 45
    140c:	d1 05       	cpc	r29, r1
    140e:	91 f7       	brne	.-28     	; 0x13f4 <lcd_displayMenu+0x2a0>
			}
			break;
		case 0x1120:
			lcd_clearDisplay();
			lcd_writeString(" 1.");
			for(u16 i = 0x10; i < 0x1D; i++){
    1410:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
				}
				else{
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
    1414:	6f dd       	rcall	.-1314   	; 0xef4 <lcd_clearDisplay>
			lcd_writeString(">2.");
    1416:	8d ec       	ldi	r24, 0xCD	; 205
    1418:	91 e0       	ldi	r25, 0x01	; 1
    141a:	4e de       	rcall	.-868    	; 0x10b8 <lcd_writeString>
			for(u16 i = 0x20; i < 0x2D; i++){
    141c:	c0 e1       	ldi	r28, 0x10	; 16
				if(unreadMessageVector[1] == 1){
    141e:	d0 e0       	ldi	r29, 0x00	; 0
    1420:	0b e4       	ldi	r16, 0x4B	; 75
    1422:	13 e0       	ldi	r17, 0x03	; 3
    1424:	f8 01       	movw	r30, r16
    1426:	80 81       	ld	r24, Z
					lcd_writeChar(eeprom_read(i));
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	21 f4       	brne	.+8      	; 0x1434 <lcd_displayMenu+0x2e0>
    142c:	ce 01       	movw	r24, r28
    142e:	71 dc       	rcall	.-1822   	; 0xd12 <eeprom_read>
    1430:	26 de       	rcall	.-948    	; 0x107e <lcd_writeChar>
				}
				else{
					lcd_writeChar(' ');
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <lcd_displayMenu+0x2e4>
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(">2.");
			for(u16 i = 0x20; i < 0x2D; i++){
    1434:	80 e2       	ldi	r24, 0x20	; 32
    1436:	23 de       	rcall	.-954    	; 0x107e <lcd_writeChar>
    1438:	21 96       	adiw	r28, 0x01	; 1
    143a:	cd 31       	cpi	r28, 0x1D	; 29
    143c:	d1 05       	cpc	r29, r1
					lcd_writeChar(' ');
				}
			}
			break;	
		case 0x1130:
				lcd_clearDisplay();
    143e:	91 f7       	brne	.-28     	; 0x1424 <lcd_displayMenu+0x2d0>
				lcd_writeString(" 2.");
    1440:	03 de       	rcall	.-1018   	; 0x1048 <lcd_newLine>
    1442:	81 ed       	ldi	r24, 0xD1	; 209
				for(u16 i = 0x20; i < 0x2D; i++){
    1444:	91 e0       	ldi	r25, 0x01	; 1
    1446:	38 de       	rcall	.-912    	; 0x10b8 <lcd_writeString>
					if(unreadMessageVector[1] == 1){
    1448:	c0 e2       	ldi	r28, 0x20	; 32
    144a:	d0 e0       	ldi	r29, 0x00	; 0
    144c:	0b e4       	ldi	r16, 0x4B	; 75
    144e:	13 e0       	ldi	r17, 0x03	; 3
    1450:	f8 01       	movw	r30, r16
    1452:	81 81       	ldd	r24, Z+1	; 0x01
						lcd_writeChar(eeprom_read(i));
    1454:	81 30       	cpi	r24, 0x01	; 1
    1456:	21 f4       	brne	.+8      	; 0x1460 <lcd_displayMenu+0x30c>
    1458:	ce 01       	movw	r24, r28
					}
					else{
						lcd_writeChar(' ');
    145a:	5b dc       	rcall	.-1866   	; 0xd12 <eeprom_read>
    145c:	10 de       	rcall	.-992    	; 0x107e <lcd_writeChar>
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <lcd_displayMenu+0x310>
			}
			break;	
		case 0x1130:
				lcd_clearDisplay();
				lcd_writeString(" 2.");
				for(u16 i = 0x20; i < 0x2D; i++){
    1460:	80 e2       	ldi	r24, 0x20	; 32
    1462:	0d de       	rcall	.-998    	; 0x107e <lcd_writeChar>
					}
					else{
						lcd_writeChar(' ');
					}
				}
				lcd_newLine();
    1464:	21 96       	adiw	r28, 0x01	; 1
				lcd_writeString(">3.");
    1466:	cd 32       	cpi	r28, 0x2D	; 45
    1468:	d1 05       	cpc	r29, r1
    146a:	91 f7       	brne	.-28     	; 0x1450 <lcd_displayMenu+0x2fc>
    146c:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
				for(u16 i = 0x30; i < 0x3D; i++){
    1470:	41 dd       	rcall	.-1406   	; 0xef4 <lcd_clearDisplay>
					if(unreadMessageVector[2] == 1){
    1472:	89 ec       	ldi	r24, 0xC9	; 201
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	20 de       	rcall	.-960    	; 0x10b8 <lcd_writeString>
						lcd_writeChar(eeprom_read(i));
    1478:	c0 e2       	ldi	r28, 0x20	; 32
    147a:	d0 e0       	ldi	r29, 0x00	; 0
    147c:	0b e4       	ldi	r16, 0x4B	; 75
    147e:	13 e0       	ldi	r17, 0x03	; 3
    1480:	f8 01       	movw	r30, r16
					}
					else{
						lcd_writeChar(' ');
    1482:	81 81       	ldd	r24, Z+1	; 0x01
    1484:	81 30       	cpi	r24, 0x01	; 1
						lcd_writeChar(' ');
					}
				}
				lcd_newLine();
				lcd_writeString(">3.");
				for(u16 i = 0x30; i < 0x3D; i++){
    1486:	21 f4       	brne	.+8      	; 0x1490 <lcd_displayMenu+0x33c>
    1488:	ce 01       	movw	r24, r28
    148a:	43 dc       	rcall	.-1914   	; 0xd12 <eeprom_read>
    148c:	f8 dd       	rcall	.-1040   	; 0x107e <lcd_writeChar>
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <lcd_displayMenu+0x340>
						lcd_writeChar(' ');
					}
				}
			break;
		case 0x1140:
			lcd_clearDisplay();
    1490:	80 e2       	ldi	r24, 0x20	; 32
    1492:	f5 dd       	rcall	.-1046   	; 0x107e <lcd_writeChar>
			lcd_writeString(" 3.");
    1494:	21 96       	adiw	r28, 0x01	; 1
    1496:	cd 32       	cpi	r28, 0x2D	; 45
			for(u16 i = 0x30; i < 0x3D; i++){
    1498:	d1 05       	cpc	r29, r1
				if(unreadMessageVector[2] == 1){
    149a:	91 f7       	brne	.-28     	; 0x1480 <lcd_displayMenu+0x32c>
    149c:	d5 dd       	rcall	.-1110   	; 0x1048 <lcd_newLine>
    149e:	85 ed       	ldi	r24, 0xD5	; 213
    14a0:	91 e0       	ldi	r25, 0x01	; 1
					lcd_writeChar(eeprom_read(i));
    14a2:	0a de       	rcall	.-1004   	; 0x10b8 <lcd_writeString>
    14a4:	c0 e3       	ldi	r28, 0x30	; 48
    14a6:	d0 e0       	ldi	r29, 0x00	; 0
    14a8:	0b e4       	ldi	r16, 0x4B	; 75
				}
				else{
					lcd_writeChar(' ');
    14aa:	13 e0       	ldi	r17, 0x03	; 3
    14ac:	f8 01       	movw	r30, r16
    14ae:	82 81       	ldd	r24, Z+2	; 0x02
				}
			break;
		case 0x1140:
			lcd_clearDisplay();
			lcd_writeString(" 3.");
			for(u16 i = 0x30; i < 0x3D; i++){
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	21 f4       	brne	.+8      	; 0x14bc <lcd_displayMenu+0x368>
    14b4:	ce 01       	movw	r24, r28
				else{
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(">4.");
    14b6:	2d dc       	rcall	.-1958   	; 0xd12 <eeprom_read>
    14b8:	e2 dd       	rcall	.-1084   	; 0x107e <lcd_writeChar>
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <lcd_displayMenu+0x36c>
			for(u16 i = 0x40; i < 0x4D; i++){
    14bc:	80 e2       	ldi	r24, 0x20	; 32
    14be:	df dd       	rcall	.-1090   	; 0x107e <lcd_writeChar>
				if(unreadMessageVector[3] == 1){
    14c0:	21 96       	adiw	r28, 0x01	; 1
    14c2:	cd 33       	cpi	r28, 0x3D	; 61
    14c4:	d1 05       	cpc	r29, r1
    14c6:	91 f7       	brne	.-28     	; 0x14ac <lcd_displayMenu+0x358>
					lcd_writeChar(eeprom_read(i));
    14c8:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    14cc:	13 dd       	rcall	.-1498   	; 0xef4 <lcd_clearDisplay>
    14ce:	89 ed       	ldi	r24, 0xD9	; 217
    14d0:	91 e0       	ldi	r25, 0x01	; 1
				}
				else{
					lcd_writeChar(' ');
    14d2:	f2 dd       	rcall	.-1052   	; 0x10b8 <lcd_writeString>
    14d4:	c0 e3       	ldi	r28, 0x30	; 48
    14d6:	d0 e0       	ldi	r29, 0x00	; 0
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(">4.");
			for(u16 i = 0x40; i < 0x4D; i++){
    14d8:	0b e4       	ldi	r16, 0x4B	; 75
    14da:	13 e0       	ldi	r17, 0x03	; 3
    14dc:	f8 01       	movw	r30, r16
					lcd_writeChar(' ');
				}
			}
			break;
		case 0x1150:
			lcd_clearDisplay();
    14de:	82 81       	ldd	r24, Z+2	; 0x02
    14e0:	81 30       	cpi	r24, 0x01	; 1
			lcd_writeString(" 4.");
    14e2:	21 f4       	brne	.+8      	; 0x14ec <lcd_displayMenu+0x398>
    14e4:	ce 01       	movw	r24, r28
    14e6:	15 dc       	rcall	.-2006   	; 0xd12 <eeprom_read>
			for(u16 i = 0x40; i < 0x4D; i++){
    14e8:	ca dd       	rcall	.-1132   	; 0x107e <lcd_writeChar>
				if(unreadMessageVector[3] == 1){
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <lcd_displayMenu+0x39c>
    14ec:	80 e2       	ldi	r24, 0x20	; 32
    14ee:	c7 dd       	rcall	.-1138   	; 0x107e <lcd_writeChar>
    14f0:	21 96       	adiw	r28, 0x01	; 1
    14f2:	cd 33       	cpi	r28, 0x3D	; 61
    14f4:	d1 05       	cpc	r29, r1
					lcd_writeChar(eeprom_read(i));
    14f6:	91 f7       	brne	.-28     	; 0x14dc <lcd_displayMenu+0x388>
    14f8:	a7 dd       	rcall	.-1202   	; 0x1048 <lcd_newLine>
    14fa:	8d ed       	ldi	r24, 0xDD	; 221
    14fc:	91 e0       	ldi	r25, 0x01	; 1
				}
				else{
					lcd_writeChar(' ');
    14fe:	dc dd       	rcall	.-1096   	; 0x10b8 <lcd_writeString>
    1500:	c0 e4       	ldi	r28, 0x40	; 64
			}
			break;
		case 0x1150:
			lcd_clearDisplay();
			lcd_writeString(" 4.");
			for(u16 i = 0x40; i < 0x4D; i++){
    1502:	d0 e0       	ldi	r29, 0x00	; 0
    1504:	0b e4       	ldi	r16, 0x4B	; 75
    1506:	13 e0       	ldi	r17, 0x03	; 3
    1508:	f8 01       	movw	r30, r16
				}
				else{
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
    150a:	83 81       	ldd	r24, Z+3	; 0x03
			lcd_writeString(">5.");
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	21 f4       	brne	.+8      	; 0x1518 <lcd_displayMenu+0x3c4>
    1510:	ce 01       	movw	r24, r28
			for(u16 i = 0x50; i < 0x5D; i++){
    1512:	ff db       	rcall	.-2050   	; 0xd12 <eeprom_read>
    1514:	b4 dd       	rcall	.-1176   	; 0x107e <lcd_writeChar>
				if(unreadMessageVector[4] == 1){
    1516:	02 c0       	rjmp	.+4      	; 0x151c <lcd_displayMenu+0x3c8>
    1518:	80 e2       	ldi	r24, 0x20	; 32
    151a:	b1 dd       	rcall	.-1182   	; 0x107e <lcd_writeChar>
    151c:	21 96       	adiw	r28, 0x01	; 1
    151e:	cd 34       	cpi	r28, 0x4D	; 77
					lcd_writeChar(eeprom_read(i));
    1520:	d1 05       	cpc	r29, r1
    1522:	91 f7       	brne	.-28     	; 0x1508 <lcd_displayMenu+0x3b4>
    1524:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
				}
				else{
					lcd_writeChar(' ');
    1528:	e5 dc       	rcall	.-1590   	; 0xef4 <lcd_clearDisplay>
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(">5.");
			for(u16 i = 0x50; i < 0x5D; i++){
    152a:	81 ee       	ldi	r24, 0xE1	; 225
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	c4 dd       	rcall	.-1144   	; 0x10b8 <lcd_writeString>
    1530:	c0 e4       	ldi	r28, 0x40	; 64
					lcd_writeChar(' ');
				}
			}
			break;
		case 0x1160:
			lcd_clearDisplay();
    1532:	d0 e0       	ldi	r29, 0x00	; 0
    1534:	0b e4       	ldi	r16, 0x4B	; 75
			lcd_writeString(" 5.");
    1536:	13 e0       	ldi	r17, 0x03	; 3
    1538:	f8 01       	movw	r30, r16
    153a:	83 81       	ldd	r24, Z+3	; 0x03
    153c:	81 30       	cpi	r24, 0x01	; 1
			for(u16 i = 0x50; i < 0x5D; i++){
				if(unreadMessageVector[4] == 1){
    153e:	21 f4       	brne	.+8      	; 0x1548 <lcd_displayMenu+0x3f4>
    1540:	ce 01       	movw	r24, r28
    1542:	e7 db       	rcall	.-2098   	; 0xd12 <eeprom_read>
    1544:	9c dd       	rcall	.-1224   	; 0x107e <lcd_writeChar>
					lcd_writeChar(eeprom_read(i));
    1546:	02 c0       	rjmp	.+4      	; 0x154c <lcd_displayMenu+0x3f8>
    1548:	80 e2       	ldi	r24, 0x20	; 32
    154a:	99 dd       	rcall	.-1230   	; 0x107e <lcd_writeChar>
    154c:	21 96       	adiw	r28, 0x01	; 1
    154e:	cd 34       	cpi	r28, 0x4D	; 77
				}
				else{
					lcd_writeChar(' ');
    1550:	d1 05       	cpc	r29, r1
    1552:	91 f7       	brne	.-28     	; 0x1538 <lcd_displayMenu+0x3e4>
			}
			break;
		case 0x1160:
			lcd_clearDisplay();
			lcd_writeString(" 5.");
			for(u16 i = 0x50; i < 0x5D; i++){
    1554:	79 dd       	rcall	.-1294   	; 0x1048 <lcd_newLine>
    1556:	85 ee       	ldi	r24, 0xE5	; 229
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	ae dd       	rcall	.-1188   	; 0x10b8 <lcd_writeString>
				}
				else{
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
    155c:	c0 e5       	ldi	r28, 0x50	; 80
    155e:	d0 e0       	ldi	r29, 0x00	; 0
			lcd_writeString(">6.");
    1560:	0b e4       	ldi	r16, 0x4B	; 75
    1562:	13 e0       	ldi	r17, 0x03	; 3
			for(u16 i = 0x60; i < 0x6D; i++){
    1564:	f8 01       	movw	r30, r16
				if(unreadMessageVector[5] == 1){
    1566:	84 81       	ldd	r24, Z+4	; 0x04
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	21 f4       	brne	.+8      	; 0x1574 <lcd_displayMenu+0x420>
    156c:	ce 01       	movw	r24, r28
					lcd_writeChar(eeprom_read(i));
    156e:	d1 db       	rcall	.-2142   	; 0xd12 <eeprom_read>
    1570:	86 dd       	rcall	.-1268   	; 0x107e <lcd_writeChar>
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <lcd_displayMenu+0x424>
    1574:	80 e2       	ldi	r24, 0x20	; 32
    1576:	83 dd       	rcall	.-1274   	; 0x107e <lcd_writeChar>
				}
				else{
					lcd_writeChar(' ');
    1578:	21 96       	adiw	r28, 0x01	; 1
    157a:	cd 35       	cpi	r28, 0x5D	; 93
    157c:	d1 05       	cpc	r29, r1
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(">6.");
			for(u16 i = 0x60; i < 0x6D; i++){
    157e:	91 f7       	brne	.-28     	; 0x1564 <lcd_displayMenu+0x410>
    1580:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1584:	b7 dc       	rcall	.-1682   	; 0xef4 <lcd_clearDisplay>
					lcd_writeChar(' ');
				}
			}
			break;
		case 0x1170:
			lcd_clearDisplay();
    1586:	89 ee       	ldi	r24, 0xE9	; 233
			lcd_writeString(" 6.");
    1588:	91 e0       	ldi	r25, 0x01	; 1
    158a:	96 dd       	rcall	.-1236   	; 0x10b8 <lcd_writeString>
    158c:	c0 e5       	ldi	r28, 0x50	; 80
    158e:	d0 e0       	ldi	r29, 0x00	; 0
			for(u16 i = 0x60; i < 0x6D; i++){
    1590:	0b e4       	ldi	r16, 0x4B	; 75
				if(unreadMessageVector[5] == 1){
    1592:	13 e0       	ldi	r17, 0x03	; 3
    1594:	f8 01       	movw	r30, r16
    1596:	84 81       	ldd	r24, Z+4	; 0x04
    1598:	81 30       	cpi	r24, 0x01	; 1
					lcd_writeChar(eeprom_read(i));
    159a:	21 f4       	brne	.+8      	; 0x15a4 <lcd_displayMenu+0x450>
    159c:	ce 01       	movw	r24, r28
    159e:	b9 db       	rcall	.-2190   	; 0xd12 <eeprom_read>
    15a0:	6e dd       	rcall	.-1316   	; 0x107e <lcd_writeChar>
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <lcd_displayMenu+0x454>
    15a4:	80 e2       	ldi	r24, 0x20	; 32
				}
				else{
					lcd_writeChar(' ');
    15a6:	6b dd       	rcall	.-1322   	; 0x107e <lcd_writeChar>
			}
			break;
		case 0x1170:
			lcd_clearDisplay();
			lcd_writeString(" 6.");
			for(u16 i = 0x60; i < 0x6D; i++){
    15a8:	21 96       	adiw	r28, 0x01	; 1
    15aa:	cd 35       	cpi	r28, 0x5D	; 93
    15ac:	d1 05       	cpc	r29, r1
				}
				else{
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
    15ae:	91 f7       	brne	.-28     	; 0x1594 <lcd_displayMenu+0x440>
    15b0:	4b dd       	rcall	.-1386   	; 0x1048 <lcd_newLine>
			lcd_writeString(">7.");
    15b2:	8d ee       	ldi	r24, 0xED	; 237
    15b4:	91 e0       	ldi	r25, 0x01	; 1
			for(u16 i = 0x70; i < 0x7D; i++){
    15b6:	80 dd       	rcall	.-1280   	; 0x10b8 <lcd_writeString>
				if(unreadMessageVector[6] == 1){
    15b8:	c0 e6       	ldi	r28, 0x60	; 96
    15ba:	d0 e0       	ldi	r29, 0x00	; 0
    15bc:	0b e4       	ldi	r16, 0x4B	; 75
    15be:	13 e0       	ldi	r17, 0x03	; 3
    15c0:	f8 01       	movw	r30, r16
    15c2:	85 81       	ldd	r24, Z+5	; 0x05
					lcd_writeChar(eeprom_read(i));
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	21 f4       	brne	.+8      	; 0x15d0 <lcd_displayMenu+0x47c>
    15c8:	ce 01       	movw	r24, r28
				}
				else{
					lcd_writeChar(' ');
    15ca:	a3 db       	rcall	.-2234   	; 0xd12 <eeprom_read>
    15cc:	58 dd       	rcall	.-1360   	; 0x107e <lcd_writeChar>
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(">7.");
			for(u16 i = 0x70; i < 0x7D; i++){
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <lcd_displayMenu+0x480>
    15d0:	80 e2       	ldi	r24, 0x20	; 32
    15d2:	55 dd       	rcall	.-1366   	; 0x107e <lcd_writeChar>
    15d4:	21 96       	adiw	r28, 0x01	; 1
    15d6:	cd 36       	cpi	r28, 0x6D	; 109
					lcd_writeChar(' ');
				}
			}
			break;
		case 0x1180:
			lcd_clearDisplay();
    15d8:	d1 05       	cpc	r29, r1
			lcd_writeString(" 7.");
    15da:	91 f7       	brne	.-28     	; 0x15c0 <lcd_displayMenu+0x46c>
    15dc:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    15e0:	89 dc       	rcall	.-1774   	; 0xef4 <lcd_clearDisplay>
			for(u16 i = 0x70; i < 0x7D; i++){
    15e2:	81 ef       	ldi	r24, 0xF1	; 241
    15e4:	91 e0       	ldi	r25, 0x01	; 1
				if(unreadMessageVector[6] == 1){
    15e6:	68 dd       	rcall	.-1328   	; 0x10b8 <lcd_writeString>
    15e8:	c0 e6       	ldi	r28, 0x60	; 96
    15ea:	d0 e0       	ldi	r29, 0x00	; 0
    15ec:	0b e4       	ldi	r16, 0x4B	; 75
					lcd_writeChar(eeprom_read(i));
    15ee:	13 e0       	ldi	r17, 0x03	; 3
    15f0:	f8 01       	movw	r30, r16
    15f2:	85 81       	ldd	r24, Z+5	; 0x05
    15f4:	81 30       	cpi	r24, 0x01	; 1
				}
				else{
					lcd_writeChar(' ');
    15f6:	21 f4       	brne	.+8      	; 0x1600 <lcd_displayMenu+0x4ac>
			}
			break;
		case 0x1180:
			lcd_clearDisplay();
			lcd_writeString(" 7.");
			for(u16 i = 0x70; i < 0x7D; i++){
    15f8:	ce 01       	movw	r24, r28
    15fa:	8b db       	rcall	.-2282   	; 0xd12 <eeprom_read>
    15fc:	40 dd       	rcall	.-1408   	; 0x107e <lcd_writeChar>
				}
				else{
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <lcd_displayMenu+0x4b0>
    1600:	80 e2       	ldi	r24, 0x20	; 32
			lcd_writeString(">8.");
    1602:	3d dd       	rcall	.-1414   	; 0x107e <lcd_writeChar>
    1604:	21 96       	adiw	r28, 0x01	; 1
    1606:	cd 36       	cpi	r28, 0x6D	; 109
			for(u16 i = 0x80; i < 0x8D; i++){
				if(unreadMessageVector[7] == 1){
    1608:	d1 05       	cpc	r29, r1
    160a:	91 f7       	brne	.-28     	; 0x15f0 <lcd_displayMenu+0x49c>
    160c:	1d dd       	rcall	.-1478   	; 0x1048 <lcd_newLine>
    160e:	85 ef       	ldi	r24, 0xF5	; 245
    1610:	91 e0       	ldi	r25, 0x01	; 1
					lcd_writeChar(eeprom_read(i));
    1612:	52 dd       	rcall	.-1372   	; 0x10b8 <lcd_writeString>
    1614:	c0 e7       	ldi	r28, 0x70	; 112
    1616:	d0 e0       	ldi	r29, 0x00	; 0
    1618:	0b e4       	ldi	r16, 0x4B	; 75
				}
				else{
					lcd_writeChar(' ');
    161a:	13 e0       	ldi	r17, 0x03	; 3
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(">8.");
			for(u16 i = 0x80; i < 0x8D; i++){
    161c:	f8 01       	movw	r30, r16
    161e:	86 81       	ldd	r24, Z+6	; 0x06
    1620:	81 30       	cpi	r24, 0x01	; 1
    1622:	21 f4       	brne	.+8      	; 0x162c <lcd_displayMenu+0x4d8>
					lcd_writeChar(' ');
				}
			}
			break;
		case 0x1190:
			lcd_clearDisplay();
    1624:	ce 01       	movw	r24, r28
			lcd_writeString(" 8.");
    1626:	75 db       	rcall	.-2326   	; 0xd12 <eeprom_read>
    1628:	2a dd       	rcall	.-1452   	; 0x107e <lcd_writeChar>
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <lcd_displayMenu+0x4dc>
    162c:	80 e2       	ldi	r24, 0x20	; 32
			for(u16 i = 0x80; i < 0x8D; i++){
    162e:	27 dd       	rcall	.-1458   	; 0x107e <lcd_writeChar>
    1630:	21 96       	adiw	r28, 0x01	; 1
				if(unreadMessageVector[7] == 1){
    1632:	cd 37       	cpi	r28, 0x7D	; 125
    1634:	d1 05       	cpc	r29, r1
    1636:	91 f7       	brne	.-28     	; 0x161c <lcd_displayMenu+0x4c8>
    1638:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
					lcd_writeChar(eeprom_read(i));
    163c:	5b dc       	rcall	.-1866   	; 0xef4 <lcd_clearDisplay>
    163e:	89 ef       	ldi	r24, 0xF9	; 249
    1640:	91 e0       	ldi	r25, 0x01	; 1
    1642:	3a dd       	rcall	.-1420   	; 0x10b8 <lcd_writeString>
				}
				else{
					lcd_writeChar(' ');
    1644:	c0 e7       	ldi	r28, 0x70	; 112
    1646:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
		case 0x1190:
			lcd_clearDisplay();
			lcd_writeString(" 8.");
			for(u16 i = 0x80; i < 0x8D; i++){
    1648:	0b e4       	ldi	r16, 0x4B	; 75
    164a:	13 e0       	ldi	r17, 0x03	; 3
    164c:	f8 01       	movw	r30, r16
				}
				else{
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
    164e:	86 81       	ldd	r24, Z+6	; 0x06
    1650:	81 30       	cpi	r24, 0x01	; 1
			lcd_writeString(">9.");
    1652:	21 f4       	brne	.+8      	; 0x165c <lcd_displayMenu+0x508>
    1654:	ce 01       	movw	r24, r28
    1656:	5d db       	rcall	.-2374   	; 0xd12 <eeprom_read>
    1658:	12 dd       	rcall	.-1500   	; 0x107e <lcd_writeChar>
			for(u16 i = 0x90; i < 0x9D; i++){
				if(unreadMessageVector[8] == 1){
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <lcd_displayMenu+0x50c>
    165c:	80 e2       	ldi	r24, 0x20	; 32
    165e:	0f dd       	rcall	.-1506   	; 0x107e <lcd_writeChar>
    1660:	21 96       	adiw	r28, 0x01	; 1
					lcd_writeChar(eeprom_read(i));
    1662:	cd 37       	cpi	r28, 0x7D	; 125
    1664:	d1 05       	cpc	r29, r1
    1666:	91 f7       	brne	.-28     	; 0x164c <lcd_displayMenu+0x4f8>
    1668:	ef dc       	rcall	.-1570   	; 0x1048 <lcd_newLine>
    166a:	8d ef       	ldi	r24, 0xFD	; 253
				}
				else{
					lcd_writeChar(' ');
    166c:	91 e0       	ldi	r25, 0x01	; 1
    166e:	24 dd       	rcall	.-1464   	; 0x10b8 <lcd_writeString>
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(">9.");
			for(u16 i = 0x90; i < 0x9D; i++){
    1670:	c0 e8       	ldi	r28, 0x80	; 128
    1672:	d0 e0       	ldi	r29, 0x00	; 0
    1674:	0b e4       	ldi	r16, 0x4B	; 75
    1676:	13 e0       	ldi	r17, 0x03	; 3
    1678:	f8 01       	movw	r30, r16
    167a:	87 81       	ldd	r24, Z+7	; 0x07
					lcd_writeChar(' ');
				}
			}
			break;
		case 0x11A0:
			lcd_clearDisplay();
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	21 f4       	brne	.+8      	; 0x1688 <lcd_displayMenu+0x534>
			lcd_writeString(" 9.");
    1680:	ce 01       	movw	r24, r28
    1682:	47 db       	rcall	.-2418   	; 0xd12 <eeprom_read>
			for(u16 i = 0x90; i < 0x9D; i++){
    1684:	fc dc       	rcall	.-1544   	; 0x107e <lcd_writeChar>
				if(unreadMessageVector[8] == 1){
    1686:	02 c0       	rjmp	.+4      	; 0x168c <lcd_displayMenu+0x538>
    1688:	80 e2       	ldi	r24, 0x20	; 32
    168a:	f9 dc       	rcall	.-1550   	; 0x107e <lcd_writeChar>
    168c:	21 96       	adiw	r28, 0x01	; 1
    168e:	cd 38       	cpi	r28, 0x8D	; 141
					lcd_writeChar(eeprom_read(i));
    1690:	d1 05       	cpc	r29, r1
    1692:	91 f7       	brne	.-28     	; 0x1678 <lcd_displayMenu+0x524>
    1694:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1698:	2d dc       	rcall	.-1958   	; 0xef4 <lcd_clearDisplay>
				}
				else{
					lcd_writeChar(' ');
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	92 e0       	ldi	r25, 0x02	; 2
    169e:	0c dd       	rcall	.-1512   	; 0x10b8 <lcd_writeString>
			}
			break;
		case 0x11A0:
			lcd_clearDisplay();
			lcd_writeString(" 9.");
			for(u16 i = 0x90; i < 0x9D; i++){
    16a0:	c0 e8       	ldi	r28, 0x80	; 128
    16a2:	d0 e0       	ldi	r29, 0x00	; 0
				}
				else{
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
    16a4:	0b e4       	ldi	r16, 0x4B	; 75
			lcd_writeString(">A.");
    16a6:	13 e0       	ldi	r17, 0x03	; 3
    16a8:	f8 01       	movw	r30, r16
    16aa:	87 81       	ldd	r24, Z+7	; 0x07
			for(u16 i = 0xA0; i < 0xAD; i++){
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	21 f4       	brne	.+8      	; 0x16b8 <lcd_displayMenu+0x564>
				if(unreadMessageVector[9] == 1){
    16b0:	ce 01       	movw	r24, r28
    16b2:	2f db       	rcall	.-2466   	; 0xd12 <eeprom_read>
    16b4:	e4 dc       	rcall	.-1592   	; 0x107e <lcd_writeChar>
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <lcd_displayMenu+0x568>
					lcd_writeChar(eeprom_read(i));
    16b8:	80 e2       	ldi	r24, 0x20	; 32
    16ba:	e1 dc       	rcall	.-1598   	; 0x107e <lcd_writeChar>
    16bc:	21 96       	adiw	r28, 0x01	; 1
    16be:	cd 38       	cpi	r28, 0x8D	; 141
    16c0:	d1 05       	cpc	r29, r1
				}
				else{
					lcd_writeChar(' ');
    16c2:	91 f7       	brne	.-28     	; 0x16a8 <lcd_displayMenu+0x554>
    16c4:	c1 dc       	rcall	.-1662   	; 0x1048 <lcd_newLine>
    16c6:	85 e0       	ldi	r24, 0x05	; 5
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(">A.");
			for(u16 i = 0xA0; i < 0xAD; i++){
    16c8:	92 e0       	ldi	r25, 0x02	; 2
    16ca:	f6 dc       	rcall	.-1556   	; 0x10b8 <lcd_writeString>
    16cc:	c0 e9       	ldi	r28, 0x90	; 144
					lcd_writeChar(' ');
				}
			}
			break;
		case 0x1200:
			lcd_clearDisplay();
    16ce:	d0 e0       	ldi	r29, 0x00	; 0
    16d0:	0b e4       	ldi	r16, 0x4B	; 75
			lcd_writeString(" 1.1.Necitite");
    16d2:	13 e0       	ldi	r17, 0x03	; 3
    16d4:	f8 01       	movw	r30, r16
    16d6:	80 85       	ldd	r24, Z+8	; 0x08
			lcd_newLine();
    16d8:	81 30       	cpi	r24, 0x01	; 1
			lcd_writeString(">1.2.Citite");
    16da:	21 f4       	brne	.+8      	; 0x16e4 <lcd_displayMenu+0x590>
    16dc:	ce 01       	movw	r24, r28
    16de:	19 db       	rcall	.-2510   	; 0xd12 <eeprom_read>
			break;
    16e0:	ce dc       	rcall	.-1636   	; 0x107e <lcd_writeChar>
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <lcd_displayMenu+0x594>
		case 0x1210:
			lcd_clearDisplay();
    16e4:	80 e2       	ldi	r24, 0x20	; 32
    16e6:	cb dc       	rcall	.-1642   	; 0x107e <lcd_writeChar>
			lcd_writeString(">1.");
    16e8:	21 96       	adiw	r28, 0x01	; 1
    16ea:	cd 39       	cpi	r28, 0x9D	; 157
			for(u16 i = 0x110; i < 0x11D; i++){
    16ec:	d1 05       	cpc	r29, r1
				if(readMessageVector[0] == 1){
    16ee:	91 f7       	brne	.-28     	; 0x16d4 <lcd_displayMenu+0x580>
    16f0:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    16f4:	ff db       	rcall	.-2050   	; 0xef4 <lcd_clearDisplay>
    16f6:	89 e0       	ldi	r24, 0x09	; 9
					lcd_writeChar(eeprom_read(i));
    16f8:	92 e0       	ldi	r25, 0x02	; 2
    16fa:	de dc       	rcall	.-1604   	; 0x10b8 <lcd_writeString>
    16fc:	c0 e9       	ldi	r28, 0x90	; 144
    16fe:	d0 e0       	ldi	r29, 0x00	; 0
				}
				else{
					lcd_writeChar(' ');
    1700:	0b e4       	ldi	r16, 0x4B	; 75
    1702:	13 e0       	ldi	r17, 0x03	; 3
    1704:	f8 01       	movw	r30, r16
			lcd_writeString(">1.2.Citite");
			break;
		case 0x1210:
			lcd_clearDisplay();
			lcd_writeString(">1.");
			for(u16 i = 0x110; i < 0x11D; i++){
    1706:	80 85       	ldd	r24, Z+8	; 0x08
    1708:	81 30       	cpi	r24, 0x01	; 1
    170a:	21 f4       	brne	.+8      	; 0x1714 <lcd_displayMenu+0x5c0>
    170c:	ce 01       	movw	r24, r28
    170e:	01 db       	rcall	.-2558   	; 0xd12 <eeprom_read>
				else{
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(" 2.");
    1710:	b6 dc       	rcall	.-1684   	; 0x107e <lcd_writeChar>
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <lcd_displayMenu+0x5c4>
			for(u16 i = 0x120; i < 0x12D; i++){
    1714:	80 e2       	ldi	r24, 0x20	; 32
    1716:	b3 dc       	rcall	.-1690   	; 0x107e <lcd_writeChar>
				if(readMessageVector[1] == 1){
    1718:	21 96       	adiw	r28, 0x01	; 1
    171a:	cd 39       	cpi	r28, 0x9D	; 157
    171c:	d1 05       	cpc	r29, r1
    171e:	91 f7       	brne	.-28     	; 0x1704 <lcd_displayMenu+0x5b0>
					lcd_writeChar(eeprom_read(i));
    1720:	93 dc       	rcall	.-1754   	; 0x1048 <lcd_newLine>
    1722:	8d e0       	ldi	r24, 0x0D	; 13
    1724:	92 e0       	ldi	r25, 0x02	; 2
    1726:	c8 dc       	rcall	.-1648   	; 0x10b8 <lcd_writeString>
    1728:	c0 ea       	ldi	r28, 0xA0	; 160
				}
				else{
					lcd_writeChar(' ');
    172a:	d0 e0       	ldi	r29, 0x00	; 0
    172c:	0b e4       	ldi	r16, 0x4B	; 75
    172e:	13 e0       	ldi	r17, 0x03	; 3
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(" 2.");
			for(u16 i = 0x120; i < 0x12D; i++){
    1730:	f8 01       	movw	r30, r16
    1732:	81 85       	ldd	r24, Z+9	; 0x09
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	21 f4       	brne	.+8      	; 0x1740 <lcd_displayMenu+0x5ec>
					lcd_writeChar(' ');
				}
			}
			break;
		case 0x1220:
			lcd_clearDisplay();
    1738:	ce 01       	movw	r24, r28
    173a:	eb da       	rcall	.-2602   	; 0xd12 <eeprom_read>
			lcd_writeString(" 1.");
    173c:	a0 dc       	rcall	.-1728   	; 0x107e <lcd_writeChar>
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <lcd_displayMenu+0x5f0>
    1740:	80 e2       	ldi	r24, 0x20	; 32
			for(u16 i = 0x110; i < 0x11D; i++){
    1742:	9d dc       	rcall	.-1734   	; 0x107e <lcd_writeChar>
				if(readMessageVector[0] == 1){
    1744:	21 96       	adiw	r28, 0x01	; 1
    1746:	cd 3a       	cpi	r28, 0xAD	; 173
    1748:	d1 05       	cpc	r29, r1
    174a:	91 f7       	brne	.-28     	; 0x1730 <lcd_displayMenu+0x5dc>
    174c:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
					lcd_writeChar(eeprom_read(i));
    1750:	d1 db       	rcall	.-2142   	; 0xef4 <lcd_clearDisplay>
    1752:	81 e1       	ldi	r24, 0x11	; 17
    1754:	92 e0       	ldi	r25, 0x02	; 2
				}
				else{
					lcd_writeChar(' ');
    1756:	b0 dc       	rcall	.-1696   	; 0x10b8 <lcd_writeString>
			}
			break;
		case 0x1220:
			lcd_clearDisplay();
			lcd_writeString(" 1.");
			for(u16 i = 0x110; i < 0x11D; i++){
    1758:	77 dc       	rcall	.-1810   	; 0x1048 <lcd_newLine>
    175a:	8f e1       	ldi	r24, 0x1F	; 31
    175c:	92 e0       	ldi	r25, 0x02	; 2
    175e:	ac dc       	rcall	.-1704   	; 0x10b8 <lcd_writeString>
				}
				else{
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
    1760:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
			lcd_writeString(">2.");
    1764:	c7 db       	rcall	.-2162   	; 0xef4 <lcd_clearDisplay>
    1766:	85 ec       	ldi	r24, 0xC5	; 197
			for(u16 i = 0x120; i < 0x12D; i++){
    1768:	91 e0       	ldi	r25, 0x01	; 1
    176a:	a6 dc       	rcall	.-1716   	; 0x10b8 <lcd_writeString>
				if(readMessageVector[1] == 1){
    176c:	c0 e1       	ldi	r28, 0x10	; 16
    176e:	d1 e0       	ldi	r29, 0x01	; 1
    1770:	07 e5       	ldi	r16, 0x57	; 87
    1772:	13 e0       	ldi	r17, 0x03	; 3
    1774:	f8 01       	movw	r30, r16
					lcd_writeChar(eeprom_read(i));
    1776:	80 81       	ld	r24, Z
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	21 f4       	brne	.+8      	; 0x1784 <lcd_displayMenu+0x630>
				}
				else{
					lcd_writeChar(' ');
    177c:	ce 01       	movw	r24, r28
    177e:	c9 da       	rcall	.-2670   	; 0xd12 <eeprom_read>
    1780:	7e dc       	rcall	.-1796   	; 0x107e <lcd_writeChar>
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(">2.");
			for(u16 i = 0x120; i < 0x12D; i++){
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <lcd_displayMenu+0x634>
    1784:	80 e2       	ldi	r24, 0x20	; 32
    1786:	7b dc       	rcall	.-1802   	; 0x107e <lcd_writeChar>
    1788:	21 96       	adiw	r28, 0x01	; 1
    178a:	cd 31       	cpi	r28, 0x1D	; 29
					lcd_writeChar(' ');
				}
			}
			break;
		case 0x1230:
			lcd_clearDisplay();
    178c:	f1 e0       	ldi	r31, 0x01	; 1
    178e:	df 07       	cpc	r29, r31
			lcd_writeString(" 2.");
    1790:	89 f7       	brne	.-30     	; 0x1774 <lcd_displayMenu+0x620>
    1792:	5a dc       	rcall	.-1868   	; 0x1048 <lcd_newLine>
    1794:	89 ec       	ldi	r24, 0xC9	; 201
    1796:	91 e0       	ldi	r25, 0x01	; 1
			for(u16 i = 0x120; i < 0x12D; i++){
    1798:	8f dc       	rcall	.-1762   	; 0x10b8 <lcd_writeString>
    179a:	c0 e2       	ldi	r28, 0x20	; 32
				if(readMessageVector[1] == 1){
    179c:	d1 e0       	ldi	r29, 0x01	; 1
    179e:	07 e5       	ldi	r16, 0x57	; 87
    17a0:	13 e0       	ldi	r17, 0x03	; 3
					lcd_writeChar(eeprom_read(i));
    17a2:	f8 01       	movw	r30, r16
    17a4:	81 81       	ldd	r24, Z+1	; 0x01
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	21 f4       	brne	.+8      	; 0x17b2 <lcd_displayMenu+0x65e>
    17aa:	ce 01       	movw	r24, r28
				}
				else{
					lcd_writeChar(' ');
    17ac:	b2 da       	rcall	.-2716   	; 0xd12 <eeprom_read>
    17ae:	67 dc       	rcall	.-1842   	; 0x107e <lcd_writeChar>
			}
			break;
		case 0x1230:
			lcd_clearDisplay();
			lcd_writeString(" 2.");
			for(u16 i = 0x120; i < 0x12D; i++){
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <lcd_displayMenu+0x662>
    17b2:	80 e2       	ldi	r24, 0x20	; 32
    17b4:	64 dc       	rcall	.-1848   	; 0x107e <lcd_writeChar>
    17b6:	21 96       	adiw	r28, 0x01	; 1
    17b8:	cd 32       	cpi	r28, 0x2D	; 45
				}
				else{
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
    17ba:	f1 e0       	ldi	r31, 0x01	; 1
    17bc:	df 07       	cpc	r29, r31
			lcd_writeString(">3.");
    17be:	89 f7       	brne	.-30     	; 0x17a2 <lcd_displayMenu+0x64e>
    17c0:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
			for(u16 i = 0x130; i < 0x13D; i++){
				if(readMessageVector[2] == 1){
    17c4:	97 db       	rcall	.-2258   	; 0xef4 <lcd_clearDisplay>
    17c6:	8d ec       	ldi	r24, 0xCD	; 205
    17c8:	91 e0       	ldi	r25, 0x01	; 1
    17ca:	76 dc       	rcall	.-1812   	; 0x10b8 <lcd_writeString>
    17cc:	c0 e1       	ldi	r28, 0x10	; 16
					lcd_writeChar(eeprom_read(i));
    17ce:	d1 e0       	ldi	r29, 0x01	; 1
    17d0:	07 e5       	ldi	r16, 0x57	; 87
    17d2:	13 e0       	ldi	r17, 0x03	; 3
    17d4:	f8 01       	movw	r30, r16
				}
				else{
					lcd_writeChar(' ');
    17d6:	80 81       	ld	r24, Z
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	21 f4       	brne	.+8      	; 0x17e4 <lcd_displayMenu+0x690>
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(">3.");
			for(u16 i = 0x130; i < 0x13D; i++){
    17dc:	ce 01       	movw	r24, r28
    17de:	99 da       	rcall	.-2766   	; 0xd12 <eeprom_read>
    17e0:	4e dc       	rcall	.-1892   	; 0x107e <lcd_writeChar>
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <lcd_displayMenu+0x694>
    17e4:	80 e2       	ldi	r24, 0x20	; 32
					lcd_writeChar(' ');
				}
			}
			break;
		case 0x1240:
			lcd_clearDisplay();
    17e6:	4b dc       	rcall	.-1898   	; 0x107e <lcd_writeChar>
			lcd_writeString(" 3.");
    17e8:	21 96       	adiw	r28, 0x01	; 1
    17ea:	cd 31       	cpi	r28, 0x1D	; 29
    17ec:	f1 e0       	ldi	r31, 0x01	; 1
			for(u16 i = 0x130; i < 0x13D; i++){
    17ee:	df 07       	cpc	r29, r31
    17f0:	89 f7       	brne	.-30     	; 0x17d4 <lcd_displayMenu+0x680>
				if(readMessageVector[2] == 1){
    17f2:	2a dc       	rcall	.-1964   	; 0x1048 <lcd_newLine>
    17f4:	81 ed       	ldi	r24, 0xD1	; 209
    17f6:	91 e0       	ldi	r25, 0x01	; 1
    17f8:	5f dc       	rcall	.-1858   	; 0x10b8 <lcd_writeString>
					lcd_writeChar(eeprom_read(i));
    17fa:	c0 e2       	ldi	r28, 0x20	; 32
    17fc:	d1 e0       	ldi	r29, 0x01	; 1
    17fe:	07 e5       	ldi	r16, 0x57	; 87
    1800:	13 e0       	ldi	r17, 0x03	; 3
    1802:	f8 01       	movw	r30, r16
    1804:	81 81       	ldd	r24, Z+1	; 0x01
				}
				else{
					lcd_writeChar(' ');
    1806:	81 30       	cpi	r24, 0x01	; 1
			}
			break;
		case 0x1240:
			lcd_clearDisplay();
			lcd_writeString(" 3.");
			for(u16 i = 0x130; i < 0x13D; i++){
    1808:	21 f4       	brne	.+8      	; 0x1812 <lcd_displayMenu+0x6be>
    180a:	ce 01       	movw	r24, r28
    180c:	82 da       	rcall	.-2812   	; 0xd12 <eeprom_read>
				}
				else{
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
    180e:	37 dc       	rcall	.-1938   	; 0x107e <lcd_writeChar>
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <lcd_displayMenu+0x6c2>
			lcd_writeString(">4.");
    1812:	80 e2       	ldi	r24, 0x20	; 32
    1814:	34 dc       	rcall	.-1944   	; 0x107e <lcd_writeChar>
    1816:	21 96       	adiw	r28, 0x01	; 1
			for(u16 i = 0x140; i < 0x14D; i++){
    1818:	cd 32       	cpi	r28, 0x2D	; 45
				if(readMessageVector[3] == 1){
    181a:	f1 e0       	ldi	r31, 0x01	; 1
    181c:	df 07       	cpc	r29, r31
    181e:	89 f7       	brne	.-30     	; 0x1802 <lcd_displayMenu+0x6ae>
    1820:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
					lcd_writeChar(eeprom_read(i));
    1824:	67 db       	rcall	.-2354   	; 0xef4 <lcd_clearDisplay>
    1826:	89 ec       	ldi	r24, 0xC9	; 201
    1828:	91 e0       	ldi	r25, 0x01	; 1
    182a:	46 dc       	rcall	.-1908   	; 0x10b8 <lcd_writeString>
				}
				else{
					lcd_writeChar(' ');
    182c:	c0 e2       	ldi	r28, 0x20	; 32
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(">4.");
			for(u16 i = 0x140; i < 0x14D; i++){
    182e:	d1 e0       	ldi	r29, 0x01	; 1
    1830:	07 e5       	ldi	r16, 0x57	; 87
    1832:	13 e0       	ldi	r17, 0x03	; 3
    1834:	f8 01       	movw	r30, r16
    1836:	81 81       	ldd	r24, Z+1	; 0x01
					lcd_writeChar(' ');
				}
			}
			break;
		case 0x1250:
			lcd_clearDisplay();
    1838:	81 30       	cpi	r24, 0x01	; 1
			lcd_writeString(" 4.");
    183a:	21 f4       	brne	.+8      	; 0x1844 <lcd_displayMenu+0x6f0>
    183c:	ce 01       	movw	r24, r28
    183e:	69 da       	rcall	.-2862   	; 0xd12 <eeprom_read>
			for(u16 i = 0x140; i < 0x14D; i++){
    1840:	1e dc       	rcall	.-1988   	; 0x107e <lcd_writeChar>
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <lcd_displayMenu+0x6f4>
				if(readMessageVector[3] == 1){
    1844:	80 e2       	ldi	r24, 0x20	; 32
    1846:	1b dc       	rcall	.-1994   	; 0x107e <lcd_writeChar>
    1848:	21 96       	adiw	r28, 0x01	; 1
    184a:	cd 32       	cpi	r28, 0x2D	; 45
					lcd_writeChar(eeprom_read(i));
    184c:	f1 e0       	ldi	r31, 0x01	; 1
    184e:	df 07       	cpc	r29, r31
    1850:	89 f7       	brne	.-30     	; 0x1834 <lcd_displayMenu+0x6e0>
    1852:	fa db       	rcall	.-2060   	; 0x1048 <lcd_newLine>
    1854:	85 ed       	ldi	r24, 0xD5	; 213
				}
				else{
					lcd_writeChar(' ');
    1856:	91 e0       	ldi	r25, 0x01	; 1
    1858:	2f dc       	rcall	.-1954   	; 0x10b8 <lcd_writeString>
    185a:	c0 e3       	ldi	r28, 0x30	; 48
			}
			break;
		case 0x1250:
			lcd_clearDisplay();
			lcd_writeString(" 4.");
			for(u16 i = 0x140; i < 0x14D; i++){
    185c:	d1 e0       	ldi	r29, 0x01	; 1
    185e:	07 e5       	ldi	r16, 0x57	; 87
    1860:	13 e0       	ldi	r17, 0x03	; 3
				}
				else{
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
    1862:	f8 01       	movw	r30, r16
    1864:	82 81       	ldd	r24, Z+2	; 0x02
			lcd_writeString(">5.");
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	21 f4       	brne	.+8      	; 0x1872 <lcd_displayMenu+0x71e>
    186a:	ce 01       	movw	r24, r28
    186c:	52 da       	rcall	.-2908   	; 0xd12 <eeprom_read>
			for(u16 i = 0x150; i < 0x15D; i++){
    186e:	07 dc       	rcall	.-2034   	; 0x107e <lcd_writeChar>
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <lcd_displayMenu+0x722>
				if(readMessageVector[4] == 1){
    1872:	80 e2       	ldi	r24, 0x20	; 32
    1874:	04 dc       	rcall	.-2040   	; 0x107e <lcd_writeChar>
    1876:	21 96       	adiw	r28, 0x01	; 1
					lcd_writeChar(eeprom_read(i));
    1878:	cd 33       	cpi	r28, 0x3D	; 61
    187a:	f1 e0       	ldi	r31, 0x01	; 1
    187c:	df 07       	cpc	r29, r31
    187e:	89 f7       	brne	.-30     	; 0x1862 <lcd_displayMenu+0x70e>
    1880:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
				}
				else{
					lcd_writeChar(' ');
    1884:	37 db       	rcall	.-2450   	; 0xef4 <lcd_clearDisplay>
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(">5.");
			for(u16 i = 0x150; i < 0x15D; i++){
    1886:	89 ed       	ldi	r24, 0xD9	; 217
    1888:	91 e0       	ldi	r25, 0x01	; 1
    188a:	16 dc       	rcall	.-2004   	; 0x10b8 <lcd_writeString>
    188c:	c0 e3       	ldi	r28, 0x30	; 48
    188e:	d1 e0       	ldi	r29, 0x01	; 1
    1890:	07 e5       	ldi	r16, 0x57	; 87
    1892:	13 e0       	ldi	r17, 0x03	; 3
					lcd_writeChar(' ');
				}
			}
			break;
		case 0x1260:
			lcd_clearDisplay();
    1894:	f8 01       	movw	r30, r16
			lcd_writeString(" 5.");
    1896:	82 81       	ldd	r24, Z+2	; 0x02
			for(u16 i = 0x150; i < 0x15D; i++){
    1898:	81 30       	cpi	r24, 0x01	; 1
				if(readMessageVector[4] == 1){
    189a:	21 f4       	brne	.+8      	; 0x18a4 <lcd_displayMenu+0x750>
    189c:	ce 01       	movw	r24, r28
    189e:	39 da       	rcall	.-2958   	; 0xd12 <eeprom_read>
    18a0:	ee db       	rcall	.-2084   	; 0x107e <lcd_writeChar>
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <lcd_displayMenu+0x754>
					lcd_writeChar(eeprom_read(i));
    18a4:	80 e2       	ldi	r24, 0x20	; 32
    18a6:	eb db       	rcall	.-2090   	; 0x107e <lcd_writeChar>
    18a8:	21 96       	adiw	r28, 0x01	; 1
    18aa:	cd 33       	cpi	r28, 0x3D	; 61
				}
				else{
					lcd_writeChar(' ');
    18ac:	f1 e0       	ldi	r31, 0x01	; 1
    18ae:	df 07       	cpc	r29, r31
    18b0:	89 f7       	brne	.-30     	; 0x1894 <lcd_displayMenu+0x740>
			}
			break;
		case 0x1260:
			lcd_clearDisplay();
			lcd_writeString(" 5.");
			for(u16 i = 0x150; i < 0x15D; i++){
    18b2:	ca db       	rcall	.-2156   	; 0x1048 <lcd_newLine>
    18b4:	8d ed       	ldi	r24, 0xDD	; 221
    18b6:	91 e0       	ldi	r25, 0x01	; 1
				}
				else{
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
    18b8:	ff db       	rcall	.-2050   	; 0x10b8 <lcd_writeString>
			lcd_writeString(">6.");
    18ba:	c0 e4       	ldi	r28, 0x40	; 64
    18bc:	d1 e0       	ldi	r29, 0x01	; 1
    18be:	07 e5       	ldi	r16, 0x57	; 87
			for(u16 i = 0x160; i < 0x16D; i++){
    18c0:	13 e0       	ldi	r17, 0x03	; 3
    18c2:	f8 01       	movw	r30, r16
				if(readMessageVector[5] == 1){
    18c4:	83 81       	ldd	r24, Z+3	; 0x03
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	21 f4       	brne	.+8      	; 0x18d2 <lcd_displayMenu+0x77e>
    18ca:	ce 01       	movw	r24, r28
					lcd_writeChar(eeprom_read(i));
    18cc:	22 da       	rcall	.-3004   	; 0xd12 <eeprom_read>
    18ce:	d7 db       	rcall	.-2130   	; 0x107e <lcd_writeChar>
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <lcd_displayMenu+0x782>
    18d2:	80 e2       	ldi	r24, 0x20	; 32
    18d4:	d4 db       	rcall	.-2136   	; 0x107e <lcd_writeChar>
    18d6:	21 96       	adiw	r28, 0x01	; 1
				}
				else{
					lcd_writeChar(' ');
    18d8:	cd 34       	cpi	r28, 0x4D	; 77
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(">6.");
			for(u16 i = 0x160; i < 0x16D; i++){
    18da:	f1 e0       	ldi	r31, 0x01	; 1
    18dc:	df 07       	cpc	r29, r31
    18de:	89 f7       	brne	.-30     	; 0x18c2 <lcd_displayMenu+0x76e>
    18e0:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
					lcd_writeChar(' ');
				}
			}
			break;
		case 0x1270:
			lcd_clearDisplay();
    18e4:	07 db       	rcall	.-2546   	; 0xef4 <lcd_clearDisplay>
    18e6:	81 ee       	ldi	r24, 0xE1	; 225
			lcd_writeString(" 6.");
    18e8:	91 e0       	ldi	r25, 0x01	; 1
    18ea:	e6 db       	rcall	.-2100   	; 0x10b8 <lcd_writeString>
    18ec:	c0 e4       	ldi	r28, 0x40	; 64
			for(u16 i = 0x160; i < 0x16D; i++){
				if(readMessageVector[5] == 1){
    18ee:	d1 e0       	ldi	r29, 0x01	; 1
    18f0:	07 e5       	ldi	r16, 0x57	; 87
    18f2:	13 e0       	ldi	r17, 0x03	; 3
					lcd_writeChar(eeprom_read(i));
    18f4:	f8 01       	movw	r30, r16
    18f6:	83 81       	ldd	r24, Z+3	; 0x03
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	21 f4       	brne	.+8      	; 0x1904 <lcd_displayMenu+0x7b0>
    18fc:	ce 01       	movw	r24, r28
				}
				else{
					lcd_writeChar(' ');
    18fe:	09 da       	rcall	.-3054   	; 0xd12 <eeprom_read>
    1900:	be db       	rcall	.-2180   	; 0x107e <lcd_writeChar>
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <lcd_displayMenu+0x7b4>
			}
			break;
		case 0x1270:
			lcd_clearDisplay();
			lcd_writeString(" 6.");
			for(u16 i = 0x160; i < 0x16D; i++){
    1904:	80 e2       	ldi	r24, 0x20	; 32
    1906:	bb db       	rcall	.-2186   	; 0x107e <lcd_writeChar>
    1908:	21 96       	adiw	r28, 0x01	; 1
				}
				else{
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
    190a:	cd 34       	cpi	r28, 0x4D	; 77
			lcd_writeString(">7.");
    190c:	f1 e0       	ldi	r31, 0x01	; 1
    190e:	df 07       	cpc	r29, r31
    1910:	89 f7       	brne	.-30     	; 0x18f4 <lcd_displayMenu+0x7a0>
			for(u16 i = 0x170; i < 0x17D; i++){
				if(readMessageVector[6] == 1){
    1912:	9a db       	rcall	.-2252   	; 0x1048 <lcd_newLine>
    1914:	85 ee       	ldi	r24, 0xE5	; 229
    1916:	91 e0       	ldi	r25, 0x01	; 1
    1918:	cf db       	rcall	.-2146   	; 0x10b8 <lcd_writeString>
					lcd_writeChar(eeprom_read(i));
    191a:	c0 e5       	ldi	r28, 0x50	; 80
    191c:	d1 e0       	ldi	r29, 0x01	; 1
    191e:	07 e5       	ldi	r16, 0x57	; 87
    1920:	13 e0       	ldi	r17, 0x03	; 3
    1922:	f8 01       	movw	r30, r16
    1924:	84 81       	ldd	r24, Z+4	; 0x04
				}
				else{
					lcd_writeChar(' ');
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	21 f4       	brne	.+8      	; 0x1932 <lcd_displayMenu+0x7de>
    192a:	ce 01       	movw	r24, r28
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(">7.");
			for(u16 i = 0x170; i < 0x17D; i++){
    192c:	f2 d9       	rcall	.-3100   	; 0xd12 <eeprom_read>
    192e:	a7 db       	rcall	.-2226   	; 0x107e <lcd_writeChar>
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <lcd_displayMenu+0x7e2>
    1932:	80 e2       	ldi	r24, 0x20	; 32
					lcd_writeChar(' ');
				}
			}
			break;
		case 0x1280:
			lcd_clearDisplay();
    1934:	a4 db       	rcall	.-2232   	; 0x107e <lcd_writeChar>
    1936:	21 96       	adiw	r28, 0x01	; 1
			lcd_writeString(" 7.");
    1938:	cd 35       	cpi	r28, 0x5D	; 93
    193a:	f1 e0       	ldi	r31, 0x01	; 1
			for(u16 i = 0x170; i < 0x17D; i++){
    193c:	df 07       	cpc	r29, r31
				if(readMessageVector[6] == 1){
    193e:	89 f7       	brne	.-30     	; 0x1922 <lcd_displayMenu+0x7ce>
    1940:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1944:	d7 da       	rcall	.-2642   	; 0xef4 <lcd_clearDisplay>
    1946:	89 ee       	ldi	r24, 0xE9	; 233
					lcd_writeChar(eeprom_read(i));
    1948:	91 e0       	ldi	r25, 0x01	; 1
    194a:	b6 db       	rcall	.-2196   	; 0x10b8 <lcd_writeString>
    194c:	c0 e5       	ldi	r28, 0x50	; 80
    194e:	d1 e0       	ldi	r29, 0x01	; 1
				}
				else{
					lcd_writeChar(' ');
    1950:	07 e5       	ldi	r16, 0x57	; 87
    1952:	13 e0       	ldi	r17, 0x03	; 3
			}
			break;
		case 0x1280:
			lcd_clearDisplay();
			lcd_writeString(" 7.");
			for(u16 i = 0x170; i < 0x17D; i++){
    1954:	f8 01       	movw	r30, r16
    1956:	84 81       	ldd	r24, Z+4	; 0x04
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	21 f4       	brne	.+8      	; 0x1964 <lcd_displayMenu+0x810>
    195c:	ce 01       	movw	r24, r28
				}
				else{
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
    195e:	d9 d9       	rcall	.-3150   	; 0xd12 <eeprom_read>
			lcd_writeString(">8.");
    1960:	8e db       	rcall	.-2276   	; 0x107e <lcd_writeChar>
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <lcd_displayMenu+0x814>
    1964:	80 e2       	ldi	r24, 0x20	; 32
			for(u16 i = 0x180; i < 0x18D; i++){
    1966:	8b db       	rcall	.-2282   	; 0x107e <lcd_writeChar>
				if(readMessageVector[7] == 1){
    1968:	21 96       	adiw	r28, 0x01	; 1
    196a:	cd 35       	cpi	r28, 0x5D	; 93
    196c:	f1 e0       	ldi	r31, 0x01	; 1
    196e:	df 07       	cpc	r29, r31
    1970:	89 f7       	brne	.-30     	; 0x1954 <lcd_displayMenu+0x800>
					lcd_writeChar(eeprom_read(i));
    1972:	6a db       	rcall	.-2348   	; 0x1048 <lcd_newLine>
    1974:	8d ee       	ldi	r24, 0xED	; 237
    1976:	91 e0       	ldi	r25, 0x01	; 1
    1978:	9f db       	rcall	.-2242   	; 0x10b8 <lcd_writeString>
    197a:	c0 e6       	ldi	r28, 0x60	; 96
				}
				else{
					lcd_writeChar(' ');
    197c:	d1 e0       	ldi	r29, 0x01	; 1
    197e:	07 e5       	ldi	r16, 0x57	; 87
    1980:	13 e0       	ldi	r17, 0x03	; 3
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(">8.");
			for(u16 i = 0x180; i < 0x18D; i++){
    1982:	f8 01       	movw	r30, r16
    1984:	85 81       	ldd	r24, Z+5	; 0x05
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	21 f4       	brne	.+8      	; 0x1992 <lcd_displayMenu+0x83e>
    198a:	ce 01       	movw	r24, r28
    198c:	c2 d9       	rcall	.-3196   	; 0xd12 <eeprom_read>
					lcd_writeChar(' ');
				}
			}
			break;
		case 0x1290:
			lcd_clearDisplay();
    198e:	77 db       	rcall	.-2322   	; 0x107e <lcd_writeChar>
			lcd_writeString(" 8.");
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <lcd_displayMenu+0x842>
    1992:	80 e2       	ldi	r24, 0x20	; 32
    1994:	74 db       	rcall	.-2328   	; 0x107e <lcd_writeChar>
    1996:	21 96       	adiw	r28, 0x01	; 1
			for(u16 i = 0x180; i < 0x18D; i++){
    1998:	cd 36       	cpi	r28, 0x6D	; 109
    199a:	f1 e0       	ldi	r31, 0x01	; 1
				if(readMessageVector[7] == 1){
    199c:	df 07       	cpc	r29, r31
    199e:	89 f7       	brne	.-30     	; 0x1982 <lcd_displayMenu+0x82e>
    19a0:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    19a4:	a7 da       	rcall	.-2738   	; 0xef4 <lcd_clearDisplay>
    19a6:	81 ef       	ldi	r24, 0xF1	; 241
					lcd_writeChar(eeprom_read(i));
    19a8:	91 e0       	ldi	r25, 0x01	; 1
    19aa:	86 db       	rcall	.-2292   	; 0x10b8 <lcd_writeString>
    19ac:	c0 e6       	ldi	r28, 0x60	; 96
    19ae:	d1 e0       	ldi	r29, 0x01	; 1
				}
				else{
					lcd_writeChar(' ');
    19b0:	07 e5       	ldi	r16, 0x57	; 87
    19b2:	13 e0       	ldi	r17, 0x03	; 3
    19b4:	f8 01       	movw	r30, r16
			}
			break;
		case 0x1290:
			lcd_clearDisplay();
			lcd_writeString(" 8.");
			for(u16 i = 0x180; i < 0x18D; i++){
    19b6:	85 81       	ldd	r24, Z+5	; 0x05
    19b8:	81 30       	cpi	r24, 0x01	; 1
    19ba:	21 f4       	brne	.+8      	; 0x19c4 <lcd_displayMenu+0x870>
    19bc:	ce 01       	movw	r24, r28
				}
				else{
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
    19be:	a9 d9       	rcall	.-3246   	; 0xd12 <eeprom_read>
			lcd_writeString(">9.");
    19c0:	5e db       	rcall	.-2372   	; 0x107e <lcd_writeChar>
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <lcd_displayMenu+0x874>
    19c4:	80 e2       	ldi	r24, 0x20	; 32
    19c6:	5b db       	rcall	.-2378   	; 0x107e <lcd_writeChar>
			for(u16 i = 0x190; i < 0x19D; i++){
    19c8:	21 96       	adiw	r28, 0x01	; 1
    19ca:	cd 36       	cpi	r28, 0x6D	; 109
				if(readMessageVector[8] == 1){
    19cc:	f1 e0       	ldi	r31, 0x01	; 1
    19ce:	df 07       	cpc	r29, r31
    19d0:	89 f7       	brne	.-30     	; 0x19b4 <lcd_displayMenu+0x860>
    19d2:	3a db       	rcall	.-2444   	; 0x1048 <lcd_newLine>
    19d4:	85 ef       	ldi	r24, 0xF5	; 245
    19d6:	91 e0       	ldi	r25, 0x01	; 1
					lcd_writeChar(eeprom_read(i));
    19d8:	6f db       	rcall	.-2338   	; 0x10b8 <lcd_writeString>
    19da:	c0 e7       	ldi	r28, 0x70	; 112
    19dc:	d1 e0       	ldi	r29, 0x01	; 1
    19de:	07 e5       	ldi	r16, 0x57	; 87
				}
				else{
					lcd_writeChar(' ');
    19e0:	13 e0       	ldi	r17, 0x03	; 3
    19e2:	f8 01       	movw	r30, r16
    19e4:	86 81       	ldd	r24, Z+6	; 0x06
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(">9.");
			for(u16 i = 0x190; i < 0x19D; i++){
    19e6:	81 30       	cpi	r24, 0x01	; 1
    19e8:	21 f4       	brne	.+8      	; 0x19f2 <lcd_displayMenu+0x89e>
    19ea:	ce 01       	movw	r24, r28
    19ec:	92 d9       	rcall	.-3292   	; 0xd12 <eeprom_read>
    19ee:	47 db       	rcall	.-2418   	; 0x107e <lcd_writeChar>
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <lcd_displayMenu+0x8a2>
					lcd_writeChar(' ');
				}
			}
			break;
		case 0x12A0:
			lcd_clearDisplay();
    19f2:	80 e2       	ldi	r24, 0x20	; 32
    19f4:	44 db       	rcall	.-2424   	; 0x107e <lcd_writeChar>
			lcd_writeString(" 9.");
    19f6:	21 96       	adiw	r28, 0x01	; 1
    19f8:	cd 37       	cpi	r28, 0x7D	; 125
    19fa:	f1 e0       	ldi	r31, 0x01	; 1
    19fc:	df 07       	cpc	r29, r31
			for(u16 i = 0x190; i < 0x19D; i++){
    19fe:	89 f7       	brne	.-30     	; 0x19e2 <lcd_displayMenu+0x88e>
    1a00:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
				if(readMessageVector[8] == 1){
    1a04:	77 da       	rcall	.-2834   	; 0xef4 <lcd_clearDisplay>
    1a06:	89 ef       	ldi	r24, 0xF9	; 249
    1a08:	91 e0       	ldi	r25, 0x01	; 1
    1a0a:	56 db       	rcall	.-2388   	; 0x10b8 <lcd_writeString>
					lcd_writeChar(eeprom_read(i));
    1a0c:	c0 e7       	ldi	r28, 0x70	; 112
    1a0e:	d1 e0       	ldi	r29, 0x01	; 1
    1a10:	07 e5       	ldi	r16, 0x57	; 87
    1a12:	13 e0       	ldi	r17, 0x03	; 3
				}
				else{
					lcd_writeChar(' ');
    1a14:	f8 01       	movw	r30, r16
    1a16:	86 81       	ldd	r24, Z+6	; 0x06
    1a18:	81 30       	cpi	r24, 0x01	; 1
			}
			break;
		case 0x12A0:
			lcd_clearDisplay();
			lcd_writeString(" 9.");
			for(u16 i = 0x190; i < 0x19D; i++){
    1a1a:	21 f4       	brne	.+8      	; 0x1a24 <lcd_displayMenu+0x8d0>
    1a1c:	ce 01       	movw	r24, r28
    1a1e:	79 d9       	rcall	.-3342   	; 0xd12 <eeprom_read>
    1a20:	2e db       	rcall	.-2468   	; 0x107e <lcd_writeChar>
				}
				else{
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <lcd_displayMenu+0x8d4>
    1a24:	80 e2       	ldi	r24, 0x20	; 32
			lcd_writeString(">A.");
    1a26:	2b db       	rcall	.-2474   	; 0x107e <lcd_writeChar>
    1a28:	21 96       	adiw	r28, 0x01	; 1
    1a2a:	cd 37       	cpi	r28, 0x7D	; 125
    1a2c:	f1 e0       	ldi	r31, 0x01	; 1
			for(u16 i = 0x1A0; i < 0x1AD; i++){
    1a2e:	df 07       	cpc	r29, r31
    1a30:	89 f7       	brne	.-30     	; 0x1a14 <lcd_displayMenu+0x8c0>
				if(readMessageVector[9] == 1){
    1a32:	0a db       	rcall	.-2540   	; 0x1048 <lcd_newLine>
    1a34:	8d ef       	ldi	r24, 0xFD	; 253
    1a36:	91 e0       	ldi	r25, 0x01	; 1
    1a38:	3f db       	rcall	.-2434   	; 0x10b8 <lcd_writeString>
    1a3a:	c0 e8       	ldi	r28, 0x80	; 128
					lcd_writeChar(eeprom_read(i));
    1a3c:	d1 e0       	ldi	r29, 0x01	; 1
    1a3e:	07 e5       	ldi	r16, 0x57	; 87
    1a40:	13 e0       	ldi	r17, 0x03	; 3
				}
				else{
					lcd_writeChar(' ');
    1a42:	f8 01       	movw	r30, r16
    1a44:	87 81       	ldd	r24, Z+7	; 0x07
					lcd_writeChar(' ');
				}
			}
			lcd_newLine();
			lcd_writeString(">A.");
			for(u16 i = 0x1A0; i < 0x1AD; i++){
    1a46:	81 30       	cpi	r24, 0x01	; 1
    1a48:	21 f4       	brne	.+8      	; 0x1a52 <lcd_displayMenu+0x8fe>
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	62 d9       	rcall	.-3388   	; 0xd12 <eeprom_read>
    1a4e:	17 db       	rcall	.-2514   	; 0x107e <lcd_writeChar>
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <lcd_displayMenu+0x902>
					lcd_writeChar(' ');
				}
			}
			break;
		case 0x1300:
			lcd_clearDisplay();
    1a52:	80 e2       	ldi	r24, 0x20	; 32
			lcd_writeString(" 1.2.Citite");
    1a54:	14 db       	rcall	.-2520   	; 0x107e <lcd_writeChar>
    1a56:	21 96       	adiw	r28, 0x01	; 1
    1a58:	cd 38       	cpi	r28, 0x8D	; 141
			lcd_newLine();
    1a5a:	f1 e0       	ldi	r31, 0x01	; 1
    1a5c:	df 07       	cpc	r29, r31
			lcd_writeString(">1.3.Stergere");
    1a5e:	89 f7       	brne	.-30     	; 0x1a42 <lcd_displayMenu+0x8ee>
    1a60:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
			break;
    1a64:	47 da       	rcall	.-2930   	; 0xef4 <lcd_clearDisplay>
    1a66:	81 e0       	ldi	r24, 0x01	; 1
		case 0x2100:
			lcd_clearDisplay();
    1a68:	92 e0       	ldi	r25, 0x02	; 2
			switch(manualMode){
    1a6a:	26 db       	rcall	.-2484   	; 0x10b8 <lcd_writeString>
    1a6c:	c0 e8       	ldi	r28, 0x80	; 128
    1a6e:	d1 e0       	ldi	r29, 0x01	; 1
    1a70:	07 e5       	ldi	r16, 0x57	; 87
    1a72:	13 e0       	ldi	r17, 0x03	; 3
    1a74:	f8 01       	movw	r30, r16
    1a76:	87 81       	ldd	r24, Z+7	; 0x07
    1a78:	81 30       	cpi	r24, 0x01	; 1
				case TRUE:
					lcd_writeString(">2.1.Manual [x]");
    1a7a:	21 f4       	brne	.+8      	; 0x1a84 <lcd_displayMenu+0x930>
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	49 d9       	rcall	.-3438   	; 0xd12 <eeprom_read>
    1a80:	fe da       	rcall	.-2564   	; 0x107e <lcd_writeChar>
					lcd_newLine();
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <lcd_displayMenu+0x934>
    1a84:	80 e2       	ldi	r24, 0x20	; 32
					lcd_writeString(" 2.2.Automat [ ]");
    1a86:	fb da       	rcall	.-2570   	; 0x107e <lcd_writeChar>
    1a88:	21 96       	adiw	r28, 0x01	; 1
    1a8a:	cd 38       	cpi	r28, 0x8D	; 141
					break;
    1a8c:	f1 e0       	ldi	r31, 0x01	; 1
    1a8e:	df 07       	cpc	r29, r31
				case FALSE:
					lcd_writeString(">2.1.Manual [ ]");
    1a90:	89 f7       	brne	.-30     	; 0x1a74 <lcd_displayMenu+0x920>
    1a92:	da da       	rcall	.-2636   	; 0x1048 <lcd_newLine>
    1a94:	85 e0       	ldi	r24, 0x05	; 5
    1a96:	92 e0       	ldi	r25, 0x02	; 2
					lcd_newLine();
    1a98:	0f db       	rcall	.-2530   	; 0x10b8 <lcd_writeString>
    1a9a:	c0 e9       	ldi	r28, 0x90	; 144
					lcd_writeString(" 2.2.Automat [x]");
    1a9c:	d1 e0       	ldi	r29, 0x01	; 1
    1a9e:	07 e5       	ldi	r16, 0x57	; 87
    1aa0:	13 e0       	ldi	r17, 0x03	; 3
    1aa2:	f8 01       	movw	r30, r16
					break;
    1aa4:	80 85       	ldd	r24, Z+8	; 0x08
					break;
			}
			break;
		case 0x2200:
			lcd_clearDisplay();
			switch(manualMode){
    1aa6:	81 30       	cpi	r24, 0x01	; 1
    1aa8:	21 f4       	brne	.+8      	; 0x1ab2 <lcd_displayMenu+0x95e>
    1aaa:	ce 01       	movw	r24, r28
    1aac:	32 d9       	rcall	.-3484   	; 0xd12 <eeprom_read>
    1aae:	e7 da       	rcall	.-2610   	; 0x107e <lcd_writeChar>
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <lcd_displayMenu+0x962>
    1ab2:	80 e2       	ldi	r24, 0x20	; 32
				case TRUE:
					lcd_writeString(" 2.1.Manual [x]");
    1ab4:	e4 da       	rcall	.-2616   	; 0x107e <lcd_writeChar>
    1ab6:	21 96       	adiw	r28, 0x01	; 1
    1ab8:	cd 39       	cpi	r28, 0x9D	; 157
					lcd_newLine();
    1aba:	f1 e0       	ldi	r31, 0x01	; 1
    1abc:	df 07       	cpc	r29, r31
					lcd_writeString(">2.2.Automat [ ]");
    1abe:	89 f7       	brne	.-30     	; 0x1aa2 <lcd_displayMenu+0x94e>
    1ac0:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1ac4:	17 da       	rcall	.-3026   	; 0xef4 <lcd_clearDisplay>
					break;
    1ac6:	89 e0       	ldi	r24, 0x09	; 9
    1ac8:	92 e0       	ldi	r25, 0x02	; 2
				case FALSE:
					lcd_writeString(" 2.1.Manual [ ]");
    1aca:	f6 da       	rcall	.-2580   	; 0x10b8 <lcd_writeString>
    1acc:	c0 e9       	ldi	r28, 0x90	; 144
    1ace:	d1 e0       	ldi	r29, 0x01	; 1
    1ad0:	07 e5       	ldi	r16, 0x57	; 87
					lcd_newLine();
    1ad2:	13 e0       	ldi	r17, 0x03	; 3
					lcd_writeString(">2.2.Automat [x]");
    1ad4:	f8 01       	movw	r30, r16
    1ad6:	80 85       	ldd	r24, Z+8	; 0x08
					break;
    1ad8:	81 30       	cpi	r24, 0x01	; 1
    1ada:	21 f4       	brne	.+8      	; 0x1ae4 <lcd_displayMenu+0x990>
				default:
					break;
			}
			break;
		case 0x3100:
			temperatureVoltage = adc_singleRead(0);
    1adc:	ce 01       	movw	r24, r28
    1ade:	19 d9       	rcall	.-3534   	; 0xd12 <eeprom_read>
    1ae0:	ce da       	rcall	.-2660   	; 0x107e <lcd_writeChar>
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <lcd_displayMenu+0x994>
    1ae4:	80 e2       	ldi	r24, 0x20	; 32
    1ae6:	cb da       	rcall	.-2666   	; 0x107e <lcd_writeChar>
			lcd_displayTemperature(temperatureVoltage);
    1ae8:	21 96       	adiw	r28, 0x01	; 1
    1aea:	cd 39       	cpi	r28, 0x9D	; 157
			break;
    1aec:	f1 e0       	ldi	r31, 0x01	; 1
    1aee:	df 07       	cpc	r29, r31
		case 0x4100:
			lcd_clearDisplay();
    1af0:	89 f7       	brne	.-30     	; 0x1ad4 <lcd_displayMenu+0x980>
    1af2:	aa da       	rcall	.-2732   	; 0x1048 <lcd_newLine>
			lcd_writeString(">4.1.");
    1af4:	8d e0       	ldi	r24, 0x0D	; 13
    1af6:	92 e0       	ldi	r25, 0x02	; 2
    1af8:	df da       	rcall	.-2626   	; 0x10b8 <lcd_writeString>
    1afa:	c0 ea       	ldi	r28, 0xA0	; 160
			if(eventVector[0] == 1){
    1afc:	d1 e0       	ldi	r29, 0x01	; 1
    1afe:	07 e5       	ldi	r16, 0x57	; 87
    1b00:	13 e0       	ldi	r17, 0x03	; 3
    1b02:	f8 01       	movw	r30, r16
				hour = eeprom_read(0x210);
    1b04:	81 85       	ldd	r24, Z+9	; 0x09
    1b06:	81 30       	cpi	r24, 0x01	; 1
    1b08:	21 f4       	brne	.+8      	; 0x1b12 <lcd_displayMenu+0x9be>
    1b0a:	ce 01       	movw	r24, r28
				minute = eeprom_read(0x211);
    1b0c:	02 d9       	rcall	.-3580   	; 0xd12 <eeprom_read>
    1b0e:	b7 da       	rcall	.-2706   	; 0x107e <lcd_writeChar>
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <lcd_displayMenu+0x9c2>
    1b12:	80 e2       	ldi	r24, 0x20	; 32
    1b14:	b4 da       	rcall	.-2712   	; 0x107e <lcd_writeChar>
				day = eeprom_read(0x212);
    1b16:	21 96       	adiw	r28, 0x01	; 1
    1b18:	cd 3a       	cpi	r28, 0xAD	; 173
    1b1a:	f1 e0       	ldi	r31, 0x01	; 1
    1b1c:	df 07       	cpc	r29, r31
    1b1e:	89 f7       	brne	.-30     	; 0x1b02 <lcd_displayMenu+0x9ae>
				month = eeprom_read(0x213);
    1b20:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1b24:	e7 d9       	rcall	.-3122   	; 0xef4 <lcd_clearDisplay>
    1b26:	89 eb       	ldi	r24, 0xB9	; 185
    1b28:	91 e0       	ldi	r25, 0x01	; 1
    1b2a:	c6 da       	rcall	.-2676   	; 0x10b8 <lcd_writeString>
				lcd_writeChar((hour / 10) + 48);
    1b2c:	8d da       	rcall	.-2790   	; 0x1048 <lcd_newLine>
    1b2e:	8b e2       	ldi	r24, 0x2B	; 43
    1b30:	92 e0       	ldi	r25, 0x02	; 2
    1b32:	c2 da       	rcall	.-2684   	; 0x10b8 <lcd_writeString>
    1b34:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1b38:	dd d9       	rcall	.-3142   	; 0xef4 <lcd_clearDisplay>
    1b3a:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <manualMode>
				lcd_writeChar((hour % 10) + 48);
    1b3e:	88 23       	and	r24, r24
    1b40:	69 f0       	breq	.+26     	; 0x1b5c <lcd_displayMenu+0xa08>
    1b42:	81 30       	cpi	r24, 0x01	; 1
    1b44:	11 f0       	breq	.+4      	; 0x1b4a <lcd_displayMenu+0x9f6>
    1b46:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1b4a:	89 e3       	ldi	r24, 0x39	; 57
    1b4c:	92 e0       	ldi	r25, 0x02	; 2
    1b4e:	b4 da       	rcall	.-2712   	; 0x10b8 <lcd_writeString>
    1b50:	7b da       	rcall	.-2826   	; 0x1048 <lcd_newLine>
    1b52:	89 e4       	ldi	r24, 0x49	; 73
    1b54:	92 e0       	ldi	r25, 0x02	; 2
    1b56:	b0 da       	rcall	.-2720   	; 0x10b8 <lcd_writeString>
    1b58:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
				lcd_writeChar(':');
    1b5c:	8a e5       	ldi	r24, 0x5A	; 90
    1b5e:	92 e0       	ldi	r25, 0x02	; 2
    1b60:	ab da       	rcall	.-2730   	; 0x10b8 <lcd_writeString>
				lcd_writeChar((minute / 10) + 48);
    1b62:	72 da       	rcall	.-2844   	; 0x1048 <lcd_newLine>
    1b64:	8a e6       	ldi	r24, 0x6A	; 106
    1b66:	92 e0       	ldi	r25, 0x02	; 2
    1b68:	a7 da       	rcall	.-2738   	; 0x10b8 <lcd_writeString>
    1b6a:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1b6e:	c2 d9       	rcall	.-3196   	; 0xef4 <lcd_clearDisplay>
    1b70:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <manualMode>
    1b74:	88 23       	and	r24, r24
    1b76:	69 f0       	breq	.+26     	; 0x1b92 <lcd_displayMenu+0xa3e>
				lcd_writeChar((minute % 10) + 48);
    1b78:	81 30       	cpi	r24, 0x01	; 1
    1b7a:	11 f0       	breq	.+4      	; 0x1b80 <lcd_displayMenu+0xa2c>
    1b7c:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1b80:	8b e7       	ldi	r24, 0x7B	; 123
    1b82:	92 e0       	ldi	r25, 0x02	; 2
    1b84:	99 da       	rcall	.-2766   	; 0x10b8 <lcd_writeString>
    1b86:	60 da       	rcall	.-2880   	; 0x1048 <lcd_newLine>
    1b88:	8b e8       	ldi	r24, 0x8B	; 139
    1b8a:	92 e0       	ldi	r25, 0x02	; 2
    1b8c:	95 da       	rcall	.-2774   	; 0x10b8 <lcd_writeString>
    1b8e:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1b92:	8c e9       	ldi	r24, 0x9C	; 156
    1b94:	92 e0       	ldi	r25, 0x02	; 2
    1b96:	90 da       	rcall	.-2784   	; 0x10b8 <lcd_writeString>
				lcd_writeChar(' ');
    1b98:	57 da       	rcall	.-2898   	; 0x1048 <lcd_newLine>
    1b9a:	8c ea       	ldi	r24, 0xAC	; 172
    1b9c:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((day / 10) + 48);
    1b9e:	8c da       	rcall	.-2792   	; 0x10b8 <lcd_writeString>
    1ba0:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	6d d8       	rcall	.-3878   	; 0xc82 <adc_singleRead>
    1ba8:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <temperatureVoltage+0x1>
    1bac:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <temperatureVoltage>
				lcd_writeChar((day % 10) + 48);
    1bb0:	9f da       	rcall	.-2754   	; 0x10f0 <lcd_displayTemperature>
    1bb2:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1bb6:	9e d9       	rcall	.-3268   	; 0xef4 <lcd_clearDisplay>
    1bb8:	8d eb       	ldi	r24, 0xBD	; 189
    1bba:	92 e0       	ldi	r25, 0x02	; 2
    1bbc:	7d da       	rcall	.-2822   	; 0x10b8 <lcd_writeString>
    1bbe:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <eventVector>
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	09 f0       	breq	.+2      	; 0x1bc8 <lcd_displayMenu+0xa74>
    1bc6:	84 c0       	rjmp	.+264    	; 0x1cd0 <lcd_displayMenu+0xb7c>
    1bc8:	80 e1       	ldi	r24, 0x10	; 16
    1bca:	92 e0       	ldi	r25, 0x02	; 2
    1bcc:	a2 d8       	rcall	.-3772   	; 0xd12 <eeprom_read>
    1bce:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
				lcd_writeChar('/');
    1bd2:	81 e1       	ldi	r24, 0x11	; 17
    1bd4:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((month / 10) + 48);
    1bd6:	9d d8       	rcall	.-3782   	; 0xd12 <eeprom_read>
    1bd8:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
    1bdc:	82 e1       	ldi	r24, 0x12	; 18
    1bde:	92 e0       	ldi	r25, 0x02	; 2
    1be0:	98 d8       	rcall	.-3792   	; 0xd12 <eeprom_read>
    1be2:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
    1be6:	83 e1       	ldi	r24, 0x13	; 19
				lcd_writeChar((month % 10) + 48);
    1be8:	92 e0       	ldi	r25, 0x02	; 2
    1bea:	93 d8       	rcall	.-3802   	; 0xd12 <eeprom_read>
    1bec:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    1bf0:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    1bf4:	cd ec       	ldi	r28, 0xCD	; 205
    1bf6:	8c 9f       	mul	r24, r28
    1bf8:	81 2d       	mov	r24, r1
    1bfa:	11 24       	eor	r1, r1
    1bfc:	86 95       	lsr	r24
    1bfe:	86 95       	lsr	r24
    1c00:	86 95       	lsr	r24
    1c02:	80 5d       	subi	r24, 0xD0	; 208
    1c04:	3c da       	rcall	.-2952   	; 0x107e <lcd_writeChar>
    1c06:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
			}
			else{
				lcd_writeString("           ");
    1c0a:	8c 9f       	mul	r24, r28
    1c0c:	91 2d       	mov	r25, r1
    1c0e:	11 24       	eor	r1, r1
			}
			lcd_newLine();
			lcd_writeString(" 4.2.");
    1c10:	96 95       	lsr	r25
    1c12:	96 95       	lsr	r25
    1c14:	96 95       	lsr	r25
			if(eventVector[1] == 1){
    1c16:	99 0f       	add	r25, r25
    1c18:	29 2f       	mov	r18, r25
    1c1a:	22 0f       	add	r18, r18
    1c1c:	22 0f       	add	r18, r18
    1c1e:	92 0f       	add	r25, r18
				hour = eeprom_read(0x220);
    1c20:	89 1b       	sub	r24, r25
    1c22:	80 5d       	subi	r24, 0xD0	; 208
    1c24:	2c da       	rcall	.-2984   	; 0x107e <lcd_writeChar>
    1c26:	8a e3       	ldi	r24, 0x3A	; 58
    1c28:	2a da       	rcall	.-2988   	; 0x107e <lcd_writeChar>
				minute = eeprom_read(0x221);
    1c2a:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    1c2e:	8c 9f       	mul	r24, r28
    1c30:	81 2d       	mov	r24, r1
    1c32:	11 24       	eor	r1, r1
    1c34:	86 95       	lsr	r24
				day = eeprom_read(0x222);
    1c36:	86 95       	lsr	r24
    1c38:	86 95       	lsr	r24
    1c3a:	80 5d       	subi	r24, 0xD0	; 208
    1c3c:	20 da       	rcall	.-3008   	; 0x107e <lcd_writeChar>
    1c3e:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
				month = eeprom_read(0x223);
    1c42:	8c 9f       	mul	r24, r28
    1c44:	91 2d       	mov	r25, r1
    1c46:	11 24       	eor	r1, r1
				lcd_writeChar((hour / 10) + 48);
    1c48:	96 95       	lsr	r25
    1c4a:	96 95       	lsr	r25
    1c4c:	96 95       	lsr	r25
    1c4e:	99 0f       	add	r25, r25
    1c50:	29 2f       	mov	r18, r25
    1c52:	22 0f       	add	r18, r18
    1c54:	22 0f       	add	r18, r18
    1c56:	92 0f       	add	r25, r18
    1c58:	89 1b       	sub	r24, r25
    1c5a:	80 5d       	subi	r24, 0xD0	; 208
    1c5c:	10 da       	rcall	.-3040   	; 0x107e <lcd_writeChar>
				lcd_writeChar((hour % 10) + 48);
    1c5e:	80 e2       	ldi	r24, 0x20	; 32
    1c60:	0e da       	rcall	.-3044   	; 0x107e <lcd_writeChar>
    1c62:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    1c66:	8c 9f       	mul	r24, r28
    1c68:	81 2d       	mov	r24, r1
    1c6a:	11 24       	eor	r1, r1
    1c6c:	86 95       	lsr	r24
    1c6e:	86 95       	lsr	r24
    1c70:	86 95       	lsr	r24
    1c72:	80 5d       	subi	r24, 0xD0	; 208
    1c74:	04 da       	rcall	.-3064   	; 0x107e <lcd_writeChar>
    1c76:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    1c7a:	8c 9f       	mul	r24, r28
    1c7c:	91 2d       	mov	r25, r1
    1c7e:	11 24       	eor	r1, r1
				lcd_writeChar(':');
    1c80:	96 95       	lsr	r25
    1c82:	96 95       	lsr	r25
    1c84:	96 95       	lsr	r25
				lcd_writeChar((minute / 10) + 48);
    1c86:	99 0f       	add	r25, r25
    1c88:	29 2f       	mov	r18, r25
    1c8a:	22 0f       	add	r18, r18
    1c8c:	22 0f       	add	r18, r18
    1c8e:	92 0f       	add	r25, r18
    1c90:	89 1b       	sub	r24, r25
    1c92:	80 5d       	subi	r24, 0xD0	; 208
    1c94:	f4 d9       	rcall	.-3096   	; 0x107e <lcd_writeChar>
    1c96:	8f e2       	ldi	r24, 0x2F	; 47
    1c98:	f2 d9       	rcall	.-3100   	; 0x107e <lcd_writeChar>
				lcd_writeChar((minute % 10) + 48);
    1c9a:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    1c9e:	8c 9f       	mul	r24, r28
    1ca0:	81 2d       	mov	r24, r1
    1ca2:	11 24       	eor	r1, r1
    1ca4:	86 95       	lsr	r24
    1ca6:	86 95       	lsr	r24
    1ca8:	86 95       	lsr	r24
    1caa:	80 5d       	subi	r24, 0xD0	; 208
    1cac:	e8 d9       	rcall	.-3120   	; 0x107e <lcd_writeChar>
    1cae:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    1cb2:	8c 9f       	mul	r24, r28
    1cb4:	91 2d       	mov	r25, r1
    1cb6:	11 24       	eor	r1, r1
				lcd_writeChar(' ');
    1cb8:	96 95       	lsr	r25
    1cba:	96 95       	lsr	r25
    1cbc:	96 95       	lsr	r25
				lcd_writeChar((day / 10) + 48);
    1cbe:	99 0f       	add	r25, r25
    1cc0:	29 2f       	mov	r18, r25
    1cc2:	22 0f       	add	r18, r18
    1cc4:	22 0f       	add	r18, r18
    1cc6:	92 0f       	add	r25, r18
    1cc8:	89 1b       	sub	r24, r25
    1cca:	80 5d       	subi	r24, 0xD0	; 208
    1ccc:	d8 d9       	rcall	.-3152   	; 0x107e <lcd_writeChar>
    1cce:	03 c0       	rjmp	.+6      	; 0x1cd6 <lcd_displayMenu+0xb82>
    1cd0:	83 ec       	ldi	r24, 0xC3	; 195
				lcd_writeChar((day % 10) + 48);
    1cd2:	92 e0       	ldi	r25, 0x02	; 2
    1cd4:	f1 d9       	rcall	.-3102   	; 0x10b8 <lcd_writeString>
    1cd6:	b8 d9       	rcall	.-3216   	; 0x1048 <lcd_newLine>
    1cd8:	8f ec       	ldi	r24, 0xCF	; 207
    1cda:	92 e0       	ldi	r25, 0x02	; 2
    1cdc:	ed d9       	rcall	.-3110   	; 0x10b8 <lcd_writeString>
    1cde:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <eventVector+0x1>
    1ce2:	81 30       	cpi	r24, 0x01	; 1
    1ce4:	09 f0       	breq	.+2      	; 0x1ce8 <lcd_displayMenu+0xb94>
    1ce6:	85 c0       	rjmp	.+266    	; 0x1df2 <lcd_displayMenu+0xc9e>
    1ce8:	80 e2       	ldi	r24, 0x20	; 32
    1cea:	92 e0       	ldi	r25, 0x02	; 2
    1cec:	12 d8       	rcall	.-4060   	; 0xd12 <eeprom_read>
    1cee:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
				lcd_writeChar('/');
    1cf2:	81 e2       	ldi	r24, 0x21	; 33
				lcd_writeChar((month / 10) + 48);
    1cf4:	92 e0       	ldi	r25, 0x02	; 2
    1cf6:	0d d8       	rcall	.-4070   	; 0xd12 <eeprom_read>
    1cf8:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
    1cfc:	82 e2       	ldi	r24, 0x22	; 34
    1cfe:	92 e0       	ldi	r25, 0x02	; 2
    1d00:	08 d8       	rcall	.-4080   	; 0xd12 <eeprom_read>
    1d02:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
    1d06:	83 e2       	ldi	r24, 0x23	; 35
    1d08:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((month % 10) + 48);
    1d0a:	03 d8       	rcall	.-4090   	; 0xd12 <eeprom_read>
    1d0c:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    1d10:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    1d14:	cd ec       	ldi	r28, 0xCD	; 205
    1d16:	8c 9f       	mul	r24, r28
    1d18:	81 2d       	mov	r24, r1
    1d1a:	11 24       	eor	r1, r1
    1d1c:	86 95       	lsr	r24
    1d1e:	86 95       	lsr	r24
    1d20:	86 95       	lsr	r24
    1d22:	80 5d       	subi	r24, 0xD0	; 208
    1d24:	ac d9       	rcall	.-3240   	; 0x107e <lcd_writeChar>
    1d26:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
			}
			else{
				lcd_writeString("           ");
    1d2a:	8c 9f       	mul	r24, r28
    1d2c:	91 2d       	mov	r25, r1
    1d2e:	11 24       	eor	r1, r1
    1d30:	96 95       	lsr	r25
    1d32:	96 95       	lsr	r25
    1d34:	96 95       	lsr	r25
			}
			break;
		case 0x4200:
			lcd_clearDisplay();
    1d36:	99 0f       	add	r25, r25
    1d38:	29 2f       	mov	r18, r25
			lcd_writeString(" 4.1.");
    1d3a:	22 0f       	add	r18, r18
    1d3c:	22 0f       	add	r18, r18
    1d3e:	92 0f       	add	r25, r18
    1d40:	89 1b       	sub	r24, r25
			if(eventVector[0] == 1){
    1d42:	80 5d       	subi	r24, 0xD0	; 208
    1d44:	9c d9       	rcall	.-3272   	; 0x107e <lcd_writeChar>
    1d46:	8a e3       	ldi	r24, 0x3A	; 58
    1d48:	9a d9       	rcall	.-3276   	; 0x107e <lcd_writeChar>
				hour = eeprom_read(0x210);
    1d4a:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    1d4e:	8c 9f       	mul	r24, r28
    1d50:	81 2d       	mov	r24, r1
    1d52:	11 24       	eor	r1, r1
				minute = eeprom_read(0x211);
    1d54:	86 95       	lsr	r24
    1d56:	86 95       	lsr	r24
    1d58:	86 95       	lsr	r24
    1d5a:	80 5d       	subi	r24, 0xD0	; 208
    1d5c:	90 d9       	rcall	.-3296   	; 0x107e <lcd_writeChar>
				day = eeprom_read(0x212);
    1d5e:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    1d62:	8c 9f       	mul	r24, r28
    1d64:	91 2d       	mov	r25, r1
    1d66:	11 24       	eor	r1, r1
    1d68:	96 95       	lsr	r25
				month = eeprom_read(0x213);
    1d6a:	96 95       	lsr	r25
    1d6c:	96 95       	lsr	r25
    1d6e:	99 0f       	add	r25, r25
    1d70:	29 2f       	mov	r18, r25
    1d72:	22 0f       	add	r18, r18
    1d74:	22 0f       	add	r18, r18
				lcd_writeChar((hour / 10) + 48);
    1d76:	92 0f       	add	r25, r18
    1d78:	89 1b       	sub	r24, r25
    1d7a:	80 5d       	subi	r24, 0xD0	; 208
    1d7c:	80 d9       	rcall	.-3328   	; 0x107e <lcd_writeChar>
    1d7e:	80 e2       	ldi	r24, 0x20	; 32
    1d80:	7e d9       	rcall	.-3332   	; 0x107e <lcd_writeChar>
    1d82:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    1d86:	8c 9f       	mul	r24, r28
    1d88:	81 2d       	mov	r24, r1
    1d8a:	11 24       	eor	r1, r1
    1d8c:	86 95       	lsr	r24
				lcd_writeChar((hour % 10) + 48);
    1d8e:	86 95       	lsr	r24
    1d90:	86 95       	lsr	r24
    1d92:	80 5d       	subi	r24, 0xD0	; 208
    1d94:	74 d9       	rcall	.-3352   	; 0x107e <lcd_writeChar>
    1d96:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    1d9a:	8c 9f       	mul	r24, r28
    1d9c:	91 2d       	mov	r25, r1
    1d9e:	11 24       	eor	r1, r1
    1da0:	96 95       	lsr	r25
    1da2:	96 95       	lsr	r25
    1da4:	96 95       	lsr	r25
    1da6:	99 0f       	add	r25, r25
    1da8:	29 2f       	mov	r18, r25
    1daa:	22 0f       	add	r18, r18
    1dac:	22 0f       	add	r18, r18
    1dae:	92 0f       	add	r25, r18
				lcd_writeChar(':');
    1db0:	89 1b       	sub	r24, r25
    1db2:	80 5d       	subi	r24, 0xD0	; 208
    1db4:	64 d9       	rcall	.-3384   	; 0x107e <lcd_writeChar>
				lcd_writeChar((minute / 10) + 48);
    1db6:	8f e2       	ldi	r24, 0x2F	; 47
    1db8:	62 d9       	rcall	.-3388   	; 0x107e <lcd_writeChar>
    1dba:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    1dbe:	8c 9f       	mul	r24, r28
    1dc0:	81 2d       	mov	r24, r1
    1dc2:	11 24       	eor	r1, r1
    1dc4:	86 95       	lsr	r24
    1dc6:	86 95       	lsr	r24
    1dc8:	86 95       	lsr	r24
    1dca:	80 5d       	subi	r24, 0xD0	; 208
				lcd_writeChar((minute % 10) + 48);
    1dcc:	58 d9       	rcall	.-3408   	; 0x107e <lcd_writeChar>
    1dce:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    1dd2:	8c 9f       	mul	r24, r28
    1dd4:	91 2d       	mov	r25, r1
    1dd6:	11 24       	eor	r1, r1
    1dd8:	96 95       	lsr	r25
    1dda:	96 95       	lsr	r25
    1ddc:	96 95       	lsr	r25
    1dde:	99 0f       	add	r25, r25
    1de0:	29 2f       	mov	r18, r25
    1de2:	22 0f       	add	r18, r18
    1de4:	22 0f       	add	r18, r18
    1de6:	92 0f       	add	r25, r18
    1de8:	89 1b       	sub	r24, r25
    1dea:	80 5d       	subi	r24, 0xD0	; 208
    1dec:	48 d9       	rcall	.-3440   	; 0x107e <lcd_writeChar>
				lcd_writeChar(' ');
    1dee:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1df2:	83 ec       	ldi	r24, 0xC3	; 195
				lcd_writeChar((day / 10) + 48);
    1df4:	92 e0       	ldi	r25, 0x02	; 2
    1df6:	60 d9       	rcall	.-3392   	; 0x10b8 <lcd_writeString>
    1df8:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    1dfc:	7b d8       	rcall	.-3850   	; 0xef4 <lcd_clearDisplay>
    1dfe:	85 ed       	ldi	r24, 0xD5	; 213
    1e00:	92 e0       	ldi	r25, 0x02	; 2
    1e02:	5a d9       	rcall	.-3404   	; 0x10b8 <lcd_writeString>
    1e04:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <eventVector>
    1e08:	81 30       	cpi	r24, 0x01	; 1
				lcd_writeChar((day % 10) + 48);
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <lcd_displayMenu+0xcba>
    1e0c:	88 c0       	rjmp	.+272    	; 0x1f1e <lcd_displayMenu+0xdca>
    1e0e:	80 e1       	ldi	r24, 0x10	; 16
    1e10:	92 e0       	ldi	r25, 0x02	; 2
    1e12:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    1e16:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
    1e1a:	81 e1       	ldi	r24, 0x11	; 17
    1e1c:	92 e0       	ldi	r25, 0x02	; 2
    1e1e:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    1e22:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
    1e26:	82 e1       	ldi	r24, 0x12	; 18
    1e28:	92 e0       	ldi	r25, 0x02	; 2
    1e2a:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
				lcd_writeChar('/');
    1e2e:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
				lcd_writeChar((month / 10) + 48);
    1e32:	83 e1       	ldi	r24, 0x13	; 19
    1e34:	92 e0       	ldi	r25, 0x02	; 2
    1e36:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    1e3a:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    1e3e:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    1e42:	cd ec       	ldi	r28, 0xCD	; 205
    1e44:	8c 9f       	mul	r24, r28
    1e46:	81 2d       	mov	r24, r1
				lcd_writeChar((month % 10) + 48);
    1e48:	11 24       	eor	r1, r1
    1e4a:	86 95       	lsr	r24
    1e4c:	86 95       	lsr	r24
    1e4e:	86 95       	lsr	r24
    1e50:	80 5d       	subi	r24, 0xD0	; 208
    1e52:	15 d9       	rcall	.-3542   	; 0x107e <lcd_writeChar>
    1e54:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    1e58:	8c 9f       	mul	r24, r28
    1e5a:	91 2d       	mov	r25, r1
    1e5c:	11 24       	eor	r1, r1
    1e5e:	96 95       	lsr	r25
    1e60:	96 95       	lsr	r25
    1e62:	96 95       	lsr	r25
    1e64:	99 0f       	add	r25, r25
    1e66:	29 2f       	mov	r18, r25
    1e68:	22 0f       	add	r18, r18
    1e6a:	22 0f       	add	r18, r18
			}
			else{
				lcd_writeString("           ");
    1e6c:	92 0f       	add	r25, r18
    1e6e:	89 1b       	sub	r24, r25
    1e70:	80 5d       	subi	r24, 0xD0	; 208
    1e72:	05 d9       	rcall	.-3574   	; 0x107e <lcd_writeChar>
			}
			lcd_newLine();
    1e74:	8a e3       	ldi	r24, 0x3A	; 58
    1e76:	03 d9       	rcall	.-3578   	; 0x107e <lcd_writeChar>
			lcd_writeString(">4.2.");
    1e78:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    1e7c:	8c 9f       	mul	r24, r28
    1e7e:	81 2d       	mov	r24, r1
			if(eventVector[1] == 1){
    1e80:	11 24       	eor	r1, r1
    1e82:	86 95       	lsr	r24
    1e84:	86 95       	lsr	r24
    1e86:	86 95       	lsr	r24
    1e88:	80 5d       	subi	r24, 0xD0	; 208
				hour = eeprom_read(0x220);
    1e8a:	f9 d8       	rcall	.-3598   	; 0x107e <lcd_writeChar>
    1e8c:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    1e90:	8c 9f       	mul	r24, r28
    1e92:	91 2d       	mov	r25, r1
    1e94:	11 24       	eor	r1, r1
				minute = eeprom_read(0x221);
    1e96:	96 95       	lsr	r25
    1e98:	96 95       	lsr	r25
    1e9a:	96 95       	lsr	r25
    1e9c:	99 0f       	add	r25, r25
    1e9e:	29 2f       	mov	r18, r25
    1ea0:	22 0f       	add	r18, r18
				day = eeprom_read(0x222);
    1ea2:	22 0f       	add	r18, r18
    1ea4:	92 0f       	add	r25, r18
    1ea6:	89 1b       	sub	r24, r25
    1ea8:	80 5d       	subi	r24, 0xD0	; 208
    1eaa:	e9 d8       	rcall	.-3630   	; 0x107e <lcd_writeChar>
    1eac:	80 e2       	ldi	r24, 0x20	; 32
				month = eeprom_read(0x223);
    1eae:	e7 d8       	rcall	.-3634   	; 0x107e <lcd_writeChar>
    1eb0:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    1eb4:	8c 9f       	mul	r24, r28
    1eb6:	81 2d       	mov	r24, r1
    1eb8:	11 24       	eor	r1, r1
				lcd_writeChar((hour / 10) + 48);
    1eba:	86 95       	lsr	r24
    1ebc:	86 95       	lsr	r24
    1ebe:	86 95       	lsr	r24
    1ec0:	80 5d       	subi	r24, 0xD0	; 208
    1ec2:	dd d8       	rcall	.-3654   	; 0x107e <lcd_writeChar>
    1ec4:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    1ec8:	8c 9f       	mul	r24, r28
    1eca:	91 2d       	mov	r25, r1
    1ecc:	11 24       	eor	r1, r1
    1ece:	96 95       	lsr	r25
    1ed0:	96 95       	lsr	r25
				lcd_writeChar((hour % 10) + 48);
    1ed2:	96 95       	lsr	r25
    1ed4:	99 0f       	add	r25, r25
    1ed6:	29 2f       	mov	r18, r25
    1ed8:	22 0f       	add	r18, r18
    1eda:	22 0f       	add	r18, r18
    1edc:	92 0f       	add	r25, r18
    1ede:	89 1b       	sub	r24, r25
    1ee0:	80 5d       	subi	r24, 0xD0	; 208
    1ee2:	cd d8       	rcall	.-3686   	; 0x107e <lcd_writeChar>
    1ee4:	8f e2       	ldi	r24, 0x2F	; 47
    1ee6:	cb d8       	rcall	.-3690   	; 0x107e <lcd_writeChar>
    1ee8:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    1eec:	8c 9f       	mul	r24, r28
    1eee:	81 2d       	mov	r24, r1
    1ef0:	11 24       	eor	r1, r1
    1ef2:	86 95       	lsr	r24
				lcd_writeChar(':');
    1ef4:	86 95       	lsr	r24
    1ef6:	86 95       	lsr	r24
    1ef8:	80 5d       	subi	r24, 0xD0	; 208
				lcd_writeChar((minute / 10) + 48);
    1efa:	c1 d8       	rcall	.-3710   	; 0x107e <lcd_writeChar>
    1efc:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    1f00:	8c 9f       	mul	r24, r28
    1f02:	91 2d       	mov	r25, r1
    1f04:	11 24       	eor	r1, r1
    1f06:	96 95       	lsr	r25
    1f08:	96 95       	lsr	r25
    1f0a:	96 95       	lsr	r25
    1f0c:	99 0f       	add	r25, r25
    1f0e:	29 2f       	mov	r18, r25
				lcd_writeChar((minute % 10) + 48);
    1f10:	22 0f       	add	r18, r18
    1f12:	22 0f       	add	r18, r18
    1f14:	92 0f       	add	r25, r18
    1f16:	89 1b       	sub	r24, r25
    1f18:	80 5d       	subi	r24, 0xD0	; 208
    1f1a:	b1 d8       	rcall	.-3742   	; 0x107e <lcd_writeChar>
    1f1c:	03 c0       	rjmp	.+6      	; 0x1f24 <lcd_displayMenu+0xdd0>
    1f1e:	83 ec       	ldi	r24, 0xC3	; 195
    1f20:	92 e0       	ldi	r25, 0x02	; 2
    1f22:	ca d8       	rcall	.-3692   	; 0x10b8 <lcd_writeString>
    1f24:	91 d8       	rcall	.-3806   	; 0x1048 <lcd_newLine>
    1f26:	8b ed       	ldi	r24, 0xDB	; 219
    1f28:	92 e0       	ldi	r25, 0x02	; 2
    1f2a:	c6 d8       	rcall	.-3700   	; 0x10b8 <lcd_writeString>
    1f2c:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <eventVector+0x1>
    1f30:	81 30       	cpi	r24, 0x01	; 1
				lcd_writeChar(' ');
    1f32:	09 f0       	breq	.+2      	; 0x1f36 <lcd_displayMenu+0xde2>
    1f34:	89 c0       	rjmp	.+274    	; 0x2048 <lcd_displayMenu+0xef4>
    1f36:	80 e2       	ldi	r24, 0x20	; 32
				lcd_writeChar((day / 10) + 48);
    1f38:	92 e0       	ldi	r25, 0x02	; 2
    1f3a:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    1f3e:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
    1f42:	81 e2       	ldi	r24, 0x21	; 33
    1f44:	92 e0       	ldi	r25, 0x02	; 2
    1f46:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    1f4a:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
				lcd_writeChar((day % 10) + 48);
    1f4e:	82 e2       	ldi	r24, 0x22	; 34
    1f50:	92 e0       	ldi	r25, 0x02	; 2
    1f52:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    1f56:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
    1f5a:	83 e2       	ldi	r24, 0x23	; 35
    1f5c:	92 e0       	ldi	r25, 0x02	; 2
    1f5e:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    1f62:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    1f66:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    1f6a:	cd ec       	ldi	r28, 0xCD	; 205
    1f6c:	8c 9f       	mul	r24, r28
    1f6e:	81 2d       	mov	r24, r1
				lcd_writeChar('/');
    1f70:	11 24       	eor	r1, r1
    1f72:	86 95       	lsr	r24
    1f74:	86 95       	lsr	r24
				lcd_writeChar((month / 10) + 48);
    1f76:	86 95       	lsr	r24
    1f78:	80 5d       	subi	r24, 0xD0	; 208
    1f7a:	81 d8       	rcall	.-3838   	; 0x107e <lcd_writeChar>
    1f7c:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    1f80:	8c 9f       	mul	r24, r28
    1f82:	91 2d       	mov	r25, r1
    1f84:	11 24       	eor	r1, r1
    1f86:	96 95       	lsr	r25
    1f88:	96 95       	lsr	r25
    1f8a:	96 95       	lsr	r25
				lcd_writeChar((month % 10) + 48);
    1f8c:	99 0f       	add	r25, r25
    1f8e:	29 2f       	mov	r18, r25
    1f90:	22 0f       	add	r18, r18
    1f92:	22 0f       	add	r18, r18
    1f94:	92 0f       	add	r25, r18
    1f96:	89 1b       	sub	r24, r25
    1f98:	80 5d       	subi	r24, 0xD0	; 208
    1f9a:	71 d8       	rcall	.-3870   	; 0x107e <lcd_writeChar>
    1f9c:	8a e3       	ldi	r24, 0x3A	; 58
    1f9e:	6f d8       	rcall	.-3874   	; 0x107e <lcd_writeChar>
    1fa0:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    1fa4:	8c 9f       	mul	r24, r28
    1fa6:	81 2d       	mov	r24, r1
    1fa8:	11 24       	eor	r1, r1
    1faa:	86 95       	lsr	r24
    1fac:	86 95       	lsr	r24
    1fae:	86 95       	lsr	r24
    1fb0:	80 5d       	subi	r24, 0xD0	; 208
			}
			else{
				lcd_writeString("           ");
    1fb2:	65 d8       	rcall	.-3894   	; 0x107e <lcd_writeChar>
    1fb4:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    1fb8:	8c 9f       	mul	r24, r28
    1fba:	91 2d       	mov	r25, r1
    1fbc:	11 24       	eor	r1, r1
			}
			break;
		case 0x4300:
			lcd_clearDisplay();
    1fbe:	96 95       	lsr	r25
    1fc0:	96 95       	lsr	r25
			lcd_writeString(" 4.2.");
    1fc2:	96 95       	lsr	r25
    1fc4:	99 0f       	add	r25, r25
    1fc6:	29 2f       	mov	r18, r25
    1fc8:	22 0f       	add	r18, r18
			if(eventVector[1] == 1){
    1fca:	22 0f       	add	r18, r18
    1fcc:	92 0f       	add	r25, r18
    1fce:	89 1b       	sub	r24, r25
    1fd0:	80 5d       	subi	r24, 0xD0	; 208
    1fd2:	55 d8       	rcall	.-3926   	; 0x107e <lcd_writeChar>
				hour = eeprom_read(0x220);
    1fd4:	80 e2       	ldi	r24, 0x20	; 32
    1fd6:	53 d8       	rcall	.-3930   	; 0x107e <lcd_writeChar>
    1fd8:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    1fdc:	8c 9f       	mul	r24, r28
    1fde:	81 2d       	mov	r24, r1
				minute = eeprom_read(0x221);
    1fe0:	11 24       	eor	r1, r1
    1fe2:	86 95       	lsr	r24
    1fe4:	86 95       	lsr	r24
    1fe6:	86 95       	lsr	r24
    1fe8:	80 5d       	subi	r24, 0xD0	; 208
    1fea:	49 d8       	rcall	.-3950   	; 0x107e <lcd_writeChar>
				day = eeprom_read(0x222);
    1fec:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    1ff0:	8c 9f       	mul	r24, r28
    1ff2:	91 2d       	mov	r25, r1
    1ff4:	11 24       	eor	r1, r1
    1ff6:	96 95       	lsr	r25
				month = eeprom_read(0x223);
    1ff8:	96 95       	lsr	r25
    1ffa:	96 95       	lsr	r25
    1ffc:	99 0f       	add	r25, r25
    1ffe:	29 2f       	mov	r18, r25
    2000:	22 0f       	add	r18, r18
    2002:	22 0f       	add	r18, r18
				lcd_writeChar((hour / 10) + 48);
    2004:	92 0f       	add	r25, r18
    2006:	89 1b       	sub	r24, r25
    2008:	80 5d       	subi	r24, 0xD0	; 208
    200a:	39 d8       	rcall	.-3982   	; 0x107e <lcd_writeChar>
    200c:	8f e2       	ldi	r24, 0x2F	; 47
    200e:	37 d8       	rcall	.-3986   	; 0x107e <lcd_writeChar>
    2010:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    2014:	8c 9f       	mul	r24, r28
    2016:	81 2d       	mov	r24, r1
    2018:	11 24       	eor	r1, r1
    201a:	86 95       	lsr	r24
				lcd_writeChar((hour % 10) + 48);
    201c:	86 95       	lsr	r24
    201e:	86 95       	lsr	r24
    2020:	80 5d       	subi	r24, 0xD0	; 208
    2022:	2d d8       	rcall	.-4006   	; 0x107e <lcd_writeChar>
    2024:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    2028:	8c 9f       	mul	r24, r28
    202a:	91 2d       	mov	r25, r1
    202c:	11 24       	eor	r1, r1
    202e:	96 95       	lsr	r25
    2030:	96 95       	lsr	r25
    2032:	96 95       	lsr	r25
    2034:	99 0f       	add	r25, r25
    2036:	29 2f       	mov	r18, r25
    2038:	22 0f       	add	r18, r18
    203a:	22 0f       	add	r18, r18
    203c:	92 0f       	add	r25, r18
				lcd_writeChar(':');
    203e:	89 1b       	sub	r24, r25
    2040:	80 5d       	subi	r24, 0xD0	; 208
    2042:	1d d8       	rcall	.-4038   	; 0x107e <lcd_writeChar>
				lcd_writeChar((minute / 10) + 48);
    2044:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    2048:	83 ec       	ldi	r24, 0xC3	; 195
    204a:	92 e0       	ldi	r25, 0x02	; 2
    204c:	35 d8       	rcall	.-3990   	; 0x10b8 <lcd_writeString>
    204e:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    2052:	0e 94 7a 07 	call	0xef4	; 0xef4 <lcd_clearDisplay>
    2056:	8f ec       	ldi	r24, 0xCF	; 207
    2058:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((minute % 10) + 48);
    205a:	2e d8       	rcall	.-4004   	; 0x10b8 <lcd_writeString>
    205c:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <eventVector+0x1>
    2060:	81 30       	cpi	r24, 0x01	; 1
    2062:	09 f0       	breq	.+2      	; 0x2066 <lcd_displayMenu+0xf12>
    2064:	93 c0       	rjmp	.+294    	; 0x218c <lcd_displayMenu+0x1038>
    2066:	80 e2       	ldi	r24, 0x20	; 32
    2068:	92 e0       	ldi	r25, 0x02	; 2
    206a:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    206e:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
    2072:	81 e2       	ldi	r24, 0x21	; 33
    2074:	92 e0       	ldi	r25, 0x02	; 2
    2076:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    207a:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
				lcd_writeChar(' ');
    207e:	82 e2       	ldi	r24, 0x22	; 34
    2080:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((day / 10) + 48);
    2082:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2086:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
    208a:	83 e2       	ldi	r24, 0x23	; 35
    208c:	92 e0       	ldi	r25, 0x02	; 2
    208e:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2092:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    2096:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
				lcd_writeChar((day % 10) + 48);
    209a:	cd ec       	ldi	r28, 0xCD	; 205
    209c:	8c 9f       	mul	r24, r28
    209e:	81 2d       	mov	r24, r1
    20a0:	11 24       	eor	r1, r1
    20a2:	86 95       	lsr	r24
    20a4:	86 95       	lsr	r24
    20a6:	86 95       	lsr	r24
    20a8:	80 5d       	subi	r24, 0xD0	; 208
    20aa:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    20ae:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    20b2:	8c 9f       	mul	r24, r28
    20b4:	91 2d       	mov	r25, r1
    20b6:	11 24       	eor	r1, r1
    20b8:	96 95       	lsr	r25
				lcd_writeChar('/');
    20ba:	96 95       	lsr	r25
    20bc:	96 95       	lsr	r25
    20be:	99 0f       	add	r25, r25
				lcd_writeChar((month / 10) + 48);
    20c0:	29 2f       	mov	r18, r25
    20c2:	22 0f       	add	r18, r18
    20c4:	22 0f       	add	r18, r18
    20c6:	92 0f       	add	r25, r18
    20c8:	89 1b       	sub	r24, r25
    20ca:	80 5d       	subi	r24, 0xD0	; 208
    20cc:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    20d0:	8a e3       	ldi	r24, 0x3A	; 58
    20d2:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((month % 10) + 48);
    20d6:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    20da:	8c 9f       	mul	r24, r28
    20dc:	81 2d       	mov	r24, r1
    20de:	11 24       	eor	r1, r1
    20e0:	86 95       	lsr	r24
    20e2:	86 95       	lsr	r24
    20e4:	86 95       	lsr	r24
    20e6:	80 5d       	subi	r24, 0xD0	; 208
    20e8:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    20ec:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    20f0:	8c 9f       	mul	r24, r28
    20f2:	91 2d       	mov	r25, r1
    20f4:	11 24       	eor	r1, r1
    20f6:	96 95       	lsr	r25
    20f8:	96 95       	lsr	r25
			}
			else{
				lcd_writeString("           ");
    20fa:	96 95       	lsr	r25
    20fc:	99 0f       	add	r25, r25
    20fe:	29 2f       	mov	r18, r25
    2100:	22 0f       	add	r18, r18
			}
			lcd_newLine();
    2102:	22 0f       	add	r18, r18
    2104:	92 0f       	add	r25, r18
			lcd_writeString(">4.3.");
    2106:	89 1b       	sub	r24, r25
    2108:	80 5d       	subi	r24, 0xD0	; 208
    210a:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
			if(eventVector[2] == 1){
    210e:	80 e2       	ldi	r24, 0x20	; 32
    2110:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2114:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
				hour = eeprom_read(0x230);
    2118:	8c 9f       	mul	r24, r28
    211a:	81 2d       	mov	r24, r1
    211c:	11 24       	eor	r1, r1
    211e:	86 95       	lsr	r24
    2120:	86 95       	lsr	r24
    2122:	86 95       	lsr	r24
				minute = eeprom_read(0x231);
    2124:	80 5d       	subi	r24, 0xD0	; 208
    2126:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    212a:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    212e:	8c 9f       	mul	r24, r28
				day = eeprom_read(0x232);
    2130:	91 2d       	mov	r25, r1
    2132:	11 24       	eor	r1, r1
    2134:	96 95       	lsr	r25
    2136:	96 95       	lsr	r25
    2138:	96 95       	lsr	r25
    213a:	99 0f       	add	r25, r25
				month = eeprom_read(0x233);
    213c:	29 2f       	mov	r18, r25
    213e:	22 0f       	add	r18, r18
    2140:	22 0f       	add	r18, r18
    2142:	92 0f       	add	r25, r18
    2144:	89 1b       	sub	r24, r25
    2146:	80 5d       	subi	r24, 0xD0	; 208
				lcd_writeChar((hour / 10) + 48);
    2148:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    214c:	8f e2       	ldi	r24, 0x2F	; 47
    214e:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2152:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    2156:	8c 9f       	mul	r24, r28
    2158:	81 2d       	mov	r24, r1
    215a:	11 24       	eor	r1, r1
    215c:	86 95       	lsr	r24
    215e:	86 95       	lsr	r24
				lcd_writeChar((hour % 10) + 48);
    2160:	86 95       	lsr	r24
    2162:	80 5d       	subi	r24, 0xD0	; 208
    2164:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2168:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    216c:	8c 9f       	mul	r24, r28
    216e:	91 2d       	mov	r25, r1
    2170:	11 24       	eor	r1, r1
    2172:	96 95       	lsr	r25
    2174:	96 95       	lsr	r25
    2176:	96 95       	lsr	r25
    2178:	99 0f       	add	r25, r25
    217a:	29 2f       	mov	r18, r25
    217c:	22 0f       	add	r18, r18
    217e:	22 0f       	add	r18, r18
    2180:	92 0f       	add	r25, r18
				lcd_writeChar(':');
    2182:	89 1b       	sub	r24, r25
    2184:	80 5d       	subi	r24, 0xD0	; 208
    2186:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((minute / 10) + 48);
    218a:	04 c0       	rjmp	.+8      	; 0x2194 <lcd_displayMenu+0x1040>
    218c:	83 ec       	ldi	r24, 0xC3	; 195
    218e:	92 e0       	ldi	r25, 0x02	; 2
    2190:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
    2194:	0e 94 24 08 	call	0x1048	; 0x1048 <lcd_newLine>
    2198:	81 ee       	ldi	r24, 0xE1	; 225
    219a:	92 e0       	ldi	r25, 0x02	; 2
    219c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
				lcd_writeChar((minute % 10) + 48);
    21a0:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <eventVector+0x2>
    21a4:	81 30       	cpi	r24, 0x01	; 1
    21a6:	09 f0       	breq	.+2      	; 0x21aa <lcd_displayMenu+0x1056>
    21a8:	94 c0       	rjmp	.+296    	; 0x22d2 <lcd_displayMenu+0x117e>
    21aa:	80 e3       	ldi	r24, 0x30	; 48
    21ac:	92 e0       	ldi	r25, 0x02	; 2
    21ae:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    21b2:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
    21b6:	81 e3       	ldi	r24, 0x31	; 49
    21b8:	92 e0       	ldi	r25, 0x02	; 2
    21ba:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    21be:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
				lcd_writeChar(' ');
    21c2:	82 e3       	ldi	r24, 0x32	; 50
    21c4:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((day / 10) + 48);
    21c6:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    21ca:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
    21ce:	83 e3       	ldi	r24, 0x33	; 51
    21d0:	92 e0       	ldi	r25, 0x02	; 2
    21d2:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    21d6:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    21da:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
				lcd_writeChar((day % 10) + 48);
    21de:	cd ec       	ldi	r28, 0xCD	; 205
    21e0:	8c 9f       	mul	r24, r28
    21e2:	81 2d       	mov	r24, r1
    21e4:	11 24       	eor	r1, r1
    21e6:	86 95       	lsr	r24
    21e8:	86 95       	lsr	r24
    21ea:	86 95       	lsr	r24
    21ec:	80 5d       	subi	r24, 0xD0	; 208
    21ee:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    21f2:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    21f6:	8c 9f       	mul	r24, r28
    21f8:	91 2d       	mov	r25, r1
    21fa:	11 24       	eor	r1, r1
    21fc:	96 95       	lsr	r25
				lcd_writeChar('/');
    21fe:	96 95       	lsr	r25
    2200:	96 95       	lsr	r25
    2202:	99 0f       	add	r25, r25
				lcd_writeChar((month / 10) + 48);
    2204:	29 2f       	mov	r18, r25
    2206:	22 0f       	add	r18, r18
    2208:	22 0f       	add	r18, r18
    220a:	92 0f       	add	r25, r18
    220c:	89 1b       	sub	r24, r25
    220e:	80 5d       	subi	r24, 0xD0	; 208
    2210:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2214:	8a e3       	ldi	r24, 0x3A	; 58
    2216:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((month % 10) + 48);
    221a:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    221e:	8c 9f       	mul	r24, r28
    2220:	81 2d       	mov	r24, r1
    2222:	11 24       	eor	r1, r1
    2224:	86 95       	lsr	r24
    2226:	86 95       	lsr	r24
    2228:	86 95       	lsr	r24
    222a:	80 5d       	subi	r24, 0xD0	; 208
    222c:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2230:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    2234:	8c 9f       	mul	r24, r28
    2236:	91 2d       	mov	r25, r1
    2238:	11 24       	eor	r1, r1
    223a:	96 95       	lsr	r25
    223c:	96 95       	lsr	r25
    223e:	96 95       	lsr	r25
			}
			else{
				lcd_writeString("           ");
    2240:	99 0f       	add	r25, r25
    2242:	29 2f       	mov	r18, r25
    2244:	22 0f       	add	r18, r18
    2246:	22 0f       	add	r18, r18
    2248:	92 0f       	add	r25, r18
    224a:	89 1b       	sub	r24, r25
			}
			break;
		case 0x4400:
			lcd_clearDisplay();
    224c:	80 5d       	subi	r24, 0xD0	; 208
    224e:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
			lcd_writeString(" 4.3.");
    2252:	80 e2       	ldi	r24, 0x20	; 32
    2254:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
			if(eventVector[2] == 1){
    2258:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    225c:	8c 9f       	mul	r24, r28
    225e:	81 2d       	mov	r24, r1
    2260:	11 24       	eor	r1, r1
				hour = eeprom_read(0x230);
    2262:	86 95       	lsr	r24
    2264:	86 95       	lsr	r24
    2266:	86 95       	lsr	r24
    2268:	80 5d       	subi	r24, 0xD0	; 208
    226a:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				minute = eeprom_read(0x231);
    226e:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    2272:	8c 9f       	mul	r24, r28
    2274:	91 2d       	mov	r25, r1
    2276:	11 24       	eor	r1, r1
    2278:	96 95       	lsr	r25
				day = eeprom_read(0x232);
    227a:	96 95       	lsr	r25
    227c:	96 95       	lsr	r25
    227e:	99 0f       	add	r25, r25
    2280:	29 2f       	mov	r18, r25
    2282:	22 0f       	add	r18, r18
    2284:	22 0f       	add	r18, r18
				month = eeprom_read(0x233);
    2286:	92 0f       	add	r25, r18
    2288:	89 1b       	sub	r24, r25
    228a:	80 5d       	subi	r24, 0xD0	; 208
    228c:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2290:	8f e2       	ldi	r24, 0x2F	; 47
				lcd_writeChar((hour / 10) + 48);
    2292:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2296:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    229a:	8c 9f       	mul	r24, r28
    229c:	81 2d       	mov	r24, r1
    229e:	11 24       	eor	r1, r1
    22a0:	86 95       	lsr	r24
    22a2:	86 95       	lsr	r24
    22a4:	86 95       	lsr	r24
    22a6:	80 5d       	subi	r24, 0xD0	; 208
    22a8:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((hour % 10) + 48);
    22ac:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    22b0:	8c 9f       	mul	r24, r28
    22b2:	91 2d       	mov	r25, r1
    22b4:	11 24       	eor	r1, r1
    22b6:	96 95       	lsr	r25
    22b8:	96 95       	lsr	r25
    22ba:	96 95       	lsr	r25
    22bc:	99 0f       	add	r25, r25
    22be:	29 2f       	mov	r18, r25
    22c0:	22 0f       	add	r18, r18
    22c2:	22 0f       	add	r18, r18
    22c4:	92 0f       	add	r25, r18
    22c6:	89 1b       	sub	r24, r25
    22c8:	80 5d       	subi	r24, 0xD0	; 208
    22ca:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar(':');
    22ce:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
				lcd_writeChar((minute / 10) + 48);
    22d2:	83 ec       	ldi	r24, 0xC3	; 195
    22d4:	92 e0       	ldi	r25, 0x02	; 2
    22d6:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
    22da:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <lcd_displayMenu+0x234e>
    22de:	0e 94 7a 07 	call	0xef4	; 0xef4 <lcd_clearDisplay>
    22e2:	87 ee       	ldi	r24, 0xE7	; 231
    22e4:	92 e0       	ldi	r25, 0x02	; 2
    22e6:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
				lcd_writeChar((minute % 10) + 48);
    22ea:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <eventVector+0x2>
    22ee:	81 30       	cpi	r24, 0x01	; 1
    22f0:	09 f0       	breq	.+2      	; 0x22f4 <lcd_displayMenu+0x11a0>
    22f2:	93 c0       	rjmp	.+294    	; 0x241a <lcd_displayMenu+0x12c6>
    22f4:	80 e3       	ldi	r24, 0x30	; 48
    22f6:	92 e0       	ldi	r25, 0x02	; 2
    22f8:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    22fc:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
    2300:	81 e3       	ldi	r24, 0x31	; 49
    2302:	92 e0       	ldi	r25, 0x02	; 2
    2304:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2308:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
				lcd_writeChar(' ');
    230c:	82 e3       	ldi	r24, 0x32	; 50
    230e:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((day / 10) + 48);
    2310:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2314:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
    2318:	83 e3       	ldi	r24, 0x33	; 51
    231a:	92 e0       	ldi	r25, 0x02	; 2
    231c:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2320:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    2324:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
				lcd_writeChar((day % 10) + 48);
    2328:	cd ec       	ldi	r28, 0xCD	; 205
    232a:	8c 9f       	mul	r24, r28
    232c:	81 2d       	mov	r24, r1
    232e:	11 24       	eor	r1, r1
    2330:	86 95       	lsr	r24
    2332:	86 95       	lsr	r24
    2334:	86 95       	lsr	r24
    2336:	80 5d       	subi	r24, 0xD0	; 208
    2338:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    233c:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    2340:	8c 9f       	mul	r24, r28
    2342:	91 2d       	mov	r25, r1
    2344:	11 24       	eor	r1, r1
    2346:	96 95       	lsr	r25
				lcd_writeChar('/');
    2348:	96 95       	lsr	r25
    234a:	96 95       	lsr	r25
    234c:	99 0f       	add	r25, r25
				lcd_writeChar((month / 10) + 48);
    234e:	29 2f       	mov	r18, r25
    2350:	22 0f       	add	r18, r18
    2352:	22 0f       	add	r18, r18
    2354:	92 0f       	add	r25, r18
    2356:	89 1b       	sub	r24, r25
    2358:	80 5d       	subi	r24, 0xD0	; 208
    235a:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    235e:	8a e3       	ldi	r24, 0x3A	; 58
    2360:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((month % 10) + 48);
    2364:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    2368:	8c 9f       	mul	r24, r28
    236a:	81 2d       	mov	r24, r1
    236c:	11 24       	eor	r1, r1
    236e:	86 95       	lsr	r24
    2370:	86 95       	lsr	r24
    2372:	86 95       	lsr	r24
    2374:	80 5d       	subi	r24, 0xD0	; 208
    2376:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    237a:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    237e:	8c 9f       	mul	r24, r28
    2380:	91 2d       	mov	r25, r1
    2382:	11 24       	eor	r1, r1
    2384:	96 95       	lsr	r25
    2386:	96 95       	lsr	r25
			}
			else{
				lcd_writeString("           ");
    2388:	96 95       	lsr	r25
    238a:	99 0f       	add	r25, r25
    238c:	29 2f       	mov	r18, r25
    238e:	22 0f       	add	r18, r18
			}
			lcd_newLine();
    2390:	22 0f       	add	r18, r18
    2392:	92 0f       	add	r25, r18
			lcd_writeString(">4.4.");
    2394:	89 1b       	sub	r24, r25
    2396:	80 5d       	subi	r24, 0xD0	; 208
    2398:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
			if(eventVector[3] == 1){
    239c:	80 e2       	ldi	r24, 0x20	; 32
    239e:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    23a2:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
				hour = eeprom_read(0x240);
    23a6:	8c 9f       	mul	r24, r28
    23a8:	81 2d       	mov	r24, r1
    23aa:	11 24       	eor	r1, r1
    23ac:	86 95       	lsr	r24
    23ae:	86 95       	lsr	r24
    23b0:	86 95       	lsr	r24
				minute = eeprom_read(0x241);
    23b2:	80 5d       	subi	r24, 0xD0	; 208
    23b4:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    23b8:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    23bc:	8c 9f       	mul	r24, r28
				day = eeprom_read(0x242);
    23be:	91 2d       	mov	r25, r1
    23c0:	11 24       	eor	r1, r1
    23c2:	96 95       	lsr	r25
    23c4:	96 95       	lsr	r25
    23c6:	96 95       	lsr	r25
    23c8:	99 0f       	add	r25, r25
				month = eeprom_read(0x243);
    23ca:	29 2f       	mov	r18, r25
    23cc:	22 0f       	add	r18, r18
    23ce:	22 0f       	add	r18, r18
    23d0:	92 0f       	add	r25, r18
    23d2:	89 1b       	sub	r24, r25
    23d4:	80 5d       	subi	r24, 0xD0	; 208
				lcd_writeChar((hour / 10) + 48);
    23d6:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    23da:	8f e2       	ldi	r24, 0x2F	; 47
    23dc:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    23e0:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    23e4:	8c 9f       	mul	r24, r28
    23e6:	81 2d       	mov	r24, r1
    23e8:	11 24       	eor	r1, r1
    23ea:	86 95       	lsr	r24
    23ec:	86 95       	lsr	r24
				lcd_writeChar((hour % 10) + 48);
    23ee:	86 95       	lsr	r24
    23f0:	80 5d       	subi	r24, 0xD0	; 208
    23f2:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    23f6:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    23fa:	8c 9f       	mul	r24, r28
    23fc:	91 2d       	mov	r25, r1
    23fe:	11 24       	eor	r1, r1
    2400:	96 95       	lsr	r25
    2402:	96 95       	lsr	r25
    2404:	96 95       	lsr	r25
    2406:	99 0f       	add	r25, r25
    2408:	29 2f       	mov	r18, r25
    240a:	22 0f       	add	r18, r18
    240c:	22 0f       	add	r18, r18
    240e:	92 0f       	add	r25, r18
				lcd_writeChar(':');
    2410:	89 1b       	sub	r24, r25
    2412:	80 5d       	subi	r24, 0xD0	; 208
    2414:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((minute / 10) + 48);
    2418:	04 c0       	rjmp	.+8      	; 0x2422 <lcd_displayMenu+0x12ce>
    241a:	83 ec       	ldi	r24, 0xC3	; 195
    241c:	92 e0       	ldi	r25, 0x02	; 2
    241e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
    2422:	0e 94 24 08 	call	0x1048	; 0x1048 <lcd_newLine>
    2426:	8d ee       	ldi	r24, 0xED	; 237
    2428:	92 e0       	ldi	r25, 0x02	; 2
    242a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
				lcd_writeChar((minute % 10) + 48);
    242e:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <eventVector+0x3>
    2432:	81 30       	cpi	r24, 0x01	; 1
    2434:	09 f0       	breq	.+2      	; 0x2438 <lcd_displayMenu+0x12e4>
    2436:	93 c0       	rjmp	.+294    	; 0x255e <lcd_displayMenu+0x140a>
    2438:	80 e4       	ldi	r24, 0x40	; 64
    243a:	92 e0       	ldi	r25, 0x02	; 2
    243c:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2440:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
    2444:	81 e4       	ldi	r24, 0x41	; 65
    2446:	92 e0       	ldi	r25, 0x02	; 2
    2448:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    244c:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
				lcd_writeChar(' ');
    2450:	82 e4       	ldi	r24, 0x42	; 66
    2452:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((day / 10) + 48);
    2454:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2458:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
    245c:	83 e4       	ldi	r24, 0x43	; 67
    245e:	92 e0       	ldi	r25, 0x02	; 2
    2460:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2464:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    2468:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
				lcd_writeChar((day % 10) + 48);
    246c:	cd ec       	ldi	r28, 0xCD	; 205
    246e:	8c 9f       	mul	r24, r28
    2470:	81 2d       	mov	r24, r1
    2472:	11 24       	eor	r1, r1
    2474:	86 95       	lsr	r24
    2476:	86 95       	lsr	r24
    2478:	86 95       	lsr	r24
    247a:	80 5d       	subi	r24, 0xD0	; 208
    247c:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2480:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    2484:	8c 9f       	mul	r24, r28
    2486:	91 2d       	mov	r25, r1
    2488:	11 24       	eor	r1, r1
    248a:	96 95       	lsr	r25
				lcd_writeChar('/');
    248c:	96 95       	lsr	r25
    248e:	96 95       	lsr	r25
    2490:	99 0f       	add	r25, r25
				lcd_writeChar((month / 10) + 48);
    2492:	29 2f       	mov	r18, r25
    2494:	22 0f       	add	r18, r18
    2496:	22 0f       	add	r18, r18
    2498:	92 0f       	add	r25, r18
    249a:	89 1b       	sub	r24, r25
    249c:	80 5d       	subi	r24, 0xD0	; 208
    249e:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    24a2:	8a e3       	ldi	r24, 0x3A	; 58
    24a4:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((month % 10) + 48);
    24a8:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    24ac:	8c 9f       	mul	r24, r28
    24ae:	81 2d       	mov	r24, r1
    24b0:	11 24       	eor	r1, r1
    24b2:	86 95       	lsr	r24
    24b4:	86 95       	lsr	r24
    24b6:	86 95       	lsr	r24
    24b8:	80 5d       	subi	r24, 0xD0	; 208
    24ba:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    24be:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    24c2:	8c 9f       	mul	r24, r28
    24c4:	91 2d       	mov	r25, r1
    24c6:	11 24       	eor	r1, r1
    24c8:	96 95       	lsr	r25
    24ca:	96 95       	lsr	r25
			}
			else{
				lcd_writeString("           ");
    24cc:	96 95       	lsr	r25
    24ce:	99 0f       	add	r25, r25
    24d0:	29 2f       	mov	r18, r25
    24d2:	22 0f       	add	r18, r18
    24d4:	22 0f       	add	r18, r18
			}
			break;
		case 0x4500:
			lcd_clearDisplay();
    24d6:	92 0f       	add	r25, r18
    24d8:	89 1b       	sub	r24, r25
			lcd_writeString(" 4.4.");
    24da:	80 5d       	subi	r24, 0xD0	; 208
    24dc:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    24e0:	80 e2       	ldi	r24, 0x20	; 32
			if(eventVector[3] == 1){
    24e2:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    24e6:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    24ea:	8c 9f       	mul	r24, r28
				hour = eeprom_read(0x240);
    24ec:	81 2d       	mov	r24, r1
    24ee:	11 24       	eor	r1, r1
    24f0:	86 95       	lsr	r24
    24f2:	86 95       	lsr	r24
    24f4:	86 95       	lsr	r24
    24f6:	80 5d       	subi	r24, 0xD0	; 208
				minute = eeprom_read(0x241);
    24f8:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    24fc:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    2500:	8c 9f       	mul	r24, r28
    2502:	91 2d       	mov	r25, r1
				day = eeprom_read(0x242);
    2504:	11 24       	eor	r1, r1
    2506:	96 95       	lsr	r25
    2508:	96 95       	lsr	r25
    250a:	96 95       	lsr	r25
    250c:	99 0f       	add	r25, r25
    250e:	29 2f       	mov	r18, r25
				month = eeprom_read(0x243);
    2510:	22 0f       	add	r18, r18
    2512:	22 0f       	add	r18, r18
    2514:	92 0f       	add	r25, r18
    2516:	89 1b       	sub	r24, r25
    2518:	80 5d       	subi	r24, 0xD0	; 208
    251a:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((hour / 10) + 48);
    251e:	8f e2       	ldi	r24, 0x2F	; 47
    2520:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2524:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    2528:	8c 9f       	mul	r24, r28
    252a:	81 2d       	mov	r24, r1
    252c:	11 24       	eor	r1, r1
    252e:	86 95       	lsr	r24
    2530:	86 95       	lsr	r24
    2532:	86 95       	lsr	r24
				lcd_writeChar((hour % 10) + 48);
    2534:	80 5d       	subi	r24, 0xD0	; 208
    2536:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    253a:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    253e:	8c 9f       	mul	r24, r28
    2540:	91 2d       	mov	r25, r1
    2542:	11 24       	eor	r1, r1
    2544:	96 95       	lsr	r25
    2546:	96 95       	lsr	r25
    2548:	96 95       	lsr	r25
    254a:	99 0f       	add	r25, r25
    254c:	29 2f       	mov	r18, r25
    254e:	22 0f       	add	r18, r18
    2550:	22 0f       	add	r18, r18
    2552:	92 0f       	add	r25, r18
    2554:	89 1b       	sub	r24, r25
				lcd_writeChar(':');
    2556:	80 5d       	subi	r24, 0xD0	; 208
    2558:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((minute / 10) + 48);
    255c:	a2 c7       	rjmp	.+3908   	; 0x34a2 <lcd_displayMenu+0x234e>
    255e:	83 ec       	ldi	r24, 0xC3	; 195
    2560:	92 e0       	ldi	r25, 0x02	; 2
    2562:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
    2566:	9d c7       	rjmp	.+3898   	; 0x34a2 <lcd_displayMenu+0x234e>
    2568:	0e 94 7a 07 	call	0xef4	; 0xef4 <lcd_clearDisplay>
    256c:	83 ef       	ldi	r24, 0xF3	; 243
    256e:	92 e0       	ldi	r25, 0x02	; 2
    2570:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
				lcd_writeChar((minute % 10) + 48);
    2574:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <eventVector+0x3>
    2578:	81 30       	cpi	r24, 0x01	; 1
    257a:	09 f0       	breq	.+2      	; 0x257e <lcd_displayMenu+0x142a>
    257c:	93 c0       	rjmp	.+294    	; 0x26a4 <lcd_displayMenu+0x1550>
    257e:	80 e4       	ldi	r24, 0x40	; 64
    2580:	92 e0       	ldi	r25, 0x02	; 2
    2582:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2586:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
    258a:	81 e4       	ldi	r24, 0x41	; 65
    258c:	92 e0       	ldi	r25, 0x02	; 2
    258e:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2592:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
				lcd_writeChar(' ');
    2596:	82 e4       	ldi	r24, 0x42	; 66
    2598:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((day / 10) + 48);
    259a:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    259e:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
    25a2:	83 e4       	ldi	r24, 0x43	; 67
    25a4:	92 e0       	ldi	r25, 0x02	; 2
    25a6:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    25aa:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    25ae:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
				lcd_writeChar((day % 10) + 48);
    25b2:	cd ec       	ldi	r28, 0xCD	; 205
    25b4:	8c 9f       	mul	r24, r28
    25b6:	81 2d       	mov	r24, r1
    25b8:	11 24       	eor	r1, r1
    25ba:	86 95       	lsr	r24
    25bc:	86 95       	lsr	r24
    25be:	86 95       	lsr	r24
    25c0:	80 5d       	subi	r24, 0xD0	; 208
    25c2:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    25c6:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    25ca:	8c 9f       	mul	r24, r28
    25cc:	91 2d       	mov	r25, r1
    25ce:	11 24       	eor	r1, r1
    25d0:	96 95       	lsr	r25
				lcd_writeChar('/');
    25d2:	96 95       	lsr	r25
    25d4:	96 95       	lsr	r25
    25d6:	99 0f       	add	r25, r25
				lcd_writeChar((month / 10) + 48);
    25d8:	29 2f       	mov	r18, r25
    25da:	22 0f       	add	r18, r18
    25dc:	22 0f       	add	r18, r18
    25de:	92 0f       	add	r25, r18
    25e0:	89 1b       	sub	r24, r25
    25e2:	80 5d       	subi	r24, 0xD0	; 208
    25e4:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    25e8:	8a e3       	ldi	r24, 0x3A	; 58
    25ea:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((month % 10) + 48);
    25ee:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    25f2:	8c 9f       	mul	r24, r28
    25f4:	81 2d       	mov	r24, r1
    25f6:	11 24       	eor	r1, r1
    25f8:	86 95       	lsr	r24
    25fa:	86 95       	lsr	r24
    25fc:	86 95       	lsr	r24
    25fe:	80 5d       	subi	r24, 0xD0	; 208
    2600:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2604:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    2608:	8c 9f       	mul	r24, r28
    260a:	91 2d       	mov	r25, r1
    260c:	11 24       	eor	r1, r1
    260e:	96 95       	lsr	r25
    2610:	96 95       	lsr	r25
			}
			else{
				lcd_writeString("           ");
    2612:	96 95       	lsr	r25
    2614:	99 0f       	add	r25, r25
    2616:	29 2f       	mov	r18, r25
    2618:	22 0f       	add	r18, r18
			}
			lcd_newLine();
    261a:	22 0f       	add	r18, r18
    261c:	92 0f       	add	r25, r18
			lcd_writeString(">4.5.");
    261e:	89 1b       	sub	r24, r25
    2620:	80 5d       	subi	r24, 0xD0	; 208
    2622:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
			if(eventVector[4] == 1){
    2626:	80 e2       	ldi	r24, 0x20	; 32
    2628:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    262c:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
				hour = eeprom_read(0x250);
    2630:	8c 9f       	mul	r24, r28
    2632:	81 2d       	mov	r24, r1
    2634:	11 24       	eor	r1, r1
    2636:	86 95       	lsr	r24
    2638:	86 95       	lsr	r24
    263a:	86 95       	lsr	r24
				minute = eeprom_read(0x251);
    263c:	80 5d       	subi	r24, 0xD0	; 208
    263e:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2642:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    2646:	8c 9f       	mul	r24, r28
				day = eeprom_read(0x252);
    2648:	91 2d       	mov	r25, r1
    264a:	11 24       	eor	r1, r1
    264c:	96 95       	lsr	r25
    264e:	96 95       	lsr	r25
    2650:	96 95       	lsr	r25
    2652:	99 0f       	add	r25, r25
				month = eeprom_read(0x253);
    2654:	29 2f       	mov	r18, r25
    2656:	22 0f       	add	r18, r18
    2658:	22 0f       	add	r18, r18
    265a:	92 0f       	add	r25, r18
    265c:	89 1b       	sub	r24, r25
    265e:	80 5d       	subi	r24, 0xD0	; 208
				lcd_writeChar((hour / 10) + 48);
    2660:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2664:	8f e2       	ldi	r24, 0x2F	; 47
    2666:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    266a:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    266e:	8c 9f       	mul	r24, r28
    2670:	81 2d       	mov	r24, r1
    2672:	11 24       	eor	r1, r1
    2674:	86 95       	lsr	r24
    2676:	86 95       	lsr	r24
				lcd_writeChar((hour % 10) + 48);
    2678:	86 95       	lsr	r24
    267a:	80 5d       	subi	r24, 0xD0	; 208
    267c:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2680:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    2684:	8c 9f       	mul	r24, r28
    2686:	91 2d       	mov	r25, r1
    2688:	11 24       	eor	r1, r1
    268a:	96 95       	lsr	r25
    268c:	96 95       	lsr	r25
    268e:	96 95       	lsr	r25
    2690:	99 0f       	add	r25, r25
    2692:	29 2f       	mov	r18, r25
    2694:	22 0f       	add	r18, r18
    2696:	22 0f       	add	r18, r18
    2698:	92 0f       	add	r25, r18
				lcd_writeChar(':');
    269a:	89 1b       	sub	r24, r25
    269c:	80 5d       	subi	r24, 0xD0	; 208
    269e:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((minute / 10) + 48);
    26a2:	04 c0       	rjmp	.+8      	; 0x26ac <lcd_displayMenu+0x1558>
    26a4:	83 ec       	ldi	r24, 0xC3	; 195
    26a6:	92 e0       	ldi	r25, 0x02	; 2
    26a8:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
    26ac:	0e 94 24 08 	call	0x1048	; 0x1048 <lcd_newLine>
    26b0:	89 ef       	ldi	r24, 0xF9	; 249
    26b2:	92 e0       	ldi	r25, 0x02	; 2
    26b4:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
				lcd_writeChar((minute % 10) + 48);
    26b8:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <eventVector+0x4>
    26bc:	81 30       	cpi	r24, 0x01	; 1
    26be:	09 f0       	breq	.+2      	; 0x26c2 <lcd_displayMenu+0x156e>
    26c0:	93 c0       	rjmp	.+294    	; 0x27e8 <lcd_displayMenu+0x1694>
    26c2:	80 e5       	ldi	r24, 0x50	; 80
    26c4:	92 e0       	ldi	r25, 0x02	; 2
    26c6:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    26ca:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
    26ce:	81 e5       	ldi	r24, 0x51	; 81
    26d0:	92 e0       	ldi	r25, 0x02	; 2
    26d2:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    26d6:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
				lcd_writeChar(' ');
    26da:	82 e5       	ldi	r24, 0x52	; 82
    26dc:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((day / 10) + 48);
    26de:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    26e2:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
    26e6:	83 e5       	ldi	r24, 0x53	; 83
    26e8:	92 e0       	ldi	r25, 0x02	; 2
    26ea:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    26ee:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    26f2:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
				lcd_writeChar((day % 10) + 48);
    26f6:	cd ec       	ldi	r28, 0xCD	; 205
    26f8:	8c 9f       	mul	r24, r28
    26fa:	81 2d       	mov	r24, r1
    26fc:	11 24       	eor	r1, r1
    26fe:	86 95       	lsr	r24
    2700:	86 95       	lsr	r24
    2702:	86 95       	lsr	r24
    2704:	80 5d       	subi	r24, 0xD0	; 208
    2706:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    270a:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    270e:	8c 9f       	mul	r24, r28
    2710:	91 2d       	mov	r25, r1
    2712:	11 24       	eor	r1, r1
    2714:	96 95       	lsr	r25
				lcd_writeChar('/');
    2716:	96 95       	lsr	r25
    2718:	96 95       	lsr	r25
    271a:	99 0f       	add	r25, r25
				lcd_writeChar((month / 10) + 48);
    271c:	29 2f       	mov	r18, r25
    271e:	22 0f       	add	r18, r18
    2720:	22 0f       	add	r18, r18
    2722:	92 0f       	add	r25, r18
    2724:	89 1b       	sub	r24, r25
    2726:	80 5d       	subi	r24, 0xD0	; 208
    2728:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    272c:	8a e3       	ldi	r24, 0x3A	; 58
    272e:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((month % 10) + 48);
    2732:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    2736:	8c 9f       	mul	r24, r28
    2738:	81 2d       	mov	r24, r1
    273a:	11 24       	eor	r1, r1
    273c:	86 95       	lsr	r24
    273e:	86 95       	lsr	r24
    2740:	86 95       	lsr	r24
    2742:	80 5d       	subi	r24, 0xD0	; 208
    2744:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2748:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    274c:	8c 9f       	mul	r24, r28
    274e:	91 2d       	mov	r25, r1
    2750:	11 24       	eor	r1, r1
    2752:	96 95       	lsr	r25
    2754:	96 95       	lsr	r25
			}
			else{
				lcd_writeString("           ");
    2756:	96 95       	lsr	r25
    2758:	99 0f       	add	r25, r25
    275a:	29 2f       	mov	r18, r25
    275c:	22 0f       	add	r18, r18
    275e:	22 0f       	add	r18, r18
			}
			break;
		case 0x4600:
			lcd_clearDisplay();
    2760:	92 0f       	add	r25, r18
    2762:	89 1b       	sub	r24, r25
			lcd_writeString(" 4.5.");
    2764:	80 5d       	subi	r24, 0xD0	; 208
    2766:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    276a:	80 e2       	ldi	r24, 0x20	; 32
			if(eventVector[4] == 1){
    276c:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2770:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    2774:	8c 9f       	mul	r24, r28
				hour = eeprom_read(0x250);
    2776:	81 2d       	mov	r24, r1
    2778:	11 24       	eor	r1, r1
    277a:	86 95       	lsr	r24
    277c:	86 95       	lsr	r24
    277e:	86 95       	lsr	r24
    2780:	80 5d       	subi	r24, 0xD0	; 208
				minute = eeprom_read(0x251);
    2782:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2786:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    278a:	8c 9f       	mul	r24, r28
    278c:	91 2d       	mov	r25, r1
				day = eeprom_read(0x252);
    278e:	11 24       	eor	r1, r1
    2790:	96 95       	lsr	r25
    2792:	96 95       	lsr	r25
    2794:	96 95       	lsr	r25
    2796:	99 0f       	add	r25, r25
    2798:	29 2f       	mov	r18, r25
				month = eeprom_read(0x253);
    279a:	22 0f       	add	r18, r18
    279c:	22 0f       	add	r18, r18
    279e:	92 0f       	add	r25, r18
    27a0:	89 1b       	sub	r24, r25
    27a2:	80 5d       	subi	r24, 0xD0	; 208
    27a4:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((hour / 10) + 48);
    27a8:	8f e2       	ldi	r24, 0x2F	; 47
    27aa:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    27ae:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    27b2:	8c 9f       	mul	r24, r28
    27b4:	81 2d       	mov	r24, r1
    27b6:	11 24       	eor	r1, r1
    27b8:	86 95       	lsr	r24
    27ba:	86 95       	lsr	r24
    27bc:	86 95       	lsr	r24
				lcd_writeChar((hour % 10) + 48);
    27be:	80 5d       	subi	r24, 0xD0	; 208
    27c0:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    27c4:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    27c8:	8c 9f       	mul	r24, r28
    27ca:	91 2d       	mov	r25, r1
    27cc:	11 24       	eor	r1, r1
    27ce:	96 95       	lsr	r25
    27d0:	96 95       	lsr	r25
    27d2:	96 95       	lsr	r25
    27d4:	99 0f       	add	r25, r25
    27d6:	29 2f       	mov	r18, r25
    27d8:	22 0f       	add	r18, r18
    27da:	22 0f       	add	r18, r18
    27dc:	92 0f       	add	r25, r18
    27de:	89 1b       	sub	r24, r25
				lcd_writeChar(':');
    27e0:	80 5d       	subi	r24, 0xD0	; 208
    27e2:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((minute / 10) + 48);
    27e6:	5d c6       	rjmp	.+3258   	; 0x34a2 <lcd_displayMenu+0x234e>
    27e8:	83 ec       	ldi	r24, 0xC3	; 195
    27ea:	92 e0       	ldi	r25, 0x02	; 2
    27ec:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
    27f0:	58 c6       	rjmp	.+3248   	; 0x34a2 <lcd_displayMenu+0x234e>
    27f2:	0e 94 7a 07 	call	0xef4	; 0xef4 <lcd_clearDisplay>
    27f6:	8f ef       	ldi	r24, 0xFF	; 255
    27f8:	92 e0       	ldi	r25, 0x02	; 2
    27fa:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
				lcd_writeChar((minute % 10) + 48);
    27fe:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <eventVector+0x4>
    2802:	81 30       	cpi	r24, 0x01	; 1
    2804:	09 f0       	breq	.+2      	; 0x2808 <lcd_displayMenu+0x16b4>
    2806:	93 c0       	rjmp	.+294    	; 0x292e <lcd_displayMenu+0x17da>
    2808:	80 e5       	ldi	r24, 0x50	; 80
    280a:	92 e0       	ldi	r25, 0x02	; 2
    280c:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2810:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
    2814:	81 e5       	ldi	r24, 0x51	; 81
    2816:	92 e0       	ldi	r25, 0x02	; 2
    2818:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    281c:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
				lcd_writeChar(' ');
    2820:	82 e5       	ldi	r24, 0x52	; 82
    2822:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((day / 10) + 48);
    2824:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2828:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
    282c:	83 e5       	ldi	r24, 0x53	; 83
    282e:	92 e0       	ldi	r25, 0x02	; 2
    2830:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2834:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    2838:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
				lcd_writeChar((day % 10) + 48);
    283c:	cd ec       	ldi	r28, 0xCD	; 205
    283e:	8c 9f       	mul	r24, r28
    2840:	81 2d       	mov	r24, r1
    2842:	11 24       	eor	r1, r1
    2844:	86 95       	lsr	r24
    2846:	86 95       	lsr	r24
    2848:	86 95       	lsr	r24
    284a:	80 5d       	subi	r24, 0xD0	; 208
    284c:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2850:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    2854:	8c 9f       	mul	r24, r28
    2856:	91 2d       	mov	r25, r1
    2858:	11 24       	eor	r1, r1
    285a:	96 95       	lsr	r25
				lcd_writeChar('/');
    285c:	96 95       	lsr	r25
    285e:	96 95       	lsr	r25
    2860:	99 0f       	add	r25, r25
				lcd_writeChar((month / 10) + 48);
    2862:	29 2f       	mov	r18, r25
    2864:	22 0f       	add	r18, r18
    2866:	22 0f       	add	r18, r18
    2868:	92 0f       	add	r25, r18
    286a:	89 1b       	sub	r24, r25
    286c:	80 5d       	subi	r24, 0xD0	; 208
    286e:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2872:	8a e3       	ldi	r24, 0x3A	; 58
    2874:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((month % 10) + 48);
    2878:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    287c:	8c 9f       	mul	r24, r28
    287e:	81 2d       	mov	r24, r1
    2880:	11 24       	eor	r1, r1
    2882:	86 95       	lsr	r24
    2884:	86 95       	lsr	r24
    2886:	86 95       	lsr	r24
    2888:	80 5d       	subi	r24, 0xD0	; 208
    288a:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    288e:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    2892:	8c 9f       	mul	r24, r28
    2894:	91 2d       	mov	r25, r1
    2896:	11 24       	eor	r1, r1
    2898:	96 95       	lsr	r25
    289a:	96 95       	lsr	r25
			}
			else{
				lcd_writeString("           ");
    289c:	96 95       	lsr	r25
    289e:	99 0f       	add	r25, r25
    28a0:	29 2f       	mov	r18, r25
    28a2:	22 0f       	add	r18, r18
			}
			lcd_newLine();
    28a4:	22 0f       	add	r18, r18
    28a6:	92 0f       	add	r25, r18
			lcd_writeString(">4.6.");
    28a8:	89 1b       	sub	r24, r25
    28aa:	80 5d       	subi	r24, 0xD0	; 208
    28ac:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
			if(eventVector[5] == 1){
    28b0:	80 e2       	ldi	r24, 0x20	; 32
    28b2:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    28b6:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
				hour = eeprom_read(0x260);
    28ba:	8c 9f       	mul	r24, r28
    28bc:	81 2d       	mov	r24, r1
    28be:	11 24       	eor	r1, r1
    28c0:	86 95       	lsr	r24
    28c2:	86 95       	lsr	r24
    28c4:	86 95       	lsr	r24
				minute = eeprom_read(0x261);
    28c6:	80 5d       	subi	r24, 0xD0	; 208
    28c8:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    28cc:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    28d0:	8c 9f       	mul	r24, r28
				day = eeprom_read(0x262);
    28d2:	91 2d       	mov	r25, r1
    28d4:	11 24       	eor	r1, r1
    28d6:	96 95       	lsr	r25
    28d8:	96 95       	lsr	r25
    28da:	96 95       	lsr	r25
    28dc:	99 0f       	add	r25, r25
				month = eeprom_read(0x263);
    28de:	29 2f       	mov	r18, r25
    28e0:	22 0f       	add	r18, r18
    28e2:	22 0f       	add	r18, r18
    28e4:	92 0f       	add	r25, r18
    28e6:	89 1b       	sub	r24, r25
    28e8:	80 5d       	subi	r24, 0xD0	; 208
				lcd_writeChar((hour / 10) + 48);
    28ea:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    28ee:	8f e2       	ldi	r24, 0x2F	; 47
    28f0:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    28f4:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    28f8:	8c 9f       	mul	r24, r28
    28fa:	81 2d       	mov	r24, r1
    28fc:	11 24       	eor	r1, r1
    28fe:	86 95       	lsr	r24
    2900:	86 95       	lsr	r24
				lcd_writeChar((hour % 10) + 48);
    2902:	86 95       	lsr	r24
    2904:	80 5d       	subi	r24, 0xD0	; 208
    2906:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    290a:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    290e:	8c 9f       	mul	r24, r28
    2910:	91 2d       	mov	r25, r1
    2912:	11 24       	eor	r1, r1
    2914:	96 95       	lsr	r25
    2916:	96 95       	lsr	r25
    2918:	96 95       	lsr	r25
    291a:	99 0f       	add	r25, r25
    291c:	29 2f       	mov	r18, r25
    291e:	22 0f       	add	r18, r18
    2920:	22 0f       	add	r18, r18
    2922:	92 0f       	add	r25, r18
				lcd_writeChar(':');
    2924:	89 1b       	sub	r24, r25
    2926:	80 5d       	subi	r24, 0xD0	; 208
    2928:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((minute / 10) + 48);
    292c:	04 c0       	rjmp	.+8      	; 0x2936 <lcd_displayMenu+0x17e2>
    292e:	83 ec       	ldi	r24, 0xC3	; 195
    2930:	92 e0       	ldi	r25, 0x02	; 2
    2932:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
    2936:	0e 94 24 08 	call	0x1048	; 0x1048 <lcd_newLine>
    293a:	85 e0       	ldi	r24, 0x05	; 5
    293c:	93 e0       	ldi	r25, 0x03	; 3
    293e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
				lcd_writeChar((minute % 10) + 48);
    2942:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <eventVector+0x5>
    2946:	81 30       	cpi	r24, 0x01	; 1
    2948:	09 f0       	breq	.+2      	; 0x294c <lcd_displayMenu+0x17f8>
    294a:	93 c0       	rjmp	.+294    	; 0x2a72 <lcd_displayMenu+0x191e>
    294c:	80 e6       	ldi	r24, 0x60	; 96
    294e:	92 e0       	ldi	r25, 0x02	; 2
    2950:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2954:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
    2958:	81 e6       	ldi	r24, 0x61	; 97
    295a:	92 e0       	ldi	r25, 0x02	; 2
    295c:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2960:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
				lcd_writeChar(' ');
    2964:	82 e6       	ldi	r24, 0x62	; 98
    2966:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((day / 10) + 48);
    2968:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    296c:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
    2970:	83 e6       	ldi	r24, 0x63	; 99
    2972:	92 e0       	ldi	r25, 0x02	; 2
    2974:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2978:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    297c:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
				lcd_writeChar((day % 10) + 48);
    2980:	cd ec       	ldi	r28, 0xCD	; 205
    2982:	8c 9f       	mul	r24, r28
    2984:	81 2d       	mov	r24, r1
    2986:	11 24       	eor	r1, r1
    2988:	86 95       	lsr	r24
    298a:	86 95       	lsr	r24
    298c:	86 95       	lsr	r24
    298e:	80 5d       	subi	r24, 0xD0	; 208
    2990:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2994:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    2998:	8c 9f       	mul	r24, r28
    299a:	91 2d       	mov	r25, r1
    299c:	11 24       	eor	r1, r1
    299e:	96 95       	lsr	r25
				lcd_writeChar('/');
    29a0:	96 95       	lsr	r25
    29a2:	96 95       	lsr	r25
    29a4:	99 0f       	add	r25, r25
				lcd_writeChar((month / 10) + 48);
    29a6:	29 2f       	mov	r18, r25
    29a8:	22 0f       	add	r18, r18
    29aa:	22 0f       	add	r18, r18
    29ac:	92 0f       	add	r25, r18
    29ae:	89 1b       	sub	r24, r25
    29b0:	80 5d       	subi	r24, 0xD0	; 208
    29b2:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    29b6:	8a e3       	ldi	r24, 0x3A	; 58
    29b8:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((month % 10) + 48);
    29bc:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    29c0:	8c 9f       	mul	r24, r28
    29c2:	81 2d       	mov	r24, r1
    29c4:	11 24       	eor	r1, r1
    29c6:	86 95       	lsr	r24
    29c8:	86 95       	lsr	r24
    29ca:	86 95       	lsr	r24
    29cc:	80 5d       	subi	r24, 0xD0	; 208
    29ce:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    29d2:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    29d6:	8c 9f       	mul	r24, r28
    29d8:	91 2d       	mov	r25, r1
    29da:	11 24       	eor	r1, r1
    29dc:	96 95       	lsr	r25
    29de:	96 95       	lsr	r25
			}
			else{
				lcd_writeString("           ");
    29e0:	96 95       	lsr	r25
    29e2:	99 0f       	add	r25, r25
    29e4:	29 2f       	mov	r18, r25
    29e6:	22 0f       	add	r18, r18
    29e8:	22 0f       	add	r18, r18
			}
			break;
		case 0x4700:
			lcd_clearDisplay();
    29ea:	92 0f       	add	r25, r18
    29ec:	89 1b       	sub	r24, r25
			lcd_writeString(" 4.6.");
    29ee:	80 5d       	subi	r24, 0xD0	; 208
    29f0:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    29f4:	80 e2       	ldi	r24, 0x20	; 32
			if(eventVector[5] == 1){
    29f6:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    29fa:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    29fe:	8c 9f       	mul	r24, r28
				hour = eeprom_read(0x260);
    2a00:	81 2d       	mov	r24, r1
    2a02:	11 24       	eor	r1, r1
    2a04:	86 95       	lsr	r24
    2a06:	86 95       	lsr	r24
    2a08:	86 95       	lsr	r24
    2a0a:	80 5d       	subi	r24, 0xD0	; 208
				minute = eeprom_read(0x261);
    2a0c:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2a10:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    2a14:	8c 9f       	mul	r24, r28
    2a16:	91 2d       	mov	r25, r1
				day = eeprom_read(0x262);
    2a18:	11 24       	eor	r1, r1
    2a1a:	96 95       	lsr	r25
    2a1c:	96 95       	lsr	r25
    2a1e:	96 95       	lsr	r25
    2a20:	99 0f       	add	r25, r25
    2a22:	29 2f       	mov	r18, r25
				month = eeprom_read(0x263);
    2a24:	22 0f       	add	r18, r18
    2a26:	22 0f       	add	r18, r18
    2a28:	92 0f       	add	r25, r18
    2a2a:	89 1b       	sub	r24, r25
    2a2c:	80 5d       	subi	r24, 0xD0	; 208
    2a2e:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((hour / 10) + 48);
    2a32:	8f e2       	ldi	r24, 0x2F	; 47
    2a34:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2a38:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    2a3c:	8c 9f       	mul	r24, r28
    2a3e:	81 2d       	mov	r24, r1
    2a40:	11 24       	eor	r1, r1
    2a42:	86 95       	lsr	r24
    2a44:	86 95       	lsr	r24
    2a46:	86 95       	lsr	r24
				lcd_writeChar((hour % 10) + 48);
    2a48:	80 5d       	subi	r24, 0xD0	; 208
    2a4a:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2a4e:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    2a52:	8c 9f       	mul	r24, r28
    2a54:	91 2d       	mov	r25, r1
    2a56:	11 24       	eor	r1, r1
    2a58:	96 95       	lsr	r25
    2a5a:	96 95       	lsr	r25
    2a5c:	96 95       	lsr	r25
    2a5e:	99 0f       	add	r25, r25
    2a60:	29 2f       	mov	r18, r25
    2a62:	22 0f       	add	r18, r18
    2a64:	22 0f       	add	r18, r18
    2a66:	92 0f       	add	r25, r18
    2a68:	89 1b       	sub	r24, r25
				lcd_writeChar(':');
    2a6a:	80 5d       	subi	r24, 0xD0	; 208
    2a6c:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((minute / 10) + 48);
    2a70:	18 c5       	rjmp	.+2608   	; 0x34a2 <lcd_displayMenu+0x234e>
    2a72:	83 ec       	ldi	r24, 0xC3	; 195
    2a74:	92 e0       	ldi	r25, 0x02	; 2
    2a76:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
    2a7a:	13 c5       	rjmp	.+2598   	; 0x34a2 <lcd_displayMenu+0x234e>
    2a7c:	0e 94 7a 07 	call	0xef4	; 0xef4 <lcd_clearDisplay>
    2a80:	8b e0       	ldi	r24, 0x0B	; 11
    2a82:	93 e0       	ldi	r25, 0x03	; 3
    2a84:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
				lcd_writeChar((minute % 10) + 48);
    2a88:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <eventVector+0x5>
    2a8c:	81 30       	cpi	r24, 0x01	; 1
    2a8e:	09 f0       	breq	.+2      	; 0x2a92 <lcd_displayMenu+0x193e>
    2a90:	93 c0       	rjmp	.+294    	; 0x2bb8 <lcd_displayMenu+0x1a64>
    2a92:	80 e6       	ldi	r24, 0x60	; 96
    2a94:	92 e0       	ldi	r25, 0x02	; 2
    2a96:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2a9a:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
    2a9e:	81 e6       	ldi	r24, 0x61	; 97
    2aa0:	92 e0       	ldi	r25, 0x02	; 2
    2aa2:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2aa6:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
				lcd_writeChar(' ');
    2aaa:	82 e6       	ldi	r24, 0x62	; 98
    2aac:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((day / 10) + 48);
    2aae:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2ab2:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
    2ab6:	83 e6       	ldi	r24, 0x63	; 99
    2ab8:	92 e0       	ldi	r25, 0x02	; 2
    2aba:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2abe:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    2ac2:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
				lcd_writeChar((day % 10) + 48);
    2ac6:	cd ec       	ldi	r28, 0xCD	; 205
    2ac8:	8c 9f       	mul	r24, r28
    2aca:	81 2d       	mov	r24, r1
    2acc:	11 24       	eor	r1, r1
    2ace:	86 95       	lsr	r24
    2ad0:	86 95       	lsr	r24
    2ad2:	86 95       	lsr	r24
    2ad4:	80 5d       	subi	r24, 0xD0	; 208
    2ad6:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2ada:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    2ade:	8c 9f       	mul	r24, r28
    2ae0:	91 2d       	mov	r25, r1
    2ae2:	11 24       	eor	r1, r1
    2ae4:	96 95       	lsr	r25
				lcd_writeChar('/');
    2ae6:	96 95       	lsr	r25
    2ae8:	96 95       	lsr	r25
    2aea:	99 0f       	add	r25, r25
				lcd_writeChar((month / 10) + 48);
    2aec:	29 2f       	mov	r18, r25
    2aee:	22 0f       	add	r18, r18
    2af0:	22 0f       	add	r18, r18
    2af2:	92 0f       	add	r25, r18
    2af4:	89 1b       	sub	r24, r25
    2af6:	80 5d       	subi	r24, 0xD0	; 208
    2af8:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2afc:	8a e3       	ldi	r24, 0x3A	; 58
    2afe:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((month % 10) + 48);
    2b02:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    2b06:	8c 9f       	mul	r24, r28
    2b08:	81 2d       	mov	r24, r1
    2b0a:	11 24       	eor	r1, r1
    2b0c:	86 95       	lsr	r24
    2b0e:	86 95       	lsr	r24
    2b10:	86 95       	lsr	r24
    2b12:	80 5d       	subi	r24, 0xD0	; 208
    2b14:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2b18:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    2b1c:	8c 9f       	mul	r24, r28
    2b1e:	91 2d       	mov	r25, r1
    2b20:	11 24       	eor	r1, r1
    2b22:	96 95       	lsr	r25
    2b24:	96 95       	lsr	r25
			}
			else{
				lcd_writeString("           ");
    2b26:	96 95       	lsr	r25
    2b28:	99 0f       	add	r25, r25
    2b2a:	29 2f       	mov	r18, r25
    2b2c:	22 0f       	add	r18, r18
			}
			lcd_newLine();
    2b2e:	22 0f       	add	r18, r18
    2b30:	92 0f       	add	r25, r18
			lcd_writeString(">4.7.");
    2b32:	89 1b       	sub	r24, r25
    2b34:	80 5d       	subi	r24, 0xD0	; 208
    2b36:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
			if(eventVector[6] == 1){
    2b3a:	80 e2       	ldi	r24, 0x20	; 32
    2b3c:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2b40:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
				hour = eeprom_read(0x270);
    2b44:	8c 9f       	mul	r24, r28
    2b46:	81 2d       	mov	r24, r1
    2b48:	11 24       	eor	r1, r1
    2b4a:	86 95       	lsr	r24
    2b4c:	86 95       	lsr	r24
    2b4e:	86 95       	lsr	r24
				minute = eeprom_read(0x271);
    2b50:	80 5d       	subi	r24, 0xD0	; 208
    2b52:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2b56:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    2b5a:	8c 9f       	mul	r24, r28
				day = eeprom_read(0x272);
    2b5c:	91 2d       	mov	r25, r1
    2b5e:	11 24       	eor	r1, r1
    2b60:	96 95       	lsr	r25
    2b62:	96 95       	lsr	r25
    2b64:	96 95       	lsr	r25
    2b66:	99 0f       	add	r25, r25
				month = eeprom_read(0x273);
    2b68:	29 2f       	mov	r18, r25
    2b6a:	22 0f       	add	r18, r18
    2b6c:	22 0f       	add	r18, r18
    2b6e:	92 0f       	add	r25, r18
    2b70:	89 1b       	sub	r24, r25
    2b72:	80 5d       	subi	r24, 0xD0	; 208
				lcd_writeChar((hour / 10) + 48);
    2b74:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2b78:	8f e2       	ldi	r24, 0x2F	; 47
    2b7a:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2b7e:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    2b82:	8c 9f       	mul	r24, r28
    2b84:	81 2d       	mov	r24, r1
    2b86:	11 24       	eor	r1, r1
    2b88:	86 95       	lsr	r24
    2b8a:	86 95       	lsr	r24
				lcd_writeChar((hour % 10) + 48);
    2b8c:	86 95       	lsr	r24
    2b8e:	80 5d       	subi	r24, 0xD0	; 208
    2b90:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2b94:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    2b98:	8c 9f       	mul	r24, r28
    2b9a:	91 2d       	mov	r25, r1
    2b9c:	11 24       	eor	r1, r1
    2b9e:	96 95       	lsr	r25
    2ba0:	96 95       	lsr	r25
    2ba2:	96 95       	lsr	r25
    2ba4:	99 0f       	add	r25, r25
    2ba6:	29 2f       	mov	r18, r25
    2ba8:	22 0f       	add	r18, r18
    2baa:	22 0f       	add	r18, r18
    2bac:	92 0f       	add	r25, r18
				lcd_writeChar(':');
    2bae:	89 1b       	sub	r24, r25
    2bb0:	80 5d       	subi	r24, 0xD0	; 208
    2bb2:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((minute / 10) + 48);
    2bb6:	04 c0       	rjmp	.+8      	; 0x2bc0 <lcd_displayMenu+0x1a6c>
    2bb8:	83 ec       	ldi	r24, 0xC3	; 195
    2bba:	92 e0       	ldi	r25, 0x02	; 2
    2bbc:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
    2bc0:	0e 94 24 08 	call	0x1048	; 0x1048 <lcd_newLine>
    2bc4:	81 e1       	ldi	r24, 0x11	; 17
    2bc6:	93 e0       	ldi	r25, 0x03	; 3
    2bc8:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
				lcd_writeChar((minute % 10) + 48);
    2bcc:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <eventVector+0x6>
    2bd0:	81 30       	cpi	r24, 0x01	; 1
    2bd2:	09 f0       	breq	.+2      	; 0x2bd6 <lcd_displayMenu+0x1a82>
    2bd4:	93 c0       	rjmp	.+294    	; 0x2cfc <lcd_displayMenu+0x1ba8>
    2bd6:	80 e7       	ldi	r24, 0x70	; 112
    2bd8:	92 e0       	ldi	r25, 0x02	; 2
    2bda:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2bde:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
    2be2:	81 e7       	ldi	r24, 0x71	; 113
    2be4:	92 e0       	ldi	r25, 0x02	; 2
    2be6:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2bea:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
				lcd_writeChar(' ');
    2bee:	82 e7       	ldi	r24, 0x72	; 114
    2bf0:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((day / 10) + 48);
    2bf2:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2bf6:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
    2bfa:	83 e7       	ldi	r24, 0x73	; 115
    2bfc:	92 e0       	ldi	r25, 0x02	; 2
    2bfe:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2c02:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    2c06:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
				lcd_writeChar((day % 10) + 48);
    2c0a:	cd ec       	ldi	r28, 0xCD	; 205
    2c0c:	8c 9f       	mul	r24, r28
    2c0e:	81 2d       	mov	r24, r1
    2c10:	11 24       	eor	r1, r1
    2c12:	86 95       	lsr	r24
    2c14:	86 95       	lsr	r24
    2c16:	86 95       	lsr	r24
    2c18:	80 5d       	subi	r24, 0xD0	; 208
    2c1a:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2c1e:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    2c22:	8c 9f       	mul	r24, r28
    2c24:	91 2d       	mov	r25, r1
    2c26:	11 24       	eor	r1, r1
    2c28:	96 95       	lsr	r25
				lcd_writeChar('/');
    2c2a:	96 95       	lsr	r25
    2c2c:	96 95       	lsr	r25
    2c2e:	99 0f       	add	r25, r25
				lcd_writeChar((month / 10) + 48);
    2c30:	29 2f       	mov	r18, r25
    2c32:	22 0f       	add	r18, r18
    2c34:	22 0f       	add	r18, r18
    2c36:	92 0f       	add	r25, r18
    2c38:	89 1b       	sub	r24, r25
    2c3a:	80 5d       	subi	r24, 0xD0	; 208
    2c3c:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2c40:	8a e3       	ldi	r24, 0x3A	; 58
    2c42:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((month % 10) + 48);
    2c46:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    2c4a:	8c 9f       	mul	r24, r28
    2c4c:	81 2d       	mov	r24, r1
    2c4e:	11 24       	eor	r1, r1
    2c50:	86 95       	lsr	r24
    2c52:	86 95       	lsr	r24
    2c54:	86 95       	lsr	r24
    2c56:	80 5d       	subi	r24, 0xD0	; 208
    2c58:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2c5c:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    2c60:	8c 9f       	mul	r24, r28
    2c62:	91 2d       	mov	r25, r1
    2c64:	11 24       	eor	r1, r1
    2c66:	96 95       	lsr	r25
    2c68:	96 95       	lsr	r25
			}
			else{
				lcd_writeString("           ");
    2c6a:	96 95       	lsr	r25
    2c6c:	99 0f       	add	r25, r25
    2c6e:	29 2f       	mov	r18, r25
    2c70:	22 0f       	add	r18, r18
    2c72:	22 0f       	add	r18, r18
			}
			break;
		case 0x4800:
			lcd_clearDisplay();
    2c74:	92 0f       	add	r25, r18
    2c76:	89 1b       	sub	r24, r25
			lcd_writeString(" 4.7.");
    2c78:	80 5d       	subi	r24, 0xD0	; 208
    2c7a:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2c7e:	80 e2       	ldi	r24, 0x20	; 32
			if(eventVector[6] == 1){
    2c80:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2c84:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    2c88:	8c 9f       	mul	r24, r28
				hour = eeprom_read(0x270);
    2c8a:	81 2d       	mov	r24, r1
    2c8c:	11 24       	eor	r1, r1
    2c8e:	86 95       	lsr	r24
    2c90:	86 95       	lsr	r24
    2c92:	86 95       	lsr	r24
    2c94:	80 5d       	subi	r24, 0xD0	; 208
				minute = eeprom_read(0x271);
    2c96:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2c9a:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    2c9e:	8c 9f       	mul	r24, r28
    2ca0:	91 2d       	mov	r25, r1
				day = eeprom_read(0x272);
    2ca2:	11 24       	eor	r1, r1
    2ca4:	96 95       	lsr	r25
    2ca6:	96 95       	lsr	r25
    2ca8:	96 95       	lsr	r25
    2caa:	99 0f       	add	r25, r25
    2cac:	29 2f       	mov	r18, r25
				month = eeprom_read(0x273);
    2cae:	22 0f       	add	r18, r18
    2cb0:	22 0f       	add	r18, r18
    2cb2:	92 0f       	add	r25, r18
    2cb4:	89 1b       	sub	r24, r25
    2cb6:	80 5d       	subi	r24, 0xD0	; 208
    2cb8:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((hour / 10) + 48);
    2cbc:	8f e2       	ldi	r24, 0x2F	; 47
    2cbe:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2cc2:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    2cc6:	8c 9f       	mul	r24, r28
    2cc8:	81 2d       	mov	r24, r1
    2cca:	11 24       	eor	r1, r1
    2ccc:	86 95       	lsr	r24
    2cce:	86 95       	lsr	r24
    2cd0:	86 95       	lsr	r24
				lcd_writeChar((hour % 10) + 48);
    2cd2:	80 5d       	subi	r24, 0xD0	; 208
    2cd4:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2cd8:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    2cdc:	8c 9f       	mul	r24, r28
    2cde:	91 2d       	mov	r25, r1
    2ce0:	11 24       	eor	r1, r1
    2ce2:	96 95       	lsr	r25
    2ce4:	96 95       	lsr	r25
    2ce6:	96 95       	lsr	r25
    2ce8:	99 0f       	add	r25, r25
    2cea:	29 2f       	mov	r18, r25
    2cec:	22 0f       	add	r18, r18
    2cee:	22 0f       	add	r18, r18
    2cf0:	92 0f       	add	r25, r18
    2cf2:	89 1b       	sub	r24, r25
				lcd_writeChar(':');
    2cf4:	80 5d       	subi	r24, 0xD0	; 208
    2cf6:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((minute / 10) + 48);
    2cfa:	d3 c3       	rjmp	.+1958   	; 0x34a2 <lcd_displayMenu+0x234e>
    2cfc:	83 ec       	ldi	r24, 0xC3	; 195
    2cfe:	92 e0       	ldi	r25, 0x02	; 2
    2d00:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
    2d04:	ce c3       	rjmp	.+1948   	; 0x34a2 <lcd_displayMenu+0x234e>
    2d06:	0e 94 7a 07 	call	0xef4	; 0xef4 <lcd_clearDisplay>
    2d0a:	87 e1       	ldi	r24, 0x17	; 23
    2d0c:	93 e0       	ldi	r25, 0x03	; 3
    2d0e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
				lcd_writeChar((minute % 10) + 48);
    2d12:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <eventVector+0x6>
    2d16:	81 30       	cpi	r24, 0x01	; 1
    2d18:	09 f0       	breq	.+2      	; 0x2d1c <lcd_displayMenu+0x1bc8>
    2d1a:	93 c0       	rjmp	.+294    	; 0x2e42 <lcd_displayMenu+0x1cee>
    2d1c:	80 e7       	ldi	r24, 0x70	; 112
    2d1e:	92 e0       	ldi	r25, 0x02	; 2
    2d20:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2d24:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
    2d28:	81 e7       	ldi	r24, 0x71	; 113
    2d2a:	92 e0       	ldi	r25, 0x02	; 2
    2d2c:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2d30:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
				lcd_writeChar(' ');
    2d34:	82 e7       	ldi	r24, 0x72	; 114
    2d36:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((day / 10) + 48);
    2d38:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2d3c:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
    2d40:	83 e7       	ldi	r24, 0x73	; 115
    2d42:	92 e0       	ldi	r25, 0x02	; 2
    2d44:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2d48:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    2d4c:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
				lcd_writeChar((day % 10) + 48);
    2d50:	cd ec       	ldi	r28, 0xCD	; 205
    2d52:	8c 9f       	mul	r24, r28
    2d54:	81 2d       	mov	r24, r1
    2d56:	11 24       	eor	r1, r1
    2d58:	86 95       	lsr	r24
    2d5a:	86 95       	lsr	r24
    2d5c:	86 95       	lsr	r24
    2d5e:	80 5d       	subi	r24, 0xD0	; 208
    2d60:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2d64:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    2d68:	8c 9f       	mul	r24, r28
    2d6a:	91 2d       	mov	r25, r1
    2d6c:	11 24       	eor	r1, r1
    2d6e:	96 95       	lsr	r25
				lcd_writeChar('/');
    2d70:	96 95       	lsr	r25
    2d72:	96 95       	lsr	r25
    2d74:	99 0f       	add	r25, r25
				lcd_writeChar((month / 10) + 48);
    2d76:	29 2f       	mov	r18, r25
    2d78:	22 0f       	add	r18, r18
    2d7a:	22 0f       	add	r18, r18
    2d7c:	92 0f       	add	r25, r18
    2d7e:	89 1b       	sub	r24, r25
    2d80:	80 5d       	subi	r24, 0xD0	; 208
    2d82:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2d86:	8a e3       	ldi	r24, 0x3A	; 58
    2d88:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((month % 10) + 48);
    2d8c:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    2d90:	8c 9f       	mul	r24, r28
    2d92:	81 2d       	mov	r24, r1
    2d94:	11 24       	eor	r1, r1
    2d96:	86 95       	lsr	r24
    2d98:	86 95       	lsr	r24
    2d9a:	86 95       	lsr	r24
    2d9c:	80 5d       	subi	r24, 0xD0	; 208
    2d9e:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2da2:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    2da6:	8c 9f       	mul	r24, r28
    2da8:	91 2d       	mov	r25, r1
    2daa:	11 24       	eor	r1, r1
    2dac:	96 95       	lsr	r25
    2dae:	96 95       	lsr	r25
			}
			else{
				lcd_writeString("           ");
    2db0:	96 95       	lsr	r25
    2db2:	99 0f       	add	r25, r25
    2db4:	29 2f       	mov	r18, r25
    2db6:	22 0f       	add	r18, r18
			}
			lcd_newLine();
    2db8:	22 0f       	add	r18, r18
    2dba:	92 0f       	add	r25, r18
			lcd_writeString(">4.8.");
    2dbc:	89 1b       	sub	r24, r25
    2dbe:	80 5d       	subi	r24, 0xD0	; 208
    2dc0:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
			if(eventVector[7] == 1){
    2dc4:	80 e2       	ldi	r24, 0x20	; 32
    2dc6:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2dca:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
				hour = eeprom_read(0x280);
    2dce:	8c 9f       	mul	r24, r28
    2dd0:	81 2d       	mov	r24, r1
    2dd2:	11 24       	eor	r1, r1
    2dd4:	86 95       	lsr	r24
    2dd6:	86 95       	lsr	r24
    2dd8:	86 95       	lsr	r24
				minute = eeprom_read(0x281);
    2dda:	80 5d       	subi	r24, 0xD0	; 208
    2ddc:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2de0:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    2de4:	8c 9f       	mul	r24, r28
				day = eeprom_read(0x282);
    2de6:	91 2d       	mov	r25, r1
    2de8:	11 24       	eor	r1, r1
    2dea:	96 95       	lsr	r25
    2dec:	96 95       	lsr	r25
    2dee:	96 95       	lsr	r25
    2df0:	99 0f       	add	r25, r25
				month = eeprom_read(0x283);
    2df2:	29 2f       	mov	r18, r25
    2df4:	22 0f       	add	r18, r18
    2df6:	22 0f       	add	r18, r18
    2df8:	92 0f       	add	r25, r18
    2dfa:	89 1b       	sub	r24, r25
    2dfc:	80 5d       	subi	r24, 0xD0	; 208
				lcd_writeChar((hour / 10) + 48);
    2dfe:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2e02:	8f e2       	ldi	r24, 0x2F	; 47
    2e04:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2e08:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    2e0c:	8c 9f       	mul	r24, r28
    2e0e:	81 2d       	mov	r24, r1
    2e10:	11 24       	eor	r1, r1
    2e12:	86 95       	lsr	r24
    2e14:	86 95       	lsr	r24
				lcd_writeChar((hour % 10) + 48);
    2e16:	86 95       	lsr	r24
    2e18:	80 5d       	subi	r24, 0xD0	; 208
    2e1a:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2e1e:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    2e22:	8c 9f       	mul	r24, r28
    2e24:	91 2d       	mov	r25, r1
    2e26:	11 24       	eor	r1, r1
    2e28:	96 95       	lsr	r25
    2e2a:	96 95       	lsr	r25
    2e2c:	96 95       	lsr	r25
    2e2e:	99 0f       	add	r25, r25
    2e30:	29 2f       	mov	r18, r25
    2e32:	22 0f       	add	r18, r18
    2e34:	22 0f       	add	r18, r18
    2e36:	92 0f       	add	r25, r18
				lcd_writeChar(':');
    2e38:	89 1b       	sub	r24, r25
    2e3a:	80 5d       	subi	r24, 0xD0	; 208
    2e3c:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((minute / 10) + 48);
    2e40:	04 c0       	rjmp	.+8      	; 0x2e4a <lcd_displayMenu+0x1cf6>
    2e42:	83 ec       	ldi	r24, 0xC3	; 195
    2e44:	92 e0       	ldi	r25, 0x02	; 2
    2e46:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
    2e4a:	0e 94 24 08 	call	0x1048	; 0x1048 <lcd_newLine>
    2e4e:	8d e1       	ldi	r24, 0x1D	; 29
    2e50:	93 e0       	ldi	r25, 0x03	; 3
    2e52:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
				lcd_writeChar((minute % 10) + 48);
    2e56:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <eventVector+0x7>
    2e5a:	81 30       	cpi	r24, 0x01	; 1
    2e5c:	09 f0       	breq	.+2      	; 0x2e60 <lcd_displayMenu+0x1d0c>
    2e5e:	93 c0       	rjmp	.+294    	; 0x2f86 <lcd_displayMenu+0x1e32>
    2e60:	80 e8       	ldi	r24, 0x80	; 128
    2e62:	92 e0       	ldi	r25, 0x02	; 2
    2e64:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2e68:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
    2e6c:	81 e8       	ldi	r24, 0x81	; 129
    2e6e:	92 e0       	ldi	r25, 0x02	; 2
    2e70:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2e74:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
				lcd_writeChar(' ');
    2e78:	82 e8       	ldi	r24, 0x82	; 130
    2e7a:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((day / 10) + 48);
    2e7c:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2e80:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
    2e84:	83 e8       	ldi	r24, 0x83	; 131
    2e86:	92 e0       	ldi	r25, 0x02	; 2
    2e88:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2e8c:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    2e90:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
				lcd_writeChar((day % 10) + 48);
    2e94:	cd ec       	ldi	r28, 0xCD	; 205
    2e96:	8c 9f       	mul	r24, r28
    2e98:	81 2d       	mov	r24, r1
    2e9a:	11 24       	eor	r1, r1
    2e9c:	86 95       	lsr	r24
    2e9e:	86 95       	lsr	r24
    2ea0:	86 95       	lsr	r24
    2ea2:	80 5d       	subi	r24, 0xD0	; 208
    2ea4:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2ea8:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    2eac:	8c 9f       	mul	r24, r28
    2eae:	91 2d       	mov	r25, r1
    2eb0:	11 24       	eor	r1, r1
    2eb2:	96 95       	lsr	r25
				lcd_writeChar('/');
    2eb4:	96 95       	lsr	r25
    2eb6:	96 95       	lsr	r25
    2eb8:	99 0f       	add	r25, r25
				lcd_writeChar((month / 10) + 48);
    2eba:	29 2f       	mov	r18, r25
    2ebc:	22 0f       	add	r18, r18
    2ebe:	22 0f       	add	r18, r18
    2ec0:	92 0f       	add	r25, r18
    2ec2:	89 1b       	sub	r24, r25
    2ec4:	80 5d       	subi	r24, 0xD0	; 208
    2ec6:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2eca:	8a e3       	ldi	r24, 0x3A	; 58
    2ecc:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((month % 10) + 48);
    2ed0:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    2ed4:	8c 9f       	mul	r24, r28
    2ed6:	81 2d       	mov	r24, r1
    2ed8:	11 24       	eor	r1, r1
    2eda:	86 95       	lsr	r24
    2edc:	86 95       	lsr	r24
    2ede:	86 95       	lsr	r24
    2ee0:	80 5d       	subi	r24, 0xD0	; 208
    2ee2:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2ee6:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    2eea:	8c 9f       	mul	r24, r28
    2eec:	91 2d       	mov	r25, r1
    2eee:	11 24       	eor	r1, r1
    2ef0:	96 95       	lsr	r25
    2ef2:	96 95       	lsr	r25
			}
			else{
				lcd_writeString("           ");
    2ef4:	96 95       	lsr	r25
    2ef6:	99 0f       	add	r25, r25
    2ef8:	29 2f       	mov	r18, r25
    2efa:	22 0f       	add	r18, r18
    2efc:	22 0f       	add	r18, r18
			}
			break;
		case 0x4900:
			lcd_clearDisplay();
    2efe:	92 0f       	add	r25, r18
    2f00:	89 1b       	sub	r24, r25
			lcd_writeString(" 4.8.");
    2f02:	80 5d       	subi	r24, 0xD0	; 208
    2f04:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2f08:	80 e2       	ldi	r24, 0x20	; 32
			if(eventVector[7] == 1){
    2f0a:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2f0e:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    2f12:	8c 9f       	mul	r24, r28
				hour = eeprom_read(0x280);
    2f14:	81 2d       	mov	r24, r1
    2f16:	11 24       	eor	r1, r1
    2f18:	86 95       	lsr	r24
    2f1a:	86 95       	lsr	r24
    2f1c:	86 95       	lsr	r24
    2f1e:	80 5d       	subi	r24, 0xD0	; 208
				minute = eeprom_read(0x281);
    2f20:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2f24:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    2f28:	8c 9f       	mul	r24, r28
    2f2a:	91 2d       	mov	r25, r1
				day = eeprom_read(0x282);
    2f2c:	11 24       	eor	r1, r1
    2f2e:	96 95       	lsr	r25
    2f30:	96 95       	lsr	r25
    2f32:	96 95       	lsr	r25
    2f34:	99 0f       	add	r25, r25
    2f36:	29 2f       	mov	r18, r25
				month = eeprom_read(0x283);
    2f38:	22 0f       	add	r18, r18
    2f3a:	22 0f       	add	r18, r18
    2f3c:	92 0f       	add	r25, r18
    2f3e:	89 1b       	sub	r24, r25
    2f40:	80 5d       	subi	r24, 0xD0	; 208
    2f42:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((hour / 10) + 48);
    2f46:	8f e2       	ldi	r24, 0x2F	; 47
    2f48:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2f4c:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    2f50:	8c 9f       	mul	r24, r28
    2f52:	81 2d       	mov	r24, r1
    2f54:	11 24       	eor	r1, r1
    2f56:	86 95       	lsr	r24
    2f58:	86 95       	lsr	r24
    2f5a:	86 95       	lsr	r24
				lcd_writeChar((hour % 10) + 48);
    2f5c:	80 5d       	subi	r24, 0xD0	; 208
    2f5e:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2f62:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    2f66:	8c 9f       	mul	r24, r28
    2f68:	91 2d       	mov	r25, r1
    2f6a:	11 24       	eor	r1, r1
    2f6c:	96 95       	lsr	r25
    2f6e:	96 95       	lsr	r25
    2f70:	96 95       	lsr	r25
    2f72:	99 0f       	add	r25, r25
    2f74:	29 2f       	mov	r18, r25
    2f76:	22 0f       	add	r18, r18
    2f78:	22 0f       	add	r18, r18
    2f7a:	92 0f       	add	r25, r18
    2f7c:	89 1b       	sub	r24, r25
				lcd_writeChar(':');
    2f7e:	80 5d       	subi	r24, 0xD0	; 208
    2f80:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((minute / 10) + 48);
    2f84:	8e c2       	rjmp	.+1308   	; 0x34a2 <lcd_displayMenu+0x234e>
    2f86:	83 ec       	ldi	r24, 0xC3	; 195
    2f88:	92 e0       	ldi	r25, 0x02	; 2
    2f8a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
    2f8e:	89 c2       	rjmp	.+1298   	; 0x34a2 <lcd_displayMenu+0x234e>
    2f90:	0e 94 7a 07 	call	0xef4	; 0xef4 <lcd_clearDisplay>
    2f94:	83 e2       	ldi	r24, 0x23	; 35
    2f96:	93 e0       	ldi	r25, 0x03	; 3
    2f98:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
				lcd_writeChar((minute % 10) + 48);
    2f9c:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <eventVector+0x7>
    2fa0:	81 30       	cpi	r24, 0x01	; 1
    2fa2:	09 f0       	breq	.+2      	; 0x2fa6 <lcd_displayMenu+0x1e52>
    2fa4:	93 c0       	rjmp	.+294    	; 0x30cc <lcd_displayMenu+0x1f78>
    2fa6:	80 e8       	ldi	r24, 0x80	; 128
    2fa8:	92 e0       	ldi	r25, 0x02	; 2
    2faa:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2fae:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
    2fb2:	81 e8       	ldi	r24, 0x81	; 129
    2fb4:	92 e0       	ldi	r25, 0x02	; 2
    2fb6:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2fba:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
				lcd_writeChar(' ');
    2fbe:	82 e8       	ldi	r24, 0x82	; 130
    2fc0:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((day / 10) + 48);
    2fc2:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2fc6:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
    2fca:	83 e8       	ldi	r24, 0x83	; 131
    2fcc:	92 e0       	ldi	r25, 0x02	; 2
    2fce:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    2fd2:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    2fd6:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
				lcd_writeChar((day % 10) + 48);
    2fda:	cd ec       	ldi	r28, 0xCD	; 205
    2fdc:	8c 9f       	mul	r24, r28
    2fde:	81 2d       	mov	r24, r1
    2fe0:	11 24       	eor	r1, r1
    2fe2:	86 95       	lsr	r24
    2fe4:	86 95       	lsr	r24
    2fe6:	86 95       	lsr	r24
    2fe8:	80 5d       	subi	r24, 0xD0	; 208
    2fea:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    2fee:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    2ff2:	8c 9f       	mul	r24, r28
    2ff4:	91 2d       	mov	r25, r1
    2ff6:	11 24       	eor	r1, r1
    2ff8:	96 95       	lsr	r25
				lcd_writeChar('/');
    2ffa:	96 95       	lsr	r25
    2ffc:	96 95       	lsr	r25
    2ffe:	99 0f       	add	r25, r25
				lcd_writeChar((month / 10) + 48);
    3000:	29 2f       	mov	r18, r25
    3002:	22 0f       	add	r18, r18
    3004:	22 0f       	add	r18, r18
    3006:	92 0f       	add	r25, r18
    3008:	89 1b       	sub	r24, r25
    300a:	80 5d       	subi	r24, 0xD0	; 208
    300c:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    3010:	8a e3       	ldi	r24, 0x3A	; 58
    3012:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((month % 10) + 48);
    3016:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    301a:	8c 9f       	mul	r24, r28
    301c:	81 2d       	mov	r24, r1
    301e:	11 24       	eor	r1, r1
    3020:	86 95       	lsr	r24
    3022:	86 95       	lsr	r24
    3024:	86 95       	lsr	r24
    3026:	80 5d       	subi	r24, 0xD0	; 208
    3028:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    302c:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    3030:	8c 9f       	mul	r24, r28
    3032:	91 2d       	mov	r25, r1
    3034:	11 24       	eor	r1, r1
    3036:	96 95       	lsr	r25
    3038:	96 95       	lsr	r25
			}
			else{
				lcd_writeString("           ");
    303a:	96 95       	lsr	r25
    303c:	99 0f       	add	r25, r25
    303e:	29 2f       	mov	r18, r25
    3040:	22 0f       	add	r18, r18
			}
			lcd_newLine();
    3042:	22 0f       	add	r18, r18
    3044:	92 0f       	add	r25, r18
			lcd_writeString(">4.9.");
    3046:	89 1b       	sub	r24, r25
    3048:	80 5d       	subi	r24, 0xD0	; 208
    304a:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
			if(eventVector[8] == 1){
    304e:	80 e2       	ldi	r24, 0x20	; 32
    3050:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    3054:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
				hour = eeprom_read(0x290);
    3058:	8c 9f       	mul	r24, r28
    305a:	81 2d       	mov	r24, r1
    305c:	11 24       	eor	r1, r1
    305e:	86 95       	lsr	r24
    3060:	86 95       	lsr	r24
    3062:	86 95       	lsr	r24
				minute = eeprom_read(0x291);
    3064:	80 5d       	subi	r24, 0xD0	; 208
    3066:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    306a:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    306e:	8c 9f       	mul	r24, r28
				day = eeprom_read(0x292);
    3070:	91 2d       	mov	r25, r1
    3072:	11 24       	eor	r1, r1
    3074:	96 95       	lsr	r25
    3076:	96 95       	lsr	r25
    3078:	96 95       	lsr	r25
    307a:	99 0f       	add	r25, r25
				month = eeprom_read(0x293);
    307c:	29 2f       	mov	r18, r25
    307e:	22 0f       	add	r18, r18
    3080:	22 0f       	add	r18, r18
    3082:	92 0f       	add	r25, r18
    3084:	89 1b       	sub	r24, r25
    3086:	80 5d       	subi	r24, 0xD0	; 208
				lcd_writeChar((hour / 10) + 48);
    3088:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    308c:	8f e2       	ldi	r24, 0x2F	; 47
    308e:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    3092:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    3096:	8c 9f       	mul	r24, r28
    3098:	81 2d       	mov	r24, r1
    309a:	11 24       	eor	r1, r1
    309c:	86 95       	lsr	r24
    309e:	86 95       	lsr	r24
				lcd_writeChar((hour % 10) + 48);
    30a0:	86 95       	lsr	r24
    30a2:	80 5d       	subi	r24, 0xD0	; 208
    30a4:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    30a8:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    30ac:	8c 9f       	mul	r24, r28
    30ae:	91 2d       	mov	r25, r1
    30b0:	11 24       	eor	r1, r1
    30b2:	96 95       	lsr	r25
    30b4:	96 95       	lsr	r25
    30b6:	96 95       	lsr	r25
    30b8:	99 0f       	add	r25, r25
    30ba:	29 2f       	mov	r18, r25
    30bc:	22 0f       	add	r18, r18
    30be:	22 0f       	add	r18, r18
    30c0:	92 0f       	add	r25, r18
				lcd_writeChar(':');
    30c2:	89 1b       	sub	r24, r25
    30c4:	80 5d       	subi	r24, 0xD0	; 208
    30c6:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((minute / 10) + 48);
    30ca:	04 c0       	rjmp	.+8      	; 0x30d4 <lcd_displayMenu+0x1f80>
    30cc:	83 ec       	ldi	r24, 0xC3	; 195
    30ce:	92 e0       	ldi	r25, 0x02	; 2
    30d0:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
    30d4:	0e 94 24 08 	call	0x1048	; 0x1048 <lcd_newLine>
    30d8:	89 e2       	ldi	r24, 0x29	; 41
    30da:	93 e0       	ldi	r25, 0x03	; 3
    30dc:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
				lcd_writeChar((minute % 10) + 48);
    30e0:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <eventVector+0x8>
    30e4:	81 30       	cpi	r24, 0x01	; 1
    30e6:	09 f0       	breq	.+2      	; 0x30ea <lcd_displayMenu+0x1f96>
    30e8:	93 c0       	rjmp	.+294    	; 0x3210 <lcd_displayMenu+0x20bc>
    30ea:	80 e9       	ldi	r24, 0x90	; 144
    30ec:	92 e0       	ldi	r25, 0x02	; 2
    30ee:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    30f2:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
    30f6:	81 e9       	ldi	r24, 0x91	; 145
    30f8:	92 e0       	ldi	r25, 0x02	; 2
    30fa:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    30fe:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
				lcd_writeChar(' ');
    3102:	82 e9       	ldi	r24, 0x92	; 146
    3104:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((day / 10) + 48);
    3106:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    310a:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
    310e:	83 e9       	ldi	r24, 0x93	; 147
    3110:	92 e0       	ldi	r25, 0x02	; 2
    3112:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    3116:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    311a:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
				lcd_writeChar((day % 10) + 48);
    311e:	cd ec       	ldi	r28, 0xCD	; 205
    3120:	8c 9f       	mul	r24, r28
    3122:	81 2d       	mov	r24, r1
    3124:	11 24       	eor	r1, r1
    3126:	86 95       	lsr	r24
    3128:	86 95       	lsr	r24
    312a:	86 95       	lsr	r24
    312c:	80 5d       	subi	r24, 0xD0	; 208
    312e:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    3132:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    3136:	8c 9f       	mul	r24, r28
    3138:	91 2d       	mov	r25, r1
    313a:	11 24       	eor	r1, r1
    313c:	96 95       	lsr	r25
				lcd_writeChar('/');
    313e:	96 95       	lsr	r25
    3140:	96 95       	lsr	r25
    3142:	99 0f       	add	r25, r25
				lcd_writeChar((month / 10) + 48);
    3144:	29 2f       	mov	r18, r25
    3146:	22 0f       	add	r18, r18
    3148:	22 0f       	add	r18, r18
    314a:	92 0f       	add	r25, r18
    314c:	89 1b       	sub	r24, r25
    314e:	80 5d       	subi	r24, 0xD0	; 208
    3150:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    3154:	8a e3       	ldi	r24, 0x3A	; 58
    3156:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((month % 10) + 48);
    315a:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    315e:	8c 9f       	mul	r24, r28
    3160:	81 2d       	mov	r24, r1
    3162:	11 24       	eor	r1, r1
    3164:	86 95       	lsr	r24
    3166:	86 95       	lsr	r24
    3168:	86 95       	lsr	r24
    316a:	80 5d       	subi	r24, 0xD0	; 208
    316c:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    3170:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    3174:	8c 9f       	mul	r24, r28
    3176:	91 2d       	mov	r25, r1
    3178:	11 24       	eor	r1, r1
    317a:	96 95       	lsr	r25
    317c:	96 95       	lsr	r25
			}
			else{
				lcd_writeString("           ");
    317e:	96 95       	lsr	r25
    3180:	99 0f       	add	r25, r25
    3182:	29 2f       	mov	r18, r25
    3184:	22 0f       	add	r18, r18
    3186:	22 0f       	add	r18, r18
			}
			break;
		case 0x4A00:
			lcd_clearDisplay();
    3188:	92 0f       	add	r25, r18
    318a:	89 1b       	sub	r24, r25
			lcd_writeString(" 4.9.");
    318c:	80 5d       	subi	r24, 0xD0	; 208
    318e:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    3192:	80 e2       	ldi	r24, 0x20	; 32
			if(eventVector[8] == 1){
    3194:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    3198:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    319c:	8c 9f       	mul	r24, r28
				hour = eeprom_read(0x290);
    319e:	81 2d       	mov	r24, r1
    31a0:	11 24       	eor	r1, r1
    31a2:	86 95       	lsr	r24
    31a4:	86 95       	lsr	r24
    31a6:	86 95       	lsr	r24
    31a8:	80 5d       	subi	r24, 0xD0	; 208
				minute = eeprom_read(0x291);
    31aa:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    31ae:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    31b2:	8c 9f       	mul	r24, r28
    31b4:	91 2d       	mov	r25, r1
				day = eeprom_read(0x292);
    31b6:	11 24       	eor	r1, r1
    31b8:	96 95       	lsr	r25
    31ba:	96 95       	lsr	r25
    31bc:	96 95       	lsr	r25
    31be:	99 0f       	add	r25, r25
    31c0:	29 2f       	mov	r18, r25
				month = eeprom_read(0x293);
    31c2:	22 0f       	add	r18, r18
    31c4:	22 0f       	add	r18, r18
    31c6:	92 0f       	add	r25, r18
    31c8:	89 1b       	sub	r24, r25
    31ca:	80 5d       	subi	r24, 0xD0	; 208
    31cc:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((hour / 10) + 48);
    31d0:	8f e2       	ldi	r24, 0x2F	; 47
    31d2:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    31d6:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    31da:	8c 9f       	mul	r24, r28
    31dc:	81 2d       	mov	r24, r1
    31de:	11 24       	eor	r1, r1
    31e0:	86 95       	lsr	r24
    31e2:	86 95       	lsr	r24
    31e4:	86 95       	lsr	r24
				lcd_writeChar((hour % 10) + 48);
    31e6:	80 5d       	subi	r24, 0xD0	; 208
    31e8:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    31ec:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    31f0:	8c 9f       	mul	r24, r28
    31f2:	91 2d       	mov	r25, r1
    31f4:	11 24       	eor	r1, r1
    31f6:	96 95       	lsr	r25
    31f8:	96 95       	lsr	r25
    31fa:	96 95       	lsr	r25
    31fc:	99 0f       	add	r25, r25
    31fe:	29 2f       	mov	r18, r25
    3200:	22 0f       	add	r18, r18
    3202:	22 0f       	add	r18, r18
    3204:	92 0f       	add	r25, r18
    3206:	89 1b       	sub	r24, r25
				lcd_writeChar(':');
    3208:	80 5d       	subi	r24, 0xD0	; 208
    320a:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((minute / 10) + 48);
    320e:	49 c1       	rjmp	.+658    	; 0x34a2 <lcd_displayMenu+0x234e>
    3210:	83 ec       	ldi	r24, 0xC3	; 195
    3212:	92 e0       	ldi	r25, 0x02	; 2
    3214:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
    3218:	44 c1       	rjmp	.+648    	; 0x34a2 <lcd_displayMenu+0x234e>
    321a:	0e 94 7a 07 	call	0xef4	; 0xef4 <lcd_clearDisplay>
    321e:	8f e2       	ldi	r24, 0x2F	; 47
    3220:	93 e0       	ldi	r25, 0x03	; 3
    3222:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
				lcd_writeChar((minute % 10) + 48);
    3226:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <eventVector+0x8>
    322a:	81 30       	cpi	r24, 0x01	; 1
    322c:	09 f0       	breq	.+2      	; 0x3230 <lcd_displayMenu+0x20dc>
    322e:	93 c0       	rjmp	.+294    	; 0x3356 <lcd_displayMenu+0x2202>
    3230:	80 e9       	ldi	r24, 0x90	; 144
    3232:	92 e0       	ldi	r25, 0x02	; 2
    3234:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    3238:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
    323c:	81 e9       	ldi	r24, 0x91	; 145
    323e:	92 e0       	ldi	r25, 0x02	; 2
    3240:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    3244:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
				lcd_writeChar(' ');
    3248:	82 e9       	ldi	r24, 0x92	; 146
    324a:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((day / 10) + 48);
    324c:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    3250:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
    3254:	83 e9       	ldi	r24, 0x93	; 147
    3256:	92 e0       	ldi	r25, 0x02	; 2
    3258:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    325c:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    3260:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
				lcd_writeChar((day % 10) + 48);
    3264:	cd ec       	ldi	r28, 0xCD	; 205
    3266:	8c 9f       	mul	r24, r28
    3268:	81 2d       	mov	r24, r1
    326a:	11 24       	eor	r1, r1
    326c:	86 95       	lsr	r24
    326e:	86 95       	lsr	r24
    3270:	86 95       	lsr	r24
    3272:	80 5d       	subi	r24, 0xD0	; 208
    3274:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    3278:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    327c:	8c 9f       	mul	r24, r28
    327e:	91 2d       	mov	r25, r1
    3280:	11 24       	eor	r1, r1
    3282:	96 95       	lsr	r25
				lcd_writeChar('/');
    3284:	96 95       	lsr	r25
    3286:	96 95       	lsr	r25
    3288:	99 0f       	add	r25, r25
				lcd_writeChar((month / 10) + 48);
    328a:	29 2f       	mov	r18, r25
    328c:	22 0f       	add	r18, r18
    328e:	22 0f       	add	r18, r18
    3290:	92 0f       	add	r25, r18
    3292:	89 1b       	sub	r24, r25
    3294:	80 5d       	subi	r24, 0xD0	; 208
    3296:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    329a:	8a e3       	ldi	r24, 0x3A	; 58
    329c:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((month % 10) + 48);
    32a0:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    32a4:	8c 9f       	mul	r24, r28
    32a6:	81 2d       	mov	r24, r1
    32a8:	11 24       	eor	r1, r1
    32aa:	86 95       	lsr	r24
    32ac:	86 95       	lsr	r24
    32ae:	86 95       	lsr	r24
    32b0:	80 5d       	subi	r24, 0xD0	; 208
    32b2:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    32b6:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    32ba:	8c 9f       	mul	r24, r28
    32bc:	91 2d       	mov	r25, r1
    32be:	11 24       	eor	r1, r1
    32c0:	96 95       	lsr	r25
    32c2:	96 95       	lsr	r25
			}
			else{
				lcd_writeString("           ");
    32c4:	96 95       	lsr	r25
    32c6:	99 0f       	add	r25, r25
    32c8:	29 2f       	mov	r18, r25
    32ca:	22 0f       	add	r18, r18
			}
			lcd_newLine();
    32cc:	22 0f       	add	r18, r18
    32ce:	92 0f       	add	r25, r18
			lcd_writeString(">4.A.");
    32d0:	89 1b       	sub	r24, r25
    32d2:	80 5d       	subi	r24, 0xD0	; 208
    32d4:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
			if(eventVector[9] == 1){
    32d8:	80 e2       	ldi	r24, 0x20	; 32
    32da:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    32de:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
				hour = eeprom_read(0x2A0);
    32e2:	8c 9f       	mul	r24, r28
    32e4:	81 2d       	mov	r24, r1
    32e6:	11 24       	eor	r1, r1
    32e8:	86 95       	lsr	r24
    32ea:	86 95       	lsr	r24
    32ec:	86 95       	lsr	r24
				minute = eeprom_read(0x2A1);
    32ee:	80 5d       	subi	r24, 0xD0	; 208
    32f0:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    32f4:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    32f8:	8c 9f       	mul	r24, r28
				day = eeprom_read(0x2A2);
    32fa:	91 2d       	mov	r25, r1
    32fc:	11 24       	eor	r1, r1
    32fe:	96 95       	lsr	r25
    3300:	96 95       	lsr	r25
    3302:	96 95       	lsr	r25
    3304:	99 0f       	add	r25, r25
				month = eeprom_read(0x2A3);
    3306:	29 2f       	mov	r18, r25
    3308:	22 0f       	add	r18, r18
    330a:	22 0f       	add	r18, r18
    330c:	92 0f       	add	r25, r18
    330e:	89 1b       	sub	r24, r25
    3310:	80 5d       	subi	r24, 0xD0	; 208
				lcd_writeChar((hour / 10) + 48);
    3312:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    3316:	8f e2       	ldi	r24, 0x2F	; 47
    3318:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    331c:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    3320:	8c 9f       	mul	r24, r28
    3322:	81 2d       	mov	r24, r1
    3324:	11 24       	eor	r1, r1
    3326:	86 95       	lsr	r24
    3328:	86 95       	lsr	r24
				lcd_writeChar((hour % 10) + 48);
    332a:	86 95       	lsr	r24
    332c:	80 5d       	subi	r24, 0xD0	; 208
    332e:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    3332:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    3336:	8c 9f       	mul	r24, r28
    3338:	91 2d       	mov	r25, r1
    333a:	11 24       	eor	r1, r1
    333c:	96 95       	lsr	r25
    333e:	96 95       	lsr	r25
    3340:	96 95       	lsr	r25
    3342:	99 0f       	add	r25, r25
    3344:	29 2f       	mov	r18, r25
    3346:	22 0f       	add	r18, r18
    3348:	22 0f       	add	r18, r18
    334a:	92 0f       	add	r25, r18
				lcd_writeChar(':');
    334c:	89 1b       	sub	r24, r25
    334e:	80 5d       	subi	r24, 0xD0	; 208
    3350:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((minute / 10) + 48);
    3354:	04 c0       	rjmp	.+8      	; 0x335e <lcd_displayMenu+0x220a>
    3356:	83 ec       	ldi	r24, 0xC3	; 195
    3358:	92 e0       	ldi	r25, 0x02	; 2
    335a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
    335e:	0e 94 24 08 	call	0x1048	; 0x1048 <lcd_newLine>
    3362:	85 e3       	ldi	r24, 0x35	; 53
    3364:	93 e0       	ldi	r25, 0x03	; 3
    3366:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
				lcd_writeChar((minute % 10) + 48);
    336a:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <eventVector+0x9>
    336e:	81 30       	cpi	r24, 0x01	; 1
    3370:	09 f0       	breq	.+2      	; 0x3374 <lcd_displayMenu+0x2220>
    3372:	93 c0       	rjmp	.+294    	; 0x349a <lcd_displayMenu+0x2346>
    3374:	80 ea       	ldi	r24, 0xA0	; 160
    3376:	92 e0       	ldi	r25, 0x02	; 2
    3378:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    337c:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <hour>
    3380:	81 ea       	ldi	r24, 0xA1	; 161
    3382:	92 e0       	ldi	r25, 0x02	; 2
    3384:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    3388:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <minute>
				lcd_writeChar(' ');
    338c:	82 ea       	ldi	r24, 0xA2	; 162
    338e:	92 e0       	ldi	r25, 0x02	; 2
				lcd_writeChar((day / 10) + 48);
    3390:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    3394:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <day>
    3398:	83 ea       	ldi	r24, 0xA3	; 163
    339a:	92 e0       	ldi	r25, 0x02	; 2
    339c:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read>
    33a0:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <month>
    33a4:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
				lcd_writeChar((day % 10) + 48);
    33a8:	cd ec       	ldi	r28, 0xCD	; 205
    33aa:	8c 9f       	mul	r24, r28
    33ac:	81 2d       	mov	r24, r1
    33ae:	11 24       	eor	r1, r1
    33b0:	86 95       	lsr	r24
    33b2:	86 95       	lsr	r24
    33b4:	86 95       	lsr	r24
    33b6:	80 5d       	subi	r24, 0xD0	; 208
    33b8:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    33bc:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <hour>
    33c0:	8c 9f       	mul	r24, r28
    33c2:	91 2d       	mov	r25, r1
    33c4:	11 24       	eor	r1, r1
    33c6:	96 95       	lsr	r25
				lcd_writeChar('/');
    33c8:	96 95       	lsr	r25
    33ca:	96 95       	lsr	r25
    33cc:	99 0f       	add	r25, r25
				lcd_writeChar((month / 10) + 48);
    33ce:	29 2f       	mov	r18, r25
    33d0:	22 0f       	add	r18, r18
    33d2:	22 0f       	add	r18, r18
    33d4:	92 0f       	add	r25, r18
    33d6:	89 1b       	sub	r24, r25
    33d8:	80 5d       	subi	r24, 0xD0	; 208
    33da:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    33de:	8a e3       	ldi	r24, 0x3A	; 58
    33e0:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
				lcd_writeChar((month % 10) + 48);
    33e4:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    33e8:	8c 9f       	mul	r24, r28
    33ea:	81 2d       	mov	r24, r1
    33ec:	11 24       	eor	r1, r1
    33ee:	86 95       	lsr	r24
    33f0:	86 95       	lsr	r24
    33f2:	86 95       	lsr	r24
    33f4:	80 5d       	subi	r24, 0xD0	; 208
    33f6:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    33fa:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <minute>
    33fe:	8c 9f       	mul	r24, r28
    3400:	91 2d       	mov	r25, r1
    3402:	11 24       	eor	r1, r1
    3404:	96 95       	lsr	r25
    3406:	96 95       	lsr	r25
			}
			else{
				lcd_writeString("           ");
    3408:	96 95       	lsr	r25
    340a:	99 0f       	add	r25, r25
    340c:	29 2f       	mov	r18, r25
    340e:	22 0f       	add	r18, r18
			}
			break;
	}
}
    3410:	22 0f       	add	r18, r18
    3412:	92 0f       	add	r25, r18
    3414:	89 1b       	sub	r24, r25
    3416:	80 5d       	subi	r24, 0xD0	; 208
    3418:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    341c:	80 e2       	ldi	r24, 0x20	; 32
    341e:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    3422:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    3426:	8c 9f       	mul	r24, r28
    3428:	81 2d       	mov	r24, r1
    342a:	11 24       	eor	r1, r1
    342c:	86 95       	lsr	r24
    342e:	86 95       	lsr	r24
    3430:	86 95       	lsr	r24
    3432:	80 5d       	subi	r24, 0xD0	; 208
    3434:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    3438:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <day>
    343c:	8c 9f       	mul	r24, r28
    343e:	91 2d       	mov	r25, r1
    3440:	11 24       	eor	r1, r1
    3442:	96 95       	lsr	r25
    3444:	96 95       	lsr	r25
    3446:	96 95       	lsr	r25
    3448:	99 0f       	add	r25, r25
    344a:	29 2f       	mov	r18, r25
    344c:	22 0f       	add	r18, r18
    344e:	22 0f       	add	r18, r18
    3450:	92 0f       	add	r25, r18
    3452:	89 1b       	sub	r24, r25
    3454:	80 5d       	subi	r24, 0xD0	; 208
    3456:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    345a:	8f e2       	ldi	r24, 0x2F	; 47
    345c:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    3460:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    3464:	8c 9f       	mul	r24, r28
    3466:	81 2d       	mov	r24, r1
    3468:	11 24       	eor	r1, r1
    346a:	86 95       	lsr	r24
    346c:	86 95       	lsr	r24
    346e:	86 95       	lsr	r24
    3470:	80 5d       	subi	r24, 0xD0	; 208
    3472:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    3476:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <month>
    347a:	8c 9f       	mul	r24, r28
    347c:	91 2d       	mov	r25, r1
    347e:	11 24       	eor	r1, r1
    3480:	96 95       	lsr	r25
    3482:	96 95       	lsr	r25
    3484:	96 95       	lsr	r25
    3486:	99 0f       	add	r25, r25
    3488:	29 2f       	mov	r18, r25
    348a:	22 0f       	add	r18, r18
    348c:	22 0f       	add	r18, r18
    348e:	92 0f       	add	r25, r18
    3490:	89 1b       	sub	r24, r25
    3492:	80 5d       	subi	r24, 0xD0	; 208
    3494:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
    3498:	04 c0       	rjmp	.+8      	; 0x34a2 <lcd_displayMenu+0x234e>
    349a:	83 ec       	ldi	r24, 0xC3	; 195
    349c:	92 e0       	ldi	r25, 0x02	; 2
    349e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
    34a2:	df 91       	pop	r29
    34a4:	cf 91       	pop	r28
    34a6:	1f 91       	pop	r17
    34a8:	0f 91       	pop	r16
    34aa:	08 95       	ret

000034ac <lcd_displayLockScreen>:
	aux = aux % 10;
	lcd_writeChar(aux + 48);
	lcd_writeChar('C');
}

void lcd_displayLockScreen(u16 temperatureVoltage, u8 date[5]){
    34ac:	ef 92       	push	r14
    34ae:	ff 92       	push	r15
    34b0:	0f 93       	push	r16
    34b2:	1f 93       	push	r17
    34b4:	cf 93       	push	r28
    34b6:	df 93       	push	r29
    34b8:	8b 01       	movw	r16, r22
	temperatureVoltage = temperatureVoltage * 4.49657869012707722;
    34ba:	bc 01       	movw	r22, r24
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	27 d3       	rcall	.+1614   	; 0x3b10 <__floatunsisf>
    34c2:	29 ef       	ldi	r18, 0xF9	; 249
    34c4:	33 ee       	ldi	r19, 0xE3	; 227
    34c6:	4f e8       	ldi	r20, 0x8F	; 143
    34c8:	50 e4       	ldi	r21, 0x40	; 64
	s16 aux = (temperatureVoltage - 750);
    34ca:	b0 d3       	rcall	.+1888   	; 0x3c2c <__mulsf3>
    34cc:	f5 d2       	rcall	.+1514   	; 0x3ab8 <__fixunssfsi>
    34ce:	cb 01       	movw	r24, r22
    34d0:	8e 5e       	subi	r24, 0xEE	; 238
	aux /= 10;
    34d2:	92 40       	sbci	r25, 0x02	; 2
    34d4:	6a e0       	ldi	r22, 0x0A	; 10
    34d6:	70 e0       	ldi	r23, 0x00	; 0
    34d8:	0c d4       	rcall	.+2072   	; 0x3cf2 <__divmodhi4>
	aux += 25;
    34da:	7b 01       	movw	r14, r22
    34dc:	89 e1       	ldi	r24, 0x19	; 25
    34de:	e8 0e       	add	r14, r24
    34e0:	f1 1c       	adc	r15, r1
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
	u8 unreadCounter = 0;
    34e6:	d0 e0       	ldi	r29, 0x00	; 0
	for(u8 i = 0; i < 10; i++){
		if(unreadMessageVector[i] == 1){
    34e8:	f9 01       	movw	r30, r18
    34ea:	e5 5b       	subi	r30, 0xB5	; 181
    34ec:	fc 4f       	sbci	r31, 0xFC	; 252
    34ee:	90 81       	ld	r25, Z
    34f0:	91 30       	cpi	r25, 0x01	; 1
    34f2:	09 f4       	brne	.+2      	; 0x34f6 <lcd_displayLockScreen+0x4a>
			unreadCounter++;
    34f4:	df 5f       	subi	r29, 0xFF	; 255
    34f6:	2f 5f       	subi	r18, 0xFF	; 255
    34f8:	3f 4f       	sbci	r19, 0xFF	; 255
	temperatureVoltage = temperatureVoltage * 4.49657869012707722;
	s16 aux = (temperatureVoltage - 750);
	aux /= 10;
	aux += 25;
	u8 unreadCounter = 0;
	for(u8 i = 0; i < 10; i++){
    34fa:	2a 30       	cpi	r18, 0x0A	; 10
    34fc:	31 05       	cpc	r19, r1
    34fe:	a1 f7       	brne	.-24     	; 0x34e8 <lcd_displayLockScreen+0x3c>
		if(unreadMessageVector[i] == 1){
			unreadCounter++;
		}
	}
	lcd_clearDisplay();
    3500:	0e 94 7a 07 	call	0xef4	; 0xef4 <lcd_clearDisplay>
	lcd_resetCursor();
    3504:	0e 94 95 07 	call	0xf2a	; 0xf2a <lcd_resetCursor>
	lcd_writeChar((date[0] / 10) + 48);
    3508:	f8 01       	movw	r30, r16
    350a:	80 81       	ld	r24, Z
    350c:	cd ec       	ldi	r28, 0xCD	; 205
    350e:	8c 9f       	mul	r24, r28
    3510:	81 2d       	mov	r24, r1
    3512:	11 24       	eor	r1, r1
    3514:	86 95       	lsr	r24
    3516:	86 95       	lsr	r24
    3518:	86 95       	lsr	r24
    351a:	80 5d       	subi	r24, 0xD0	; 208
    351c:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
	lcd_writeChar((date[0] % 10) + 48);
    3520:	f8 01       	movw	r30, r16
    3522:	80 81       	ld	r24, Z
    3524:	8c 9f       	mul	r24, r28
    3526:	91 2d       	mov	r25, r1
    3528:	11 24       	eor	r1, r1
    352a:	96 95       	lsr	r25
    352c:	96 95       	lsr	r25
    352e:	96 95       	lsr	r25
    3530:	99 0f       	add	r25, r25
    3532:	29 2f       	mov	r18, r25
    3534:	22 0f       	add	r18, r18
    3536:	22 0f       	add	r18, r18
    3538:	92 0f       	add	r25, r18
    353a:	89 1b       	sub	r24, r25
    353c:	80 5d       	subi	r24, 0xD0	; 208
    353e:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
	lcd_writeChar(':');
    3542:	8a e3       	ldi	r24, 0x3A	; 58
    3544:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
	lcd_writeChar((date[1] / 10) + 48);
    3548:	f8 01       	movw	r30, r16
    354a:	81 81       	ldd	r24, Z+1	; 0x01
    354c:	8c 9f       	mul	r24, r28
    354e:	81 2d       	mov	r24, r1
    3550:	11 24       	eor	r1, r1
    3552:	86 95       	lsr	r24
    3554:	86 95       	lsr	r24
    3556:	86 95       	lsr	r24
    3558:	80 5d       	subi	r24, 0xD0	; 208
    355a:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
	lcd_writeChar((date[1] % 10) + 48);
    355e:	f8 01       	movw	r30, r16
    3560:	81 81       	ldd	r24, Z+1	; 0x01
    3562:	8c 9f       	mul	r24, r28
    3564:	91 2d       	mov	r25, r1
    3566:	11 24       	eor	r1, r1
    3568:	96 95       	lsr	r25
    356a:	96 95       	lsr	r25
    356c:	96 95       	lsr	r25
    356e:	99 0f       	add	r25, r25
    3570:	29 2f       	mov	r18, r25
    3572:	22 0f       	add	r18, r18
    3574:	22 0f       	add	r18, r18
    3576:	92 0f       	add	r25, r18
    3578:	89 1b       	sub	r24, r25
    357a:	80 5d       	subi	r24, 0xD0	; 208
    357c:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
	lcd_writeChar(' ');
    3580:	80 e2       	ldi	r24, 0x20	; 32
    3582:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
	lcd_writeChar((date[2] / 10) + 48);
    3586:	f8 01       	movw	r30, r16
    3588:	82 81       	ldd	r24, Z+2	; 0x02
    358a:	8c 9f       	mul	r24, r28
    358c:	81 2d       	mov	r24, r1
    358e:	11 24       	eor	r1, r1
    3590:	86 95       	lsr	r24
    3592:	86 95       	lsr	r24
    3594:	86 95       	lsr	r24
    3596:	80 5d       	subi	r24, 0xD0	; 208
    3598:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
	lcd_writeChar((date[2] % 10) + 48);
    359c:	f8 01       	movw	r30, r16
    359e:	82 81       	ldd	r24, Z+2	; 0x02
    35a0:	8c 9f       	mul	r24, r28
    35a2:	91 2d       	mov	r25, r1
    35a4:	11 24       	eor	r1, r1
    35a6:	96 95       	lsr	r25
    35a8:	96 95       	lsr	r25
    35aa:	96 95       	lsr	r25
    35ac:	99 0f       	add	r25, r25
    35ae:	29 2f       	mov	r18, r25
    35b0:	22 0f       	add	r18, r18
    35b2:	22 0f       	add	r18, r18
    35b4:	92 0f       	add	r25, r18
    35b6:	89 1b       	sub	r24, r25
    35b8:	80 5d       	subi	r24, 0xD0	; 208
    35ba:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
	lcd_writeChar('/');
    35be:	8f e2       	ldi	r24, 0x2F	; 47
    35c0:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
	lcd_writeChar((date[3] / 10) + 48);
    35c4:	f8 01       	movw	r30, r16
    35c6:	83 81       	ldd	r24, Z+3	; 0x03
    35c8:	8c 9f       	mul	r24, r28
    35ca:	81 2d       	mov	r24, r1
    35cc:	11 24       	eor	r1, r1
    35ce:	86 95       	lsr	r24
    35d0:	86 95       	lsr	r24
    35d2:	86 95       	lsr	r24
    35d4:	80 5d       	subi	r24, 0xD0	; 208
    35d6:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
	lcd_writeChar((date[3] % 10) + 48);
    35da:	f8 01       	movw	r30, r16
    35dc:	83 81       	ldd	r24, Z+3	; 0x03
    35de:	8c 9f       	mul	r24, r28
    35e0:	91 2d       	mov	r25, r1
    35e2:	11 24       	eor	r1, r1
    35e4:	96 95       	lsr	r25
    35e6:	96 95       	lsr	r25
    35e8:	96 95       	lsr	r25
    35ea:	99 0f       	add	r25, r25
    35ec:	29 2f       	mov	r18, r25
    35ee:	22 0f       	add	r18, r18
    35f0:	22 0f       	add	r18, r18
    35f2:	92 0f       	add	r25, r18
    35f4:	89 1b       	sub	r24, r25
    35f6:	80 5d       	subi	r24, 0xD0	; 208
    35f8:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
	lcd_writeChar('/');
    35fc:	8f e2       	ldi	r24, 0x2F	; 47
    35fe:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
	lcd_writeChar((date[4] / 10) + 48);
    3602:	f8 01       	movw	r30, r16
    3604:	84 81       	ldd	r24, Z+4	; 0x04
    3606:	8c 9f       	mul	r24, r28
    3608:	81 2d       	mov	r24, r1
    360a:	11 24       	eor	r1, r1
    360c:	86 95       	lsr	r24
    360e:	86 95       	lsr	r24
    3610:	86 95       	lsr	r24
    3612:	80 5d       	subi	r24, 0xD0	; 208
    3614:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
	lcd_writeChar((date[4] % 10) + 48);
    3618:	f8 01       	movw	r30, r16
    361a:	84 81       	ldd	r24, Z+4	; 0x04
    361c:	8c 9f       	mul	r24, r28
    361e:	91 2d       	mov	r25, r1
    3620:	11 24       	eor	r1, r1
    3622:	96 95       	lsr	r25
    3624:	96 95       	lsr	r25
    3626:	96 95       	lsr	r25
    3628:	99 0f       	add	r25, r25
    362a:	29 2f       	mov	r18, r25
    362c:	22 0f       	add	r18, r18
    362e:	22 0f       	add	r18, r18
    3630:	92 0f       	add	r25, r18
    3632:	89 1b       	sub	r24, r25
    3634:	80 5d       	subi	r24, 0xD0	; 208
    3636:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
	lcd_newLine();
    363a:	0e 94 24 08 	call	0x1048	; 0x1048 <lcd_newLine>
	lcd_writeChar(aux / 10 + 48);
    363e:	c7 01       	movw	r24, r14
    3640:	6a e0       	ldi	r22, 0x0A	; 10
    3642:	70 e0       	ldi	r23, 0x00	; 0
    3644:	56 d3       	rcall	.+1708   	; 0x3cf2 <__divmodhi4>
    3646:	18 2f       	mov	r17, r24
    3648:	80 e3       	ldi	r24, 0x30	; 48
    364a:	86 0f       	add	r24, r22
    364c:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
	aux = aux % 10;
	lcd_writeChar(aux + 48);
    3650:	80 e3       	ldi	r24, 0x30	; 48
    3652:	81 0f       	add	r24, r17
    3654:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
	lcd_writeChar('C');
    3658:	83 e4       	ldi	r24, 0x43	; 67
    365a:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
	lcd_writeString(" - ");
    365e:	8b e3       	ldi	r24, 0x3B	; 59
    3660:	93 e0       	ldi	r25, 0x03	; 3
    3662:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
	lcd_writeChar((unreadCounter / 10) + 48);
    3666:	dc 9f       	mul	r29, r28
    3668:	c1 2d       	mov	r28, r1
    366a:	11 24       	eor	r1, r1
    366c:	c6 95       	lsr	r28
    366e:	c6 95       	lsr	r28
    3670:	c6 95       	lsr	r28
    3672:	80 e3       	ldi	r24, 0x30	; 48
    3674:	8c 0f       	add	r24, r28
    3676:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
	lcd_writeChar((unreadCounter % 10) + 48);
    367a:	cc 0f       	add	r28, r28
    367c:	8c 2f       	mov	r24, r28
    367e:	88 0f       	add	r24, r24
    3680:	88 0f       	add	r24, r24
    3682:	c8 0f       	add	r28, r24
    3684:	8d 2f       	mov	r24, r29
    3686:	8c 1b       	sub	r24, r28
    3688:	80 5d       	subi	r24, 0xD0	; 208
    368a:	0e 94 3f 08 	call	0x107e	; 0x107e <lcd_writeChar>
	lcd_writeString(" unread");
    368e:	8f e3       	ldi	r24, 0x3F	; 63
    3690:	93 e0       	ldi	r25, 0x03	; 3
    3692:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <lcd_writeString>
    3696:	df 91       	pop	r29
    3698:	cf 91       	pop	r28
    369a:	1f 91       	pop	r17
    369c:	0f 91       	pop	r16
    369e:	ff 90       	pop	r15
    36a0:	ef 90       	pop	r14
    36a2:	08 95       	ret

000036a4 <setBit>:
 */ 

#include "math.h"

void setBit(volatile u8 *registerName, u8 position){
	*registerName |= (1 << position);
    36a4:	fc 01       	movw	r30, r24
    36a6:	40 81       	ld	r20, Z
    36a8:	21 e0       	ldi	r18, 0x01	; 1
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	02 c0       	rjmp	.+4      	; 0x36b2 <setBit+0xe>
    36ae:	22 0f       	add	r18, r18
    36b0:	33 1f       	adc	r19, r19
    36b2:	6a 95       	dec	r22
    36b4:	e2 f7       	brpl	.-8      	; 0x36ae <setBit+0xa>
    36b6:	24 2b       	or	r18, r20
    36b8:	20 83       	st	Z, r18
    36ba:	08 95       	ret

000036bc <clearBit>:
}

void clearBit(volatile u8 *registerName, u8 position){
    36bc:	fc 01       	movw	r30, r24
	*registerName &= ~(1 << position);
    36be:	90 81       	ld	r25, Z
    36c0:	21 e0       	ldi	r18, 0x01	; 1
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	02 c0       	rjmp	.+4      	; 0x36ca <clearBit+0xe>
    36c6:	22 0f       	add	r18, r18
    36c8:	33 1f       	adc	r19, r19
    36ca:	6a 95       	dec	r22
    36cc:	e2 f7       	brpl	.-8      	; 0x36c6 <clearBit+0xa>
    36ce:	20 95       	com	r18
    36d0:	29 23       	and	r18, r25
    36d2:	20 83       	st	Z, r18
    36d4:	08 95       	ret

000036d6 <toggleBit>:
}

void toggleBit(volatile u8 *registerName, u8 position){
	*registerName ^= (1 << position);
    36d6:	fc 01       	movw	r30, r24
    36d8:	40 81       	ld	r20, Z
    36da:	21 e0       	ldi	r18, 0x01	; 1
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	02 c0       	rjmp	.+4      	; 0x36e4 <toggleBit+0xe>
    36e0:	22 0f       	add	r18, r18
    36e2:	33 1f       	adc	r19, r19
    36e4:	6a 95       	dec	r22
    36e6:	e2 f7       	brpl	.-8      	; 0x36e0 <toggleBit+0xa>
    36e8:	24 27       	eor	r18, r20
    36ea:	20 83       	st	Z, r18
    36ec:	08 95       	ret

000036ee <updateBit>:
}

void updateBit(volatile u8 *registerName, u8 position, u8 value){
    36ee:	fc 01       	movw	r30, r24
    36f0:	94 2f       	mov	r25, r20
	u8 newValue = value << position;
	newValue |= (*registerName & ~(1 << position));
    36f2:	20 81       	ld	r18, Z
    36f4:	41 e0       	ldi	r20, 0x01	; 1
    36f6:	50 e0       	ldi	r21, 0x00	; 0
    36f8:	06 2e       	mov	r0, r22
    36fa:	02 c0       	rjmp	.+4      	; 0x3700 <updateBit+0x12>
    36fc:	44 0f       	add	r20, r20
    36fe:	55 1f       	adc	r21, r21
    3700:	0a 94       	dec	r0
    3702:	e2 f7       	brpl	.-8      	; 0x36fc <updateBit+0xe>
    3704:	40 95       	com	r20
    3706:	50 95       	com	r21
    3708:	24 23       	and	r18, r20
    370a:	49 2f       	mov	r20, r25
    370c:	50 e0       	ldi	r21, 0x00	; 0
    370e:	02 c0       	rjmp	.+4      	; 0x3714 <updateBit+0x26>
    3710:	44 0f       	add	r20, r20
    3712:	55 1f       	adc	r21, r21
    3714:	6a 95       	dec	r22
    3716:	e2 f7       	brpl	.-8      	; 0x3710 <updateBit+0x22>
    3718:	42 2b       	or	r20, r18
	*registerName = newValue;
    371a:	40 83       	st	Z, r20
    371c:	08 95       	ret

0000371e <checkBit>:
}

bitValue checkBit(u8 registerName, u8 position){
	return (registerName >> position) & 1;
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	02 c0       	rjmp	.+4      	; 0x3726 <checkBit+0x8>
    3722:	95 95       	asr	r25
    3724:	87 95       	ror	r24
    3726:	6a 95       	dec	r22
    3728:	e2 f7       	brpl	.-8      	; 0x3722 <checkBit+0x4>
    372a:	81 70       	andi	r24, 0x01	; 1
    372c:	08 95       	ret

0000372e <spi_init>:
void spi_start(){
	setBit(&SPCR, SPE);
}

void spi_stop(){
	clearBit(&SPCR, SPE);
    372e:	64 e0       	ldi	r22, 0x04	; 4
    3730:	8c e4       	ldi	r24, 0x4C	; 76
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	b7 df       	rcall	.-146    	; 0x36a4 <setBit>
    3736:	64 e0       	ldi	r22, 0x04	; 4
    3738:	84 e2       	ldi	r24, 0x24	; 36
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	b3 df       	rcall	.-154    	; 0x36a4 <setBit>
    373e:	65 e0       	ldi	r22, 0x05	; 5
    3740:	84 e2       	ldi	r24, 0x24	; 36
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	af df       	rcall	.-162    	; 0x36a4 <setBit>
    3746:	67 e0       	ldi	r22, 0x07	; 7
    3748:	84 e2       	ldi	r24, 0x24	; 36
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	ab df       	rcall	.-170    	; 0x36a4 <setBit>
    374e:	66 e0       	ldi	r22, 0x06	; 6
    3750:	84 e2       	ldi	r24, 0x24	; 36
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	b3 df       	rcall	.-154    	; 0x36bc <clearBit>
    3756:	65 e0       	ldi	r22, 0x05	; 5
    3758:	8c e4       	ldi	r24, 0x4C	; 76
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	af df       	rcall	.-162    	; 0x36bc <clearBit>
    375e:	63 e0       	ldi	r22, 0x03	; 3
    3760:	8c e4       	ldi	r24, 0x4C	; 76
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	ab df       	rcall	.-170    	; 0x36bc <clearBit>
    3766:	62 e0       	ldi	r22, 0x02	; 2
    3768:	8c e4       	ldi	r24, 0x4C	; 76
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	a7 df       	rcall	.-178    	; 0x36bc <clearBit>
    376e:	60 e0       	ldi	r22, 0x00	; 0
    3770:	8c e4       	ldi	r24, 0x4C	; 76
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	a3 df       	rcall	.-186    	; 0x36bc <clearBit>
    3776:	60 e0       	ldi	r22, 0x00	; 0
    3778:	8c e4       	ldi	r24, 0x4C	; 76
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	9f df       	rcall	.-194    	; 0x36bc <clearBit>
    377e:	61 e0       	ldi	r22, 0x01	; 1
    3780:	8c e4       	ldi	r24, 0x4C	; 76
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	9b cf       	rjmp	.-202    	; 0x36bc <clearBit>
    3786:	08 95       	ret

00003788 <spi_start>:
    3788:	66 e0       	ldi	r22, 0x06	; 6
    378a:	8c e4       	ldi	r24, 0x4C	; 76
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	8a cf       	rjmp	.-236    	; 0x36a4 <setBit>
    3790:	08 95       	ret

00003792 <spi_transferData>:
}

u8 spi_transferData(u8 data){
	SPDR = data;
    3792:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    3794:	0d b4       	in	r0, 0x2d	; 45
    3796:	07 fe       	sbrs	r0, 7
    3798:	fd cf       	rjmp	.-6      	; 0x3794 <spi_transferData+0x2>
	data = SPDR;
    379a:	8e b5       	in	r24, 0x2e	; 46
	return data;
}
    379c:	08 95       	ret

0000379e <spi_readData>:

u8 spi_readData(){
	u8 value = 0;
	value = spi_transferData(0x00);
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	f8 cf       	rjmp	.-16     	; 0x3792 <spi_transferData>
	return value;
}
    37a2:	08 95       	ret

000037a4 <spi_writeData>:

void spi_writeData(u8 data){
    37a4:	f6 cf       	rjmp	.-20     	; 0x3792 <spi_transferData>
    37a6:	08 95       	ret

000037a8 <uart_init>:
	
}

void uart_stop(bool uartTx, bool uartRx){
	clearBit(&UCSR0B, RXEN0);
	clearBit(&UCSR0B, TXEN0);
    37a8:	0f 93       	push	r16
    37aa:	1f 93       	push	r17
    37ac:	cf 93       	push	r28
    37ae:	df 93       	push	r29
    37b0:	08 2f       	mov	r16, r24
    37b2:	16 2f       	mov	r17, r22
    37b4:	d4 2f       	mov	r29, r20
    37b6:	c2 2f       	mov	r28, r18
    37b8:	61 e0       	ldi	r22, 0x01	; 1
    37ba:	8a e2       	ldi	r24, 0x2A	; 42
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	72 df       	rcall	.-284    	; 0x36a4 <setBit>
    37c0:	60 e0       	ldi	r22, 0x00	; 0
    37c2:	8a e2       	ldi	r24, 0x2A	; 42
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	7a df       	rcall	.-268    	; 0x36bc <clearBit>
    37c8:	61 e0       	ldi	r22, 0x01	; 1
    37ca:	80 ec       	ldi	r24, 0xC0	; 192
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	76 df       	rcall	.-276    	; 0x36bc <clearBit>
    37d0:	62 e0       	ldi	r22, 0x02	; 2
    37d2:	81 ec       	ldi	r24, 0xC1	; 193
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	72 df       	rcall	.-284    	; 0x36bc <clearBit>
    37d8:	62 e0       	ldi	r22, 0x02	; 2
    37da:	82 ec       	ldi	r24, 0xC2	; 194
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	62 df       	rcall	.-316    	; 0x36a4 <setBit>
    37e0:	61 e0       	ldi	r22, 0x01	; 1
    37e2:	82 ec       	ldi	r24, 0xC2	; 194
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	5e df       	rcall	.-324    	; 0x36a4 <setBit>
    37e8:	67 e0       	ldi	r22, 0x07	; 7
    37ea:	82 ec       	ldi	r24, 0xC2	; 194
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	66 df       	rcall	.-308    	; 0x36bc <clearBit>
    37f0:	40 2f       	mov	r20, r16
    37f2:	66 e0       	ldi	r22, 0x06	; 6
    37f4:	82 ec       	ldi	r24, 0xC2	; 194
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	7a df       	rcall	.-268    	; 0x36ee <updateBit>
    37fa:	65 e0       	ldi	r22, 0x05	; 5
    37fc:	82 ec       	ldi	r24, 0xC2	; 194
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	51 df       	rcall	.-350    	; 0x36a4 <setBit>
    3802:	41 2f       	mov	r20, r17
    3804:	64 e0       	ldi	r22, 0x04	; 4
    3806:	82 ec       	ldi	r24, 0xC2	; 194
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	71 df       	rcall	.-286    	; 0x36ee <updateBit>
    380c:	4d 2f       	mov	r20, r29
    380e:	63 e0       	ldi	r22, 0x03	; 3
    3810:	82 ec       	ldi	r24, 0xC2	; 194
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	6c df       	rcall	.-296    	; 0x36ee <updateBit>
    3816:	2c 2f       	mov	r18, r28
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    381e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    3822:	67 e0       	ldi	r22, 0x07	; 7
    3824:	81 ec       	ldi	r24, 0xC1	; 193
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	3d df       	rcall	.-390    	; 0x36a4 <setBit>
    382a:	df 91       	pop	r29
    382c:	cf 91       	pop	r28
    382e:	1f 91       	pop	r17
    3830:	0f 91       	pop	r16
    3832:	08 95       	ret

00003834 <uart_start>:
    3834:	cf 93       	push	r28
    3836:	c8 2f       	mov	r28, r24
    3838:	46 2f       	mov	r20, r22
    383a:	64 e0       	ldi	r22, 0x04	; 4
    383c:	81 ec       	ldi	r24, 0xC1	; 193
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	56 df       	rcall	.-340    	; 0x36ee <updateBit>
    3842:	4c 2f       	mov	r20, r28
    3844:	63 e0       	ldi	r22, 0x03	; 3
    3846:	81 ec       	ldi	r24, 0xC1	; 193
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	51 df       	rcall	.-350    	; 0x36ee <updateBit>
    384c:	cf 91       	pop	r28
    384e:	08 95       	ret

00003850 <uart_transmit>:
}

void uart_transmit(u8 data){
	while(!(UCSR0A & (1 << UDRE0)));
    3850:	e0 ec       	ldi	r30, 0xC0	; 192
    3852:	f0 e0       	ldi	r31, 0x00	; 0
    3854:	90 81       	ld	r25, Z
    3856:	95 ff       	sbrs	r25, 5
    3858:	fd cf       	rjmp	.-6      	; 0x3854 <uart_transmit+0x4>
	UDR0 = data;
    385a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    385e:	08 95       	ret

00003860 <__vector_20>:
//extern volatile u8 dcSpeedRight;
//extern volatile u8 cannonState;
//extern volatile u8 rotatingFlag;


ISR(USART0_RX_vect){
    3860:	1f 92       	push	r1
    3862:	0f 92       	push	r0
    3864:	0f b6       	in	r0, 0x3f	; 63
    3866:	0f 92       	push	r0
    3868:	11 24       	eor	r1, r1
    386a:	0b b6       	in	r0, 0x3b	; 59
    386c:	0f 92       	push	r0
    386e:	ff 92       	push	r15
    3870:	0f 93       	push	r16
    3872:	1f 93       	push	r17
    3874:	2f 93       	push	r18
    3876:	3f 93       	push	r19
    3878:	4f 93       	push	r20
    387a:	5f 93       	push	r21
    387c:	6f 93       	push	r22
    387e:	7f 93       	push	r23
    3880:	8f 93       	push	r24
    3882:	9f 93       	push	r25
    3884:	af 93       	push	r26
    3886:	bf 93       	push	r27
    3888:	cf 93       	push	r28
    388a:	df 93       	push	r29
    388c:	ef 93       	push	r30
    388e:	ff 93       	push	r31
	aux = UDR0;
    3890:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    3894:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <aux>
	u8 ok = 0, counter = 0;
	if(aux < 200){
    3898:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <aux>
    389c:	88 3c       	cpi	r24, 0xC8	; 200
    389e:	08 f0       	brcs	.+2      	; 0x38a2 <__vector_20+0x42>
    38a0:	d0 c0       	rjmp	.+416    	; 0x3a42 <__vector_20+0x1e2>
		if(aux == '!'){
    38a2:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <aux>
    38a6:	81 32       	cpi	r24, 0x21	; 33
    38a8:	09 f0       	breq	.+2      	; 0x38ac <__vector_20+0x4c>
    38aa:	97 c0       	rjmp	.+302    	; 0x39da <__vector_20+0x17a>
			while(counter <= 10){
				counter++;
				if(unreadMessageVector[((eepromUnreadMessageAddress & 0xF0) - 0x10) >> 4] == 0){
    38ac:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <eepromUnreadMessageAddress>
    38b0:	f0 91 77 03 	lds	r31, 0x0377	; 0x800377 <eepromUnreadMessageAddress+0x1>
    38b4:	e0 7f       	andi	r30, 0xF0	; 240
    38b6:	ff 27       	eor	r31, r31
    38b8:	70 97       	sbiw	r30, 0x10	; 16
    38ba:	f2 95       	swap	r31
    38bc:	e2 95       	swap	r30
    38be:	ef 70       	andi	r30, 0x0F	; 15
    38c0:	ef 27       	eor	r30, r31
    38c2:	ff 70       	andi	r31, 0x0F	; 15
    38c4:	ef 27       	eor	r30, r31
    38c6:	e5 5b       	subi	r30, 0xB5	; 181
    38c8:	fc 4f       	sbci	r31, 0xFC	; 252
    38ca:	80 81       	ld	r24, Z
    38cc:	88 23       	and	r24, r24
    38ce:	09 f4       	brne	.+2      	; 0x38d2 <__vector_20+0x72>
    38d0:	d5 c0       	rjmp	.+426    	; 0x3a7c <__vector_20+0x21c>
    38d2:	2b e0       	ldi	r18, 0x0B	; 11
					break;
				}
				else{
					eepromUnreadMessageAddress += 0x10;
					if(eepromUnreadMessageAddress >= 0xB0){
						eepromUnreadMessageAddress = 0x10;
    38d4:	40 e1       	ldi	r20, 0x10	; 16
    38d6:	50 e0       	ldi	r21, 0x00	; 0
    38d8:	13 c0       	rjmp	.+38     	; 0x3900 <__vector_20+0xa0>
	u8 ok = 0, counter = 0;
	if(aux < 200){
		if(aux == '!'){
			while(counter <= 10){
				counter++;
				if(unreadMessageVector[((eepromUnreadMessageAddress & 0xF0) - 0x10) >> 4] == 0){
    38da:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <eepromUnreadMessageAddress>
    38de:	f0 91 77 03 	lds	r31, 0x0377	; 0x800377 <eepromUnreadMessageAddress+0x1>
    38e2:	e0 7f       	andi	r30, 0xF0	; 240
    38e4:	ff 27       	eor	r31, r31
    38e6:	70 97       	sbiw	r30, 0x10	; 16
    38e8:	f2 95       	swap	r31
    38ea:	e2 95       	swap	r30
    38ec:	ef 70       	andi	r30, 0x0F	; 15
    38ee:	ef 27       	eor	r30, r31
    38f0:	ff 70       	andi	r31, 0x0F	; 15
    38f2:	ef 27       	eor	r30, r31
    38f4:	e5 5b       	subi	r30, 0xB5	; 181
    38f6:	fc 4f       	sbci	r31, 0xFC	; 252
    38f8:	80 81       	ld	r24, Z
    38fa:	88 23       	and	r24, r24
    38fc:	09 f4       	brne	.+2      	; 0x3900 <__vector_20+0xa0>
    38fe:	be c0       	rjmp	.+380    	; 0x3a7c <__vector_20+0x21c>
					ok = 1;
					break;
				}
				else{
					eepromUnreadMessageAddress += 0x10;
    3900:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <eepromUnreadMessageAddress>
    3904:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <eepromUnreadMessageAddress+0x1>
    3908:	40 96       	adiw	r24, 0x10	; 16
    390a:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <eepromUnreadMessageAddress+0x1>
    390e:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <eepromUnreadMessageAddress>
					if(eepromUnreadMessageAddress >= 0xB0){
    3912:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <eepromUnreadMessageAddress>
    3916:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <eepromUnreadMessageAddress+0x1>
    391a:	80 3b       	cpi	r24, 0xB0	; 176
    391c:	91 05       	cpc	r25, r1
    391e:	20 f0       	brcs	.+8      	; 0x3928 <__vector_20+0xc8>
						eepromUnreadMessageAddress = 0x10;
    3920:	50 93 77 03 	sts	0x0377, r21	; 0x800377 <eepromUnreadMessageAddress+0x1>
    3924:	40 93 76 03 	sts	0x0376, r20	; 0x800376 <eepromUnreadMessageAddress>
    3928:	21 50       	subi	r18, 0x01	; 1
ISR(USART0_RX_vect){
	aux = UDR0;
	u8 ok = 0, counter = 0;
	if(aux < 200){
		if(aux == '!'){
			while(counter <= 10){
    392a:	b9 f6       	brne	.-82     	; 0x38da <__vector_20+0x7a>
    392c:	a1 c0       	rjmp	.+322    	; 0x3a70 <__vector_20+0x210>
					}
				}
			}
			if(ok == 1){
				for(u8 i = 0; i < 13; i++){
					eeprom_write(messageBuffer[i], eepromUnreadMessageAddress);
    392e:	60 91 76 03 	lds	r22, 0x0376	; 0x800376 <eepromUnreadMessageAddress>
    3932:	70 91 77 03 	lds	r23, 0x0377	; 0x800377 <eepromUnreadMessageAddress+0x1>
    3936:	8e 01       	movw	r16, r28
    3938:	08 57       	subi	r16, 0x78	; 120
    393a:	1c 4f       	sbci	r17, 0xFC	; 252
    393c:	f8 01       	movw	r30, r16
    393e:	80 81       	ld	r24, Z
    3940:	0e 94 a3 06 	call	0xd46	; 0xd46 <eeprom_write>
					messageBuffer[i] = ' ';
    3944:	f8 01       	movw	r30, r16
    3946:	f0 82       	st	Z, r15
					eepromUnreadMessageAddress++;
    3948:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <eepromUnreadMessageAddress>
    394c:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <eepromUnreadMessageAddress+0x1>
    3950:	01 96       	adiw	r24, 0x01	; 1
    3952:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <eepromUnreadMessageAddress+0x1>
    3956:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <eepromUnreadMessageAddress>
					if((eepromUnreadMessageAddress & 0x001) == 0x00D){
    395a:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <eepromUnreadMessageAddress>
    395e:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <eepromUnreadMessageAddress+0x1>
    3962:	21 96       	adiw	r28, 0x01	; 1
						eepromUnreadMessageAddress = 0x10;
					}
				}
			}
			if(ok == 1){
				for(u8 i = 0; i < 13; i++){
    3964:	cd 30       	cpi	r28, 0x0D	; 13
    3966:	d1 05       	cpc	r29, r1
    3968:	11 f7       	brne	.-60     	; 0x392e <__vector_20+0xce>
					eepromUnreadMessageAddress++;
					if((eepromUnreadMessageAddress & 0x001) == 0x00D){
						eepromUnreadMessageAddress &= 0xFF0;
					}
				}
				messageBufferIndex = 0;
    396a:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <messageBufferIndex>
				unreadMessageVector[((eepromUnreadMessageAddress & 0xF0) - 0x10) >> 4] = 1;
    396e:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <eepromUnreadMessageAddress>
    3972:	f0 91 77 03 	lds	r31, 0x0377	; 0x800377 <eepromUnreadMessageAddress+0x1>
    3976:	e0 7f       	andi	r30, 0xF0	; 240
    3978:	ff 27       	eor	r31, r31
    397a:	70 97       	sbiw	r30, 0x10	; 16
    397c:	f2 95       	swap	r31
    397e:	e2 95       	swap	r30
    3980:	ef 70       	andi	r30, 0x0F	; 15
    3982:	ef 27       	eor	r30, r31
    3984:	ff 70       	andi	r31, 0x0F	; 15
    3986:	ef 27       	eor	r30, r31
    3988:	e5 5b       	subi	r30, 0xB5	; 181
    398a:	fc 4f       	sbci	r31, 0xFC	; 252
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	80 83       	st	Z, r24
				eepromUnreadMessageAddress = (eepromUnreadMessageAddress & 0xFF0) + 0x010;
    3990:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <eepromUnreadMessageAddress>
    3994:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <eepromUnreadMessageAddress+0x1>
    3998:	80 7f       	andi	r24, 0xF0	; 240
    399a:	9f 70       	andi	r25, 0x0F	; 15
    399c:	40 96       	adiw	r24, 0x10	; 16
    399e:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <eepromUnreadMessageAddress+0x1>
    39a2:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <eepromUnreadMessageAddress>
				if(eepromUnreadMessageAddress >= 0x0B0){
    39a6:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <eepromUnreadMessageAddress>
    39aa:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <eepromUnreadMessageAddress+0x1>
    39ae:	80 3b       	cpi	r24, 0xB0	; 176
    39b0:	91 05       	cpc	r25, r1
    39b2:	08 f4       	brcc	.+2      	; 0x39b6 <__vector_20+0x156>
    39b4:	69 c0       	rjmp	.+210    	; 0x3a88 <__vector_20+0x228>
					eepromUnreadMessageAddress = 0x010;
    39b6:	80 e1       	ldi	r24, 0x10	; 16
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <eepromUnreadMessageAddress+0x1>
    39be:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <eepromUnreadMessageAddress>
    39c2:	62 c0       	rjmp	.+196    	; 0x3a88 <__vector_20+0x228>
				}
			}
			else{
				uart_transmit('x');
				for(u8 i = 0; i < 13; i++){
					messageBuffer[i] = ' ';
    39c4:	fc 01       	movw	r30, r24
    39c6:	e8 57       	subi	r30, 0x78	; 120
    39c8:	fc 4f       	sbci	r31, 0xFC	; 252
    39ca:	20 83       	st	Z, r18
    39cc:	01 96       	adiw	r24, 0x01	; 1
					eepromUnreadMessageAddress = 0x010;
				}
			}
			else{
				uart_transmit('x');
				for(u8 i = 0; i < 13; i++){
    39ce:	8d 30       	cpi	r24, 0x0D	; 13
    39d0:	91 05       	cpc	r25, r1
    39d2:	c1 f7       	brne	.-16     	; 0x39c4 <__vector_20+0x164>
					messageBuffer[i] = ' ';
				}
				messageBufferIndex = 0;
    39d4:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <messageBufferIndex>
    39d8:	57 c0       	rjmp	.+174    	; 0x3a88 <__vector_20+0x228>
			}
		}
		else if(aux == '_'){
    39da:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <aux>
    39de:	8f 35       	cpi	r24, 0x5F	; 95
    39e0:	21 f4       	brne	.+8      	; 0x39ea <__vector_20+0x18a>
			dateConfirmation = TRUE;
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <dateConfirmation>
    39e8:	4f c0       	rjmp	.+158    	; 0x3a88 <__vector_20+0x228>
		}
		else{
			if(dateConfirmation == TRUE){
    39ea:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <dateConfirmation>
    39ee:	81 30       	cpi	r24, 0x01	; 1
    39f0:	a1 f4       	brne	.+40     	; 0x3a1a <__vector_20+0x1ba>
				date[dateIndex++] = aux;
    39f2:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <dateIndex>
    39f6:	8e 0f       	add	r24, r30
    39f8:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <dateIndex>
    39fc:	f0 e0       	ldi	r31, 0x00	; 0
    39fe:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <aux>
    3a02:	e0 50       	subi	r30, 0x00	; 0
    3a04:	ff 4f       	sbci	r31, 0xFF	; 255
    3a06:	80 83       	st	Z, r24
				if(dateIndex >= 5){
    3a08:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <dateIndex>
    3a0c:	85 30       	cpi	r24, 0x05	; 5
    3a0e:	e0 f1       	brcs	.+120    	; 0x3a88 <__vector_20+0x228>
					dateIndex = 0;
    3a10:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <dateIndex>
					dateConfirmation = FALSE;
    3a14:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <dateConfirmation>
    3a18:	37 c0       	rjmp	.+110    	; 0x3a88 <__vector_20+0x228>
				}
			}
			else{
				messageBuffer[messageBufferIndex] = aux;
    3a1a:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <messageBufferIndex>
    3a1e:	f0 e0       	ldi	r31, 0x00	; 0
    3a20:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <aux>
    3a24:	e8 57       	subi	r30, 0x78	; 120
    3a26:	fc 4f       	sbci	r31, 0xFC	; 252
    3a28:	80 83       	st	Z, r24
				messageBufferIndex++;
    3a2a:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <messageBufferIndex>
    3a2e:	8f 5f       	subi	r24, 0xFF	; 255
    3a30:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <messageBufferIndex>
				if(messageBufferIndex > 0x0C){
    3a34:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <messageBufferIndex>
    3a38:	8d 30       	cpi	r24, 0x0D	; 13
    3a3a:	30 f1       	brcs	.+76     	; 0x3a88 <__vector_20+0x228>
					messageBufferIndex = 0;
    3a3c:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <messageBufferIndex>
    3a40:	23 c0       	rjmp	.+70     	; 0x3a88 <__vector_20+0x228>
				}
			}
		}	
	}
	else{
		switch(aux){
    3a42:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <aux>
    3a46:	80 3f       	cpi	r24, 0xF0	; 240
    3a48:	29 f0       	breq	.+10     	; 0x3a54 <__vector_20+0x1f4>
    3a4a:	8f 3f       	cpi	r24, 0xFF	; 255
    3a4c:	41 f0       	breq	.+16     	; 0x3a5e <__vector_20+0x1fe>
    3a4e:	8e 3e       	cpi	r24, 0xEE	; 238
    3a50:	d9 f4       	brne	.+54     	; 0x3a88 <__vector_20+0x228>
    3a52:	0a c0       	rjmp	.+20     	; 0x3a68 <__vector_20+0x208>
			case 0xF0:
				gpio_out_reset(PA, 4);
    3a54:	64 e0       	ldi	r22, 0x04	; 4
    3a56:	80 e0       	ldi	r24, 0x00	; 0
    3a58:	0e 94 42 07 	call	0xe84	; 0xe84 <gpio_out_reset>
				break;
    3a5c:	15 c0       	rjmp	.+42     	; 0x3a88 <__vector_20+0x228>
			case 0xFF:
				gpio_out_set(PA, 4);
    3a5e:	64 e0       	ldi	r22, 0x04	; 4
    3a60:	80 e0       	ldi	r24, 0x00	; 0
    3a62:	0e 94 26 07 	call	0xe4c	; 0xe4c <gpio_out_set>
				break;
    3a66:	10 c0       	rjmp	.+32     	; 0x3a88 <__vector_20+0x228>
			case 0xEE:
				sendTempFlag = TRUE;
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <__data_end>
				break;
		}
	}
}
    3a6e:	0c c0       	rjmp	.+24     	; 0x3a88 <__vector_20+0x228>
				if(eepromUnreadMessageAddress >= 0x0B0){
					eepromUnreadMessageAddress = 0x010;
				}
			}
			else{
				uart_transmit('x');
    3a70:	88 e7       	ldi	r24, 0x78	; 120
    3a72:	ee de       	rcall	.-548    	; 0x3850 <uart_transmit>
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	90 e0       	ldi	r25, 0x00	; 0
				for(u8 i = 0; i < 13; i++){
					messageBuffer[i] = ' ';
    3a78:	20 e2       	ldi	r18, 0x20	; 32
    3a7a:	a4 cf       	rjmp	.-184    	; 0x39c4 <__vector_20+0x164>
	u8 ok = 0, counter = 0;
	if(aux < 200){
		if(aux == '!'){
			while(counter <= 10){
				counter++;
				if(unreadMessageVector[((eepromUnreadMessageAddress & 0xF0) - 0x10) >> 4] == 0){
    3a7c:	c0 e0       	ldi	r28, 0x00	; 0
    3a7e:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
			if(ok == 1){
				for(u8 i = 0; i < 13; i++){
					eeprom_write(messageBuffer[i], eepromUnreadMessageAddress);
					messageBuffer[i] = ' ';
    3a80:	68 94       	set
    3a82:	ff 24       	eor	r15, r15
    3a84:	f5 f8       	bld	r15, 5
    3a86:	53 cf       	rjmp	.-346    	; 0x392e <__vector_20+0xce>
			case 0xEE:
				sendTempFlag = TRUE;
				break;
		}
	}
}
    3a88:	ff 91       	pop	r31
    3a8a:	ef 91       	pop	r30
    3a8c:	df 91       	pop	r29
    3a8e:	cf 91       	pop	r28
    3a90:	bf 91       	pop	r27
    3a92:	af 91       	pop	r26
    3a94:	9f 91       	pop	r25
    3a96:	8f 91       	pop	r24
    3a98:	7f 91       	pop	r23
    3a9a:	6f 91       	pop	r22
    3a9c:	5f 91       	pop	r21
    3a9e:	4f 91       	pop	r20
    3aa0:	3f 91       	pop	r19
    3aa2:	2f 91       	pop	r18
    3aa4:	1f 91       	pop	r17
    3aa6:	0f 91       	pop	r16
    3aa8:	ff 90       	pop	r15
    3aaa:	0f 90       	pop	r0
    3aac:	0b be       	out	0x3b, r0	; 59
    3aae:	0f 90       	pop	r0
    3ab0:	0f be       	out	0x3f, r0	; 63
    3ab2:	0f 90       	pop	r0
    3ab4:	1f 90       	pop	r1
    3ab6:	18 95       	reti

00003ab8 <__fixunssfsi>:
    3ab8:	98 d0       	rcall	.+304    	; 0x3bea <__fp_splitA>
    3aba:	88 f0       	brcs	.+34     	; 0x3ade <__fixunssfsi+0x26>
    3abc:	9f 57       	subi	r25, 0x7F	; 127
    3abe:	90 f0       	brcs	.+36     	; 0x3ae4 <__fixunssfsi+0x2c>
    3ac0:	b9 2f       	mov	r27, r25
    3ac2:	99 27       	eor	r25, r25
    3ac4:	b7 51       	subi	r27, 0x17	; 23
    3ac6:	a0 f0       	brcs	.+40     	; 0x3af0 <__fixunssfsi+0x38>
    3ac8:	d1 f0       	breq	.+52     	; 0x3afe <__fixunssfsi+0x46>
    3aca:	66 0f       	add	r22, r22
    3acc:	77 1f       	adc	r23, r23
    3ace:	88 1f       	adc	r24, r24
    3ad0:	99 1f       	adc	r25, r25
    3ad2:	1a f0       	brmi	.+6      	; 0x3ada <__fixunssfsi+0x22>
    3ad4:	ba 95       	dec	r27
    3ad6:	c9 f7       	brne	.-14     	; 0x3aca <__fixunssfsi+0x12>
    3ad8:	12 c0       	rjmp	.+36     	; 0x3afe <__fixunssfsi+0x46>
    3ada:	b1 30       	cpi	r27, 0x01	; 1
    3adc:	81 f0       	breq	.+32     	; 0x3afe <__fixunssfsi+0x46>
    3ade:	9f d0       	rcall	.+318    	; 0x3c1e <__fp_zero>
    3ae0:	b1 e0       	ldi	r27, 0x01	; 1
    3ae2:	08 95       	ret
    3ae4:	9c c0       	rjmp	.+312    	; 0x3c1e <__fp_zero>
    3ae6:	67 2f       	mov	r22, r23
    3ae8:	78 2f       	mov	r23, r24
    3aea:	88 27       	eor	r24, r24
    3aec:	b8 5f       	subi	r27, 0xF8	; 248
    3aee:	39 f0       	breq	.+14     	; 0x3afe <__fixunssfsi+0x46>
    3af0:	b9 3f       	cpi	r27, 0xF9	; 249
    3af2:	cc f3       	brlt	.-14     	; 0x3ae6 <__fixunssfsi+0x2e>
    3af4:	86 95       	lsr	r24
    3af6:	77 95       	ror	r23
    3af8:	67 95       	ror	r22
    3afa:	b3 95       	inc	r27
    3afc:	d9 f7       	brne	.-10     	; 0x3af4 <__fixunssfsi+0x3c>
    3afe:	3e f4       	brtc	.+14     	; 0x3b0e <__fixunssfsi+0x56>
    3b00:	90 95       	com	r25
    3b02:	80 95       	com	r24
    3b04:	70 95       	com	r23
    3b06:	61 95       	neg	r22
    3b08:	7f 4f       	sbci	r23, 0xFF	; 255
    3b0a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b0e:	08 95       	ret

00003b10 <__floatunsisf>:
    3b10:	e8 94       	clt
    3b12:	09 c0       	rjmp	.+18     	; 0x3b26 <__floatsisf+0x12>

00003b14 <__floatsisf>:
    3b14:	97 fb       	bst	r25, 7
    3b16:	3e f4       	brtc	.+14     	; 0x3b26 <__floatsisf+0x12>
    3b18:	90 95       	com	r25
    3b1a:	80 95       	com	r24
    3b1c:	70 95       	com	r23
    3b1e:	61 95       	neg	r22
    3b20:	7f 4f       	sbci	r23, 0xFF	; 255
    3b22:	8f 4f       	sbci	r24, 0xFF	; 255
    3b24:	9f 4f       	sbci	r25, 0xFF	; 255
    3b26:	99 23       	and	r25, r25
    3b28:	a9 f0       	breq	.+42     	; 0x3b54 <__floatsisf+0x40>
    3b2a:	f9 2f       	mov	r31, r25
    3b2c:	96 e9       	ldi	r25, 0x96	; 150
    3b2e:	bb 27       	eor	r27, r27
    3b30:	93 95       	inc	r25
    3b32:	f6 95       	lsr	r31
    3b34:	87 95       	ror	r24
    3b36:	77 95       	ror	r23
    3b38:	67 95       	ror	r22
    3b3a:	b7 95       	ror	r27
    3b3c:	f1 11       	cpse	r31, r1
    3b3e:	f8 cf       	rjmp	.-16     	; 0x3b30 <__floatsisf+0x1c>
    3b40:	fa f4       	brpl	.+62     	; 0x3b80 <__floatsisf+0x6c>
    3b42:	bb 0f       	add	r27, r27
    3b44:	11 f4       	brne	.+4      	; 0x3b4a <__floatsisf+0x36>
    3b46:	60 ff       	sbrs	r22, 0
    3b48:	1b c0       	rjmp	.+54     	; 0x3b80 <__floatsisf+0x6c>
    3b4a:	6f 5f       	subi	r22, 0xFF	; 255
    3b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b4e:	8f 4f       	sbci	r24, 0xFF	; 255
    3b50:	9f 4f       	sbci	r25, 0xFF	; 255
    3b52:	16 c0       	rjmp	.+44     	; 0x3b80 <__floatsisf+0x6c>
    3b54:	88 23       	and	r24, r24
    3b56:	11 f0       	breq	.+4      	; 0x3b5c <__floatsisf+0x48>
    3b58:	96 e9       	ldi	r25, 0x96	; 150
    3b5a:	11 c0       	rjmp	.+34     	; 0x3b7e <__floatsisf+0x6a>
    3b5c:	77 23       	and	r23, r23
    3b5e:	21 f0       	breq	.+8      	; 0x3b68 <__floatsisf+0x54>
    3b60:	9e e8       	ldi	r25, 0x8E	; 142
    3b62:	87 2f       	mov	r24, r23
    3b64:	76 2f       	mov	r23, r22
    3b66:	05 c0       	rjmp	.+10     	; 0x3b72 <__floatsisf+0x5e>
    3b68:	66 23       	and	r22, r22
    3b6a:	71 f0       	breq	.+28     	; 0x3b88 <__floatsisf+0x74>
    3b6c:	96 e8       	ldi	r25, 0x86	; 134
    3b6e:	86 2f       	mov	r24, r22
    3b70:	70 e0       	ldi	r23, 0x00	; 0
    3b72:	60 e0       	ldi	r22, 0x00	; 0
    3b74:	2a f0       	brmi	.+10     	; 0x3b80 <__floatsisf+0x6c>
    3b76:	9a 95       	dec	r25
    3b78:	66 0f       	add	r22, r22
    3b7a:	77 1f       	adc	r23, r23
    3b7c:	88 1f       	adc	r24, r24
    3b7e:	da f7       	brpl	.-10     	; 0x3b76 <__floatsisf+0x62>
    3b80:	88 0f       	add	r24, r24
    3b82:	96 95       	lsr	r25
    3b84:	87 95       	ror	r24
    3b86:	97 f9       	bld	r25, 7
    3b88:	08 95       	ret

00003b8a <__fp_inf>:
    3b8a:	97 f9       	bld	r25, 7
    3b8c:	9f 67       	ori	r25, 0x7F	; 127
    3b8e:	80 e8       	ldi	r24, 0x80	; 128
    3b90:	70 e0       	ldi	r23, 0x00	; 0
    3b92:	60 e0       	ldi	r22, 0x00	; 0
    3b94:	08 95       	ret

00003b96 <__fp_nan>:
    3b96:	9f ef       	ldi	r25, 0xFF	; 255
    3b98:	80 ec       	ldi	r24, 0xC0	; 192
    3b9a:	08 95       	ret

00003b9c <__fp_pscA>:
    3b9c:	00 24       	eor	r0, r0
    3b9e:	0a 94       	dec	r0
    3ba0:	16 16       	cp	r1, r22
    3ba2:	17 06       	cpc	r1, r23
    3ba4:	18 06       	cpc	r1, r24
    3ba6:	09 06       	cpc	r0, r25
    3ba8:	08 95       	ret

00003baa <__fp_pscB>:
    3baa:	00 24       	eor	r0, r0
    3bac:	0a 94       	dec	r0
    3bae:	12 16       	cp	r1, r18
    3bb0:	13 06       	cpc	r1, r19
    3bb2:	14 06       	cpc	r1, r20
    3bb4:	05 06       	cpc	r0, r21
    3bb6:	08 95       	ret

00003bb8 <__fp_round>:
    3bb8:	09 2e       	mov	r0, r25
    3bba:	03 94       	inc	r0
    3bbc:	00 0c       	add	r0, r0
    3bbe:	11 f4       	brne	.+4      	; 0x3bc4 <__fp_round+0xc>
    3bc0:	88 23       	and	r24, r24
    3bc2:	52 f0       	brmi	.+20     	; 0x3bd8 <__fp_round+0x20>
    3bc4:	bb 0f       	add	r27, r27
    3bc6:	40 f4       	brcc	.+16     	; 0x3bd8 <__fp_round+0x20>
    3bc8:	bf 2b       	or	r27, r31
    3bca:	11 f4       	brne	.+4      	; 0x3bd0 <__fp_round+0x18>
    3bcc:	60 ff       	sbrs	r22, 0
    3bce:	04 c0       	rjmp	.+8      	; 0x3bd8 <__fp_round+0x20>
    3bd0:	6f 5f       	subi	r22, 0xFF	; 255
    3bd2:	7f 4f       	sbci	r23, 0xFF	; 255
    3bd4:	8f 4f       	sbci	r24, 0xFF	; 255
    3bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd8:	08 95       	ret

00003bda <__fp_split3>:
    3bda:	57 fd       	sbrc	r21, 7
    3bdc:	90 58       	subi	r25, 0x80	; 128
    3bde:	44 0f       	add	r20, r20
    3be0:	55 1f       	adc	r21, r21
    3be2:	59 f0       	breq	.+22     	; 0x3bfa <__fp_splitA+0x10>
    3be4:	5f 3f       	cpi	r21, 0xFF	; 255
    3be6:	71 f0       	breq	.+28     	; 0x3c04 <__fp_splitA+0x1a>
    3be8:	47 95       	ror	r20

00003bea <__fp_splitA>:
    3bea:	88 0f       	add	r24, r24
    3bec:	97 fb       	bst	r25, 7
    3bee:	99 1f       	adc	r25, r25
    3bf0:	61 f0       	breq	.+24     	; 0x3c0a <__fp_splitA+0x20>
    3bf2:	9f 3f       	cpi	r25, 0xFF	; 255
    3bf4:	79 f0       	breq	.+30     	; 0x3c14 <__fp_splitA+0x2a>
    3bf6:	87 95       	ror	r24
    3bf8:	08 95       	ret
    3bfa:	12 16       	cp	r1, r18
    3bfc:	13 06       	cpc	r1, r19
    3bfe:	14 06       	cpc	r1, r20
    3c00:	55 1f       	adc	r21, r21
    3c02:	f2 cf       	rjmp	.-28     	; 0x3be8 <__fp_split3+0xe>
    3c04:	46 95       	lsr	r20
    3c06:	f1 df       	rcall	.-30     	; 0x3bea <__fp_splitA>
    3c08:	08 c0       	rjmp	.+16     	; 0x3c1a <__fp_splitA+0x30>
    3c0a:	16 16       	cp	r1, r22
    3c0c:	17 06       	cpc	r1, r23
    3c0e:	18 06       	cpc	r1, r24
    3c10:	99 1f       	adc	r25, r25
    3c12:	f1 cf       	rjmp	.-30     	; 0x3bf6 <__fp_splitA+0xc>
    3c14:	86 95       	lsr	r24
    3c16:	71 05       	cpc	r23, r1
    3c18:	61 05       	cpc	r22, r1
    3c1a:	08 94       	sec
    3c1c:	08 95       	ret

00003c1e <__fp_zero>:
    3c1e:	e8 94       	clt

00003c20 <__fp_szero>:
    3c20:	bb 27       	eor	r27, r27
    3c22:	66 27       	eor	r22, r22
    3c24:	77 27       	eor	r23, r23
    3c26:	cb 01       	movw	r24, r22
    3c28:	97 f9       	bld	r25, 7
    3c2a:	08 95       	ret

00003c2c <__mulsf3>:
    3c2c:	0b d0       	rcall	.+22     	; 0x3c44 <__mulsf3x>
    3c2e:	c4 cf       	rjmp	.-120    	; 0x3bb8 <__fp_round>
    3c30:	b5 df       	rcall	.-150    	; 0x3b9c <__fp_pscA>
    3c32:	28 f0       	brcs	.+10     	; 0x3c3e <__mulsf3+0x12>
    3c34:	ba df       	rcall	.-140    	; 0x3baa <__fp_pscB>
    3c36:	18 f0       	brcs	.+6      	; 0x3c3e <__mulsf3+0x12>
    3c38:	95 23       	and	r25, r21
    3c3a:	09 f0       	breq	.+2      	; 0x3c3e <__mulsf3+0x12>
    3c3c:	a6 cf       	rjmp	.-180    	; 0x3b8a <__fp_inf>
    3c3e:	ab cf       	rjmp	.-170    	; 0x3b96 <__fp_nan>
    3c40:	11 24       	eor	r1, r1
    3c42:	ee cf       	rjmp	.-36     	; 0x3c20 <__fp_szero>

00003c44 <__mulsf3x>:
    3c44:	ca df       	rcall	.-108    	; 0x3bda <__fp_split3>
    3c46:	a0 f3       	brcs	.-24     	; 0x3c30 <__mulsf3+0x4>

00003c48 <__mulsf3_pse>:
    3c48:	95 9f       	mul	r25, r21
    3c4a:	d1 f3       	breq	.-12     	; 0x3c40 <__mulsf3+0x14>
    3c4c:	95 0f       	add	r25, r21
    3c4e:	50 e0       	ldi	r21, 0x00	; 0
    3c50:	55 1f       	adc	r21, r21
    3c52:	62 9f       	mul	r22, r18
    3c54:	f0 01       	movw	r30, r0
    3c56:	72 9f       	mul	r23, r18
    3c58:	bb 27       	eor	r27, r27
    3c5a:	f0 0d       	add	r31, r0
    3c5c:	b1 1d       	adc	r27, r1
    3c5e:	63 9f       	mul	r22, r19
    3c60:	aa 27       	eor	r26, r26
    3c62:	f0 0d       	add	r31, r0
    3c64:	b1 1d       	adc	r27, r1
    3c66:	aa 1f       	adc	r26, r26
    3c68:	64 9f       	mul	r22, r20
    3c6a:	66 27       	eor	r22, r22
    3c6c:	b0 0d       	add	r27, r0
    3c6e:	a1 1d       	adc	r26, r1
    3c70:	66 1f       	adc	r22, r22
    3c72:	82 9f       	mul	r24, r18
    3c74:	22 27       	eor	r18, r18
    3c76:	b0 0d       	add	r27, r0
    3c78:	a1 1d       	adc	r26, r1
    3c7a:	62 1f       	adc	r22, r18
    3c7c:	73 9f       	mul	r23, r19
    3c7e:	b0 0d       	add	r27, r0
    3c80:	a1 1d       	adc	r26, r1
    3c82:	62 1f       	adc	r22, r18
    3c84:	83 9f       	mul	r24, r19
    3c86:	a0 0d       	add	r26, r0
    3c88:	61 1d       	adc	r22, r1
    3c8a:	22 1f       	adc	r18, r18
    3c8c:	74 9f       	mul	r23, r20
    3c8e:	33 27       	eor	r19, r19
    3c90:	a0 0d       	add	r26, r0
    3c92:	61 1d       	adc	r22, r1
    3c94:	23 1f       	adc	r18, r19
    3c96:	84 9f       	mul	r24, r20
    3c98:	60 0d       	add	r22, r0
    3c9a:	21 1d       	adc	r18, r1
    3c9c:	82 2f       	mov	r24, r18
    3c9e:	76 2f       	mov	r23, r22
    3ca0:	6a 2f       	mov	r22, r26
    3ca2:	11 24       	eor	r1, r1
    3ca4:	9f 57       	subi	r25, 0x7F	; 127
    3ca6:	50 40       	sbci	r21, 0x00	; 0
    3ca8:	8a f0       	brmi	.+34     	; 0x3ccc <__mulsf3_pse+0x84>
    3caa:	e1 f0       	breq	.+56     	; 0x3ce4 <__mulsf3_pse+0x9c>
    3cac:	88 23       	and	r24, r24
    3cae:	4a f0       	brmi	.+18     	; 0x3cc2 <__mulsf3_pse+0x7a>
    3cb0:	ee 0f       	add	r30, r30
    3cb2:	ff 1f       	adc	r31, r31
    3cb4:	bb 1f       	adc	r27, r27
    3cb6:	66 1f       	adc	r22, r22
    3cb8:	77 1f       	adc	r23, r23
    3cba:	88 1f       	adc	r24, r24
    3cbc:	91 50       	subi	r25, 0x01	; 1
    3cbe:	50 40       	sbci	r21, 0x00	; 0
    3cc0:	a9 f7       	brne	.-22     	; 0x3cac <__mulsf3_pse+0x64>
    3cc2:	9e 3f       	cpi	r25, 0xFE	; 254
    3cc4:	51 05       	cpc	r21, r1
    3cc6:	70 f0       	brcs	.+28     	; 0x3ce4 <__mulsf3_pse+0x9c>
    3cc8:	60 cf       	rjmp	.-320    	; 0x3b8a <__fp_inf>
    3cca:	aa cf       	rjmp	.-172    	; 0x3c20 <__fp_szero>
    3ccc:	5f 3f       	cpi	r21, 0xFF	; 255
    3cce:	ec f3       	brlt	.-6      	; 0x3cca <__mulsf3_pse+0x82>
    3cd0:	98 3e       	cpi	r25, 0xE8	; 232
    3cd2:	dc f3       	brlt	.-10     	; 0x3cca <__mulsf3_pse+0x82>
    3cd4:	86 95       	lsr	r24
    3cd6:	77 95       	ror	r23
    3cd8:	67 95       	ror	r22
    3cda:	b7 95       	ror	r27
    3cdc:	f7 95       	ror	r31
    3cde:	e7 95       	ror	r30
    3ce0:	9f 5f       	subi	r25, 0xFF	; 255
    3ce2:	c1 f7       	brne	.-16     	; 0x3cd4 <__mulsf3_pse+0x8c>
    3ce4:	fe 2b       	or	r31, r30
    3ce6:	88 0f       	add	r24, r24
    3ce8:	91 1d       	adc	r25, r1
    3cea:	96 95       	lsr	r25
    3cec:	87 95       	ror	r24
    3cee:	97 f9       	bld	r25, 7
    3cf0:	08 95       	ret

00003cf2 <__divmodhi4>:
    3cf2:	97 fb       	bst	r25, 7
    3cf4:	07 2e       	mov	r0, r23
    3cf6:	16 f4       	brtc	.+4      	; 0x3cfc <__divmodhi4+0xa>
    3cf8:	00 94       	com	r0
    3cfa:	06 d0       	rcall	.+12     	; 0x3d08 <__divmodhi4_neg1>
    3cfc:	77 fd       	sbrc	r23, 7
    3cfe:	08 d0       	rcall	.+16     	; 0x3d10 <__divmodhi4_neg2>
    3d00:	0b d0       	rcall	.+22     	; 0x3d18 <__udivmodhi4>
    3d02:	07 fc       	sbrc	r0, 7
    3d04:	05 d0       	rcall	.+10     	; 0x3d10 <__divmodhi4_neg2>
    3d06:	3e f4       	brtc	.+14     	; 0x3d16 <__divmodhi4_exit>

00003d08 <__divmodhi4_neg1>:
    3d08:	90 95       	com	r25
    3d0a:	81 95       	neg	r24
    3d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d0e:	08 95       	ret

00003d10 <__divmodhi4_neg2>:
    3d10:	70 95       	com	r23
    3d12:	61 95       	neg	r22
    3d14:	7f 4f       	sbci	r23, 0xFF	; 255

00003d16 <__divmodhi4_exit>:
    3d16:	08 95       	ret

00003d18 <__udivmodhi4>:
    3d18:	aa 1b       	sub	r26, r26
    3d1a:	bb 1b       	sub	r27, r27
    3d1c:	51 e1       	ldi	r21, 0x11	; 17
    3d1e:	07 c0       	rjmp	.+14     	; 0x3d2e <__udivmodhi4_ep>

00003d20 <__udivmodhi4_loop>:
    3d20:	aa 1f       	adc	r26, r26
    3d22:	bb 1f       	adc	r27, r27
    3d24:	a6 17       	cp	r26, r22
    3d26:	b7 07       	cpc	r27, r23
    3d28:	10 f0       	brcs	.+4      	; 0x3d2e <__udivmodhi4_ep>
    3d2a:	a6 1b       	sub	r26, r22
    3d2c:	b7 0b       	sbc	r27, r23

00003d2e <__udivmodhi4_ep>:
    3d2e:	88 1f       	adc	r24, r24
    3d30:	99 1f       	adc	r25, r25
    3d32:	5a 95       	dec	r21
    3d34:	a9 f7       	brne	.-22     	; 0x3d20 <__udivmodhi4_loop>
    3d36:	80 95       	com	r24
    3d38:	90 95       	com	r25
    3d3a:	bc 01       	movw	r22, r24
    3d3c:	cd 01       	movw	r24, r26
    3d3e:	08 95       	ret

00003d40 <_exit>:
    3d40:	f8 94       	cli

00003d42 <__stop_program>:
    3d42:	ff cf       	rjmp	.-2      	; 0x3d42 <__stop_program>
