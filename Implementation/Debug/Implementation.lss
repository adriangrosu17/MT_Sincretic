
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000e4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dda  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  00000e4e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000271d  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e7a  00000000  00000000  00003765  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eae  00000000  00000000  000045df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00005490  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000959  00000000  00000000  0000585c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000154f  00000000  00000000  000061b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00007704  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1f c0       	rjmp	.+62     	; 0xc8 <__vector_34>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ed       	ldi	r30, 0xDA	; 218
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	04 d1       	rcall	.+520    	; 0x2cc <main>
  c4:	88 c6       	rjmp	.+3344   	; 0xdd6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_34>:
//volatile u8 messageBufferIndex;

volatile u32 lastOutput;
volatile u32 lastInput;

ISR(TIMER3_OVF_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	4f 92       	push	r4
  d8:	5f 92       	push	r5
  da:	6f 92       	push	r6
  dc:	7f 92       	push	r7
  de:	8f 92       	push	r8
  e0:	9f 92       	push	r9
  e2:	af 92       	push	r10
  e4:	bf 92       	push	r11
  e6:	cf 92       	push	r12
  e8:	df 92       	push	r13
  ea:	ef 92       	push	r14
  ec:	ff 92       	push	r15
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
		//if(menuState == 0x3100){
			//temperatureVoltage = adc_singleRead(0);
			//lcd_displayTemperature(temperatureVoltage);
		//}
	//}
	TCNT3 = 64285;
 106:	8d e1       	ldi	r24, 0x1D	; 29
 108:	9b ef       	ldi	r25, 0xFB	; 251
 10a:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 10e:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
	//TCNT3 = 53035;
	u32 currentInput;
	u32 currentOutput;
	currentInput = adc_singleRead(0);
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	6a d1       	rcall	.+724    	; 0x3ea <adc_singleRead>
 116:	6c 01       	movw	r12, r24
 118:	e1 2c       	mov	r14, r1
 11a:	f1 2c       	mov	r15, r1
	//currentOutput = (9/11)*lastOutput + (1/11)*currentInput/1023 + (1/11)*lastInput/1023;
	//currentOutput = 9.99*lastOutput/10.01 + currentInput/10.01 + lastInput/10.01;
	//currentOutput = 99*lastOutput/101 + currentInput/101 + lastInput/101;
	currentOutput = 0.8182*lastOutput + 0.09091*lastInput + 0.09091*currentInput;
 11c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_end>
 120:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_end+0x1>
 124:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end+0x2>
 128:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x3>
 12c:	40 90 04 01 	lds	r4, 0x0104	; 0x800104 <lastInput>
 130:	50 90 05 01 	lds	r5, 0x0105	; 0x800105 <lastInput+0x1>
 134:	60 90 06 01 	lds	r6, 0x0106	; 0x800106 <lastInput+0x2>
 138:	70 90 07 01 	lds	r7, 0x0107	; 0x800107 <lastInput+0x3>
 13c:	20 d5       	rcall	.+2624   	; 0xb7e <__floatunsisf>
 13e:	2e e8       	ldi	r18, 0x8E	; 142
 140:	35 e7       	ldi	r19, 0x75	; 117
 142:	41 e5       	ldi	r20, 0x51	; 81
 144:	5f e3       	ldi	r21, 0x3F	; 63
 146:	a9 d5       	rcall	.+2898   	; 0xc9a <__mulsf3>
 148:	4b 01       	movw	r8, r22
 14a:	5c 01       	movw	r10, r24
 14c:	c3 01       	movw	r24, r6
 14e:	b2 01       	movw	r22, r4
 150:	16 d5       	rcall	.+2604   	; 0xb7e <__floatunsisf>
 152:	26 e0       	ldi	r18, 0x06	; 6
 154:	3f e2       	ldi	r19, 0x2F	; 47
 156:	4a eb       	ldi	r20, 0xBA	; 186
 158:	5d e3       	ldi	r21, 0x3D	; 61
 15a:	9f d5       	rcall	.+2878   	; 0xc9a <__mulsf3>
 15c:	9b 01       	movw	r18, r22
 15e:	ac 01       	movw	r20, r24
 160:	c5 01       	movw	r24, r10
 162:	b4 01       	movw	r22, r8
 164:	7c d4       	rcall	.+2296   	; 0xa5e <__addsf3>
 166:	4b 01       	movw	r8, r22
 168:	5c 01       	movw	r10, r24
 16a:	c7 01       	movw	r24, r14
 16c:	b6 01       	movw	r22, r12
 16e:	07 d5       	rcall	.+2574   	; 0xb7e <__floatunsisf>
 170:	26 e0       	ldi	r18, 0x06	; 6
 172:	3f e2       	ldi	r19, 0x2F	; 47
 174:	4a eb       	ldi	r20, 0xBA	; 186
 176:	5d e3       	ldi	r21, 0x3D	; 61
 178:	90 d5       	rcall	.+2848   	; 0xc9a <__mulsf3>
 17a:	9b 01       	movw	r18, r22
 17c:	ac 01       	movw	r20, r24
 17e:	c5 01       	movw	r24, r10
 180:	b4 01       	movw	r22, r8
 182:	6d d4       	rcall	.+2266   	; 0xa5e <__addsf3>
 184:	d0 d4       	rcall	.+2464   	; 0xb26 <__fixunssfsi>
 186:	4b 01       	movw	r8, r22
 188:	5c 01       	movw	r10, r24
	if(currentOutput >= 1023){
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	88 16       	cp	r8, r24
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	98 06       	cpc	r9, r24
 192:	a1 04       	cpc	r10, r1
 194:	b1 04       	cpc	r11, r1
 196:	40 f0       	brcs	.+16     	; 0x1a8 <__vector_34+0xe0>
		currentOutput = 1023;
 198:	0f 2e       	mov	r0, r31
 19a:	88 24       	eor	r8, r8
 19c:	8a 94       	dec	r8
 19e:	f3 e0       	ldi	r31, 0x03	; 3
 1a0:	9f 2e       	mov	r9, r31
 1a2:	a1 2c       	mov	r10, r1
	//uart_transmit(' ');
	//uart_transmit(currentInput>>2);
	//uart_transmit(' ');
	//uart_transmit(lastInput>>2);
	//uart_transmit('\n');
	pwm_setDutyCycle((u8)(100*currentOutput/1023), TIMER1, CHANNEL_A);
 1a4:	b1 2c       	mov	r11, r1
 1a6:	f0 2d       	mov	r31, r0
 1a8:	a4 e6       	ldi	r26, 0x64	; 100
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	a5 01       	movw	r20, r10
 1ae:	94 01       	movw	r18, r8
 1b0:	08 d6       	rcall	.+3088   	; 0xdc2 <__muluhisi3>
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	33 e0       	ldi	r19, 0x03	; 3
 1b6:	40 e0       	ldi	r20, 0x00	; 0
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	d2 d5       	rcall	.+2980   	; 0xd60 <__udivmodsi4>
 1bc:	82 2f       	mov	r24, r18
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	60 d3       	rcall	.+1728   	; 0x884 <pwm_setDutyCycle>
	lastOutput = currentOutput;
 1c4:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <__data_end>
 1c8:	90 92 01 01 	sts	0x0101, r9	; 0x800101 <__data_end+0x1>
 1cc:	a0 92 02 01 	sts	0x0102, r10	; 0x800102 <__data_end+0x2>
 1d0:	b0 92 03 01 	sts	0x0103, r11	; 0x800103 <__data_end+0x3>
	lastInput = currentInput;
 1d4:	c0 92 04 01 	sts	0x0104, r12	; 0x800104 <lastInput>
 1d8:	d0 92 05 01 	sts	0x0105, r13	; 0x800105 <lastInput+0x1>
 1dc:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <lastInput+0x2>
 1e0:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <lastInput+0x3>
}
 1e4:	ff 91       	pop	r31
 1e6:	ef 91       	pop	r30
 1e8:	bf 91       	pop	r27
 1ea:	af 91       	pop	r26
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	7f 91       	pop	r23
 1f2:	6f 91       	pop	r22
 1f4:	5f 91       	pop	r21
 1f6:	4f 91       	pop	r20
 1f8:	3f 91       	pop	r19
 1fa:	2f 91       	pop	r18
 1fc:	ff 90       	pop	r15
 1fe:	ef 90       	pop	r14
 200:	df 90       	pop	r13
 202:	cf 90       	pop	r12
 204:	bf 90       	pop	r11
 206:	af 90       	pop	r10
 208:	9f 90       	pop	r9
 20a:	8f 90       	pop	r8
 20c:	7f 90       	pop	r7
 20e:	6f 90       	pop	r6
 210:	5f 90       	pop	r5
 212:	4f 90       	pop	r4
 214:	0f 90       	pop	r0
 216:	0b be       	out	0x3b, r0	; 59
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <init_pt1>:
		//messageBuffer[i] = 0;
	//}
	//messageBufferIndex = 0;
//}

void init_pt1(){
 222:	0f 93       	push	r16
 224:	cf 93       	push	r28
	pwm_init(0, 10000, TIMER1, CHANNEL_A);
 226:	00 e0       	ldi	r16, 0x00	; 0
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	40 e1       	ldi	r20, 0x10	; 16
 22c:	57 e2       	ldi	r21, 0x27	; 39
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	80 e0       	ldi	r24, 0x00	; 0
	pwm_start(TIMER1);
 234:	4d d2       	rcall	.+1178   	; 0x6d0 <pwm_init>
 236:	81 e0       	ldi	r24, 0x01	; 1
	lastInput = 0;
 238:	76 d3       	rcall	.+1772   	; 0x926 <pwm_start>
 23a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <lastInput>
 23e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <lastInput+0x1>
 242:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <lastInput+0x2>
 246:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <lastInput+0x3>
	lastOutput = 0;
 24a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
 24e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 252:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end+0x2>
 256:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x3>
	gpio_init(PA, 0, INPUT, NO_PULL);
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	60 e0       	ldi	r22, 0x00	; 0
	adc_init(_10BIT, ADC_PRESCALER_16, SINGLE_CONVERSION);
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	05 d1       	rcall	.+522    	; 0x46e <gpio_init>
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	64 e0       	ldi	r22, 0x04	; 4
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	40 d0       	rcall	.+128    	; 0x2ec <adc_init>
 26c:	e9 e0       	ldi	r30, 0x09	; 9
 26e:	f1 e0       	ldi	r31, 0x01	; 1
	for(int i = 1; i < 8; i++){
		channelsEnabled[i] = 0;
 270:	80 e1       	ldi	r24, 0x10	; 16
	pwm_start(TIMER1);
	lastInput = 0;
	lastOutput = 0;
	gpio_init(PA, 0, INPUT, NO_PULL);
	adc_init(_10BIT, ADC_PRESCALER_16, SINGLE_CONVERSION);
	for(int i = 1; i < 8; i++){
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	11 92       	st	Z+, r1
 276:	e8 17       	cp	r30, r24
		channelsEnabled[i] = 0;
	}
	channelsEnabled[0] = 1;
 278:	f9 07       	cpc	r31, r25
 27a:	e1 f7       	brne	.-8      	; 0x274 <init_pt1+0x52>
	adc_start(channelsEnabled);
 27c:	c1 e0       	ldi	r28, 0x01	; 1
 27e:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <channelsEnabled>
	gpio_init(PC, 0, OUTPUT, NO_PULL);
 282:	88 e0       	ldi	r24, 0x08	; 8
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	7c d0       	rcall	.+248    	; 0x380 <adc_start>
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	41 e0       	ldi	r20, 0x01	; 1
	gpio_out_reset(PC, 0);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	ee d0       	rcall	.+476    	; 0x46e <gpio_init>
 292:	60 e0       	ldi	r22, 0x00	; 0
	TCCR3A = 0x00;
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	28 d1       	rcall	.+592    	; 0x4e8 <gpio_out_reset>
	TCCR3C = 0x00;
 298:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TIMSK3 = 0x01;
 29c:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__TEXT_REGION_LENGTH__+0x7e0092>
	TCCR3B = 0x04;
 2a0:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 2a4:	84 e0       	ldi	r24, 0x04	; 4
	TCNT3 = 64285;
 2a6:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 2aa:	8d e1       	ldi	r24, 0x1D	; 29
 2ac:	9b ef       	ldi	r25, 0xFB	; 251
	//TCNT3 = 53035;
	uart_init(ASYNCHRONOUS, EVEN, _2BIT, _19200);
 2ae:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 2b2:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 2b6:	29 e1       	ldi	r18, 0x19	; 25
	uart_start(TRUE, FALSE);
 2b8:	41 e0       	ldi	r20, 0x01	; 1
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	7a d3       	rcall	.+1780   	; 0x9b4 <uart_init>
}
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	bd d3       	rcall	.+1914   	; 0xa40 <uart_start>
 2c6:	cf 91       	pop	r28
 2c8:	0f 91       	pop	r16
 2ca:	08 95       	ret

000002cc <main>:

int main(void)
{
	disableJTAG();
	//init();
	init_pt1();
 2cc:	cc d0       	rcall	.+408    	; 0x466 <disableJTAG>
 2ce:	a9 df       	rcall	.-174    	; 0x222 <init_pt1>
	sei();
    while (1) 
    {
		gpio_out_toggle(PC, 0);
 2d0:	78 94       	sei
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	82 e0       	ldi	r24, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	20 d1       	rcall	.+576    	; 0x518 <gpio_out_toggle>
 2d8:	2f ef       	ldi	r18, 0xFF	; 255
 2da:	89 e6       	ldi	r24, 0x69	; 105
 2dc:	98 e1       	ldi	r25, 0x18	; 24
 2de:	21 50       	subi	r18, 0x01	; 1
 2e0:	80 40       	sbci	r24, 0x00	; 0
 2e2:	90 40       	sbci	r25, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <main+0x12>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <main+0x1c>
 2e8:	00 00       	nop
 2ea:	f3 cf       	rjmp	.-26     	; 0x2d2 <main+0x6>

000002ec <adc_init>:
void adc_stop(u8 *channelsEnabled){
	u8 channel;
	clearBit(&ADCSRA, ADEN);
	for (channel = 0; channel < 8; channel++)
		updateBit(&DIDR0, 1 << channel, ~channelsEnabled[channel]);
}
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	18 2f       	mov	r17, r24
 2f4:	c6 2f       	mov	r28, r22
 2f6:	d4 2f       	mov	r29, r20
 2f8:	67 e0       	ldi	r22, 0x07	; 7
 2fa:	8c e7       	ldi	r24, 0x7C	; 124
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	30 d1       	rcall	.+608    	; 0x560 <clearBit>
 300:	66 e0       	ldi	r22, 0x06	; 6
 302:	8c e7       	ldi	r24, 0x7C	; 124
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	20 d1       	rcall	.+576    	; 0x548 <setBit>
 308:	41 2f       	mov	r20, r17
 30a:	65 e0       	ldi	r22, 0x05	; 5
 30c:	8c e7       	ldi	r24, 0x7C	; 124
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	40 d1       	rcall	.+640    	; 0x592 <updateBit>
 312:	64 e0       	ldi	r22, 0x04	; 4
 314:	8c e7       	ldi	r24, 0x7C	; 124
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	23 d1       	rcall	.+582    	; 0x560 <clearBit>
 31a:	63 e0       	ldi	r22, 0x03	; 3
 31c:	8c e7       	ldi	r24, 0x7C	; 124
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	1f d1       	rcall	.+574    	; 0x560 <clearBit>
 322:	c2 fb       	bst	r28, 2
 324:	44 27       	eor	r20, r20
 326:	40 f9       	bld	r20, 0
 328:	62 e0       	ldi	r22, 0x02	; 2
 32a:	8a e7       	ldi	r24, 0x7A	; 122
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	31 d1       	rcall	.+610    	; 0x592 <updateBit>
 330:	c1 fb       	bst	r28, 1
 332:	44 27       	eor	r20, r20
 334:	40 f9       	bld	r20, 0
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	8a e7       	ldi	r24, 0x7A	; 122
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	2a d1       	rcall	.+596    	; 0x592 <updateBit>
 33e:	4c 2f       	mov	r20, r28
 340:	41 70       	andi	r20, 0x01	; 1
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	8a e7       	ldi	r24, 0x7A	; 122
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	24 d1       	rcall	.+584    	; 0x592 <updateBit>
 34a:	d1 11       	cpse	r29, r1
 34c:	05 c0       	rjmp	.+10     	; 0x358 <adc_init+0x6c>
 34e:	65 e0       	ldi	r22, 0x05	; 5
 350:	8a e7       	ldi	r24, 0x7A	; 122
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	05 d1       	rcall	.+522    	; 0x560 <clearBit>
 356:	10 c0       	rjmp	.+32     	; 0x378 <adc_init+0x8c>
 358:	65 e0       	ldi	r22, 0x05	; 5
 35a:	8a e7       	ldi	r24, 0x7A	; 122
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	f4 d0       	rcall	.+488    	; 0x548 <setBit>
 360:	62 e0       	ldi	r22, 0x02	; 2
 362:	8b e7       	ldi	r24, 0x7B	; 123
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	fc d0       	rcall	.+504    	; 0x560 <clearBit>
 368:	61 e0       	ldi	r22, 0x01	; 1
 36a:	8b e7       	ldi	r24, 0x7B	; 123
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	f8 d0       	rcall	.+496    	; 0x560 <clearBit>
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	8b e7       	ldi	r24, 0x7B	; 123
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	f4 d0       	rcall	.+488    	; 0x560 <clearBit>
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	08 95       	ret

00000380 <adc_start>:
 380:	ef 92       	push	r14
 382:	ff 92       	push	r15
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	d8 2f       	mov	r29, r24
 38e:	c9 2f       	mov	r28, r25
 390:	67 e0       	ldi	r22, 0x07	; 7
 392:	8a e7       	ldi	r24, 0x7A	; 122
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	d8 d0       	rcall	.+432    	; 0x548 <setBit>
 398:	0d 2f       	mov	r16, r29
 39a:	1c 2f       	mov	r17, r28
 39c:	c0 e0       	ldi	r28, 0x00	; 0
 39e:	d0 e0       	ldi	r29, 0x00	; 0
 3a0:	ee 24       	eor	r14, r14
 3a2:	e3 94       	inc	r14
 3a4:	f1 2c       	mov	r15, r1
 3a6:	f8 01       	movw	r30, r16
 3a8:	41 91       	ld	r20, Z+
 3aa:	8f 01       	movw	r16, r30
 3ac:	b7 01       	movw	r22, r14
 3ae:	0c 2e       	mov	r0, r28
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <adc_start+0x36>
 3b2:	66 0f       	add	r22, r22
 3b4:	77 1f       	adc	r23, r23
 3b6:	0a 94       	dec	r0
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <adc_start+0x32>
 3ba:	8e e7       	ldi	r24, 0x7E	; 126
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	e9 d0       	rcall	.+466    	; 0x592 <updateBit>
 3c0:	21 96       	adiw	r28, 0x01	; 1
 3c2:	c8 30       	cpi	r28, 0x08	; 8
 3c4:	d1 05       	cpc	r29, r1
 3c6:	79 f7       	brne	.-34     	; 0x3a6 <adc_start+0x26>
 3c8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 3cc:	65 e0       	ldi	r22, 0x05	; 5
 3ce:	f9 d0       	rcall	.+498    	; 0x5c2 <checkBit>
 3d0:	88 23       	and	r24, r24
 3d2:	21 f0       	breq	.+8      	; 0x3dc <adc_start+0x5c>
 3d4:	66 e0       	ldi	r22, 0x06	; 6
 3d6:	8a e7       	ldi	r24, 0x7A	; 122
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	b6 d0       	rcall	.+364    	; 0x548 <setBit>
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	ff 90       	pop	r15
 3e6:	ef 90       	pop	r14
 3e8:	08 95       	ret

000003ea <adc_singleRead>:

u16 adc_singleRead(u8 channel){
	u16 readValue = 0;
	u16 temp = 0;
	ADMUX = channel | (ADMUX & 0b11111000);
 3ea:	ec e7       	ldi	r30, 0x7C	; 124
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	90 81       	ld	r25, Z
 3f0:	98 7f       	andi	r25, 0xF8	; 248
 3f2:	89 2b       	or	r24, r25
 3f4:	80 83       	st	Z, r24
	if(!checkBit(ADCSRA, ADATE))
 3f6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 3fa:	65 e0       	ldi	r22, 0x05	; 5
 3fc:	e2 d0       	rcall	.+452    	; 0x5c2 <checkBit>
 3fe:	81 11       	cpse	r24, r1
 400:	0a c0       	rjmp	.+20     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	{
		setBit(&ADCSRA, ADSC);
 402:	66 e0       	ldi	r22, 0x06	; 6
 404:	8a e7       	ldi	r24, 0x7A	; 122
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	9f d0       	rcall	.+318    	; 0x548 <setBit>
		while(!(ADCSRA & (1<<ADIF)));
 40a:	ea e7       	ldi	r30, 0x7A	; 122
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	84 ff       	sbrs	r24, 4
 412:	fd cf       	rjmp	.-6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 414:	12 c0       	rjmp	.+36     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	}
	else
	{
		setBit(&ADCSRA, ADIF);
 416:	64 e0       	ldi	r22, 0x04	; 4
 418:	8a e7       	ldi	r24, 0x7A	; 122
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	95 d0       	rcall	.+298    	; 0x548 <setBit>
		while(!(ADCSRA & (1<<ADIF)));
 41e:	ea e7       	ldi	r30, 0x7A	; 122
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	84 ff       	sbrs	r24, 4
		setBit(&ADCSRA, ADIF);
 426:	fd cf       	rjmp	.-6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 428:	64 e0       	ldi	r22, 0x04	; 4
 42a:	8a e7       	ldi	r24, 0x7A	; 122
 42c:	90 e0       	ldi	r25, 0x00	; 0
		while(!(ADCSRA & (1<<ADIF)));
 42e:	8c d0       	rcall	.+280    	; 0x548 <setBit>
 430:	ea e7       	ldi	r30, 0x7A	; 122
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
		
	}
	switch(checkBit(ADMUX, ADLAR))
 436:	84 ff       	sbrs	r24, 4
 438:	fd cf       	rjmp	.-6      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 43a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 43e:	65 e0       	ldi	r22, 0x05	; 5
 440:	c0 d0       	rcall	.+384    	; 0x5c2 <checkBit>
 442:	88 23       	and	r24, r24
 444:	31 f0       	breq	.+12     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 446:	81 30       	cpi	r24, 0x01	; 1
	{
		case 1:
			readValue = ADCH;
 448:	59 f4       	brne	.+22     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 44a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
			break;
 44e:	90 e0       	ldi	r25, 0x00	; 0
		case 0:
			readValue = ADCL;
 450:	08 95       	ret
 452:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
			temp = ADCH;
 456:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
			readValue |= (temp << 8);
 45a:	90 e0       	ldi	r25, 0x00	; 0
		break;
 45c:	92 2b       	or	r25, r18
	for (channel = 0; channel < 8; channel++)
		updateBit(&DIDR0, 1 << channel, ~channelsEnabled[channel]);
}

u16 adc_singleRead(u8 channel){
	u16 readValue = 0;
 45e:	08 95       	ret
 460:	80 e0       	ldi	r24, 0x00	; 0
			temp = ADCH;
			readValue |= (temp << 8);
		break;
	}
	return readValue;
}
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	08 95       	ret

00000466 <disableJTAG>:
			break;
		case PC:
			setBit(&PORTC, _number);
			break;
		case PD:
			setBit(&PORTD, _number);
 466:	80 e8       	ldi	r24, 0x80	; 128
 468:	85 bf       	out	0x35, r24	; 53
 46a:	85 bf       	out	0x35, r24	; 53
 46c:	08 95       	ret

0000046e <gpio_init>:
 46e:	1f 93       	push	r17
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	d6 2f       	mov	r29, r22
 476:	c4 2f       	mov	r28, r20
 478:	12 2f       	mov	r17, r18
 47a:	81 30       	cpi	r24, 0x01	; 1
 47c:	89 f0       	breq	.+34     	; 0x4a0 <gpio_init+0x32>
 47e:	28 f0       	brcs	.+10     	; 0x48a <gpio_init+0x1c>
 480:	82 30       	cpi	r24, 0x02	; 2
 482:	c9 f0       	breq	.+50     	; 0x4b6 <gpio_init+0x48>
 484:	83 30       	cpi	r24, 0x03	; 3
 486:	11 f1       	breq	.+68     	; 0x4cc <gpio_init+0x5e>
 488:	2b c0       	rjmp	.+86     	; 0x4e0 <gpio_init+0x72>
 48a:	81 e2       	ldi	r24, 0x21	; 33
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	81 d0       	rcall	.+258    	; 0x592 <updateBit>
 490:	c1 11       	cpse	r28, r1
 492:	26 c0       	rjmp	.+76     	; 0x4e0 <gpio_init+0x72>
 494:	41 2f       	mov	r20, r17
 496:	6d 2f       	mov	r22, r29
 498:	82 e2       	ldi	r24, 0x22	; 34
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	7a d0       	rcall	.+244    	; 0x592 <updateBit>
 49e:	20 c0       	rjmp	.+64     	; 0x4e0 <gpio_init+0x72>
 4a0:	84 e2       	ldi	r24, 0x24	; 36
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	76 d0       	rcall	.+236    	; 0x592 <updateBit>
 4a6:	c1 11       	cpse	r28, r1
 4a8:	1b c0       	rjmp	.+54     	; 0x4e0 <gpio_init+0x72>
 4aa:	41 2f       	mov	r20, r17
 4ac:	6d 2f       	mov	r22, r29
 4ae:	85 e2       	ldi	r24, 0x25	; 37
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	6f d0       	rcall	.+222    	; 0x592 <updateBit>
 4b4:	15 c0       	rjmp	.+42     	; 0x4e0 <gpio_init+0x72>
 4b6:	87 e2       	ldi	r24, 0x27	; 39
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	6b d0       	rcall	.+214    	; 0x592 <updateBit>
 4bc:	c1 11       	cpse	r28, r1
 4be:	10 c0       	rjmp	.+32     	; 0x4e0 <gpio_init+0x72>
 4c0:	41 2f       	mov	r20, r17
 4c2:	6d 2f       	mov	r22, r29
 4c4:	88 e2       	ldi	r24, 0x28	; 40
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	64 d0       	rcall	.+200    	; 0x592 <updateBit>
 4ca:	0a c0       	rjmp	.+20     	; 0x4e0 <gpio_init+0x72>
 4cc:	8a e2       	ldi	r24, 0x2A	; 42
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	60 d0       	rcall	.+192    	; 0x592 <updateBit>
 4d2:	c1 11       	cpse	r28, r1
 4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <gpio_init+0x72>
 4d6:	41 2f       	mov	r20, r17
 4d8:	6d 2f       	mov	r22, r29
 4da:	8b e2       	ldi	r24, 0x2B	; 43
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	59 d0       	rcall	.+178    	; 0x592 <updateBit>
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	1f 91       	pop	r17
 4e6:	08 95       	ret

000004e8 <gpio_out_reset>:
			break;
	}
}

void gpio_out_reset(port _port, u8 _number){
	switch(_port){
 4e8:	81 30       	cpi	r24, 0x01	; 1
 4ea:	51 f0       	breq	.+20     	; 0x500 <gpio_out_reset+0x18>
 4ec:	28 f0       	brcs	.+10     	; 0x4f8 <gpio_out_reset+0x10>
 4ee:	82 30       	cpi	r24, 0x02	; 2
 4f0:	59 f0       	breq	.+22     	; 0x508 <gpio_out_reset+0x20>
 4f2:	83 30       	cpi	r24, 0x03	; 3
 4f4:	69 f0       	breq	.+26     	; 0x510 <gpio_out_reset+0x28>
 4f6:	08 95       	ret
		case PA:
			clearBit(&PORTA, _number);
 4f8:	82 e2       	ldi	r24, 0x22	; 34
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	31 c0       	rjmp	.+98     	; 0x560 <clearBit>
			break;
 4fe:	08 95       	ret
		case PB:
			clearBit(&PORTB, _number);
 500:	85 e2       	ldi	r24, 0x25	; 37
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	2d c0       	rjmp	.+90     	; 0x560 <clearBit>
			break;
		case PC:
			clearBit(&PORTC, _number);
 506:	08 95       	ret
 508:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			clearBit(&PORTD, _number);
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	29 c0       	rjmp	.+82     	; 0x560 <clearBit>
 50e:	08 95       	ret
 510:	8b e2       	ldi	r24, 0x2B	; 43
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	25 c0       	rjmp	.+74     	; 0x560 <clearBit>
 516:	08 95       	ret

00000518 <gpio_out_toggle>:
			break;
	}
}

void gpio_out_toggle(port _port, u8 _number){
	switch(_port){
 518:	81 30       	cpi	r24, 0x01	; 1
 51a:	51 f0       	breq	.+20     	; 0x530 <gpio_out_toggle+0x18>
 51c:	28 f0       	brcs	.+10     	; 0x528 <gpio_out_toggle+0x10>
 51e:	82 30       	cpi	r24, 0x02	; 2
 520:	59 f0       	breq	.+22     	; 0x538 <gpio_out_toggle+0x20>
 522:	83 30       	cpi	r24, 0x03	; 3
 524:	69 f0       	breq	.+26     	; 0x540 <gpio_out_toggle+0x28>
 526:	08 95       	ret
		case PA:
			toggleBit(&PORTA, _number);
 528:	82 e2       	ldi	r24, 0x22	; 34
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	26 c0       	rjmp	.+76     	; 0x57a <toggleBit>
			break;
 52e:	08 95       	ret
		case PB:
			toggleBit(&PORTB, _number);
 530:	85 e2       	ldi	r24, 0x25	; 37
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	22 c0       	rjmp	.+68     	; 0x57a <toggleBit>
			break;
		case PC:
			toggleBit(&PORTC, _number);
 536:	08 95       	ret
 538:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			toggleBit(&PORTD, _number);
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	1e c0       	rjmp	.+60     	; 0x57a <toggleBit>
 53e:	08 95       	ret
 540:	8b e2       	ldi	r24, 0x2B	; 43
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	1a c0       	rjmp	.+52     	; 0x57a <toggleBit>
 546:	08 95       	ret

00000548 <setBit>:
 */ 

#include "math.h"

void setBit(volatile u8 *registerName, u8 position){
	*registerName |= (1 << position);
 548:	fc 01       	movw	r30, r24
 54a:	40 81       	ld	r20, Z
 54c:	21 e0       	ldi	r18, 0x01	; 1
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	02 c0       	rjmp	.+4      	; 0x556 <setBit+0xe>
 552:	22 0f       	add	r18, r18
 554:	33 1f       	adc	r19, r19
 556:	6a 95       	dec	r22
 558:	e2 f7       	brpl	.-8      	; 0x552 <setBit+0xa>
 55a:	24 2b       	or	r18, r20
 55c:	20 83       	st	Z, r18
 55e:	08 95       	ret

00000560 <clearBit>:
}

void clearBit(volatile u8 *registerName, u8 position){
 560:	fc 01       	movw	r30, r24
	*registerName &= ~(1 << position);
 562:	90 81       	ld	r25, Z
 564:	21 e0       	ldi	r18, 0x01	; 1
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <clearBit+0xe>
 56a:	22 0f       	add	r18, r18
 56c:	33 1f       	adc	r19, r19
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <clearBit+0xa>
 572:	20 95       	com	r18
 574:	29 23       	and	r18, r25
 576:	20 83       	st	Z, r18
 578:	08 95       	ret

0000057a <toggleBit>:
}

void toggleBit(volatile u8 *registerName, u8 position){
	*registerName ^= (1 << position);
 57a:	fc 01       	movw	r30, r24
 57c:	40 81       	ld	r20, Z
 57e:	21 e0       	ldi	r18, 0x01	; 1
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <toggleBit+0xe>
 584:	22 0f       	add	r18, r18
 586:	33 1f       	adc	r19, r19
 588:	6a 95       	dec	r22
 58a:	e2 f7       	brpl	.-8      	; 0x584 <toggleBit+0xa>
 58c:	24 27       	eor	r18, r20
 58e:	20 83       	st	Z, r18
 590:	08 95       	ret

00000592 <updateBit>:
}

void updateBit(volatile u8 *registerName, u8 position, u8 value){
 592:	fc 01       	movw	r30, r24
 594:	94 2f       	mov	r25, r20
	u8 newValue = value << position;
	newValue |= (*registerName & ~(1 << position));
 596:	20 81       	ld	r18, Z
 598:	41 e0       	ldi	r20, 0x01	; 1
 59a:	50 e0       	ldi	r21, 0x00	; 0
 59c:	06 2e       	mov	r0, r22
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <updateBit+0x12>
 5a0:	44 0f       	add	r20, r20
 5a2:	55 1f       	adc	r21, r21
 5a4:	0a 94       	dec	r0
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <updateBit+0xe>
 5a8:	40 95       	com	r20
 5aa:	50 95       	com	r21
 5ac:	24 23       	and	r18, r20
 5ae:	49 2f       	mov	r20, r25
 5b0:	50 e0       	ldi	r21, 0x00	; 0
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <updateBit+0x26>
 5b4:	44 0f       	add	r20, r20
 5b6:	55 1f       	adc	r21, r21
 5b8:	6a 95       	dec	r22
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <updateBit+0x22>
 5bc:	42 2b       	or	r20, r18
	*registerName = newValue;
 5be:	40 83       	st	Z, r20
 5c0:	08 95       	ret

000005c2 <checkBit>:
}

bitValue checkBit(u8 registerName, u8 position){
	return (registerName >> position) & 1;
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <checkBit+0x8>
 5c6:	95 95       	asr	r25
 5c8:	87 95       	ror	r24
 5ca:	6a 95       	dec	r22
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <checkBit+0x4>
 5ce:	81 70       	andi	r24, 0x01	; 1
 5d0:	08 95       	ret

000005d2 <calculateTop>:
#include "gpio.h"

u8 timer1ClockSource;
u8 timer2ClockSource;

u16 calculateTop(u16 *prescaler, u32 frequency, timer timerSelection){
 5d2:	cf 92       	push	r12
 5d4:	df 92       	push	r13
 5d6:	ef 92       	push	r14
 5d8:	ff 92       	push	r15
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
 5de:	ec 01       	movw	r28, r24
 5e0:	6a 01       	movw	r12, r20
 5e2:	7b 01       	movw	r14, r22
	u32 topValue = 0;
	u16 divisor = 0;
	switch(timerSelection){
 5e4:	21 30       	cpi	r18, 0x01	; 1
 5e6:	09 f0       	breq	.+2      	; 0x5ea <calculateTop+0x18>
 5e8:	69 c0       	rjmp	.+210    	; 0x6bc <calculateTop+0xea>
		case TIMER0:
			break;
		case TIMER1:
			divisor = 1;
			*prescaler = divisor;
			topValue = S_CLOCK / divisor / frequency - 1;
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	72 e1       	ldi	r23, 0x12	; 18
 5ee:	8a e7       	ldi	r24, 0x7A	; 122
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	a7 01       	movw	r20, r14
 5f4:	96 01       	movw	r18, r12
 5f6:	b4 d3       	rcall	.+1896   	; 0xd60 <__udivmodsi4>
 5f8:	da 01       	movw	r26, r20
 5fa:	c9 01       	movw	r24, r18
 5fc:	01 97       	sbiw	r24, 0x01	; 1
 5fe:	a1 09       	sbc	r26, r1
 600:	b1 09       	sbc	r27, r1
			if(topValue > 0xFFFF){
 602:	00 97       	sbiw	r24, 0x00	; 0
 604:	21 e0       	ldi	r18, 0x01	; 1
 606:	a2 07       	cpc	r26, r18
 608:	b1 05       	cpc	r27, r1
 60a:	28 f4       	brcc	.+10     	; 0x616 <calculateTop+0x44>
	switch(timerSelection){
		case TIMER0:
			break;
		case TIMER1:
			divisor = 1;
			*prescaler = divisor;
 60c:	21 e0       	ldi	r18, 0x01	; 1
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	39 83       	std	Y+1, r19	; 0x01
 612:	28 83       	st	Y, r18
 614:	56 c0       	rjmp	.+172    	; 0x6c2 <calculateTop+0xf0>
			topValue = S_CLOCK / divisor / frequency - 1;
			if(topValue > 0xFFFF){
				divisor = 8;
				*prescaler = divisor;
				topValue = S_CLOCK / divisor / frequency - 1;
 616:	60 e4       	ldi	r22, 0x40	; 64
 618:	72 e4       	ldi	r23, 0x42	; 66
 61a:	8f e0       	ldi	r24, 0x0F	; 15
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	a7 01       	movw	r20, r14
 620:	96 01       	movw	r18, r12
 622:	9e d3       	rcall	.+1852   	; 0xd60 <__udivmodsi4>
 624:	da 01       	movw	r26, r20
 626:	c9 01       	movw	r24, r18
 628:	01 97       	sbiw	r24, 0x01	; 1
 62a:	a1 09       	sbc	r26, r1
 62c:	b1 09       	sbc	r27, r1
				if(topValue > 0xFFFF){
 62e:	00 97       	sbiw	r24, 0x00	; 0
 630:	21 e0       	ldi	r18, 0x01	; 1
 632:	a2 07       	cpc	r26, r18
 634:	b1 05       	cpc	r27, r1
 636:	28 f4       	brcc	.+10     	; 0x642 <calculateTop+0x70>
			divisor = 1;
			*prescaler = divisor;
			topValue = S_CLOCK / divisor / frequency - 1;
			if(topValue > 0xFFFF){
				divisor = 8;
				*prescaler = divisor;
 638:	28 e0       	ldi	r18, 0x08	; 8
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	39 83       	std	Y+1, r19	; 0x01
 63e:	28 83       	st	Y, r18
 640:	40 c0       	rjmp	.+128    	; 0x6c2 <calculateTop+0xf0>
				topValue = S_CLOCK / divisor / frequency - 1;
				if(topValue > 0xFFFF){
					divisor = 64;
					*prescaler = divisor;
					topValue = S_CLOCK / divisor / frequency -1;
 642:	68 e4       	ldi	r22, 0x48	; 72
 644:	78 ee       	ldi	r23, 0xE8	; 232
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	a7 01       	movw	r20, r14
 64c:	96 01       	movw	r18, r12
 64e:	88 d3       	rcall	.+1808   	; 0xd60 <__udivmodsi4>
 650:	da 01       	movw	r26, r20
 652:	c9 01       	movw	r24, r18
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	a1 09       	sbc	r26, r1
 658:	b1 09       	sbc	r27, r1
					if(topValue > 0xFFFF){
 65a:	00 97       	sbiw	r24, 0x00	; 0
 65c:	21 e0       	ldi	r18, 0x01	; 1
 65e:	a2 07       	cpc	r26, r18
 660:	b1 05       	cpc	r27, r1
 662:	28 f4       	brcc	.+10     	; 0x66e <calculateTop+0x9c>
				divisor = 8;
				*prescaler = divisor;
				topValue = S_CLOCK / divisor / frequency - 1;
				if(topValue > 0xFFFF){
					divisor = 64;
					*prescaler = divisor;
 664:	20 e4       	ldi	r18, 0x40	; 64
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	39 83       	std	Y+1, r19	; 0x01
 66a:	28 83       	st	Y, r18
 66c:	2a c0       	rjmp	.+84     	; 0x6c2 <calculateTop+0xf0>
					topValue = S_CLOCK / divisor / frequency -1;
					if(topValue > 0xFFFF){
						divisor = 256;
						*prescaler = divisor;
						topValue = S_CLOCK / divisor / frequency - 1;
 66e:	62 e1       	ldi	r22, 0x12	; 18
 670:	7a e7       	ldi	r23, 0x7A	; 122
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	a7 01       	movw	r20, r14
 678:	96 01       	movw	r18, r12
 67a:	72 d3       	rcall	.+1764   	; 0xd60 <__udivmodsi4>
 67c:	da 01       	movw	r26, r20
 67e:	c9 01       	movw	r24, r18
 680:	01 97       	sbiw	r24, 0x01	; 1
 682:	a1 09       	sbc	r26, r1
 684:	b1 09       	sbc	r27, r1
						if(topValue > 0xFFFF){
 686:	00 97       	sbiw	r24, 0x00	; 0
 688:	21 e0       	ldi	r18, 0x01	; 1
 68a:	a2 07       	cpc	r26, r18
 68c:	b1 05       	cpc	r27, r1
 68e:	28 f4       	brcc	.+10     	; 0x69a <calculateTop+0xc8>
					divisor = 64;
					*prescaler = divisor;
					topValue = S_CLOCK / divisor / frequency -1;
					if(topValue > 0xFFFF){
						divisor = 256;
						*prescaler = divisor;
 690:	20 e0       	ldi	r18, 0x00	; 0
 692:	31 e0       	ldi	r19, 0x01	; 1
 694:	39 83       	std	Y+1, r19	; 0x01
 696:	28 83       	st	Y, r18
 698:	14 c0       	rjmp	.+40     	; 0x6c2 <calculateTop+0xf0>
						topValue = S_CLOCK / divisor / frequency - 1;
						if(topValue > 0xFFFF){
							divisor = 1024;
							*prescaler = divisor;
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	94 e0       	ldi	r25, 0x04	; 4
 69e:	99 83       	std	Y+1, r25	; 0x01
 6a0:	88 83       	st	Y, r24
							topValue = S_CLOCK / divisor / frequency - 1;
 6a2:	64 e8       	ldi	r22, 0x84	; 132
 6a4:	7e e1       	ldi	r23, 0x1E	; 30
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	a7 01       	movw	r20, r14
 6ac:	96 01       	movw	r18, r12
 6ae:	58 d3       	rcall	.+1712   	; 0xd60 <__udivmodsi4>
 6b0:	da 01       	movw	r26, r20
 6b2:	c9 01       	movw	r24, r18
 6b4:	01 97       	sbiw	r24, 0x01	; 1
 6b6:	a1 09       	sbc	r26, r1
 6b8:	b1 09       	sbc	r27, r1
 6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <calculateTop+0xf0>

u8 timer1ClockSource;
u8 timer2ClockSource;

u16 calculateTop(u16 *prescaler, u32 frequency, timer timerSelection){
	u32 topValue = 0;
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	dc 01       	movw	r26, r24
			break;
		case TIMER3:
			break;
	}
	return (u16)topValue;
}
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	ff 90       	pop	r15
 6c8:	ef 90       	pop	r14
 6ca:	df 90       	pop	r13
 6cc:	cf 90       	pop	r12
 6ce:	08 95       	ret

000006d0 <pwm_init>:

void pwm_init(u8 dutyCycle, u32 frequency, timer timerSelection, channel channelSelection){
 6d0:	0f 93       	push	r16
 6d2:	1f 93       	push	r17
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	00 d0       	rcall	.+0      	; 0x6da <pwm_init+0xa>
 6da:	cd b7       	in	r28, 0x3d	; 61
 6dc:	de b7       	in	r29, 0x3e	; 62
 6de:	18 2f       	mov	r17, r24
	u16 prescaler = 0;
 6e0:	1a 82       	std	Y+2, r1	; 0x02
 6e2:	19 82       	std	Y+1, r1	; 0x01
	u32 dutyAux = 0;
	switch(timerSelection){
 6e4:	21 30       	cpi	r18, 0x01	; 1
 6e6:	21 f0       	breq	.+8      	; 0x6f0 <pwm_init+0x20>
 6e8:	22 30       	cpi	r18, 0x02	; 2
 6ea:	09 f4       	brne	.+2      	; 0x6ee <pwm_init+0x1e>
 6ec:	81 c0       	rjmp	.+258    	; 0x7f0 <pwm_init+0x120>
 6ee:	c3 c0       	rjmp	.+390    	; 0x876 <pwm_init+0x1a6>
		case TIMER0:
			break;
		case TIMER1:
			/* Calculate TOP register to obtain the desired frequency */
			ICR1 = calculateTop(&prescaler, frequency, timerSelection);
 6f0:	21 e0       	ldi	r18, 0x01	; 1
 6f2:	ce 01       	movw	r24, r28
 6f4:	01 96       	adiw	r24, 0x01	; 1
 6f6:	6d df       	rcall	.-294    	; 0x5d2 <calculateTop>
 6f8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 6fc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			/* Sets the prescaler data to be later used in pwm_start() */
			switch(prescaler){
 700:	89 81       	ldd	r24, Y+1	; 0x01
 702:	9a 81       	ldd	r25, Y+2	; 0x02
 704:	80 34       	cpi	r24, 0x40	; 64
 706:	91 05       	cpc	r25, r1
 708:	b9 f0       	breq	.+46     	; 0x738 <pwm_init+0x68>
 70a:	30 f4       	brcc	.+12     	; 0x718 <pwm_init+0x48>
 70c:	81 30       	cpi	r24, 0x01	; 1
 70e:	91 05       	cpc	r25, r1
 710:	59 f0       	breq	.+22     	; 0x728 <pwm_init+0x58>
 712:	08 97       	sbiw	r24, 0x08	; 8
 714:	69 f0       	breq	.+26     	; 0x730 <pwm_init+0x60>
 716:	1b c0       	rjmp	.+54     	; 0x74e <pwm_init+0x7e>
 718:	81 15       	cp	r24, r1
 71a:	21 e0       	ldi	r18, 0x01	; 1
 71c:	92 07       	cpc	r25, r18
 71e:	81 f0       	breq	.+32     	; 0x740 <pwm_init+0x70>
 720:	81 15       	cp	r24, r1
 722:	94 40       	sbci	r25, 0x04	; 4
 724:	89 f0       	breq	.+34     	; 0x748 <pwm_init+0x78>
 726:	13 c0       	rjmp	.+38     	; 0x74e <pwm_init+0x7e>
				case 1:
					timer1ClockSource = 0x01;
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timer1ClockSource>
					break;
 72e:	0f c0       	rjmp	.+30     	; 0x74e <pwm_init+0x7e>
				case 8:
					timer1ClockSource = 0x02;
 730:	82 e0       	ldi	r24, 0x02	; 2
 732:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timer1ClockSource>
					break;
 736:	0b c0       	rjmp	.+22     	; 0x74e <pwm_init+0x7e>
				case 64:
					timer1ClockSource = 0x03;
 738:	83 e0       	ldi	r24, 0x03	; 3
 73a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timer1ClockSource>
					break;
 73e:	07 c0       	rjmp	.+14     	; 0x74e <pwm_init+0x7e>
				case 256:
					timer1ClockSource = 0x04;
 740:	84 e0       	ldi	r24, 0x04	; 4
 742:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timer1ClockSource>
					break;
 746:	03 c0       	rjmp	.+6      	; 0x74e <pwm_init+0x7e>
				case 1024:
					timer1ClockSource = 0x05;
 748:	85 e0       	ldi	r24, 0x05	; 5
 74a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timer1ClockSource>
					break;
			}
			/* FAST PWM mode with ICR1 as TOP */
			clearBit(&TCCR1A, WGM10);
 74e:	60 e0       	ldi	r22, 0x00	; 0
 750:	80 e8       	ldi	r24, 0x80	; 128
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	05 df       	rcall	.-502    	; 0x560 <clearBit>
			setBit(&TCCR1A, WGM11);
 756:	61 e0       	ldi	r22, 0x01	; 1
 758:	80 e8       	ldi	r24, 0x80	; 128
 75a:	90 e0       	ldi	r25, 0x00	; 0
			setBit(&TCCR1B, WGM13);
 75c:	f5 de       	rcall	.-534    	; 0x548 <setBit>
 75e:	64 e0       	ldi	r22, 0x04	; 4
 760:	81 e8       	ldi	r24, 0x81	; 129
			setBit(&TCCR1B, WGM12);
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	f1 de       	rcall	.-542    	; 0x548 <setBit>
 766:	63 e0       	ldi	r22, 0x03	; 3
 768:	81 e8       	ldi	r24, 0x81	; 129
 76a:	90 e0       	ldi	r25, 0x00	; 0
			/* Clear OC1A/B on compare match and set it on BOTTOM */
			switch(channelSelection){
 76c:	ed de       	rcall	.-550    	; 0x548 <setBit>
 76e:	00 23       	and	r16, r16
 770:	19 f0       	breq	.+6      	; 0x778 <pwm_init+0xa8>
 772:	01 30       	cpi	r16, 0x01	; 1
				case CHANNEL_A:
					gpio_init(PD, 5, OUTPUT, NO_PULL);
 774:	f9 f0       	breq	.+62     	; 0x7b4 <pwm_init+0xe4>
 776:	7f c0       	rjmp	.+254    	; 0x876 <pwm_init+0x1a6>
 778:	20 e0       	ldi	r18, 0x00	; 0
 77a:	41 e0       	ldi	r20, 0x01	; 1
 77c:	65 e0       	ldi	r22, 0x05	; 5
					setBit(&TCCR1A, COM1A1);
 77e:	83 e0       	ldi	r24, 0x03	; 3
 780:	76 de       	rcall	.-788    	; 0x46e <gpio_init>
 782:	67 e0       	ldi	r22, 0x07	; 7
 784:	80 e8       	ldi	r24, 0x80	; 128
					clearBit(&TCCR1A, COM1A0);
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	df de       	rcall	.-578    	; 0x548 <setBit>
 78a:	66 e0       	ldi	r22, 0x06	; 6
 78c:	80 e8       	ldi	r24, 0x80	; 128
					dutyAux = (u32) dutyCycle * ICR1 / 100;
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	e7 de       	rcall	.-562    	; 0x560 <clearBit>
 792:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
					OCR1A = (u16) dutyAux;
 796:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 79a:	21 2f       	mov	r18, r17
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	02 d3       	rcall	.+1540   	; 0xda4 <__umulhisi3>
 7a0:	24 e6       	ldi	r18, 0x64	; 100
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	40 e0       	ldi	r20, 0x00	; 0
 7a6:	50 e0       	ldi	r21, 0x00	; 0
 7a8:	db d2       	rcall	.+1462   	; 0xd60 <__udivmodsi4>
 7aa:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
					break;
				case CHANNEL_B:
					gpio_init(PD, 4, OUTPUT, NO_PULL);
 7ae:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 7b2:	61 c0       	rjmp	.+194    	; 0x876 <pwm_init+0x1a6>
 7b4:	20 e0       	ldi	r18, 0x00	; 0
 7b6:	41 e0       	ldi	r20, 0x01	; 1
					setBit(&TCCR1A, COM1B1);
 7b8:	64 e0       	ldi	r22, 0x04	; 4
 7ba:	83 e0       	ldi	r24, 0x03	; 3
 7bc:	58 de       	rcall	.-848    	; 0x46e <gpio_init>
 7be:	65 e0       	ldi	r22, 0x05	; 5
					clearBit(&TCCR1A, COM1B0);
 7c0:	80 e8       	ldi	r24, 0x80	; 128
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	c1 de       	rcall	.-638    	; 0x548 <setBit>
 7c6:	64 e0       	ldi	r22, 0x04	; 4
					dutyAux = (u32) dutyCycle * ICR1 / 100;
 7c8:	80 e8       	ldi	r24, 0x80	; 128
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	c9 de       	rcall	.-622    	; 0x560 <clearBit>
 7ce:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
					OCR1B = (u16) dutyAux;
 7d2:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 7d6:	21 2f       	mov	r18, r17
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	e4 d2       	rcall	.+1480   	; 0xda4 <__umulhisi3>
 7dc:	24 e6       	ldi	r18, 0x64	; 100
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	40 e0       	ldi	r20, 0x00	; 0
 7e2:	50 e0       	ldi	r21, 0x00	; 0
 7e4:	bd d2       	rcall	.+1402   	; 0xd60 <__udivmodsi4>
					break;
 7e6:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
					break;
			}
			break;
		case TIMER2:
			TIMSK2 = 0;
			clearBit(&ASSR, AS2);
 7ea:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 7ee:	43 c0       	rjmp	.+134    	; 0x876 <pwm_init+0x1a6>
 7f0:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
			clearBit(&TCCR2B, WGM22);
 7f4:	65 e0       	ldi	r22, 0x05	; 5
 7f6:	86 eb       	ldi	r24, 0xB6	; 182
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	b2 de       	rcall	.-668    	; 0x560 <clearBit>
			setBit(&TCCR2A, WGM21);
 7fc:	63 e0       	ldi	r22, 0x03	; 3
 7fe:	81 eb       	ldi	r24, 0xB1	; 177
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	ae de       	rcall	.-676    	; 0x560 <clearBit>
			setBit(&TCCR2A, WGM20);
 804:	61 e0       	ldi	r22, 0x01	; 1
 806:	80 eb       	ldi	r24, 0xB0	; 176
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	9e de       	rcall	.-708    	; 0x548 <setBit>
 80c:	60 e0       	ldi	r22, 0x00	; 0
			timer2ClockSource = 0x01;
 80e:	80 eb       	ldi	r24, 0xB0	; 176
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	9a de       	rcall	.-716    	; 0x548 <setBit>
			switch(channelSelection){
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <timer2ClockSource>
 81a:	00 23       	and	r16, r16
				case CHANNEL_A:
					gpio_init(PD, 7, OUTPUT, NO_PULL);
 81c:	19 f0       	breq	.+6      	; 0x824 <pwm_init+0x154>
 81e:	01 30       	cpi	r16, 0x01	; 1
 820:	b1 f0       	breq	.+44     	; 0x84e <pwm_init+0x17e>
 822:	29 c0       	rjmp	.+82     	; 0x876 <pwm_init+0x1a6>
 824:	20 e0       	ldi	r18, 0x00	; 0
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2A = (u8) dutyAux;
 826:	41 e0       	ldi	r20, 0x01	; 1
 828:	67 e0       	ldi	r22, 0x07	; 7
 82a:	83 e0       	ldi	r24, 0x03	; 3
 82c:	20 de       	rcall	.-960    	; 0x46e <gpio_init>
 82e:	8f ef       	ldi	r24, 0xFF	; 255
 830:	18 9f       	mul	r17, r24
 832:	90 01       	movw	r18, r0
 834:	11 24       	eor	r1, r1
 836:	36 95       	lsr	r19
 838:	27 95       	ror	r18
 83a:	36 95       	lsr	r19
 83c:	27 95       	ror	r18
 83e:	ab e7       	ldi	r26, 0x7B	; 123
 840:	b4 e1       	ldi	r27, 0x14	; 20
					break;
 842:	b0 d2       	rcall	.+1376   	; 0xda4 <__umulhisi3>
				case CHANNEL_B:
					gpio_init(PD, 6, OUTPUT, NO_PULL);
 844:	96 95       	lsr	r25
 846:	87 95       	ror	r24
 848:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 84c:	14 c0       	rjmp	.+40     	; 0x876 <pwm_init+0x1a6>
 84e:	20 e0       	ldi	r18, 0x00	; 0
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2B = (u8) dutyAux;
 850:	41 e0       	ldi	r20, 0x01	; 1
 852:	66 e0       	ldi	r22, 0x06	; 6
 854:	83 e0       	ldi	r24, 0x03	; 3
 856:	0b de       	rcall	.-1002   	; 0x46e <gpio_init>
 858:	8f ef       	ldi	r24, 0xFF	; 255
 85a:	18 9f       	mul	r17, r24
 85c:	90 01       	movw	r18, r0
 85e:	11 24       	eor	r1, r1
 860:	36 95       	lsr	r19
 862:	27 95       	ror	r18
 864:	36 95       	lsr	r19
 866:	27 95       	ror	r18
 868:	ab e7       	ldi	r26, 0x7B	; 123
 86a:	b4 e1       	ldi	r27, 0x14	; 20
 86c:	9b d2       	rcall	.+1334   	; 0xda4 <__umulhisi3>
 86e:	96 95       	lsr	r25
			}
			break;
		case TIMER3:
			break;
	}
}
 870:	87 95       	ror	r24
 872:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 876:	0f 90       	pop	r0
 878:	0f 90       	pop	r0
 87a:	df 91       	pop	r29
 87c:	cf 91       	pop	r28
 87e:	1f 91       	pop	r17
 880:	0f 91       	pop	r16
 882:	08 95       	ret

00000884 <pwm_setDutyCycle>:

/** Sets a new duty cycle for the selected timer and channel 
*/
void pwm_setDutyCycle(u8 dutyCycle, timer timerSelection, channel channelSelection){
	u32 dutyAux = 0;
	switch(timerSelection){
 884:	61 30       	cpi	r22, 0x01	; 1
 886:	19 f0       	breq	.+6      	; 0x88e <pwm_setDutyCycle+0xa>
 888:	62 30       	cpi	r22, 0x02	; 2
 88a:	41 f1       	breq	.+80     	; 0x8dc <pwm_setDutyCycle+0x58>
 88c:	08 95       	ret
		case TIMER0:
			break;
		case TIMER1:
			switch(channelSelection){
 88e:	44 23       	and	r20, r20
 890:	19 f0       	breq	.+6      	; 0x898 <pwm_setDutyCycle+0x14>
 892:	41 30       	cpi	r20, 0x01	; 1
 894:	91 f0       	breq	.+36     	; 0x8ba <pwm_setDutyCycle+0x36>
 896:	08 95       	ret
				case CHANNEL_A:
					dutyAux = (u32) dutyCycle * ICR1 / 100;
 898:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 89c:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
					OCR1A = (u16) dutyAux;
 8a0:	28 2f       	mov	r18, r24
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	7f d2       	rcall	.+1278   	; 0xda4 <__umulhisi3>
 8a6:	24 e6       	ldi	r18, 0x64	; 100
 8a8:	30 e0       	ldi	r19, 0x00	; 0
 8aa:	40 e0       	ldi	r20, 0x00	; 0
 8ac:	50 e0       	ldi	r21, 0x00	; 0
 8ae:	58 d2       	rcall	.+1200   	; 0xd60 <__udivmodsi4>
 8b0:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 8b4:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
					break;
 8b8:	08 95       	ret
				case CHANNEL_B:
					dutyAux = (u32) dutyCycle * ICR1 / 100;
 8ba:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 8be:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
					OCR1B = (u16) dutyAux;
 8c2:	28 2f       	mov	r18, r24
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	6e d2       	rcall	.+1244   	; 0xda4 <__umulhisi3>
 8c8:	24 e6       	ldi	r18, 0x64	; 100
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	40 e0       	ldi	r20, 0x00	; 0
 8ce:	50 e0       	ldi	r21, 0x00	; 0
 8d0:	47 d2       	rcall	.+1166   	; 0xd60 <__udivmodsi4>
 8d2:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 8d6:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				case NO_CHANNEL:
					break;
			}
			break;
		case TIMER2:
			switch(channelSelection){
 8da:	08 95       	ret
 8dc:	44 23       	and	r20, r20
 8de:	19 f0       	breq	.+6      	; 0x8e6 <pwm_setDutyCycle+0x62>
 8e0:	41 30       	cpi	r20, 0x01	; 1
 8e2:	89 f0       	breq	.+34     	; 0x906 <pwm_setDutyCycle+0x82>
				case CHANNEL_A:
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2A = (u8) dutyAux;
 8e4:	08 95       	ret
 8e6:	9f ef       	ldi	r25, 0xFF	; 255
 8e8:	89 9f       	mul	r24, r25
 8ea:	90 01       	movw	r18, r0
 8ec:	11 24       	eor	r1, r1
 8ee:	36 95       	lsr	r19
 8f0:	27 95       	ror	r18
 8f2:	36 95       	lsr	r19
 8f4:	27 95       	ror	r18
 8f6:	ab e7       	ldi	r26, 0x7B	; 123
 8f8:	b4 e1       	ldi	r27, 0x14	; 20
 8fa:	54 d2       	rcall	.+1192   	; 0xda4 <__umulhisi3>
 8fc:	96 95       	lsr	r25
 8fe:	87 95       	ror	r24
 900:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
					break;
				case CHANNEL_B:
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2B = (u8) dutyAux;
 904:	08 95       	ret
 906:	9f ef       	ldi	r25, 0xFF	; 255
 908:	89 9f       	mul	r24, r25
 90a:	90 01       	movw	r18, r0
 90c:	11 24       	eor	r1, r1
 90e:	36 95       	lsr	r19
 910:	27 95       	ror	r18
 912:	36 95       	lsr	r19
 914:	27 95       	ror	r18
 916:	ab e7       	ldi	r26, 0x7B	; 123
 918:	b4 e1       	ldi	r27, 0x14	; 20
 91a:	44 d2       	rcall	.+1160   	; 0xda4 <__umulhisi3>
 91c:	96 95       	lsr	r25
 91e:	87 95       	ror	r24
 920:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 924:	08 95       	ret

00000926 <pwm_start>:
}

/** Starts the selected timer
*/
void pwm_start(timer timerSelection){
	switch(timerSelection){
 926:	81 30       	cpi	r24, 0x01	; 1
 928:	19 f0       	breq	.+6      	; 0x930 <pwm_start+0xa>
 92a:	82 30       	cpi	r24, 0x02	; 2
 92c:	d1 f0       	breq	.+52     	; 0x962 <pwm_start+0x3c>
 92e:	08 95       	ret
		case TIMER0:
			break;
		case TIMER1:
			updateBit(&TCCR1B, CS12, (timer1ClockSource >> 2) & 1);
 930:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <timer1ClockSource>
 934:	42 fb       	bst	r20, 2
 936:	44 27       	eor	r20, r20
 938:	40 f9       	bld	r20, 0
 93a:	62 e0       	ldi	r22, 0x02	; 2
 93c:	81 e8       	ldi	r24, 0x81	; 129
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	28 de       	rcall	.-944    	; 0x592 <updateBit>
			updateBit(&TCCR1B, CS11, (timer1ClockSource >> 1) & 1);
 942:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <timer1ClockSource>
 946:	46 95       	lsr	r20
 948:	41 70       	andi	r20, 0x01	; 1
 94a:	61 e0       	ldi	r22, 0x01	; 1
 94c:	81 e8       	ldi	r24, 0x81	; 129
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	20 de       	rcall	.-960    	; 0x592 <updateBit>
			updateBit(&TCCR1B, CS10, timer1ClockSource & 1);
 952:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <timer1ClockSource>
 956:	41 70       	andi	r20, 0x01	; 1
 958:	60 e0       	ldi	r22, 0x00	; 0
 95a:	81 e8       	ldi	r24, 0x81	; 129
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	19 ce       	rjmp	.-974    	; 0x592 <updateBit>
			break;
 960:	08 95       	ret
		case TIMER2:
			updateBit(&TCCR2B, CS22, (timer2ClockSource >> 2) & 1);
 962:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <timer2ClockSource>
 966:	42 fb       	bst	r20, 2
 968:	44 27       	eor	r20, r20
 96a:	40 f9       	bld	r20, 0
 96c:	62 e0       	ldi	r22, 0x02	; 2
 96e:	81 eb       	ldi	r24, 0xB1	; 177
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	0f de       	rcall	.-994    	; 0x592 <updateBit>
			updateBit(&TCCR2B, CS21, (timer2ClockSource >> 1) & 1);
 974:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <timer2ClockSource>
 978:	46 95       	lsr	r20
 97a:	41 70       	andi	r20, 0x01	; 1
 97c:	61 e0       	ldi	r22, 0x01	; 1
 97e:	81 eb       	ldi	r24, 0xB1	; 177
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	07 de       	rcall	.-1010   	; 0x592 <updateBit>
			updateBit(&TCCR2B, CS20, timer2ClockSource & 1);
 984:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <timer2ClockSource>
 988:	41 70       	andi	r20, 0x01	; 1
 98a:	60 e0       	ldi	r22, 0x00	; 0
 98c:	81 eb       	ldi	r24, 0xB1	; 177
 98e:	90 e0       	ldi	r25, 0x00	; 0
			setBit(&TCCR2A, COM2A1);
 990:	00 de       	rcall	.-1024   	; 0x592 <updateBit>
 992:	67 e0       	ldi	r22, 0x07	; 7
 994:	80 eb       	ldi	r24, 0xB0	; 176
			clearBit(&TCCR2A, COM2A0);
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	d7 dd       	rcall	.-1106   	; 0x548 <setBit>
 99a:	66 e0       	ldi	r22, 0x06	; 6
			setBit(&TCCR2A, COM2B1);
 99c:	80 eb       	ldi	r24, 0xB0	; 176
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	df dd       	rcall	.-1090   	; 0x560 <clearBit>
 9a2:	65 e0       	ldi	r22, 0x05	; 5
 9a4:	80 eb       	ldi	r24, 0xB0	; 176
			clearBit(&TCCR2A, COM2B0);
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	cf dd       	rcall	.-1122   	; 0x548 <setBit>
 9aa:	64 e0       	ldi	r22, 0x04	; 4
 9ac:	80 eb       	ldi	r24, 0xB0	; 176
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	d7 cd       	rjmp	.-1106   	; 0x560 <clearBit>
 9b2:	08 95       	ret

000009b4 <uart_init>:
			//messageBufferIndex = 0;
		//}
	//}	
//}

void uart_init(syncMode uartMode, parity uartParity, stopBits uartStop, baudRate uartBaudRate){
 9b4:	0f 93       	push	r16
 9b6:	1f 93       	push	r17
 9b8:	cf 93       	push	r28
 9ba:	df 93       	push	r29
 9bc:	08 2f       	mov	r16, r24
 9be:	16 2f       	mov	r17, r22
 9c0:	d4 2f       	mov	r29, r20
 9c2:	c2 2f       	mov	r28, r18
	setBit(&DDRD, 1);
 9c4:	61 e0       	ldi	r22, 0x01	; 1
 9c6:	8a e2       	ldi	r24, 0x2A	; 42
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	be dd       	rcall	.-1156   	; 0x548 <setBit>
	clearBit(&DDRD, 0);
 9cc:	60 e0       	ldi	r22, 0x00	; 0
 9ce:	8a e2       	ldi	r24, 0x2A	; 42
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	c6 dd       	rcall	.-1140   	; 0x560 <clearBit>
	/** Double speed disabled */
	clearBit(&UCSR0A, U2X0);
 9d4:	61 e0       	ldi	r22, 0x01	; 1
 9d6:	80 ec       	ldi	r24, 0xC0	; 192
 9d8:	90 e0       	ldi	r25, 0x00	; 0
	/** 8 bit data frame */
	clearBit(&UCSR0B, UCSZ02);
 9da:	c2 dd       	rcall	.-1148   	; 0x560 <clearBit>
 9dc:	62 e0       	ldi	r22, 0x02	; 2
 9de:	81 ec       	ldi	r24, 0xC1	; 193
	setBit(&UCSR0C, UCSZ01);
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	be dd       	rcall	.-1156   	; 0x560 <clearBit>
 9e4:	62 e0       	ldi	r22, 0x02	; 2
 9e6:	82 ec       	ldi	r24, 0xC2	; 194
	setBit(&UCSR0C, UCSZ00);
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	ae dd       	rcall	.-1188   	; 0x548 <setBit>
 9ec:	61 e0       	ldi	r22, 0x01	; 1
 9ee:	82 ec       	ldi	r24, 0xC2	; 194
	/** Asynchronous or synchronous mode */
	clearBit(&UCSR0C, UMSEL01);
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	aa dd       	rcall	.-1196   	; 0x548 <setBit>
 9f4:	67 e0       	ldi	r22, 0x07	; 7
 9f6:	82 ec       	ldi	r24, 0xC2	; 194
	updateBit(&UCSR0C, UMSEL00, uartMode);
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	b2 dd       	rcall	.-1180   	; 0x560 <clearBit>
 9fc:	40 2f       	mov	r20, r16
 9fe:	66 e0       	ldi	r22, 0x06	; 6
	/** Odd or even parity mode */
	setBit(&UCSR0C, UPM01);
 a00:	82 ec       	ldi	r24, 0xC2	; 194
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	c6 dd       	rcall	.-1140   	; 0x592 <updateBit>
	updateBit(&UCSR0C, UPM00, uartParity);
 a06:	65 e0       	ldi	r22, 0x05	; 5
 a08:	82 ec       	ldi	r24, 0xC2	; 194
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	9d dd       	rcall	.-1222   	; 0x548 <setBit>
 a0e:	41 2f       	mov	r20, r17
	/** Number of stop bits */
	updateBit(&UCSR0C, USBS0, uartStop);
 a10:	64 e0       	ldi	r22, 0x04	; 4
 a12:	82 ec       	ldi	r24, 0xC2	; 194
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	bd dd       	rcall	.-1158   	; 0x592 <updateBit>
 a18:	4d 2f       	mov	r20, r29
	/** Baud rate */
	UBRR0 = uartBaudRate;
 a1a:	63 e0       	ldi	r22, 0x03	; 3
 a1c:	82 ec       	ldi	r24, 0xC2	; 194
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	b8 dd       	rcall	.-1168   	; 0x592 <updateBit>
 a22:	2c 2f       	mov	r18, r28
 a24:	30 e0       	ldi	r19, 0x00	; 0
	/** Interrupt mode on Receive enabled*/
	setBit(&UCSR0B, RXCIE0);
 a26:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 a2a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 a2e:	67 e0       	ldi	r22, 0x07	; 7
}
 a30:	81 ec       	ldi	r24, 0xC1	; 193
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	89 dd       	rcall	.-1262   	; 0x548 <setBit>
 a36:	df 91       	pop	r29
 a38:	cf 91       	pop	r28
 a3a:	1f 91       	pop	r17
 a3c:	0f 91       	pop	r16
 a3e:	08 95       	ret

00000a40 <uart_start>:

void uart_start(bool uartTx, bool uartRx){
 a40:	cf 93       	push	r28
 a42:	c8 2f       	mov	r28, r24
 a44:	46 2f       	mov	r20, r22
	updateBit(&UCSR0B, RXEN0, uartRx);
 a46:	64 e0       	ldi	r22, 0x04	; 4
 a48:	81 ec       	ldi	r24, 0xC1	; 193
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	a2 dd       	rcall	.-1212   	; 0x592 <updateBit>
	updateBit(&UCSR0B, TXEN0, uartTx);
 a4e:	4c 2f       	mov	r20, r28
 a50:	63 e0       	ldi	r22, 0x03	; 3
 a52:	81 ec       	ldi	r24, 0xC1	; 193
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	9d dd       	rcall	.-1222   	; 0x592 <updateBit>
	
}
 a58:	cf 91       	pop	r28
 a5a:	08 95       	ret

00000a5c <__subsf3>:
 a5c:	50 58       	subi	r21, 0x80	; 128

00000a5e <__addsf3>:
 a5e:	bb 27       	eor	r27, r27
 a60:	aa 27       	eor	r26, r26
 a62:	0e d0       	rcall	.+28     	; 0xa80 <__addsf3x>
 a64:	e0 c0       	rjmp	.+448    	; 0xc26 <__fp_round>
 a66:	d1 d0       	rcall	.+418    	; 0xc0a <__fp_pscA>
 a68:	30 f0       	brcs	.+12     	; 0xa76 <__addsf3+0x18>
 a6a:	d6 d0       	rcall	.+428    	; 0xc18 <__fp_pscB>
 a6c:	20 f0       	brcs	.+8      	; 0xa76 <__addsf3+0x18>
 a6e:	31 f4       	brne	.+12     	; 0xa7c <__addsf3+0x1e>
 a70:	9f 3f       	cpi	r25, 0xFF	; 255
 a72:	11 f4       	brne	.+4      	; 0xa78 <__addsf3+0x1a>
 a74:	1e f4       	brtc	.+6      	; 0xa7c <__addsf3+0x1e>
 a76:	c6 c0       	rjmp	.+396    	; 0xc04 <__fp_nan>
 a78:	0e f4       	brtc	.+2      	; 0xa7c <__addsf3+0x1e>
 a7a:	e0 95       	com	r30
 a7c:	e7 fb       	bst	r30, 7
 a7e:	bc c0       	rjmp	.+376    	; 0xbf8 <__fp_inf>

00000a80 <__addsf3x>:
 a80:	e9 2f       	mov	r30, r25
 a82:	e2 d0       	rcall	.+452    	; 0xc48 <__fp_split3>
 a84:	80 f3       	brcs	.-32     	; 0xa66 <__addsf3+0x8>
 a86:	ba 17       	cp	r27, r26
 a88:	62 07       	cpc	r22, r18
 a8a:	73 07       	cpc	r23, r19
 a8c:	84 07       	cpc	r24, r20
 a8e:	95 07       	cpc	r25, r21
 a90:	18 f0       	brcs	.+6      	; 0xa98 <__addsf3x+0x18>
 a92:	71 f4       	brne	.+28     	; 0xab0 <__addsf3x+0x30>
 a94:	9e f5       	brtc	.+102    	; 0xafc <__addsf3x+0x7c>
 a96:	fa c0       	rjmp	.+500    	; 0xc8c <__fp_zero>
 a98:	0e f4       	brtc	.+2      	; 0xa9c <__addsf3x+0x1c>
 a9a:	e0 95       	com	r30
 a9c:	0b 2e       	mov	r0, r27
 a9e:	ba 2f       	mov	r27, r26
 aa0:	a0 2d       	mov	r26, r0
 aa2:	0b 01       	movw	r0, r22
 aa4:	b9 01       	movw	r22, r18
 aa6:	90 01       	movw	r18, r0
 aa8:	0c 01       	movw	r0, r24
 aaa:	ca 01       	movw	r24, r20
 aac:	a0 01       	movw	r20, r0
 aae:	11 24       	eor	r1, r1
 ab0:	ff 27       	eor	r31, r31
 ab2:	59 1b       	sub	r21, r25
 ab4:	99 f0       	breq	.+38     	; 0xadc <__addsf3x+0x5c>
 ab6:	59 3f       	cpi	r21, 0xF9	; 249
 ab8:	50 f4       	brcc	.+20     	; 0xace <__addsf3x+0x4e>
 aba:	50 3e       	cpi	r21, 0xE0	; 224
 abc:	68 f1       	brcs	.+90     	; 0xb18 <__addsf3x+0x98>
 abe:	1a 16       	cp	r1, r26
 ac0:	f0 40       	sbci	r31, 0x00	; 0
 ac2:	a2 2f       	mov	r26, r18
 ac4:	23 2f       	mov	r18, r19
 ac6:	34 2f       	mov	r19, r20
 ac8:	44 27       	eor	r20, r20
 aca:	58 5f       	subi	r21, 0xF8	; 248
 acc:	f3 cf       	rjmp	.-26     	; 0xab4 <__addsf3x+0x34>
 ace:	46 95       	lsr	r20
 ad0:	37 95       	ror	r19
 ad2:	27 95       	ror	r18
 ad4:	a7 95       	ror	r26
 ad6:	f0 40       	sbci	r31, 0x00	; 0
 ad8:	53 95       	inc	r21
 ada:	c9 f7       	brne	.-14     	; 0xace <__addsf3x+0x4e>
 adc:	7e f4       	brtc	.+30     	; 0xafc <__addsf3x+0x7c>
 ade:	1f 16       	cp	r1, r31
 ae0:	ba 0b       	sbc	r27, r26
 ae2:	62 0b       	sbc	r22, r18
 ae4:	73 0b       	sbc	r23, r19
 ae6:	84 0b       	sbc	r24, r20
 ae8:	ba f0       	brmi	.+46     	; 0xb18 <__addsf3x+0x98>
 aea:	91 50       	subi	r25, 0x01	; 1
 aec:	a1 f0       	breq	.+40     	; 0xb16 <__addsf3x+0x96>
 aee:	ff 0f       	add	r31, r31
 af0:	bb 1f       	adc	r27, r27
 af2:	66 1f       	adc	r22, r22
 af4:	77 1f       	adc	r23, r23
 af6:	88 1f       	adc	r24, r24
 af8:	c2 f7       	brpl	.-16     	; 0xaea <__addsf3x+0x6a>
 afa:	0e c0       	rjmp	.+28     	; 0xb18 <__addsf3x+0x98>
 afc:	ba 0f       	add	r27, r26
 afe:	62 1f       	adc	r22, r18
 b00:	73 1f       	adc	r23, r19
 b02:	84 1f       	adc	r24, r20
 b04:	48 f4       	brcc	.+18     	; 0xb18 <__addsf3x+0x98>
 b06:	87 95       	ror	r24
 b08:	77 95       	ror	r23
 b0a:	67 95       	ror	r22
 b0c:	b7 95       	ror	r27
 b0e:	f7 95       	ror	r31
 b10:	9e 3f       	cpi	r25, 0xFE	; 254
 b12:	08 f0       	brcs	.+2      	; 0xb16 <__addsf3x+0x96>
 b14:	b3 cf       	rjmp	.-154    	; 0xa7c <__addsf3+0x1e>
 b16:	93 95       	inc	r25
 b18:	88 0f       	add	r24, r24
 b1a:	08 f0       	brcs	.+2      	; 0xb1e <__addsf3x+0x9e>
 b1c:	99 27       	eor	r25, r25
 b1e:	ee 0f       	add	r30, r30
 b20:	97 95       	ror	r25
 b22:	87 95       	ror	r24
 b24:	08 95       	ret

00000b26 <__fixunssfsi>:
 b26:	98 d0       	rcall	.+304    	; 0xc58 <__fp_splitA>
 b28:	88 f0       	brcs	.+34     	; 0xb4c <__fixunssfsi+0x26>
 b2a:	9f 57       	subi	r25, 0x7F	; 127
 b2c:	90 f0       	brcs	.+36     	; 0xb52 <__fixunssfsi+0x2c>
 b2e:	b9 2f       	mov	r27, r25
 b30:	99 27       	eor	r25, r25
 b32:	b7 51       	subi	r27, 0x17	; 23
 b34:	a0 f0       	brcs	.+40     	; 0xb5e <__fixunssfsi+0x38>
 b36:	d1 f0       	breq	.+52     	; 0xb6c <__fixunssfsi+0x46>
 b38:	66 0f       	add	r22, r22
 b3a:	77 1f       	adc	r23, r23
 b3c:	88 1f       	adc	r24, r24
 b3e:	99 1f       	adc	r25, r25
 b40:	1a f0       	brmi	.+6      	; 0xb48 <__fixunssfsi+0x22>
 b42:	ba 95       	dec	r27
 b44:	c9 f7       	brne	.-14     	; 0xb38 <__fixunssfsi+0x12>
 b46:	12 c0       	rjmp	.+36     	; 0xb6c <__fixunssfsi+0x46>
 b48:	b1 30       	cpi	r27, 0x01	; 1
 b4a:	81 f0       	breq	.+32     	; 0xb6c <__fixunssfsi+0x46>
 b4c:	9f d0       	rcall	.+318    	; 0xc8c <__fp_zero>
 b4e:	b1 e0       	ldi	r27, 0x01	; 1
 b50:	08 95       	ret
 b52:	9c c0       	rjmp	.+312    	; 0xc8c <__fp_zero>
 b54:	67 2f       	mov	r22, r23
 b56:	78 2f       	mov	r23, r24
 b58:	88 27       	eor	r24, r24
 b5a:	b8 5f       	subi	r27, 0xF8	; 248
 b5c:	39 f0       	breq	.+14     	; 0xb6c <__fixunssfsi+0x46>
 b5e:	b9 3f       	cpi	r27, 0xF9	; 249
 b60:	cc f3       	brlt	.-14     	; 0xb54 <__fixunssfsi+0x2e>
 b62:	86 95       	lsr	r24
 b64:	77 95       	ror	r23
 b66:	67 95       	ror	r22
 b68:	b3 95       	inc	r27
 b6a:	d9 f7       	brne	.-10     	; 0xb62 <__fixunssfsi+0x3c>
 b6c:	3e f4       	brtc	.+14     	; 0xb7c <__fixunssfsi+0x56>
 b6e:	90 95       	com	r25
 b70:	80 95       	com	r24
 b72:	70 95       	com	r23
 b74:	61 95       	neg	r22
 b76:	7f 4f       	sbci	r23, 0xFF	; 255
 b78:	8f 4f       	sbci	r24, 0xFF	; 255
 b7a:	9f 4f       	sbci	r25, 0xFF	; 255
 b7c:	08 95       	ret

00000b7e <__floatunsisf>:
 b7e:	e8 94       	clt
 b80:	09 c0       	rjmp	.+18     	; 0xb94 <__floatsisf+0x12>

00000b82 <__floatsisf>:
 b82:	97 fb       	bst	r25, 7
 b84:	3e f4       	brtc	.+14     	; 0xb94 <__floatsisf+0x12>
 b86:	90 95       	com	r25
 b88:	80 95       	com	r24
 b8a:	70 95       	com	r23
 b8c:	61 95       	neg	r22
 b8e:	7f 4f       	sbci	r23, 0xFF	; 255
 b90:	8f 4f       	sbci	r24, 0xFF	; 255
 b92:	9f 4f       	sbci	r25, 0xFF	; 255
 b94:	99 23       	and	r25, r25
 b96:	a9 f0       	breq	.+42     	; 0xbc2 <__floatsisf+0x40>
 b98:	f9 2f       	mov	r31, r25
 b9a:	96 e9       	ldi	r25, 0x96	; 150
 b9c:	bb 27       	eor	r27, r27
 b9e:	93 95       	inc	r25
 ba0:	f6 95       	lsr	r31
 ba2:	87 95       	ror	r24
 ba4:	77 95       	ror	r23
 ba6:	67 95       	ror	r22
 ba8:	b7 95       	ror	r27
 baa:	f1 11       	cpse	r31, r1
 bac:	f8 cf       	rjmp	.-16     	; 0xb9e <__floatsisf+0x1c>
 bae:	fa f4       	brpl	.+62     	; 0xbee <__floatsisf+0x6c>
 bb0:	bb 0f       	add	r27, r27
 bb2:	11 f4       	brne	.+4      	; 0xbb8 <__floatsisf+0x36>
 bb4:	60 ff       	sbrs	r22, 0
 bb6:	1b c0       	rjmp	.+54     	; 0xbee <__floatsisf+0x6c>
 bb8:	6f 5f       	subi	r22, 0xFF	; 255
 bba:	7f 4f       	sbci	r23, 0xFF	; 255
 bbc:	8f 4f       	sbci	r24, 0xFF	; 255
 bbe:	9f 4f       	sbci	r25, 0xFF	; 255
 bc0:	16 c0       	rjmp	.+44     	; 0xbee <__floatsisf+0x6c>
 bc2:	88 23       	and	r24, r24
 bc4:	11 f0       	breq	.+4      	; 0xbca <__floatsisf+0x48>
 bc6:	96 e9       	ldi	r25, 0x96	; 150
 bc8:	11 c0       	rjmp	.+34     	; 0xbec <__floatsisf+0x6a>
 bca:	77 23       	and	r23, r23
 bcc:	21 f0       	breq	.+8      	; 0xbd6 <__floatsisf+0x54>
 bce:	9e e8       	ldi	r25, 0x8E	; 142
 bd0:	87 2f       	mov	r24, r23
 bd2:	76 2f       	mov	r23, r22
 bd4:	05 c0       	rjmp	.+10     	; 0xbe0 <__floatsisf+0x5e>
 bd6:	66 23       	and	r22, r22
 bd8:	71 f0       	breq	.+28     	; 0xbf6 <__floatsisf+0x74>
 bda:	96 e8       	ldi	r25, 0x86	; 134
 bdc:	86 2f       	mov	r24, r22
 bde:	70 e0       	ldi	r23, 0x00	; 0
 be0:	60 e0       	ldi	r22, 0x00	; 0
 be2:	2a f0       	brmi	.+10     	; 0xbee <__floatsisf+0x6c>
 be4:	9a 95       	dec	r25
 be6:	66 0f       	add	r22, r22
 be8:	77 1f       	adc	r23, r23
 bea:	88 1f       	adc	r24, r24
 bec:	da f7       	brpl	.-10     	; 0xbe4 <__floatsisf+0x62>
 bee:	88 0f       	add	r24, r24
 bf0:	96 95       	lsr	r25
 bf2:	87 95       	ror	r24
 bf4:	97 f9       	bld	r25, 7
 bf6:	08 95       	ret

00000bf8 <__fp_inf>:
 bf8:	97 f9       	bld	r25, 7
 bfa:	9f 67       	ori	r25, 0x7F	; 127
 bfc:	80 e8       	ldi	r24, 0x80	; 128
 bfe:	70 e0       	ldi	r23, 0x00	; 0
 c00:	60 e0       	ldi	r22, 0x00	; 0
 c02:	08 95       	ret

00000c04 <__fp_nan>:
 c04:	9f ef       	ldi	r25, 0xFF	; 255
 c06:	80 ec       	ldi	r24, 0xC0	; 192
 c08:	08 95       	ret

00000c0a <__fp_pscA>:
 c0a:	00 24       	eor	r0, r0
 c0c:	0a 94       	dec	r0
 c0e:	16 16       	cp	r1, r22
 c10:	17 06       	cpc	r1, r23
 c12:	18 06       	cpc	r1, r24
 c14:	09 06       	cpc	r0, r25
 c16:	08 95       	ret

00000c18 <__fp_pscB>:
 c18:	00 24       	eor	r0, r0
 c1a:	0a 94       	dec	r0
 c1c:	12 16       	cp	r1, r18
 c1e:	13 06       	cpc	r1, r19
 c20:	14 06       	cpc	r1, r20
 c22:	05 06       	cpc	r0, r21
 c24:	08 95       	ret

00000c26 <__fp_round>:
 c26:	09 2e       	mov	r0, r25
 c28:	03 94       	inc	r0
 c2a:	00 0c       	add	r0, r0
 c2c:	11 f4       	brne	.+4      	; 0xc32 <__fp_round+0xc>
 c2e:	88 23       	and	r24, r24
 c30:	52 f0       	brmi	.+20     	; 0xc46 <__fp_round+0x20>
 c32:	bb 0f       	add	r27, r27
 c34:	40 f4       	brcc	.+16     	; 0xc46 <__fp_round+0x20>
 c36:	bf 2b       	or	r27, r31
 c38:	11 f4       	brne	.+4      	; 0xc3e <__fp_round+0x18>
 c3a:	60 ff       	sbrs	r22, 0
 c3c:	04 c0       	rjmp	.+8      	; 0xc46 <__fp_round+0x20>
 c3e:	6f 5f       	subi	r22, 0xFF	; 255
 c40:	7f 4f       	sbci	r23, 0xFF	; 255
 c42:	8f 4f       	sbci	r24, 0xFF	; 255
 c44:	9f 4f       	sbci	r25, 0xFF	; 255
 c46:	08 95       	ret

00000c48 <__fp_split3>:
 c48:	57 fd       	sbrc	r21, 7
 c4a:	90 58       	subi	r25, 0x80	; 128
 c4c:	44 0f       	add	r20, r20
 c4e:	55 1f       	adc	r21, r21
 c50:	59 f0       	breq	.+22     	; 0xc68 <__fp_splitA+0x10>
 c52:	5f 3f       	cpi	r21, 0xFF	; 255
 c54:	71 f0       	breq	.+28     	; 0xc72 <__fp_splitA+0x1a>
 c56:	47 95       	ror	r20

00000c58 <__fp_splitA>:
 c58:	88 0f       	add	r24, r24
 c5a:	97 fb       	bst	r25, 7
 c5c:	99 1f       	adc	r25, r25
 c5e:	61 f0       	breq	.+24     	; 0xc78 <__fp_splitA+0x20>
 c60:	9f 3f       	cpi	r25, 0xFF	; 255
 c62:	79 f0       	breq	.+30     	; 0xc82 <__fp_splitA+0x2a>
 c64:	87 95       	ror	r24
 c66:	08 95       	ret
 c68:	12 16       	cp	r1, r18
 c6a:	13 06       	cpc	r1, r19
 c6c:	14 06       	cpc	r1, r20
 c6e:	55 1f       	adc	r21, r21
 c70:	f2 cf       	rjmp	.-28     	; 0xc56 <__fp_split3+0xe>
 c72:	46 95       	lsr	r20
 c74:	f1 df       	rcall	.-30     	; 0xc58 <__fp_splitA>
 c76:	08 c0       	rjmp	.+16     	; 0xc88 <__fp_splitA+0x30>
 c78:	16 16       	cp	r1, r22
 c7a:	17 06       	cpc	r1, r23
 c7c:	18 06       	cpc	r1, r24
 c7e:	99 1f       	adc	r25, r25
 c80:	f1 cf       	rjmp	.-30     	; 0xc64 <__fp_splitA+0xc>
 c82:	86 95       	lsr	r24
 c84:	71 05       	cpc	r23, r1
 c86:	61 05       	cpc	r22, r1
 c88:	08 94       	sec
 c8a:	08 95       	ret

00000c8c <__fp_zero>:
 c8c:	e8 94       	clt

00000c8e <__fp_szero>:
 c8e:	bb 27       	eor	r27, r27
 c90:	66 27       	eor	r22, r22
 c92:	77 27       	eor	r23, r23
 c94:	cb 01       	movw	r24, r22
 c96:	97 f9       	bld	r25, 7
 c98:	08 95       	ret

00000c9a <__mulsf3>:
 c9a:	0b d0       	rcall	.+22     	; 0xcb2 <__mulsf3x>
 c9c:	c4 cf       	rjmp	.-120    	; 0xc26 <__fp_round>
 c9e:	b5 df       	rcall	.-150    	; 0xc0a <__fp_pscA>
 ca0:	28 f0       	brcs	.+10     	; 0xcac <__mulsf3+0x12>
 ca2:	ba df       	rcall	.-140    	; 0xc18 <__fp_pscB>
 ca4:	18 f0       	brcs	.+6      	; 0xcac <__mulsf3+0x12>
 ca6:	95 23       	and	r25, r21
 ca8:	09 f0       	breq	.+2      	; 0xcac <__mulsf3+0x12>
 caa:	a6 cf       	rjmp	.-180    	; 0xbf8 <__fp_inf>
 cac:	ab cf       	rjmp	.-170    	; 0xc04 <__fp_nan>
 cae:	11 24       	eor	r1, r1
 cb0:	ee cf       	rjmp	.-36     	; 0xc8e <__fp_szero>

00000cb2 <__mulsf3x>:
 cb2:	ca df       	rcall	.-108    	; 0xc48 <__fp_split3>
 cb4:	a0 f3       	brcs	.-24     	; 0xc9e <__mulsf3+0x4>

00000cb6 <__mulsf3_pse>:
 cb6:	95 9f       	mul	r25, r21
 cb8:	d1 f3       	breq	.-12     	; 0xcae <__mulsf3+0x14>
 cba:	95 0f       	add	r25, r21
 cbc:	50 e0       	ldi	r21, 0x00	; 0
 cbe:	55 1f       	adc	r21, r21
 cc0:	62 9f       	mul	r22, r18
 cc2:	f0 01       	movw	r30, r0
 cc4:	72 9f       	mul	r23, r18
 cc6:	bb 27       	eor	r27, r27
 cc8:	f0 0d       	add	r31, r0
 cca:	b1 1d       	adc	r27, r1
 ccc:	63 9f       	mul	r22, r19
 cce:	aa 27       	eor	r26, r26
 cd0:	f0 0d       	add	r31, r0
 cd2:	b1 1d       	adc	r27, r1
 cd4:	aa 1f       	adc	r26, r26
 cd6:	64 9f       	mul	r22, r20
 cd8:	66 27       	eor	r22, r22
 cda:	b0 0d       	add	r27, r0
 cdc:	a1 1d       	adc	r26, r1
 cde:	66 1f       	adc	r22, r22
 ce0:	82 9f       	mul	r24, r18
 ce2:	22 27       	eor	r18, r18
 ce4:	b0 0d       	add	r27, r0
 ce6:	a1 1d       	adc	r26, r1
 ce8:	62 1f       	adc	r22, r18
 cea:	73 9f       	mul	r23, r19
 cec:	b0 0d       	add	r27, r0
 cee:	a1 1d       	adc	r26, r1
 cf0:	62 1f       	adc	r22, r18
 cf2:	83 9f       	mul	r24, r19
 cf4:	a0 0d       	add	r26, r0
 cf6:	61 1d       	adc	r22, r1
 cf8:	22 1f       	adc	r18, r18
 cfa:	74 9f       	mul	r23, r20
 cfc:	33 27       	eor	r19, r19
 cfe:	a0 0d       	add	r26, r0
 d00:	61 1d       	adc	r22, r1
 d02:	23 1f       	adc	r18, r19
 d04:	84 9f       	mul	r24, r20
 d06:	60 0d       	add	r22, r0
 d08:	21 1d       	adc	r18, r1
 d0a:	82 2f       	mov	r24, r18
 d0c:	76 2f       	mov	r23, r22
 d0e:	6a 2f       	mov	r22, r26
 d10:	11 24       	eor	r1, r1
 d12:	9f 57       	subi	r25, 0x7F	; 127
 d14:	50 40       	sbci	r21, 0x00	; 0
 d16:	8a f0       	brmi	.+34     	; 0xd3a <__mulsf3_pse+0x84>
 d18:	e1 f0       	breq	.+56     	; 0xd52 <__mulsf3_pse+0x9c>
 d1a:	88 23       	and	r24, r24
 d1c:	4a f0       	brmi	.+18     	; 0xd30 <__mulsf3_pse+0x7a>
 d1e:	ee 0f       	add	r30, r30
 d20:	ff 1f       	adc	r31, r31
 d22:	bb 1f       	adc	r27, r27
 d24:	66 1f       	adc	r22, r22
 d26:	77 1f       	adc	r23, r23
 d28:	88 1f       	adc	r24, r24
 d2a:	91 50       	subi	r25, 0x01	; 1
 d2c:	50 40       	sbci	r21, 0x00	; 0
 d2e:	a9 f7       	brne	.-22     	; 0xd1a <__mulsf3_pse+0x64>
 d30:	9e 3f       	cpi	r25, 0xFE	; 254
 d32:	51 05       	cpc	r21, r1
 d34:	70 f0       	brcs	.+28     	; 0xd52 <__mulsf3_pse+0x9c>
 d36:	60 cf       	rjmp	.-320    	; 0xbf8 <__fp_inf>
 d38:	aa cf       	rjmp	.-172    	; 0xc8e <__fp_szero>
 d3a:	5f 3f       	cpi	r21, 0xFF	; 255
 d3c:	ec f3       	brlt	.-6      	; 0xd38 <__mulsf3_pse+0x82>
 d3e:	98 3e       	cpi	r25, 0xE8	; 232
 d40:	dc f3       	brlt	.-10     	; 0xd38 <__mulsf3_pse+0x82>
 d42:	86 95       	lsr	r24
 d44:	77 95       	ror	r23
 d46:	67 95       	ror	r22
 d48:	b7 95       	ror	r27
 d4a:	f7 95       	ror	r31
 d4c:	e7 95       	ror	r30
 d4e:	9f 5f       	subi	r25, 0xFF	; 255
 d50:	c1 f7       	brne	.-16     	; 0xd42 <__mulsf3_pse+0x8c>
 d52:	fe 2b       	or	r31, r30
 d54:	88 0f       	add	r24, r24
 d56:	91 1d       	adc	r25, r1
 d58:	96 95       	lsr	r25
 d5a:	87 95       	ror	r24
 d5c:	97 f9       	bld	r25, 7
 d5e:	08 95       	ret

00000d60 <__udivmodsi4>:
 d60:	a1 e2       	ldi	r26, 0x21	; 33
 d62:	1a 2e       	mov	r1, r26
 d64:	aa 1b       	sub	r26, r26
 d66:	bb 1b       	sub	r27, r27
 d68:	fd 01       	movw	r30, r26
 d6a:	0d c0       	rjmp	.+26     	; 0xd86 <__udivmodsi4_ep>

00000d6c <__udivmodsi4_loop>:
 d6c:	aa 1f       	adc	r26, r26
 d6e:	bb 1f       	adc	r27, r27
 d70:	ee 1f       	adc	r30, r30
 d72:	ff 1f       	adc	r31, r31
 d74:	a2 17       	cp	r26, r18
 d76:	b3 07       	cpc	r27, r19
 d78:	e4 07       	cpc	r30, r20
 d7a:	f5 07       	cpc	r31, r21
 d7c:	20 f0       	brcs	.+8      	; 0xd86 <__udivmodsi4_ep>
 d7e:	a2 1b       	sub	r26, r18
 d80:	b3 0b       	sbc	r27, r19
 d82:	e4 0b       	sbc	r30, r20
 d84:	f5 0b       	sbc	r31, r21

00000d86 <__udivmodsi4_ep>:
 d86:	66 1f       	adc	r22, r22
 d88:	77 1f       	adc	r23, r23
 d8a:	88 1f       	adc	r24, r24
 d8c:	99 1f       	adc	r25, r25
 d8e:	1a 94       	dec	r1
 d90:	69 f7       	brne	.-38     	; 0xd6c <__udivmodsi4_loop>
 d92:	60 95       	com	r22
 d94:	70 95       	com	r23
 d96:	80 95       	com	r24
 d98:	90 95       	com	r25
 d9a:	9b 01       	movw	r18, r22
 d9c:	ac 01       	movw	r20, r24
 d9e:	bd 01       	movw	r22, r26
 da0:	cf 01       	movw	r24, r30
 da2:	08 95       	ret

00000da4 <__umulhisi3>:
 da4:	a2 9f       	mul	r26, r18
 da6:	b0 01       	movw	r22, r0
 da8:	b3 9f       	mul	r27, r19
 daa:	c0 01       	movw	r24, r0
 dac:	a3 9f       	mul	r26, r19
 dae:	70 0d       	add	r23, r0
 db0:	81 1d       	adc	r24, r1
 db2:	11 24       	eor	r1, r1
 db4:	91 1d       	adc	r25, r1
 db6:	b2 9f       	mul	r27, r18
 db8:	70 0d       	add	r23, r0
 dba:	81 1d       	adc	r24, r1
 dbc:	11 24       	eor	r1, r1
 dbe:	91 1d       	adc	r25, r1
 dc0:	08 95       	ret

00000dc2 <__muluhisi3>:
 dc2:	f0 df       	rcall	.-32     	; 0xda4 <__umulhisi3>
 dc4:	a5 9f       	mul	r26, r21
 dc6:	90 0d       	add	r25, r0
 dc8:	b4 9f       	mul	r27, r20
 dca:	90 0d       	add	r25, r0
 dcc:	a4 9f       	mul	r26, r20
 dce:	80 0d       	add	r24, r0
 dd0:	91 1d       	adc	r25, r1
 dd2:	11 24       	eor	r1, r1
 dd4:	08 95       	ret

00000dd6 <_exit>:
 dd6:	f8 94       	cli

00000dd8 <__stop_program>:
 dd8:	ff cf       	rjmp	.-2      	; 0xdd8 <__stop_program>
