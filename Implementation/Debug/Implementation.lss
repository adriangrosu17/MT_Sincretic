
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800100  00800100  00001242  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001242  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000349a  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000101d  00000000  00000000  0000496e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001542  00000000  00000000  0000598b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000534  00000000  00000000  00006ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a77  00000000  00000000  00007404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001656  00000000  00000000  00007e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  000094d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	76 c0       	rjmp	.+236    	; 0xee <__ctors_end>
       2:	00 00       	nop
       4:	85 c0       	rjmp	.+266    	; 0x110 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c0       	rjmp	.+262    	; 0x110 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c0       	rjmp	.+258    	; 0x110 <__bad_interrupt>
       e:	00 00       	nop
      10:	f5 c1       	rjmp	.+1002   	; 0x3fc <__vector_4>
      12:	00 00       	nop
      14:	7d c0       	rjmp	.+250    	; 0x110 <__bad_interrupt>
      16:	00 00       	nop
      18:	18 c2       	rjmp	.+1072   	; 0x44a <__vector_6>
      1a:	00 00       	nop
      1c:	79 c0       	rjmp	.+242    	; 0x110 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c0       	rjmp	.+238    	; 0x110 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c0       	rjmp	.+234    	; 0x110 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c0       	rjmp	.+230    	; 0x110 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c0       	rjmp	.+226    	; 0x110 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6f c0       	rjmp	.+222    	; 0x110 <__bad_interrupt>
      32:	00 00       	nop
      34:	6d c0       	rjmp	.+218    	; 0x110 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c0       	rjmp	.+214    	; 0x110 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c0       	rjmp	.+210    	; 0x110 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c0       	rjmp	.+206    	; 0x110 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c0       	rjmp	.+202    	; 0x110 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c0       	rjmp	.+198    	; 0x110 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c0       	rjmp	.+194    	; 0x110 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5a c6       	rjmp	.+3252   	; 0xd06 <__vector_20>
      52:	00 00       	nop
      54:	5d c0       	rjmp	.+186    	; 0x110 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c0       	rjmp	.+182    	; 0x110 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c0       	rjmp	.+178    	; 0x110 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c0       	rjmp	.+174    	; 0x110 <__bad_interrupt>
      62:	00 00       	nop
      64:	55 c0       	rjmp	.+170    	; 0x110 <__bad_interrupt>
      66:	00 00       	nop
      68:	53 c0       	rjmp	.+166    	; 0x110 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	51 c0       	rjmp	.+162    	; 0x110 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c0       	rjmp	.+158    	; 0x110 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c0       	rjmp	.+154    	; 0x110 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c0       	rjmp	.+150    	; 0x110 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c0       	rjmp	.+146    	; 0x110 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c0       	rjmp	.+142    	; 0x110 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c0       	rjmp	.+138    	; 0x110 <__bad_interrupt>
      86:	00 00       	nop
      88:	0f c6       	rjmp	.+3102   	; 0xca8 <__vector_34>
      8a:	00 00       	nop
      8c:	a6 06       	cpc	r10, r22
      8e:	cf 06       	cpc	r12, r31
      90:	44 08       	sbc	r4, r4
      92:	44 08       	sbc	r4, r4
      94:	44 08       	sbc	r4, r4
      96:	44 08       	sbc	r4, r4
      98:	44 08       	sbc	r4, r4
      9a:	44 08       	sbc	r4, r4
      9c:	44 08       	sbc	r4, r4
      9e:	44 08       	sbc	r4, r4
      a0:	f2 06       	cpc	r15, r18
      a2:	fb 06       	cpc	r15, r27
      a4:	44 08       	sbc	r4, r4
      a6:	44 08       	sbc	r4, r4
      a8:	44 08       	sbc	r4, r4
      aa:	44 08       	sbc	r4, r4
      ac:	04 07       	cpc	r16, r20
      ae:	09 07       	cpc	r16, r25
      b0:	44 08       	sbc	r4, r4
      b2:	44 08       	sbc	r4, r4
      b4:	44 08       	sbc	r4, r4
      b6:	44 08       	sbc	r4, r4
      b8:	44 08       	sbc	r4, r4
      ba:	44 08       	sbc	r4, r4
      bc:	44 08       	sbc	r4, r4
      be:	44 08       	sbc	r4, r4
      c0:	0e 07       	cpc	r16, r30
      c2:	18 07       	cpc	r17, r24
      c4:	22 07       	cpc	r18, r18
      c6:	44 08       	sbc	r4, r4
      c8:	44 08       	sbc	r4, r4
      ca:	44 08       	sbc	r4, r4
      cc:	2c 07       	cpc	r18, r28
      ce:	30 07       	cpc	r19, r16
      d0:	3a 07       	cpc	r19, r26
      d2:	73 07       	cpc	r23, r19
      d4:	44 08       	sbc	r4, r4
      d6:	44 08       	sbc	r4, r4
      d8:	44 08       	sbc	r4, r4
      da:	44 08       	sbc	r4, r4
      dc:	44 08       	sbc	r4, r4
      de:	44 08       	sbc	r4, r4
      e0:	ac 07       	cpc	r26, r28
      e2:	c9 07       	cpc	r28, r25
      e4:	e6 07       	cpc	r30, r22
      e6:	f8 07       	cpc	r31, r24
      e8:	0a 08       	sbc	r0, r10
      ea:	15 08       	sbc	r1, r5
      ec:	20 08       	sbc	r2, r0

000000ee <__ctors_end>:
      ee:	11 24       	eor	r1, r1
      f0:	1f be       	out	0x3f, r1	; 63
      f2:	cf ef       	ldi	r28, 0xFF	; 255
      f4:	d0 e4       	ldi	r29, 0x40	; 64
      f6:	de bf       	out	0x3e, r29	; 62
      f8:	cd bf       	out	0x3d, r28	; 61

000000fa <__do_clear_bss>:
      fa:	21 e0       	ldi	r18, 0x01	; 1
      fc:	a0 e0       	ldi	r26, 0x00	; 0
      fe:	b1 e0       	ldi	r27, 0x01	; 1
     100:	01 c0       	rjmp	.+2      	; 0x104 <.do_clear_bss_start>

00000102 <.do_clear_bss_loop>:
     102:	1d 92       	st	X+, r1

00000104 <.do_clear_bss_start>:
     104:	ac 31       	cpi	r26, 0x1C	; 28
     106:	b2 07       	cpc	r27, r18
     108:	e1 f7       	brne	.-8      	; 0x102 <.do_clear_bss_loop>
     10a:	61 d0       	rcall	.+194    	; 0x1ce <main>
     10c:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <_exit>

00000110 <__bad_interrupt>:
     110:	77 cf       	rjmp	.-274    	; 0x0 <__vectors>

00000112 <init>:
	TCCR3A = 0x00;
	TCCR3B = 0x00;
	TCCR3C = 0x00;
	TCNT3 = 0;
	PCMSK0 = 0x40;
	setBit(&PCICR, PCIE0);
     112:	0f 93       	push	r16
     114:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <systemEnable>
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <systemMode>
     11e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <servoEnable>
     122:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dcEnable>
     126:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <dcSpeedLeft>
     12a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
     12e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <cannonState>
     132:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <readingFlag>
     136:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <readingLastState>
     13a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <readingCurrentState>
     13e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rotatingFlag>
     142:	20 e0       	ldi	r18, 0x00	; 0
     144:	41 e0       	ldi	r20, 0x01	; 1
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	0a d2       	rcall	.+1044   	; 0x55e <gpio_init>
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	41 e0       	ldi	r20, 0x01	; 1
     14e:	61 e0       	ldi	r22, 0x01	; 1
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	05 d2       	rcall	.+1034   	; 0x55e <gpio_init>
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	41 e0       	ldi	r20, 0x01	; 1
     158:	62 e0       	ldi	r22, 0x02	; 2
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	00 d2       	rcall	.+1024   	; 0x55e <gpio_init>
     15e:	60 e0       	ldi	r22, 0x00	; 0
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	3a d2       	rcall	.+1140   	; 0x5d8 <gpio_out_set>
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	4f d2       	rcall	.+1182   	; 0x608 <gpio_out_reset>
     16a:	62 e0       	ldi	r22, 0x02	; 2
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	4c d2       	rcall	.+1176   	; 0x608 <gpio_out_reset>
     170:	20 e0       	ldi	r18, 0x00	; 0
     172:	41 e0       	ldi	r20, 0x01	; 1
     174:	62 e0       	ldi	r22, 0x02	; 2
     176:	82 e0       	ldi	r24, 0x02	; 2
     178:	f2 d1       	rcall	.+996    	; 0x55e <gpio_init>
     17a:	62 e0       	ldi	r22, 0x02	; 2
     17c:	82 e0       	ldi	r24, 0x02	; 2
     17e:	44 d2       	rcall	.+1160   	; 0x608 <gpio_out_reset>
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	40 e0       	ldi	r20, 0x00	; 0
     184:	64 e0       	ldi	r22, 0x04	; 4
     186:	82 e0       	ldi	r24, 0x02	; 2
     188:	ea d1       	rcall	.+980    	; 0x55e <gpio_init>
     18a:	20 e0       	ldi	r18, 0x00	; 0
     18c:	41 e0       	ldi	r20, 0x01	; 1
     18e:	65 e0       	ldi	r22, 0x05	; 5
     190:	83 e0       	ldi	r24, 0x03	; 3
     192:	e5 d1       	rcall	.+970    	; 0x55e <gpio_init>
     194:	65 e0       	ldi	r22, 0x05	; 5
     196:	83 e0       	ldi	r24, 0x03	; 3
     198:	37 d2       	rcall	.+1134   	; 0x608 <gpio_out_reset>
     19a:	20 e0       	ldi	r18, 0x00	; 0
     19c:	41 e0       	ldi	r20, 0x01	; 1
     19e:	62 e0       	ldi	r22, 0x02	; 2
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	dd d1       	rcall	.+954    	; 0x55e <gpio_init>
     1a4:	62 e0       	ldi	r22, 0x02	; 2
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	2f d2       	rcall	.+1118   	; 0x608 <gpio_out_reset>
     1aa:	01 e0       	ldi	r16, 0x01	; 1
     1ac:	21 e0       	ldi	r18, 0x01	; 1
     1ae:	42 e3       	ldi	r20, 0x32	; 50
     1b0:	50 e0       	ldi	r21, 0x00	; 0
     1b2:	60 e0       	ldi	r22, 0x00	; 0
     1b4:	70 e0       	ldi	r23, 0x00	; 0
     1b6:	87 e0       	ldi	r24, 0x07	; 7
     1b8:	db d3       	rcall	.+1974   	; 0x970 <pwm_init>
     1ba:	23 e3       	ldi	r18, 0x33	; 51
     1bc:	41 e0       	ldi	r20, 0x01	; 1
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	75 d7       	rcall	.+3818   	; 0x10ae <uart_init>
     1c4:	61 e0       	ldi	r22, 0x01	; 1
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	b0 d7       	rcall	.+3936   	; 0x112a <uart_start>
     1ca:	0f 91       	pop	r16
     1cc:	08 95       	ret

000001ce <main>:
}

int main(void)
{
	disableJTAG();
	init();
     1ce:	c3 d1       	rcall	.+902    	; 0x556 <disableJTAG>
     1d0:	a0 df       	rcall	.-192    	; 0x112 <init>
	//distanceSensorInit();
	u16 aux = 0;
	sei();
     1d2:	78 94       	sei
			//uart_transmit('x');
			//aux2 = ((double)getPulseLength()/(double)0.03125)*0.017;
			/*if(aux2 < 10.0){
				motor_speed(0);
			}*/
			readingFlag = 1;
     1d4:	11 e0       	ldi	r17, 0x01	; 1
	//distanceSensorInit();
	u16 aux = 0;
	sei();
    while (1) 
    {
		if(systemMode == 0){
     1d6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <systemMode>
     1da:	81 11       	cpse	r24, r1
     1dc:	fc cf       	rjmp	.-8      	; 0x1d6 <main+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1de:	2f ef       	ldi	r18, 0xFF	; 255
     1e0:	81 ee       	ldi	r24, 0xE1	; 225
     1e2:	94 e0       	ldi	r25, 0x04	; 4
     1e4:	21 50       	subi	r18, 0x01	; 1
     1e6:	80 40       	sbci	r24, 0x00	; 0
     1e8:	90 40       	sbci	r25, 0x00	; 0
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <main+0x16>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x20>
     1ee:	00 00       	nop
			//uart_transmit('x');
			//aux2 = ((double)getPulseLength()/(double)0.03125)*0.017;
			/*if(aux2 < 10.0){
				motor_speed(0);
			}*/
			readingFlag = 1;
     1f0:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <readingFlag>
			gpio_out_set(PC, 2);
     1f4:	62 e0       	ldi	r22, 0x02	; 2
     1f6:	82 e0       	ldi	r24, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f8:	ef d1       	rcall	.+990    	; 0x5d8 <gpio_out_set>
     1fa:	25 e3       	ldi	r18, 0x35	; 53
     1fc:	2a 95       	dec	r18
			_delay_us(20);
			gpio_out_reset(PC, 2);
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0x2e>
     200:	00 00       	nop
     202:	62 e0       	ldi	r22, 0x02	; 2
     204:	82 e0       	ldi	r24, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     206:	00 d2       	rcall	.+1024   	; 0x608 <gpio_out_reset>
     208:	8f e1       	ldi	r24, 0x1F	; 31
     20a:	9e e4       	ldi	r25, 0x4E	; 78
     20c:	01 97       	sbiw	r24, 0x01	; 1
			_delay_ms(10);
			aux = getPulseLength();
     20e:	f1 f7       	brne	.-4      	; 0x20c <main+0x3e>
     210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x44>
			uart_transmit((u8)(aux));
     212:	00 00       	nop
			//uart_transmit('\r');
			//uart_transmit('\n');
			if(aux < 0x20){
     214:	9b d1       	rcall	.+822    	; 0x54c <getPulseLength>
     216:	ec 01       	movw	r28, r24
				motor_speed(0);
     218:	96 d7       	rcall	.+3884   	; 0x1146 <uart_transmit>
     21a:	a0 97       	sbiw	r28, 0x20	; 32
     21c:	10 f4       	brcc	.+4      	; 0x222 <main+0x54>
			}
			readingFlag = 0;
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	e7 d2       	rcall	.+1486   	; 0x7f0 <motor_speed>
     222:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <readingFlag>
     226:	d7 cf       	rjmp	.-82     	; 0x1d6 <main+0x8>

00000228 <pinChangeCallback>:
	return ((double) leftCounter /(double)(GEAR_RATIO * 12)) * (double)(3.141592 * WHEEL_DIAMETER);
}

double encoder_getDistanceRightCm(){
	return ((double) rightCounter /(double)(GEAR_RATIO * 12)) * (double)(3.141592 * WHEEL_DIAMETER);
}
     228:	cf 93       	push	r28
     22a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <readingFlag>
     22e:	88 23       	and	r24, r24
     230:	31 f1       	breq	.+76     	; 0x27e <pinChangeCallback+0x56>
     232:	86 b1       	in	r24, 0x06	; 6
     234:	64 e0       	ldi	r22, 0x04	; 4
     236:	55 d2       	rcall	.+1194   	; 0x6e2 <checkBit>
     238:	81 30       	cpi	r24, 0x01	; 1
     23a:	69 f4       	brne	.+26     	; 0x256 <pinChangeCallback+0x2e>
     23c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <readingLastState>
     240:	81 11       	cpse	r24, r1
     242:	09 c0       	rjmp	.+18     	; 0x256 <pinChangeCallback+0x2e>
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <readingCurrentState>
     24a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <readingLastState>
     24e:	16 bc       	out	0x26, r1	; 38
     250:	84 e0       	ldi	r24, 0x04	; 4
     252:	85 bd       	out	0x25, r24	; 37
     254:	14 c0       	rjmp	.+40     	; 0x27e <pinChangeCallback+0x56>
     256:	86 b1       	in	r24, 0x06	; 6
     258:	64 e0       	ldi	r22, 0x04	; 4
     25a:	43 d2       	rcall	.+1158   	; 0x6e2 <checkBit>
     25c:	81 11       	cpse	r24, r1
     25e:	0f c0       	rjmp	.+30     	; 0x27e <pinChangeCallback+0x56>
     260:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <readingLastState>
     264:	81 30       	cpi	r24, 0x01	; 1
     266:	59 f4       	brne	.+22     	; 0x27e <pinChangeCallback+0x56>
     268:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <readingCurrentState>
     26c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <readingLastState>
     270:	86 b5       	in	r24, 0x26	; 38
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <pulseLength+0x1>
     278:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <pulseLength>
     27c:	15 bc       	out	0x25, r1	; 37
     27e:	80 b1       	in	r24, 0x00	; 0
     280:	67 e0       	ldi	r22, 0x07	; 7
     282:	2f d2       	rcall	.+1118   	; 0x6e2 <checkBit>
     284:	c8 2f       	mov	r28, r24
     286:	80 b1       	in	r24, 0x00	; 0
     288:	66 e0       	ldi	r22, 0x06	; 6
     28a:	2b d2       	rcall	.+1110   	; 0x6e2 <checkBit>
     28c:	40 e8       	ldi	r20, 0x80	; 128
     28e:	c4 9f       	mul	r28, r20
     290:	90 01       	movw	r18, r0
     292:	11 24       	eor	r1, r1
     294:	40 e4       	ldi	r20, 0x40	; 64
     296:	84 9f       	mul	r24, r20
     298:	c0 01       	movw	r24, r0
     29a:	11 24       	eor	r1, r1
     29c:	82 2b       	or	r24, r18
     29e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <leftCurrentState>
     2a2:	86 b1       	in	r24, 0x06	; 6
     2a4:	61 e0       	ldi	r22, 0x01	; 1
     2a6:	1d d2       	rcall	.+1082   	; 0x6e2 <checkBit>
     2a8:	c8 2f       	mov	r28, r24
     2aa:	86 b1       	in	r24, 0x06	; 6
     2ac:	60 e0       	ldi	r22, 0x00	; 0
     2ae:	19 d2       	rcall	.+1074   	; 0x6e2 <checkBit>
     2b0:	cc 0f       	add	r28, r28
     2b2:	8c 2b       	or	r24, r28
     2b4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <rightCurrentState>
     2b8:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <leftLastState>
     2bc:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <rightLastState>
     2c0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <leftCurrentState>
     2c4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <rightCurrentState>
     2c8:	23 2b       	or	r18, r19
     2ca:	89 2b       	or	r24, r25
     2cc:	82 27       	eor	r24, r18
     2ce:	80 38       	cpi	r24, 0x80	; 128
     2d0:	a1 f4       	brne	.+40     	; 0x2fa <pinChangeCallback+0xd2>
     2d2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <leftCounter>
     2d6:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <leftCounter+0x1>
     2da:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <leftCounter+0x2>
     2de:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <leftCounter+0x3>
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	a1 1d       	adc	r26, r1
     2e6:	b1 1d       	adc	r27, r1
     2e8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <leftCounter>
     2ec:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <leftCounter+0x1>
     2f0:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <leftCounter+0x2>
     2f4:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <leftCounter+0x3>
     2f8:	62 c0       	rjmp	.+196    	; 0x3be <pinChangeCallback+0x196>
     2fa:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <leftLastState>
     2fe:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <rightLastState>
     302:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <leftCurrentState>
     306:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <rightCurrentState>
     30a:	23 2b       	or	r18, r19
     30c:	89 2b       	or	r24, r25
     30e:	82 27       	eor	r24, r18
     310:	80 34       	cpi	r24, 0x40	; 64
     312:	a1 f4       	brne	.+40     	; 0x33c <pinChangeCallback+0x114>
     314:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <leftCounter>
     318:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <leftCounter+0x1>
     31c:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <leftCounter+0x2>
     320:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <leftCounter+0x3>
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	a1 1d       	adc	r26, r1
     328:	b1 1d       	adc	r27, r1
     32a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <leftCounter>
     32e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <leftCounter+0x1>
     332:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <leftCounter+0x2>
     336:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <leftCounter+0x3>
     33a:	41 c0       	rjmp	.+130    	; 0x3be <pinChangeCallback+0x196>
     33c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <leftLastState>
     340:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <rightLastState>
     344:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <leftCurrentState>
     348:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <rightCurrentState>
     34c:	23 2b       	or	r18, r19
     34e:	89 2b       	or	r24, r25
     350:	82 27       	eor	r24, r18
     352:	82 30       	cpi	r24, 0x02	; 2
     354:	a1 f4       	brne	.+40     	; 0x37e <pinChangeCallback+0x156>
     356:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rightCounter>
     35a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rightCounter+0x1>
     35e:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <rightCounter+0x2>
     362:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <rightCounter+0x3>
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	a1 1d       	adc	r26, r1
     36a:	b1 1d       	adc	r27, r1
     36c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rightCounter>
     370:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rightCounter+0x1>
     374:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <rightCounter+0x2>
     378:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <rightCounter+0x3>
     37c:	20 c0       	rjmp	.+64     	; 0x3be <pinChangeCallback+0x196>
     37e:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <leftLastState>
     382:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <rightLastState>
     386:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <leftCurrentState>
     38a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <rightCurrentState>
     38e:	23 2b       	or	r18, r19
     390:	89 2b       	or	r24, r25
     392:	82 27       	eor	r24, r18
     394:	81 30       	cpi	r24, 0x01	; 1
     396:	99 f4       	brne	.+38     	; 0x3be <pinChangeCallback+0x196>
     398:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rightCounter>
     39c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rightCounter+0x1>
     3a0:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <rightCounter+0x2>
     3a4:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <rightCounter+0x3>
     3a8:	01 96       	adiw	r24, 0x01	; 1
     3aa:	a1 1d       	adc	r26, r1
     3ac:	b1 1d       	adc	r27, r1
     3ae:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rightCounter>
     3b2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rightCounter+0x1>
     3b6:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <rightCounter+0x2>
     3ba:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <rightCounter+0x3>
     3be:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <leftCurrentState>
     3c2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <leftLastState>
     3c6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <rightCurrentState>
     3ca:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <rightLastState>
     3ce:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <rotatingFlag>
     3d2:	88 23       	and	r24, r24
     3d4:	89 f0       	breq	.+34     	; 0x3f8 <pinChangeCallback+0x1d0>
     3d6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <leftCounter>
     3da:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <leftCounter+0x1>
     3de:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <leftCounter+0x2>
     3e2:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <leftCounter+0x3>
     3e6:	85 3f       	cpi	r24, 0xF5	; 245
     3e8:	91 40       	sbci	r25, 0x01	; 1
     3ea:	a1 05       	cpc	r26, r1
     3ec:	b1 05       	cpc	r27, r1
     3ee:	20 f0       	brcs	.+8      	; 0x3f8 <pinChangeCallback+0x1d0>
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	fe d1       	rcall	.+1020   	; 0x7f0 <motor_speed>
     3f4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rotatingFlag>
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <__vector_4>:
     3fc:	1f 92       	push	r1
     3fe:	0f 92       	push	r0
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	0f 92       	push	r0
     404:	11 24       	eor	r1, r1
     406:	0b b6       	in	r0, 0x3b	; 59
     408:	0f 92       	push	r0
     40a:	2f 93       	push	r18
     40c:	3f 93       	push	r19
     40e:	4f 93       	push	r20
     410:	5f 93       	push	r21
     412:	6f 93       	push	r22
     414:	7f 93       	push	r23
     416:	8f 93       	push	r24
     418:	9f 93       	push	r25
     41a:	af 93       	push	r26
     41c:	bf 93       	push	r27
     41e:	ef 93       	push	r30
     420:	ff 93       	push	r31
     422:	02 df       	rcall	.-508    	; 0x228 <pinChangeCallback>
     424:	ff 91       	pop	r31
     426:	ef 91       	pop	r30
     428:	bf 91       	pop	r27
     42a:	af 91       	pop	r26
     42c:	9f 91       	pop	r25
     42e:	8f 91       	pop	r24
     430:	7f 91       	pop	r23
     432:	6f 91       	pop	r22
     434:	5f 91       	pop	r21
     436:	4f 91       	pop	r20
     438:	3f 91       	pop	r19
     43a:	2f 91       	pop	r18
     43c:	0f 90       	pop	r0
     43e:	0b be       	out	0x3b, r0	; 59
     440:	0f 90       	pop	r0
     442:	0f be       	out	0x3f, r0	; 63
     444:	0f 90       	pop	r0
     446:	1f 90       	pop	r1
     448:	18 95       	reti

0000044a <__vector_6>:
     44a:	1f 92       	push	r1
     44c:	0f 92       	push	r0
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	0f 92       	push	r0
     452:	11 24       	eor	r1, r1
     454:	0b b6       	in	r0, 0x3b	; 59
     456:	0f 92       	push	r0
     458:	2f 93       	push	r18
     45a:	3f 93       	push	r19
     45c:	4f 93       	push	r20
     45e:	5f 93       	push	r21
     460:	6f 93       	push	r22
     462:	7f 93       	push	r23
     464:	8f 93       	push	r24
     466:	9f 93       	push	r25
     468:	af 93       	push	r26
     46a:	bf 93       	push	r27
     46c:	ef 93       	push	r30
     46e:	ff 93       	push	r31
     470:	db de       	rcall	.-586    	; 0x228 <pinChangeCallback>
     472:	ff 91       	pop	r31
     474:	ef 91       	pop	r30
     476:	bf 91       	pop	r27
     478:	af 91       	pop	r26
     47a:	9f 91       	pop	r25
     47c:	8f 91       	pop	r24
     47e:	7f 91       	pop	r23
     480:	6f 91       	pop	r22
     482:	5f 91       	pop	r21
     484:	4f 91       	pop	r20
     486:	3f 91       	pop	r19
     488:	2f 91       	pop	r18
     48a:	0f 90       	pop	r0
     48c:	0b be       	out	0x3b, r0	; 59
     48e:	0f 90       	pop	r0
     490:	0f be       	out	0x3f, r0	; 63
     492:	0f 90       	pop	r0
     494:	1f 90       	pop	r1
     496:	18 95       	reti

00000498 <encoder_init>:
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	40 e0       	ldi	r20, 0x00	; 0
     49c:	67 e0       	ldi	r22, 0x07	; 7
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	5e d0       	rcall	.+188    	; 0x55e <gpio_init>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	66 e0       	ldi	r22, 0x06	; 6
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	59 d0       	rcall	.+178    	; 0x55e <gpio_init>
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	40 e0       	ldi	r20, 0x00	; 0
     4b0:	61 e0       	ldi	r22, 0x01	; 1
     4b2:	82 e0       	ldi	r24, 0x02	; 2
     4b4:	54 d0       	rcall	.+168    	; 0x55e <gpio_init>
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	4f d0       	rcall	.+158    	; 0x55e <gpio_init>
     4c0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <leftCounter>
     4c4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <leftCounter+0x1>
     4c8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <leftCounter+0x2>
     4cc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <leftCounter+0x3>
     4d0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <leftCurrentState>
     4d4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <leftLastState>
     4d8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rightCounter>
     4dc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <rightCounter+0x1>
     4e0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rightCounter+0x2>
     4e4:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rightCounter+0x3>
     4e8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rightCurrentState>
     4ec:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <rightLastState>
     4f0:	eb e6       	ldi	r30, 0x6B	; 107
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	80 81       	ld	r24, Z
     4f6:	80 6c       	ori	r24, 0xC0	; 192
     4f8:	80 83       	st	Z, r24
     4fa:	ed e6       	ldi	r30, 0x6D	; 109
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	80 81       	ld	r24, Z
     500:	87 61       	ori	r24, 0x17	; 23
     502:	80 83       	st	Z, r24
     504:	08 95       	ret

00000506 <encoder_start>:
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	88 e6       	ldi	r24, 0x68	; 104
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	ad d0       	rcall	.+346    	; 0x668 <setBit>
     50e:	62 e0       	ldi	r22, 0x02	; 2
     510:	88 e6       	ldi	r24, 0x68	; 104
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	a9 c0       	rjmp	.+338    	; 0x668 <setBit>
     516:	08 95       	ret

00000518 <encoder_stop>:
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	88 e6       	ldi	r24, 0x68	; 104
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	b0 d0       	rcall	.+352    	; 0x680 <clearBit>
     520:	62 e0       	ldi	r22, 0x02	; 2
     522:	88 e6       	ldi	r24, 0x68	; 104
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	ac c0       	rjmp	.+344    	; 0x680 <clearBit>
     528:	08 95       	ret

0000052a <encoder_reset>:

void encoder_reset(){
	leftCounter = 0;
     52a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <leftCounter>
     52e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <leftCounter+0x1>
     532:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <leftCounter+0x2>
     536:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <leftCounter+0x3>
	rightCounter = 0;
     53a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rightCounter>
     53e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <rightCounter+0x1>
     542:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rightCounter+0x2>
     546:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rightCounter+0x3>
     54a:	08 95       	ret

0000054c <getPulseLength>:
}

u16 getPulseLength(){
	return pulseLength;
     54c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <pulseLength>
     550:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <pulseLength+0x1>
     554:	08 95       	ret

00000556 <disableJTAG>:
			break;
		case PC:
			clearBit(&PORTC, _number);
			break;
		case PD:
			clearBit(&PORTD, _number);
     556:	80 e8       	ldi	r24, 0x80	; 128
     558:	85 bf       	out	0x35, r24	; 53
     55a:	85 bf       	out	0x35, r24	; 53
     55c:	08 95       	ret

0000055e <gpio_init>:
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	d6 2f       	mov	r29, r22
     566:	c4 2f       	mov	r28, r20
     568:	12 2f       	mov	r17, r18
     56a:	81 30       	cpi	r24, 0x01	; 1
     56c:	89 f0       	breq	.+34     	; 0x590 <gpio_init+0x32>
     56e:	28 f0       	brcs	.+10     	; 0x57a <gpio_init+0x1c>
     570:	82 30       	cpi	r24, 0x02	; 2
     572:	c9 f0       	breq	.+50     	; 0x5a6 <gpio_init+0x48>
     574:	83 30       	cpi	r24, 0x03	; 3
     576:	11 f1       	breq	.+68     	; 0x5bc <gpio_init+0x5e>
     578:	2b c0       	rjmp	.+86     	; 0x5d0 <gpio_init+0x72>
     57a:	81 e2       	ldi	r24, 0x21	; 33
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	99 d0       	rcall	.+306    	; 0x6b2 <updateBit>
     580:	c1 11       	cpse	r28, r1
     582:	26 c0       	rjmp	.+76     	; 0x5d0 <gpio_init+0x72>
     584:	41 2f       	mov	r20, r17
     586:	6d 2f       	mov	r22, r29
     588:	82 e2       	ldi	r24, 0x22	; 34
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	92 d0       	rcall	.+292    	; 0x6b2 <updateBit>
     58e:	20 c0       	rjmp	.+64     	; 0x5d0 <gpio_init+0x72>
     590:	84 e2       	ldi	r24, 0x24	; 36
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	8e d0       	rcall	.+284    	; 0x6b2 <updateBit>
     596:	c1 11       	cpse	r28, r1
     598:	1b c0       	rjmp	.+54     	; 0x5d0 <gpio_init+0x72>
     59a:	41 2f       	mov	r20, r17
     59c:	6d 2f       	mov	r22, r29
     59e:	85 e2       	ldi	r24, 0x25	; 37
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	87 d0       	rcall	.+270    	; 0x6b2 <updateBit>
     5a4:	15 c0       	rjmp	.+42     	; 0x5d0 <gpio_init+0x72>
     5a6:	87 e2       	ldi	r24, 0x27	; 39
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	83 d0       	rcall	.+262    	; 0x6b2 <updateBit>
     5ac:	c1 11       	cpse	r28, r1
     5ae:	10 c0       	rjmp	.+32     	; 0x5d0 <gpio_init+0x72>
     5b0:	41 2f       	mov	r20, r17
     5b2:	6d 2f       	mov	r22, r29
     5b4:	88 e2       	ldi	r24, 0x28	; 40
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	7c d0       	rcall	.+248    	; 0x6b2 <updateBit>
     5ba:	0a c0       	rjmp	.+20     	; 0x5d0 <gpio_init+0x72>
     5bc:	8a e2       	ldi	r24, 0x2A	; 42
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	78 d0       	rcall	.+240    	; 0x6b2 <updateBit>
     5c2:	c1 11       	cpse	r28, r1
     5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <gpio_init+0x72>
     5c6:	41 2f       	mov	r20, r17
     5c8:	6d 2f       	mov	r22, r29
     5ca:	8b e2       	ldi	r24, 0x2B	; 43
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	71 d0       	rcall	.+226    	; 0x6b2 <updateBit>
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	08 95       	ret

000005d8 <gpio_out_set>:
	}
}
	

void gpio_out_set(port _port, u8 _number){
	switch(_port){
     5d8:	81 30       	cpi	r24, 0x01	; 1
     5da:	51 f0       	breq	.+20     	; 0x5f0 <gpio_out_set+0x18>
     5dc:	28 f0       	brcs	.+10     	; 0x5e8 <gpio_out_set+0x10>
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	59 f0       	breq	.+22     	; 0x5f8 <gpio_out_set+0x20>
     5e2:	83 30       	cpi	r24, 0x03	; 3
     5e4:	69 f0       	breq	.+26     	; 0x600 <gpio_out_set+0x28>
     5e6:	08 95       	ret
		case PA:
			setBit(&PORTA, _number);
     5e8:	82 e2       	ldi	r24, 0x22	; 34
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	3d c0       	rjmp	.+122    	; 0x668 <setBit>
			break;
     5ee:	08 95       	ret
		case PB:
			setBit(&PORTB, _number);
     5f0:	85 e2       	ldi	r24, 0x25	; 37
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	39 c0       	rjmp	.+114    	; 0x668 <setBit>
			break;
		case PC:
			setBit(&PORTC, _number);
     5f6:	08 95       	ret
     5f8:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			setBit(&PORTD, _number);
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	35 c0       	rjmp	.+106    	; 0x668 <setBit>
     5fe:	08 95       	ret
     600:	8b e2       	ldi	r24, 0x2B	; 43
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	31 c0       	rjmp	.+98     	; 0x668 <setBit>
     606:	08 95       	ret

00000608 <gpio_out_reset>:
			break;
	}
}

void gpio_out_reset(port _port, u8 _number){
	switch(_port){
     608:	81 30       	cpi	r24, 0x01	; 1
     60a:	51 f0       	breq	.+20     	; 0x620 <gpio_out_reset+0x18>
     60c:	28 f0       	brcs	.+10     	; 0x618 <gpio_out_reset+0x10>
     60e:	82 30       	cpi	r24, 0x02	; 2
     610:	59 f0       	breq	.+22     	; 0x628 <gpio_out_reset+0x20>
     612:	83 30       	cpi	r24, 0x03	; 3
     614:	69 f0       	breq	.+26     	; 0x630 <gpio_out_reset+0x28>
     616:	08 95       	ret
		case PA:
			clearBit(&PORTA, _number);
     618:	82 e2       	ldi	r24, 0x22	; 34
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	31 c0       	rjmp	.+98     	; 0x680 <clearBit>
			break;
     61e:	08 95       	ret
		case PB:
			clearBit(&PORTB, _number);
     620:	85 e2       	ldi	r24, 0x25	; 37
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	2d c0       	rjmp	.+90     	; 0x680 <clearBit>
			break;
		case PC:
			clearBit(&PORTC, _number);
     626:	08 95       	ret
     628:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			clearBit(&PORTD, _number);
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	29 c0       	rjmp	.+82     	; 0x680 <clearBit>
     62e:	08 95       	ret
     630:	8b e2       	ldi	r24, 0x2B	; 43
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	25 c0       	rjmp	.+74     	; 0x680 <clearBit>
     636:	08 95       	ret

00000638 <gpio_out_toggle>:
			break;
	}
}

void gpio_out_toggle(port _port, u8 _number){
	switch(_port){
     638:	81 30       	cpi	r24, 0x01	; 1
     63a:	51 f0       	breq	.+20     	; 0x650 <gpio_out_toggle+0x18>
     63c:	28 f0       	brcs	.+10     	; 0x648 <gpio_out_toggle+0x10>
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	59 f0       	breq	.+22     	; 0x658 <gpio_out_toggle+0x20>
     642:	83 30       	cpi	r24, 0x03	; 3
     644:	69 f0       	breq	.+26     	; 0x660 <gpio_out_toggle+0x28>
     646:	08 95       	ret
		case PA:
			toggleBit(&PORTA, _number);
     648:	82 e2       	ldi	r24, 0x22	; 34
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	26 c0       	rjmp	.+76     	; 0x69a <toggleBit>
			break;
     64e:	08 95       	ret
		case PB:
			toggleBit(&PORTB, _number);
     650:	85 e2       	ldi	r24, 0x25	; 37
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	22 c0       	rjmp	.+68     	; 0x69a <toggleBit>
			break;
		case PC:
			toggleBit(&PORTC, _number);
     656:	08 95       	ret
     658:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			toggleBit(&PORTD, _number);
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	1e c0       	rjmp	.+60     	; 0x69a <toggleBit>
     65e:	08 95       	ret
     660:	8b e2       	ldi	r24, 0x2B	; 43
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	1a c0       	rjmp	.+52     	; 0x69a <toggleBit>
     666:	08 95       	ret

00000668 <setBit>:
 */ 

#include "math.h"

void setBit(volatile u8 *registerName, u8 position){
	*registerName |= (1 << position);
     668:	fc 01       	movw	r30, r24
     66a:	40 81       	ld	r20, Z
     66c:	21 e0       	ldi	r18, 0x01	; 1
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	02 c0       	rjmp	.+4      	; 0x676 <setBit+0xe>
     672:	22 0f       	add	r18, r18
     674:	33 1f       	adc	r19, r19
     676:	6a 95       	dec	r22
     678:	e2 f7       	brpl	.-8      	; 0x672 <setBit+0xa>
     67a:	24 2b       	or	r18, r20
     67c:	20 83       	st	Z, r18
     67e:	08 95       	ret

00000680 <clearBit>:
}

void clearBit(volatile u8 *registerName, u8 position){
     680:	fc 01       	movw	r30, r24
	*registerName &= ~(1 << position);
     682:	90 81       	ld	r25, Z
     684:	21 e0       	ldi	r18, 0x01	; 1
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	02 c0       	rjmp	.+4      	; 0x68e <clearBit+0xe>
     68a:	22 0f       	add	r18, r18
     68c:	33 1f       	adc	r19, r19
     68e:	6a 95       	dec	r22
     690:	e2 f7       	brpl	.-8      	; 0x68a <clearBit+0xa>
     692:	20 95       	com	r18
     694:	29 23       	and	r18, r25
     696:	20 83       	st	Z, r18
     698:	08 95       	ret

0000069a <toggleBit>:
}

void toggleBit(volatile u8 *registerName, u8 position){
	*registerName ^= (1 << position);
     69a:	fc 01       	movw	r30, r24
     69c:	40 81       	ld	r20, Z
     69e:	21 e0       	ldi	r18, 0x01	; 1
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <toggleBit+0xe>
     6a4:	22 0f       	add	r18, r18
     6a6:	33 1f       	adc	r19, r19
     6a8:	6a 95       	dec	r22
     6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <toggleBit+0xa>
     6ac:	24 27       	eor	r18, r20
     6ae:	20 83       	st	Z, r18
     6b0:	08 95       	ret

000006b2 <updateBit>:
}

void updateBit(volatile u8 *registerName, u8 position, u8 value){
     6b2:	fc 01       	movw	r30, r24
     6b4:	94 2f       	mov	r25, r20
	u8 newValue = value << position;
	newValue |= (*registerName & ~(1 << position));
     6b6:	20 81       	ld	r18, Z
     6b8:	41 e0       	ldi	r20, 0x01	; 1
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	06 2e       	mov	r0, r22
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <updateBit+0x12>
     6c0:	44 0f       	add	r20, r20
     6c2:	55 1f       	adc	r21, r21
     6c4:	0a 94       	dec	r0
     6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <updateBit+0xe>
     6c8:	40 95       	com	r20
     6ca:	50 95       	com	r21
     6cc:	24 23       	and	r18, r20
     6ce:	49 2f       	mov	r20, r25
     6d0:	50 e0       	ldi	r21, 0x00	; 0
     6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <updateBit+0x26>
     6d4:	44 0f       	add	r20, r20
     6d6:	55 1f       	adc	r21, r21
     6d8:	6a 95       	dec	r22
     6da:	e2 f7       	brpl	.-8      	; 0x6d4 <updateBit+0x22>
     6dc:	42 2b       	or	r20, r18
	*registerName = newValue;
     6de:	40 83       	st	Z, r20
     6e0:	08 95       	ret

000006e2 <checkBit>:
}

bitValue checkBit(u8 registerName, u8 position){
	return (registerName >> position) & 1;
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <checkBit+0x8>
     6e6:	95 95       	asr	r25
     6e8:	87 95       	ror	r24
     6ea:	6a 95       	dec	r22
     6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <checkBit+0x4>
     6ee:	81 70       	andi	r24, 0x01	; 1
     6f0:	08 95       	ret

000006f2 <motor_init>:

u8 calibrateSpeed(u8 speed){
	return 0.91*speed;
}

void motor_init(){
     6f2:	0f 93       	push	r16
	gpio_init(PC, 7, OUTPUT, NO_PULL);
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	41 e0       	ldi	r20, 0x01	; 1
     6f8:	67 e0       	ldi	r22, 0x07	; 7
     6fa:	82 e0       	ldi	r24, 0x02	; 2
     6fc:	30 df       	rcall	.-416    	; 0x55e <gpio_init>
	gpio_init(PC, 6, OUTPUT, NO_PULL);
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	41 e0       	ldi	r20, 0x01	; 1
     702:	66 e0       	ldi	r22, 0x06	; 6
     704:	82 e0       	ldi	r24, 0x02	; 2
     706:	2b df       	rcall	.-426    	; 0x55e <gpio_init>
	gpio_init(PC, 5, OUTPUT, NO_PULL);
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	41 e0       	ldi	r20, 0x01	; 1
     70c:	65 e0       	ldi	r22, 0x05	; 5
     70e:	82 e0       	ldi	r24, 0x02	; 2
     710:	26 df       	rcall	.-436    	; 0x55e <gpio_init>
	gpio_init(PC, 3, OUTPUT, NO_PULL);
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	41 e0       	ldi	r20, 0x01	; 1
     716:	63 e0       	ldi	r22, 0x03	; 3
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	21 df       	rcall	.-446    	; 0x55e <gpio_init>
	pwm_init(0, 25000, TIMER2, CHANNEL_A);
     71c:	00 e0       	ldi	r16, 0x00	; 0
     71e:	22 e0       	ldi	r18, 0x02	; 2
     720:	48 ea       	ldi	r20, 0xA8	; 168
     722:	51 e6       	ldi	r21, 0x61	; 97
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	22 d1       	rcall	.+580    	; 0x970 <pwm_init>
	pwm_init(0, 25000, TIMER2, CHANNEL_B);
     72c:	01 e0       	ldi	r16, 0x01	; 1
     72e:	22 e0       	ldi	r18, 0x02	; 2
     730:	48 ea       	ldi	r20, 0xA8	; 168
     732:	51 e6       	ldi	r21, 0x61	; 97
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	1a d1       	rcall	.+564    	; 0x970 <pwm_init>
}
     73c:	0f 91       	pop	r16
     73e:	08 95       	ret

00000740 <motor_start>:

void motor_start(){
	gpio_out_set(PC, 7);
     740:	67 e0       	ldi	r22, 0x07	; 7
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	49 df       	rcall	.-366    	; 0x5d8 <gpio_out_set>
	gpio_out_reset(PC, 6);
     746:	66 e0       	ldi	r22, 0x06	; 6
     748:	82 e0       	ldi	r24, 0x02	; 2
	gpio_out_reset(PC, 5);
     74a:	5e df       	rcall	.-324    	; 0x608 <gpio_out_reset>
     74c:	65 e0       	ldi	r22, 0x05	; 5
	gpio_out_set(PC, 3);
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	5b df       	rcall	.-330    	; 0x608 <gpio_out_reset>
     752:	63 e0       	ldi	r22, 0x03	; 3
	pwm_setDutyCycle(40, TIMER2, CHANNEL_A);
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	40 df       	rcall	.-384    	; 0x5d8 <gpio_out_set>
     758:	40 e0       	ldi	r20, 0x00	; 0
	pwm_setDutyCycle(40, TIMER2, CHANNEL_B);
     75a:	62 e0       	ldi	r22, 0x02	; 2
     75c:	88 e2       	ldi	r24, 0x28	; 40
     75e:	e2 d1       	rcall	.+964    	; 0xb24 <pwm_setDutyCycle>
	pwm_start(TIMER2);
     760:	41 e0       	ldi	r20, 0x01	; 1
     762:	62 e0       	ldi	r22, 0x02	; 2
     764:	88 e2       	ldi	r24, 0x28	; 40
	encoder_start();
     766:	de d1       	rcall	.+956    	; 0xb24 <pwm_setDutyCycle>
     768:	82 e0       	ldi	r24, 0x02	; 2
     76a:	2d d2       	rcall	.+1114   	; 0xbc6 <pwm_start>
     76c:	cc ce       	rjmp	.-616    	; 0x506 <encoder_start>
     76e:	08 95       	ret

00000770 <motor_stop>:
}

void motor_stop(){
     770:	d3 de       	rcall	.-602    	; 0x518 <encoder_stop>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	6f c2       	rjmp	.+1246   	; 0xc54 <pwm_stop>
     776:	08 95       	ret

00000778 <motor_direction>:
     778:	81 30       	cpi	r24, 0x01	; 1
     77a:	99 f0       	breq	.+38     	; 0x7a2 <motor_direction+0x2a>
     77c:	28 f0       	brcs	.+10     	; 0x788 <motor_direction+0x10>
     77e:	82 30       	cpi	r24, 0x02	; 2
     780:	e9 f0       	breq	.+58     	; 0x7bc <motor_direction+0x44>
     782:	83 30       	cpi	r24, 0x03	; 3
     784:	41 f1       	breq	.+80     	; 0x7d6 <motor_direction+0x5e>
     786:	08 95       	ret
     788:	67 e0       	ldi	r22, 0x07	; 7
     78a:	82 e0       	ldi	r24, 0x02	; 2
     78c:	25 df       	rcall	.-438    	; 0x5d8 <gpio_out_set>
     78e:	66 e0       	ldi	r22, 0x06	; 6
     790:	82 e0       	ldi	r24, 0x02	; 2
     792:	3a df       	rcall	.-396    	; 0x608 <gpio_out_reset>
     794:	65 e0       	ldi	r22, 0x05	; 5
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	37 df       	rcall	.-402    	; 0x608 <gpio_out_reset>
     79a:	63 e0       	ldi	r22, 0x03	; 3
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	1c cf       	rjmp	.-456    	; 0x5d8 <gpio_out_set>
     7a0:	08 95       	ret
     7a2:	67 e0       	ldi	r22, 0x07	; 7
     7a4:	82 e0       	ldi	r24, 0x02	; 2
     7a6:	30 df       	rcall	.-416    	; 0x608 <gpio_out_reset>
     7a8:	66 e0       	ldi	r22, 0x06	; 6
     7aa:	82 e0       	ldi	r24, 0x02	; 2
     7ac:	15 df       	rcall	.-470    	; 0x5d8 <gpio_out_set>
     7ae:	65 e0       	ldi	r22, 0x05	; 5
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	12 df       	rcall	.-476    	; 0x5d8 <gpio_out_set>
     7b4:	63 e0       	ldi	r22, 0x03	; 3
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	27 cf       	rjmp	.-434    	; 0x608 <gpio_out_reset>
     7ba:	08 95       	ret
     7bc:	67 e0       	ldi	r22, 0x07	; 7
     7be:	82 e0       	ldi	r24, 0x02	; 2
     7c0:	23 df       	rcall	.-442    	; 0x608 <gpio_out_reset>
     7c2:	66 e0       	ldi	r22, 0x06	; 6
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	08 df       	rcall	.-496    	; 0x5d8 <gpio_out_set>
     7c8:	65 e0       	ldi	r22, 0x05	; 5
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	1d df       	rcall	.-454    	; 0x608 <gpio_out_reset>
     7ce:	63 e0       	ldi	r22, 0x03	; 3
     7d0:	82 e0       	ldi	r24, 0x02	; 2
     7d2:	02 cf       	rjmp	.-508    	; 0x5d8 <gpio_out_set>
     7d4:	08 95       	ret
     7d6:	67 e0       	ldi	r22, 0x07	; 7
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	fe de       	rcall	.-516    	; 0x5d8 <gpio_out_set>
     7dc:	66 e0       	ldi	r22, 0x06	; 6
     7de:	82 e0       	ldi	r24, 0x02	; 2
     7e0:	13 df       	rcall	.-474    	; 0x608 <gpio_out_reset>
     7e2:	65 e0       	ldi	r22, 0x05	; 5
     7e4:	82 e0       	ldi	r24, 0x02	; 2
     7e6:	f8 de       	rcall	.-528    	; 0x5d8 <gpio_out_set>
     7e8:	63 e0       	ldi	r22, 0x03	; 3
     7ea:	82 e0       	ldi	r24, 0x02	; 2
     7ec:	0d cf       	rjmp	.-486    	; 0x608 <gpio_out_reset>
     7ee:	08 95       	ret

000007f0 <motor_speed>:
     7f0:	cf 93       	push	r28
     7f2:	c8 2f       	mov	r28, r24
     7f4:	40 e0       	ldi	r20, 0x00	; 0
     7f6:	62 e0       	ldi	r22, 0x02	; 2
     7f8:	95 d1       	rcall	.+810    	; 0xb24 <pwm_setDutyCycle>
     7fa:	41 e0       	ldi	r20, 0x01	; 1
     7fc:	62 e0       	ldi	r22, 0x02	; 2
     7fe:	8c 2f       	mov	r24, r28
     800:	91 d1       	rcall	.+802    	; 0xb24 <pwm_setDutyCycle>
     802:	cf 91       	pop	r28
     804:	08 95       	ret

00000806 <motor_individualDirSpeed>:
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	16 2f       	mov	r17, r22
     80e:	c4 2f       	mov	r28, r20
     810:	d2 2f       	mov	r29, r18
     812:	88 23       	and	r24, r24
     814:	19 f0       	breq	.+6      	; 0x81c <motor_individualDirSpeed+0x16>
     816:	81 30       	cpi	r24, 0x01	; 1
     818:	41 f0       	breq	.+16     	; 0x82a <motor_individualDirSpeed+0x24>
     81a:	0d c0       	rjmp	.+26     	; 0x836 <motor_individualDirSpeed+0x30>
     81c:	67 e0       	ldi	r22, 0x07	; 7
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	f3 de       	rcall	.-538    	; 0x608 <gpio_out_reset>
     822:	66 e0       	ldi	r22, 0x06	; 6
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	d8 de       	rcall	.-592    	; 0x5d8 <gpio_out_set>
     828:	06 c0       	rjmp	.+12     	; 0x836 <motor_individualDirSpeed+0x30>
     82a:	67 e0       	ldi	r22, 0x07	; 7
     82c:	82 e0       	ldi	r24, 0x02	; 2
     82e:	d4 de       	rcall	.-600    	; 0x5d8 <gpio_out_set>
     830:	66 e0       	ldi	r22, 0x06	; 6
     832:	82 e0       	ldi	r24, 0x02	; 2
     834:	e9 de       	rcall	.-558    	; 0x608 <gpio_out_reset>
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	62 e0       	ldi	r22, 0x02	; 2
     83a:	81 2f       	mov	r24, r17
     83c:	73 d1       	rcall	.+742    	; 0xb24 <pwm_setDutyCycle>
     83e:	cc 23       	and	r28, r28
     840:	19 f0       	breq	.+6      	; 0x848 <motor_individualDirSpeed+0x42>
     842:	c1 30       	cpi	r28, 0x01	; 1
     844:	41 f0       	breq	.+16     	; 0x856 <motor_individualDirSpeed+0x50>
     846:	0d c0       	rjmp	.+26     	; 0x862 <motor_individualDirSpeed+0x5c>
     848:	65 e0       	ldi	r22, 0x05	; 5
     84a:	82 e0       	ldi	r24, 0x02	; 2
     84c:	dd de       	rcall	.-582    	; 0x608 <gpio_out_reset>
     84e:	63 e0       	ldi	r22, 0x03	; 3
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	c2 de       	rcall	.-636    	; 0x5d8 <gpio_out_set>
     854:	06 c0       	rjmp	.+12     	; 0x862 <motor_individualDirSpeed+0x5c>
     856:	65 e0       	ldi	r22, 0x05	; 5
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	be de       	rcall	.-644    	; 0x5d8 <gpio_out_set>
     85c:	63 e0       	ldi	r22, 0x03	; 3
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	d3 de       	rcall	.-602    	; 0x608 <gpio_out_reset>
     862:	41 e0       	ldi	r20, 0x01	; 1
     864:	62 e0       	ldi	r22, 0x02	; 2
     866:	8d 2f       	mov	r24, r29
     868:	5d d1       	rcall	.+698    	; 0xb24 <pwm_setDutyCycle>
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	08 95       	ret

00000872 <calculateTop>:
#include "gpio.h"

u8 timer1ClockSource;
u8 timer2ClockSource;

u16 calculateTop(u16 *prescaler, u32 frequency, timer timerSelection){
     872:	cf 92       	push	r12
     874:	df 92       	push	r13
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	ec 01       	movw	r28, r24
     880:	6a 01       	movw	r12, r20
     882:	7b 01       	movw	r14, r22
	u32 topValue = 0;
	u16 divisor = 0;
	switch(timerSelection){
     884:	21 30       	cpi	r18, 0x01	; 1
     886:	09 f0       	breq	.+2      	; 0x88a <calculateTop+0x18>
     888:	69 c0       	rjmp	.+210    	; 0x95c <calculateTop+0xea>
		case TIMER0:
			break;
		case TIMER1:
			divisor = 1;
			*prescaler = divisor;
			topValue = S_CLOCK / divisor / frequency - 1;
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	72 e1       	ldi	r23, 0x12	; 18
     88e:	8a e7       	ldi	r24, 0x7A	; 122
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	a7 01       	movw	r20, r14
     894:	96 01       	movw	r18, r12
     896:	5f d4       	rcall	.+2238   	; 0x1156 <__udivmodsi4>
     898:	da 01       	movw	r26, r20
     89a:	c9 01       	movw	r24, r18
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	a1 09       	sbc	r26, r1
     8a0:	b1 09       	sbc	r27, r1
			if(topValue > 0xFFFF){
     8a2:	00 97       	sbiw	r24, 0x00	; 0
     8a4:	21 e0       	ldi	r18, 0x01	; 1
     8a6:	a2 07       	cpc	r26, r18
     8a8:	b1 05       	cpc	r27, r1
     8aa:	28 f4       	brcc	.+10     	; 0x8b6 <calculateTop+0x44>
	switch(timerSelection){
		case TIMER0:
			break;
		case TIMER1:
			divisor = 1;
			*prescaler = divisor;
     8ac:	21 e0       	ldi	r18, 0x01	; 1
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	39 83       	std	Y+1, r19	; 0x01
     8b2:	28 83       	st	Y, r18
     8b4:	56 c0       	rjmp	.+172    	; 0x962 <calculateTop+0xf0>
			topValue = S_CLOCK / divisor / frequency - 1;
			if(topValue > 0xFFFF){
				divisor = 8;
				*prescaler = divisor;
				topValue = S_CLOCK / divisor / frequency - 1;
     8b6:	60 e4       	ldi	r22, 0x40	; 64
     8b8:	72 e4       	ldi	r23, 0x42	; 66
     8ba:	8f e0       	ldi	r24, 0x0F	; 15
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	a7 01       	movw	r20, r14
     8c0:	96 01       	movw	r18, r12
     8c2:	49 d4       	rcall	.+2194   	; 0x1156 <__udivmodsi4>
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	01 97       	sbiw	r24, 0x01	; 1
     8ca:	a1 09       	sbc	r26, r1
     8cc:	b1 09       	sbc	r27, r1
				if(topValue > 0xFFFF){
     8ce:	00 97       	sbiw	r24, 0x00	; 0
     8d0:	21 e0       	ldi	r18, 0x01	; 1
     8d2:	a2 07       	cpc	r26, r18
     8d4:	b1 05       	cpc	r27, r1
     8d6:	28 f4       	brcc	.+10     	; 0x8e2 <calculateTop+0x70>
			divisor = 1;
			*prescaler = divisor;
			topValue = S_CLOCK / divisor / frequency - 1;
			if(topValue > 0xFFFF){
				divisor = 8;
				*prescaler = divisor;
     8d8:	28 e0       	ldi	r18, 0x08	; 8
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	39 83       	std	Y+1, r19	; 0x01
     8de:	28 83       	st	Y, r18
     8e0:	40 c0       	rjmp	.+128    	; 0x962 <calculateTop+0xf0>
				topValue = S_CLOCK / divisor / frequency - 1;
				if(topValue > 0xFFFF){
					divisor = 64;
					*prescaler = divisor;
					topValue = S_CLOCK / divisor / frequency -1;
     8e2:	68 e4       	ldi	r22, 0x48	; 72
     8e4:	78 ee       	ldi	r23, 0xE8	; 232
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	a7 01       	movw	r20, r14
     8ec:	96 01       	movw	r18, r12
     8ee:	33 d4       	rcall	.+2150   	; 0x1156 <__udivmodsi4>
     8f0:	da 01       	movw	r26, r20
     8f2:	c9 01       	movw	r24, r18
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	a1 09       	sbc	r26, r1
     8f8:	b1 09       	sbc	r27, r1
					if(topValue > 0xFFFF){
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	21 e0       	ldi	r18, 0x01	; 1
     8fe:	a2 07       	cpc	r26, r18
     900:	b1 05       	cpc	r27, r1
     902:	28 f4       	brcc	.+10     	; 0x90e <calculateTop+0x9c>
				divisor = 8;
				*prescaler = divisor;
				topValue = S_CLOCK / divisor / frequency - 1;
				if(topValue > 0xFFFF){
					divisor = 64;
					*prescaler = divisor;
     904:	20 e4       	ldi	r18, 0x40	; 64
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	39 83       	std	Y+1, r19	; 0x01
     90a:	28 83       	st	Y, r18
     90c:	2a c0       	rjmp	.+84     	; 0x962 <calculateTop+0xf0>
					topValue = S_CLOCK / divisor / frequency -1;
					if(topValue > 0xFFFF){
						divisor = 256;
						*prescaler = divisor;
						topValue = S_CLOCK / divisor / frequency - 1;
     90e:	62 e1       	ldi	r22, 0x12	; 18
     910:	7a e7       	ldi	r23, 0x7A	; 122
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a7 01       	movw	r20, r14
     918:	96 01       	movw	r18, r12
     91a:	1d d4       	rcall	.+2106   	; 0x1156 <__udivmodsi4>
     91c:	da 01       	movw	r26, r20
     91e:	c9 01       	movw	r24, r18
     920:	01 97       	sbiw	r24, 0x01	; 1
     922:	a1 09       	sbc	r26, r1
     924:	b1 09       	sbc	r27, r1
						if(topValue > 0xFFFF){
     926:	00 97       	sbiw	r24, 0x00	; 0
     928:	21 e0       	ldi	r18, 0x01	; 1
     92a:	a2 07       	cpc	r26, r18
     92c:	b1 05       	cpc	r27, r1
     92e:	28 f4       	brcc	.+10     	; 0x93a <calculateTop+0xc8>
					divisor = 64;
					*prescaler = divisor;
					topValue = S_CLOCK / divisor / frequency -1;
					if(topValue > 0xFFFF){
						divisor = 256;
						*prescaler = divisor;
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	31 e0       	ldi	r19, 0x01	; 1
     934:	39 83       	std	Y+1, r19	; 0x01
     936:	28 83       	st	Y, r18
     938:	14 c0       	rjmp	.+40     	; 0x962 <calculateTop+0xf0>
						topValue = S_CLOCK / divisor / frequency - 1;
						if(topValue > 0xFFFF){
							divisor = 1024;
							*prescaler = divisor;
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	94 e0       	ldi	r25, 0x04	; 4
     93e:	99 83       	std	Y+1, r25	; 0x01
     940:	88 83       	st	Y, r24
							topValue = S_CLOCK / divisor / frequency - 1;
     942:	64 e8       	ldi	r22, 0x84	; 132
     944:	7e e1       	ldi	r23, 0x1E	; 30
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	a7 01       	movw	r20, r14
     94c:	96 01       	movw	r18, r12
     94e:	03 d4       	rcall	.+2054   	; 0x1156 <__udivmodsi4>
     950:	da 01       	movw	r26, r20
     952:	c9 01       	movw	r24, r18
     954:	01 97       	sbiw	r24, 0x01	; 1
     956:	a1 09       	sbc	r26, r1
     958:	b1 09       	sbc	r27, r1
     95a:	03 c0       	rjmp	.+6      	; 0x962 <calculateTop+0xf0>

u8 timer1ClockSource;
u8 timer2ClockSource;

u16 calculateTop(u16 *prescaler, u32 frequency, timer timerSelection){
	u32 topValue = 0;
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	dc 01       	movw	r26, r24
			break;
		case TIMER3:
			break;
	}
	return (u16)topValue;
}
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	ff 90       	pop	r15
     968:	ef 90       	pop	r14
     96a:	df 90       	pop	r13
     96c:	cf 90       	pop	r12
     96e:	08 95       	ret

00000970 <pwm_init>:

void pwm_init(u8 dutyCycle, u32 frequency, timer timerSelection, channel channelSelection){
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	00 d0       	rcall	.+0      	; 0x97a <pwm_init+0xa>
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	18 2f       	mov	r17, r24
	u16 prescaler = 0;
     980:	1a 82       	std	Y+2, r1	; 0x02
     982:	19 82       	std	Y+1, r1	; 0x01
	u32 dutyAux = 0;
	switch(timerSelection){
     984:	21 30       	cpi	r18, 0x01	; 1
     986:	21 f0       	breq	.+8      	; 0x990 <pwm_init+0x20>
     988:	22 30       	cpi	r18, 0x02	; 2
     98a:	09 f4       	brne	.+2      	; 0x98e <pwm_init+0x1e>
     98c:	81 c0       	rjmp	.+258    	; 0xa90 <pwm_init+0x120>
     98e:	c3 c0       	rjmp	.+390    	; 0xb16 <pwm_init+0x1a6>
		case TIMER0:
			break;
		case TIMER1:
			/* Calculate TOP register to obtain the desired frequency */
			ICR1 = calculateTop(&prescaler, frequency, timerSelection);
     990:	21 e0       	ldi	r18, 0x01	; 1
     992:	ce 01       	movw	r24, r28
     994:	01 96       	adiw	r24, 0x01	; 1
     996:	6d df       	rcall	.-294    	; 0x872 <calculateTop>
     998:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     99c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			/* Sets the prescaler data to be later used in pwm_start() */
			switch(prescaler){
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	9a 81       	ldd	r25, Y+2	; 0x02
     9a4:	80 34       	cpi	r24, 0x40	; 64
     9a6:	91 05       	cpc	r25, r1
     9a8:	b9 f0       	breq	.+46     	; 0x9d8 <pwm_init+0x68>
     9aa:	30 f4       	brcc	.+12     	; 0x9b8 <pwm_init+0x48>
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	91 05       	cpc	r25, r1
     9b0:	59 f0       	breq	.+22     	; 0x9c8 <pwm_init+0x58>
     9b2:	08 97       	sbiw	r24, 0x08	; 8
     9b4:	69 f0       	breq	.+26     	; 0x9d0 <pwm_init+0x60>
     9b6:	1b c0       	rjmp	.+54     	; 0x9ee <pwm_init+0x7e>
     9b8:	81 15       	cp	r24, r1
     9ba:	21 e0       	ldi	r18, 0x01	; 1
     9bc:	92 07       	cpc	r25, r18
     9be:	81 f0       	breq	.+32     	; 0x9e0 <pwm_init+0x70>
     9c0:	81 15       	cp	r24, r1
     9c2:	94 40       	sbci	r25, 0x04	; 4
     9c4:	89 f0       	breq	.+34     	; 0x9e8 <pwm_init+0x78>
     9c6:	13 c0       	rjmp	.+38     	; 0x9ee <pwm_init+0x7e>
				case 1:
					timer1ClockSource = 0x01;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <timer1ClockSource>
					break;
     9ce:	0f c0       	rjmp	.+30     	; 0x9ee <pwm_init+0x7e>
				case 8:
					timer1ClockSource = 0x02;
     9d0:	82 e0       	ldi	r24, 0x02	; 2
     9d2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <timer1ClockSource>
					break;
     9d6:	0b c0       	rjmp	.+22     	; 0x9ee <pwm_init+0x7e>
				case 64:
					timer1ClockSource = 0x03;
     9d8:	83 e0       	ldi	r24, 0x03	; 3
     9da:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <timer1ClockSource>
					break;
     9de:	07 c0       	rjmp	.+14     	; 0x9ee <pwm_init+0x7e>
				case 256:
					timer1ClockSource = 0x04;
     9e0:	84 e0       	ldi	r24, 0x04	; 4
     9e2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <timer1ClockSource>
					break;
     9e6:	03 c0       	rjmp	.+6      	; 0x9ee <pwm_init+0x7e>
				case 1024:
					timer1ClockSource = 0x05;
     9e8:	85 e0       	ldi	r24, 0x05	; 5
     9ea:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <timer1ClockSource>
					break;
			}
			/* FAST PWM mode with ICR1 as TOP */
			clearBit(&TCCR1A, WGM10);
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	80 e8       	ldi	r24, 0x80	; 128
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	45 de       	rcall	.-886    	; 0x680 <clearBit>
			setBit(&TCCR1A, WGM11);
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	80 e8       	ldi	r24, 0x80	; 128
     9fa:	90 e0       	ldi	r25, 0x00	; 0
			setBit(&TCCR1B, WGM13);
     9fc:	35 de       	rcall	.-918    	; 0x668 <setBit>
     9fe:	64 e0       	ldi	r22, 0x04	; 4
     a00:	81 e8       	ldi	r24, 0x81	; 129
			setBit(&TCCR1B, WGM12);
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	31 de       	rcall	.-926    	; 0x668 <setBit>
     a06:	63 e0       	ldi	r22, 0x03	; 3
     a08:	81 e8       	ldi	r24, 0x81	; 129
     a0a:	90 e0       	ldi	r25, 0x00	; 0
			/* Clear OC1A/B on compare match and set it on BOTTOM */
			switch(channelSelection){
     a0c:	2d de       	rcall	.-934    	; 0x668 <setBit>
     a0e:	00 23       	and	r16, r16
     a10:	19 f0       	breq	.+6      	; 0xa18 <pwm_init+0xa8>
     a12:	01 30       	cpi	r16, 0x01	; 1
				case CHANNEL_A:
					gpio_init(PD, 5, OUTPUT, NO_PULL);
     a14:	f9 f0       	breq	.+62     	; 0xa54 <pwm_init+0xe4>
     a16:	7f c0       	rjmp	.+254    	; 0xb16 <pwm_init+0x1a6>
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	65 e0       	ldi	r22, 0x05	; 5
					setBit(&TCCR1A, COM1A1);
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	9e dd       	rcall	.-1220   	; 0x55e <gpio_init>
     a22:	67 e0       	ldi	r22, 0x07	; 7
     a24:	80 e8       	ldi	r24, 0x80	; 128
					clearBit(&TCCR1A, COM1A0);
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	1f de       	rcall	.-962    	; 0x668 <setBit>
     a2a:	66 e0       	ldi	r22, 0x06	; 6
     a2c:	80 e8       	ldi	r24, 0x80	; 128
					dutyAux = (u32) dutyCycle * ICR1 / 100;
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	27 de       	rcall	.-946    	; 0x680 <clearBit>
     a32:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
					OCR1A = (u16) dutyAux;
     a36:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a3a:	21 2f       	mov	r18, r17
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	b6 d3       	rcall	.+1900   	; 0x11ac <__umulhisi3>
     a40:	24 e6       	ldi	r18, 0x64	; 100
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	86 d3       	rcall	.+1804   	; 0x1156 <__udivmodsi4>
     a4a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
					break;
				case CHANNEL_B:
					gpio_init(PD, 4, OUTPUT, NO_PULL);
     a4e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     a52:	61 c0       	rjmp	.+194    	; 0xb16 <pwm_init+0x1a6>
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	41 e0       	ldi	r20, 0x01	; 1
					setBit(&TCCR1A, COM1B1);
     a58:	64 e0       	ldi	r22, 0x04	; 4
     a5a:	83 e0       	ldi	r24, 0x03	; 3
     a5c:	80 dd       	rcall	.-1280   	; 0x55e <gpio_init>
     a5e:	65 e0       	ldi	r22, 0x05	; 5
					clearBit(&TCCR1A, COM1B0);
     a60:	80 e8       	ldi	r24, 0x80	; 128
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	01 de       	rcall	.-1022   	; 0x668 <setBit>
     a66:	64 e0       	ldi	r22, 0x04	; 4
					dutyAux = (u32) dutyCycle * ICR1 / 100;
     a68:	80 e8       	ldi	r24, 0x80	; 128
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	09 de       	rcall	.-1006   	; 0x680 <clearBit>
     a6e:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
					OCR1B = (u16) dutyAux;
     a72:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a76:	21 2f       	mov	r18, r17
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	98 d3       	rcall	.+1840   	; 0x11ac <__umulhisi3>
     a7c:	24 e6       	ldi	r18, 0x64	; 100
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	40 e0       	ldi	r20, 0x00	; 0
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	68 d3       	rcall	.+1744   	; 0x1156 <__udivmodsi4>
					break;
     a86:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
					break;
			}
			break;
		case TIMER2:
			TIMSK2 = 0;
			clearBit(&ASSR, AS2);
     a8a:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     a8e:	43 c0       	rjmp	.+134    	; 0xb16 <pwm_init+0x1a6>
     a90:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
			clearBit(&TCCR2B, WGM22);
     a94:	65 e0       	ldi	r22, 0x05	; 5
     a96:	86 eb       	ldi	r24, 0xB6	; 182
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	f2 dd       	rcall	.-1052   	; 0x680 <clearBit>
			setBit(&TCCR2A, WGM21);
     a9c:	63 e0       	ldi	r22, 0x03	; 3
     a9e:	81 eb       	ldi	r24, 0xB1	; 177
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	ee dd       	rcall	.-1060   	; 0x680 <clearBit>
			setBit(&TCCR2A, WGM20);
     aa4:	61 e0       	ldi	r22, 0x01	; 1
     aa6:	80 eb       	ldi	r24, 0xB0	; 176
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	de dd       	rcall	.-1092   	; 0x668 <setBit>
     aac:	60 e0       	ldi	r22, 0x00	; 0
			timer2ClockSource = 0x01;
     aae:	80 eb       	ldi	r24, 0xB0	; 176
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	da dd       	rcall	.-1100   	; 0x668 <setBit>
			switch(channelSelection){
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timer2ClockSource>
     aba:	00 23       	and	r16, r16
				case CHANNEL_A:
					gpio_init(PD, 7, OUTPUT, NO_PULL);
     abc:	19 f0       	breq	.+6      	; 0xac4 <pwm_init+0x154>
     abe:	01 30       	cpi	r16, 0x01	; 1
     ac0:	b1 f0       	breq	.+44     	; 0xaee <pwm_init+0x17e>
     ac2:	29 c0       	rjmp	.+82     	; 0xb16 <pwm_init+0x1a6>
     ac4:	20 e0       	ldi	r18, 0x00	; 0
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2A = (u8) dutyAux;
     ac6:	41 e0       	ldi	r20, 0x01	; 1
     ac8:	67 e0       	ldi	r22, 0x07	; 7
     aca:	83 e0       	ldi	r24, 0x03	; 3
     acc:	48 dd       	rcall	.-1392   	; 0x55e <gpio_init>
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	18 9f       	mul	r17, r24
     ad2:	90 01       	movw	r18, r0
     ad4:	11 24       	eor	r1, r1
     ad6:	36 95       	lsr	r19
     ad8:	27 95       	ror	r18
     ada:	36 95       	lsr	r19
     adc:	27 95       	ror	r18
     ade:	ab e7       	ldi	r26, 0x7B	; 123
     ae0:	b4 e1       	ldi	r27, 0x14	; 20
					break;
     ae2:	64 d3       	rcall	.+1736   	; 0x11ac <__umulhisi3>
				case CHANNEL_B:
					gpio_init(PD, 6, OUTPUT, NO_PULL);
     ae4:	96 95       	lsr	r25
     ae6:	87 95       	ror	r24
     ae8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     aec:	14 c0       	rjmp	.+40     	; 0xb16 <pwm_init+0x1a6>
     aee:	20 e0       	ldi	r18, 0x00	; 0
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2B = (u8) dutyAux;
     af0:	41 e0       	ldi	r20, 0x01	; 1
     af2:	66 e0       	ldi	r22, 0x06	; 6
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	33 dd       	rcall	.-1434   	; 0x55e <gpio_init>
     af8:	8f ef       	ldi	r24, 0xFF	; 255
     afa:	18 9f       	mul	r17, r24
     afc:	90 01       	movw	r18, r0
     afe:	11 24       	eor	r1, r1
     b00:	36 95       	lsr	r19
     b02:	27 95       	ror	r18
     b04:	36 95       	lsr	r19
     b06:	27 95       	ror	r18
     b08:	ab e7       	ldi	r26, 0x7B	; 123
     b0a:	b4 e1       	ldi	r27, 0x14	; 20
     b0c:	4f d3       	rcall	.+1694   	; 0x11ac <__umulhisi3>
     b0e:	96 95       	lsr	r25
			}
			break;
		case TIMER3:
			break;
	}
}
     b10:	87 95       	ror	r24
     b12:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	08 95       	ret

00000b24 <pwm_setDutyCycle>:

/** Sets a new duty cycle for the selected timer and channel 
*/
void pwm_setDutyCycle(u8 dutyCycle, timer timerSelection, channel channelSelection){
	u32 dutyAux = 0;
	switch(timerSelection){
     b24:	61 30       	cpi	r22, 0x01	; 1
     b26:	19 f0       	breq	.+6      	; 0xb2e <pwm_setDutyCycle+0xa>
     b28:	62 30       	cpi	r22, 0x02	; 2
     b2a:	41 f1       	breq	.+80     	; 0xb7c <pwm_setDutyCycle+0x58>
     b2c:	08 95       	ret
		case TIMER0:
			break;
		case TIMER1:
			switch(channelSelection){
     b2e:	44 23       	and	r20, r20
     b30:	19 f0       	breq	.+6      	; 0xb38 <pwm_setDutyCycle+0x14>
     b32:	41 30       	cpi	r20, 0x01	; 1
     b34:	91 f0       	breq	.+36     	; 0xb5a <pwm_setDutyCycle+0x36>
     b36:	08 95       	ret
				case CHANNEL_A:
					dutyAux = (u32) dutyCycle * ICR1 / 100;
     b38:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     b3c:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
					OCR1A = (u16) dutyAux;
     b40:	28 2f       	mov	r18, r24
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	33 d3       	rcall	.+1638   	; 0x11ac <__umulhisi3>
     b46:	24 e6       	ldi	r18, 0x64	; 100
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	40 e0       	ldi	r20, 0x00	; 0
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	03 d3       	rcall	.+1542   	; 0x1156 <__udivmodsi4>
     b50:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b54:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
					break;
     b58:	08 95       	ret
				case CHANNEL_B:
					dutyAux = (u32) dutyCycle * ICR1 / 100;
     b5a:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     b5e:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
					OCR1B = (u16) dutyAux;
     b62:	28 2f       	mov	r18, r24
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	22 d3       	rcall	.+1604   	; 0x11ac <__umulhisi3>
     b68:	24 e6       	ldi	r18, 0x64	; 100
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	f2 d2       	rcall	.+1508   	; 0x1156 <__udivmodsi4>
     b72:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     b76:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				case NO_CHANNEL:
					break;
			}
			break;
		case TIMER2:
			switch(channelSelection){
     b7a:	08 95       	ret
     b7c:	44 23       	and	r20, r20
     b7e:	19 f0       	breq	.+6      	; 0xb86 <pwm_setDutyCycle+0x62>
     b80:	41 30       	cpi	r20, 0x01	; 1
     b82:	89 f0       	breq	.+34     	; 0xba6 <pwm_setDutyCycle+0x82>
				case CHANNEL_A:
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2A = (u8) dutyAux;
     b84:	08 95       	ret
     b86:	9f ef       	ldi	r25, 0xFF	; 255
     b88:	89 9f       	mul	r24, r25
     b8a:	90 01       	movw	r18, r0
     b8c:	11 24       	eor	r1, r1
     b8e:	36 95       	lsr	r19
     b90:	27 95       	ror	r18
     b92:	36 95       	lsr	r19
     b94:	27 95       	ror	r18
     b96:	ab e7       	ldi	r26, 0x7B	; 123
     b98:	b4 e1       	ldi	r27, 0x14	; 20
     b9a:	08 d3       	rcall	.+1552   	; 0x11ac <__umulhisi3>
     b9c:	96 95       	lsr	r25
     b9e:	87 95       	ror	r24
     ba0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
					break;
				case CHANNEL_B:
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2B = (u8) dutyAux;
     ba4:	08 95       	ret
     ba6:	9f ef       	ldi	r25, 0xFF	; 255
     ba8:	89 9f       	mul	r24, r25
     baa:	90 01       	movw	r18, r0
     bac:	11 24       	eor	r1, r1
     bae:	36 95       	lsr	r19
     bb0:	27 95       	ror	r18
     bb2:	36 95       	lsr	r19
     bb4:	27 95       	ror	r18
     bb6:	ab e7       	ldi	r26, 0x7B	; 123
     bb8:	b4 e1       	ldi	r27, 0x14	; 20
     bba:	f8 d2       	rcall	.+1520   	; 0x11ac <__umulhisi3>
     bbc:	96 95       	lsr	r25
     bbe:	87 95       	ror	r24
     bc0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     bc4:	08 95       	ret

00000bc6 <pwm_start>:
}

/** Starts the selected timer
*/
void pwm_start(timer timerSelection){
	switch(timerSelection){
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	19 f0       	breq	.+6      	; 0xbd0 <pwm_start+0xa>
     bca:	82 30       	cpi	r24, 0x02	; 2
     bcc:	d1 f0       	breq	.+52     	; 0xc02 <pwm_start+0x3c>
     bce:	08 95       	ret
		case TIMER0:
			break;
		case TIMER1:
			updateBit(&TCCR1B, CS12, (timer1ClockSource >> 2) & 1);
     bd0:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <timer1ClockSource>
     bd4:	42 fb       	bst	r20, 2
     bd6:	44 27       	eor	r20, r20
     bd8:	40 f9       	bld	r20, 0
     bda:	62 e0       	ldi	r22, 0x02	; 2
     bdc:	81 e8       	ldi	r24, 0x81	; 129
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	68 dd       	rcall	.-1328   	; 0x6b2 <updateBit>
			updateBit(&TCCR1B, CS11, (timer1ClockSource >> 1) & 1);
     be2:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <timer1ClockSource>
     be6:	46 95       	lsr	r20
     be8:	41 70       	andi	r20, 0x01	; 1
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	81 e8       	ldi	r24, 0x81	; 129
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	60 dd       	rcall	.-1344   	; 0x6b2 <updateBit>
			updateBit(&TCCR1B, CS10, timer1ClockSource & 1);
     bf2:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <timer1ClockSource>
     bf6:	41 70       	andi	r20, 0x01	; 1
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	81 e8       	ldi	r24, 0x81	; 129
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	59 cd       	rjmp	.-1358   	; 0x6b2 <updateBit>
			break;
     c00:	08 95       	ret
		case TIMER2:
			updateBit(&TCCR2B, CS22, (timer2ClockSource >> 2) & 1);
     c02:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <timer2ClockSource>
     c06:	42 fb       	bst	r20, 2
     c08:	44 27       	eor	r20, r20
     c0a:	40 f9       	bld	r20, 0
     c0c:	62 e0       	ldi	r22, 0x02	; 2
     c0e:	81 eb       	ldi	r24, 0xB1	; 177
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	4f dd       	rcall	.-1378   	; 0x6b2 <updateBit>
			updateBit(&TCCR2B, CS21, (timer2ClockSource >> 1) & 1);
     c14:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <timer2ClockSource>
     c18:	46 95       	lsr	r20
     c1a:	41 70       	andi	r20, 0x01	; 1
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	81 eb       	ldi	r24, 0xB1	; 177
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	47 dd       	rcall	.-1394   	; 0x6b2 <updateBit>
			updateBit(&TCCR2B, CS20, timer2ClockSource & 1);
     c24:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <timer2ClockSource>
     c28:	41 70       	andi	r20, 0x01	; 1
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	81 eb       	ldi	r24, 0xB1	; 177
     c2e:	90 e0       	ldi	r25, 0x00	; 0
			setBit(&TCCR2A, COM2A1);
     c30:	40 dd       	rcall	.-1408   	; 0x6b2 <updateBit>
     c32:	67 e0       	ldi	r22, 0x07	; 7
     c34:	80 eb       	ldi	r24, 0xB0	; 176
			clearBit(&TCCR2A, COM2A0);
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	17 dd       	rcall	.-1490   	; 0x668 <setBit>
     c3a:	66 e0       	ldi	r22, 0x06	; 6
			setBit(&TCCR2A, COM2B1);
     c3c:	80 eb       	ldi	r24, 0xB0	; 176
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	1f dd       	rcall	.-1474   	; 0x680 <clearBit>
     c42:	65 e0       	ldi	r22, 0x05	; 5
     c44:	80 eb       	ldi	r24, 0xB0	; 176
			clearBit(&TCCR2A, COM2B0);
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0f dd       	rcall	.-1506   	; 0x668 <setBit>
     c4a:	64 e0       	ldi	r22, 0x04	; 4
     c4c:	80 eb       	ldi	r24, 0xB0	; 176
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	17 cd       	rjmp	.-1490   	; 0x680 <clearBit>
     c52:	08 95       	ret

00000c54 <pwm_stop>:
	}
}
/** Stops the selected timer
*/
void pwm_stop(timer timerSelection){
	switch(timerSelection){
     c54:	81 30       	cpi	r24, 0x01	; 1
     c56:	19 f0       	breq	.+6      	; 0xc5e <pwm_stop+0xa>
     c58:	82 30       	cpi	r24, 0x02	; 2
     c5a:	71 f0       	breq	.+28     	; 0xc78 <pwm_stop+0x24>
     c5c:	08 95       	ret
		case TIMER0:
			break;
		case TIMER1:
			clearBit(&TCCR1B, CS12);
     c5e:	62 e0       	ldi	r22, 0x02	; 2
     c60:	81 e8       	ldi	r24, 0x81	; 129
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0d dd       	rcall	.-1510   	; 0x680 <clearBit>
			clearBit(&TCCR1B, CS11);
     c66:	61 e0       	ldi	r22, 0x01	; 1
     c68:	81 e8       	ldi	r24, 0x81	; 129
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	09 dd       	rcall	.-1518   	; 0x680 <clearBit>
			clearBit(&TCCR1B, CS10);
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	81 e8       	ldi	r24, 0x81	; 129
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	05 cd       	rjmp	.-1526   	; 0x680 <clearBit>
			break;
		case TIMER2:
			clearBit(&TCCR2B, CS22);
     c76:	08 95       	ret
     c78:	62 e0       	ldi	r22, 0x02	; 2
     c7a:	81 eb       	ldi	r24, 0xB1	; 177
			clearBit(&TCCR2B, CS21);
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	00 dd       	rcall	.-1536   	; 0x680 <clearBit>
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	81 eb       	ldi	r24, 0xB1	; 177
			clearBit(&TCCR2B, CS20);
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	fc dc       	rcall	.-1544   	; 0x680 <clearBit>
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	81 eb       	ldi	r24, 0xB1	; 177
     c8c:	90 e0       	ldi	r25, 0x00	; 0
			TCCR2A &= 0x0F;
     c8e:	f8 dc       	rcall	.-1552   	; 0x680 <clearBit>
     c90:	e0 eb       	ldi	r30, 0xB0	; 176
     c92:	f0 e0       	ldi	r31, 0x00	; 0
			gpio_out_reset(PD, 7);
     c94:	80 81       	ld	r24, Z
     c96:	8f 70       	andi	r24, 0x0F	; 15
     c98:	80 83       	st	Z, r24
     c9a:	67 e0       	ldi	r22, 0x07	; 7
			gpio_out_reset(PD, 6);
     c9c:	83 e0       	ldi	r24, 0x03	; 3
     c9e:	b4 dc       	rcall	.-1688   	; 0x608 <gpio_out_reset>
     ca0:	66 e0       	ldi	r22, 0x06	; 6
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	b1 cc       	rjmp	.-1694   	; 0x608 <gpio_out_reset>
     ca6:	08 95       	ret

00000ca8 <__vector_34>:
	
}

void uart_stop(bool uartTx, bool uartRx){
	clearBit(&UCSR0B, RXEN0);
	clearBit(&UCSR0B, TXEN0);
     ca8:	1f 92       	push	r1
     caa:	0f 92       	push	r0
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	0f 92       	push	r0
     cb0:	11 24       	eor	r1, r1
     cb2:	0b b6       	in	r0, 0x3b	; 59
     cb4:	0f 92       	push	r0
     cb6:	2f 93       	push	r18
     cb8:	3f 93       	push	r19
     cba:	4f 93       	push	r20
     cbc:	5f 93       	push	r21
     cbe:	6f 93       	push	r22
     cc0:	7f 93       	push	r23
     cc2:	8f 93       	push	r24
     cc4:	9f 93       	push	r25
     cc6:	af 93       	push	r26
     cc8:	bf 93       	push	r27
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
     cce:	8a e7       	ldi	r24, 0x7A	; 122
     cd0:	91 ee       	ldi	r25, 0xE1	; 225
     cd2:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     cd6:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
     cda:	65 e0       	ldi	r22, 0x05	; 5
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	ac dc       	rcall	.-1704   	; 0x638 <gpio_out_toggle>
     ce0:	ff 91       	pop	r31
     ce2:	ef 91       	pop	r30
     ce4:	bf 91       	pop	r27
     ce6:	af 91       	pop	r26
     ce8:	9f 91       	pop	r25
     cea:	8f 91       	pop	r24
     cec:	7f 91       	pop	r23
     cee:	6f 91       	pop	r22
     cf0:	5f 91       	pop	r21
     cf2:	4f 91       	pop	r20
     cf4:	3f 91       	pop	r19
     cf6:	2f 91       	pop	r18
     cf8:	0f 90       	pop	r0
     cfa:	0b be       	out	0x3b, r0	; 59
     cfc:	0f 90       	pop	r0
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	0f 90       	pop	r0
     d02:	1f 90       	pop	r1
     d04:	18 95       	reti

00000d06 <__vector_20>:
     d06:	1f 92       	push	r1
     d08:	0f 92       	push	r0
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	0f 92       	push	r0
     d0e:	11 24       	eor	r1, r1
     d10:	0b b6       	in	r0, 0x3b	; 59
     d12:	0f 92       	push	r0
     d14:	2f 93       	push	r18
     d16:	3f 93       	push	r19
     d18:	4f 93       	push	r20
     d1a:	5f 93       	push	r21
     d1c:	6f 93       	push	r22
     d1e:	7f 93       	push	r23
     d20:	8f 93       	push	r24
     d22:	9f 93       	push	r25
     d24:	af 93       	push	r26
     d26:	bf 93       	push	r27
     d28:	ef 93       	push	r30
     d2a:	ff 93       	push	r31
     d2c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     d30:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <aux>
     d34:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <aux>
     d38:	8e 2f       	mov	r24, r30
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	81 33       	cpi	r24, 0x31	; 49
     d3e:	91 05       	cpc	r25, r1
     d40:	08 f0       	brcs	.+2      	; 0xd44 <__vector_20+0x3e>
     d42:	a2 c1       	rjmp	.+836    	; 0x1088 <__vector_20+0x382>
     d44:	fc 01       	movw	r30, r24
     d46:	ea 5b       	subi	r30, 0xBA	; 186
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	27 c2       	rjmp	.+1102   	; 0x119a <__tablejump2__>
     d4c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <systemEnable>
     d50:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <servoEnable>
     d54:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dcEnable>
     d58:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <dcSpeedLeft>
     d5c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
     d60:	07 dd       	rcall	.-1522   	; 0x770 <motor_stop>
     d62:	e3 db       	rcall	.-2106   	; 0x52a <encoder_reset>
     d64:	d9 db       	rcall	.-2126   	; 0x518 <encoder_stop>
     d66:	62 e0       	ldi	r22, 0x02	; 2
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	4e dc       	rcall	.-1892   	; 0x608 <gpio_out_reset>
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	72 df       	rcall	.-284    	; 0xc54 <pwm_stop>
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	31 dc       	rcall	.-1950   	; 0x5d8 <gpio_out_set>
     d76:	61 e0       	ldi	r22, 0x01	; 1
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	46 dc       	rcall	.-1908   	; 0x608 <gpio_out_reset>
     d7c:	62 e0       	ldi	r22, 0x02	; 2
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	43 dc       	rcall	.-1914   	; 0x608 <gpio_out_reset>
     d82:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <cannonState>
     d86:	65 e0       	ldi	r22, 0x05	; 5
     d88:	83 e0       	ldi	r24, 0x03	; 3
     d8a:	3e dc       	rcall	.-1924   	; 0x608 <gpio_out_reset>
     d8c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     d90:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
     d94:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
     d98:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     d9c:	75 c1       	rjmp	.+746    	; 0x1088 <__vector_20+0x382>
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <systemEnable>
     da4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dcEnable>
     da8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <cannonState>
     dac:	a2 dc       	rcall	.-1724   	; 0x6f2 <motor_init>
     dae:	74 db       	rcall	.-2328   	; 0x498 <encoder_init>
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	09 df       	rcall	.-494    	; 0xbc6 <pwm_start>
     db4:	62 e0       	ldi	r22, 0x02	; 2
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	0f dc       	rcall	.-2018   	; 0x5d8 <gpio_out_set>
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	24 dc       	rcall	.-1976   	; 0x608 <gpio_out_reset>
     dc0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <systemMode>
     dc4:	81 11       	cpse	r24, r1
     dc6:	07 c0       	rjmp	.+14     	; 0xdd6 <__vector_20+0xd0>
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	05 dc       	rcall	.-2038   	; 0x5d8 <gpio_out_set>
     dce:	62 e0       	ldi	r22, 0x02	; 2
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	1a dc       	rcall	.-1996   	; 0x608 <gpio_out_reset>
     dd4:	59 c1       	rjmp	.+690    	; 0x1088 <__vector_20+0x382>
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	16 dc       	rcall	.-2004   	; 0x608 <gpio_out_reset>
     ddc:	62 e0       	ldi	r22, 0x02	; 2
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	fb db       	rcall	.-2058   	; 0x5d8 <gpio_out_set>
     de2:	52 c1       	rjmp	.+676    	; 0x1088 <__vector_20+0x382>
     de4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <systemMode>
     de8:	61 e0       	ldi	r22, 0x01	; 1
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	f5 db       	rcall	.-2070   	; 0x5d8 <gpio_out_set>
     dee:	62 e0       	ldi	r22, 0x02	; 2
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	0a dc       	rcall	.-2028   	; 0x608 <gpio_out_reset>
     df4:	49 c1       	rjmp	.+658    	; 0x1088 <__vector_20+0x382>
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <systemMode>
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	04 dc       	rcall	.-2040   	; 0x608 <gpio_out_reset>
     e00:	62 e0       	ldi	r22, 0x02	; 2
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	e9 db       	rcall	.-2094   	; 0x5d8 <gpio_out_set>
     e06:	40 c1       	rjmp	.+640    	; 0x1088 <__vector_20+0x382>
     e08:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <servoEnable>
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	22 df       	rcall	.-444    	; 0xc54 <pwm_stop>
     e10:	3b c1       	rjmp	.+630    	; 0x1088 <__vector_20+0x382>
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <servoEnable>
     e18:	d6 de       	rcall	.-596    	; 0xbc6 <pwm_start>
     e1a:	36 c1       	rjmp	.+620    	; 0x1088 <__vector_20+0x382>
     e1c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <servoEnable>
     e20:	88 23       	and	r24, r24
     e22:	09 f4       	brne	.+2      	; 0xe26 <__vector_20+0x120>
     e24:	31 c1       	rjmp	.+610    	; 0x1088 <__vector_20+0x382>
     e26:	41 e0       	ldi	r20, 0x01	; 1
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	83 e0       	ldi	r24, 0x03	; 3
     e2c:	7b de       	rcall	.-778    	; 0xb24 <pwm_setDutyCycle>
     e2e:	2c c1       	rjmp	.+600    	; 0x1088 <__vector_20+0x382>
     e30:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <servoEnable>
     e34:	88 23       	and	r24, r24
     e36:	09 f4       	brne	.+2      	; 0xe3a <__vector_20+0x134>
     e38:	27 c1       	rjmp	.+590    	; 0x1088 <__vector_20+0x382>
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	61 e0       	ldi	r22, 0x01	; 1
     e3e:	87 e0       	ldi	r24, 0x07	; 7
     e40:	71 de       	rcall	.-798    	; 0xb24 <pwm_setDutyCycle>
     e42:	22 c1       	rjmp	.+580    	; 0x1088 <__vector_20+0x382>
     e44:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <servoEnable>
     e48:	88 23       	and	r24, r24
     e4a:	09 f4       	brne	.+2      	; 0xe4e <__vector_20+0x148>
     e4c:	1d c1       	rjmp	.+570    	; 0x1088 <__vector_20+0x382>
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	8b e0       	ldi	r24, 0x0B	; 11
     e54:	67 de       	rcall	.-818    	; 0xb24 <pwm_setDutyCycle>
     e56:	18 c1       	rjmp	.+560    	; 0x1088 <__vector_20+0x382>
     e58:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dcEnable>
     e5c:	89 dc       	rcall	.-1774   	; 0x770 <motor_stop>
     e5e:	14 c1       	rjmp	.+552    	; 0x1088 <__vector_20+0x382>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dcEnable>
     e66:	6c dc       	rcall	.-1832   	; 0x740 <motor_start>
     e68:	88 e2       	ldi	r24, 0x28	; 40
     e6a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     e6e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     e72:	0a c1       	rjmp	.+532    	; 0x1088 <__vector_20+0x382>
     e74:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     e78:	88 23       	and	r24, r24
     e7a:	09 f4       	brne	.+2      	; 0xe7e <__vector_20+0x178>
     e7c:	05 c1       	rjmp	.+522    	; 0x1088 <__vector_20+0x382>
     e7e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <dcSpeedLeft>
     e82:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	82 0f       	add	r24, r18
     e8a:	91 1d       	adc	r25, r1
     e8c:	95 95       	asr	r25
     e8e:	87 95       	ror	r24
     e90:	85 50       	subi	r24, 0x05	; 5
     e92:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     e96:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <dcSpeedLeft>
     e9a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	82 0f       	add	r24, r18
     ea2:	91 1d       	adc	r25, r1
     ea4:	95 95       	asr	r25
     ea6:	87 95       	ror	r24
     ea8:	8b 5f       	subi	r24, 0xFB	; 251
     eaa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     eae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dcSpeedLeft>
     eb2:	89 32       	cpi	r24, 0x29	; 41
     eb4:	30 f4       	brcc	.+12     	; 0xec2 <__vector_20+0x1bc>
     eb6:	88 e2       	ldi	r24, 0x28	; 40
     eb8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     ebc:	8d e2       	ldi	r24, 0x2D	; 45
     ebe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     ec2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     ec6:	84 36       	cpi	r24, 0x64	; 100
     ec8:	30 f0       	brcs	.+12     	; 0xed6 <__vector_20+0x1d0>
     eca:	84 e6       	ldi	r24, 0x64	; 100
     ecc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     ed0:	8f e5       	ldi	r24, 0x5F	; 95
     ed2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     ed6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     eda:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <dcSpeedLeft>
     ede:	44 e0       	ldi	r20, 0x04	; 4
     ee0:	84 e0       	ldi	r24, 0x04	; 4
     ee2:	91 dc       	rcall	.-1758   	; 0x806 <motor_individualDirSpeed>
     ee4:	d1 c0       	rjmp	.+418    	; 0x1088 <__vector_20+0x382>
     ee6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     eea:	88 23       	and	r24, r24
     eec:	09 f4       	brne	.+2      	; 0xef0 <__vector_20+0x1ea>
     eee:	cc c0       	rjmp	.+408    	; 0x1088 <__vector_20+0x382>
     ef0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <dcSpeedLeft>
     ef4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	82 0f       	add	r24, r18
     efc:	91 1d       	adc	r25, r1
     efe:	95 95       	asr	r25
     f00:	87 95       	ror	r24
     f02:	8b 5f       	subi	r24, 0xFB	; 251
     f04:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     f08:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <dcSpeedLeft>
     f0c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	82 0f       	add	r24, r18
     f14:	91 1d       	adc	r25, r1
     f16:	95 95       	asr	r25
     f18:	87 95       	ror	r24
     f1a:	85 50       	subi	r24, 0x05	; 5
     f1c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     f20:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     f24:	89 32       	cpi	r24, 0x29	; 41
     f26:	30 f4       	brcc	.+12     	; 0xf34 <__vector_20+0x22e>
     f28:	88 e2       	ldi	r24, 0x28	; 40
     f2a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     f2e:	8d e2       	ldi	r24, 0x2D	; 45
     f30:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     f34:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dcSpeedLeft>
     f38:	84 36       	cpi	r24, 0x64	; 100
     f3a:	30 f0       	brcs	.+12     	; 0xf48 <__vector_20+0x242>
     f3c:	84 e6       	ldi	r24, 0x64	; 100
     f3e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     f42:	8f e5       	ldi	r24, 0x5F	; 95
     f44:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     f48:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     f4c:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <dcSpeedLeft>
     f50:	44 e0       	ldi	r20, 0x04	; 4
     f52:	84 e0       	ldi	r24, 0x04	; 4
     f54:	58 dc       	rcall	.-1872   	; 0x806 <motor_individualDirSpeed>
     f56:	98 c0       	rjmp	.+304    	; 0x1088 <__vector_20+0x382>
     f58:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     f5c:	88 23       	and	r24, r24
     f5e:	09 f4       	brne	.+2      	; 0xf62 <__vector_20+0x25c>
     f60:	93 c0       	rjmp	.+294    	; 0x1088 <__vector_20+0x382>
     f62:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dcSpeedLeft>
     f66:	84 36       	cpi	r24, 0x64	; 100
     f68:	08 f0       	brcs	.+2      	; 0xf6c <__vector_20+0x266>
     f6a:	8e c0       	rjmp	.+284    	; 0x1088 <__vector_20+0x382>
     f6c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     f70:	84 36       	cpi	r24, 0x64	; 100
     f72:	08 f0       	brcs	.+2      	; 0xf76 <__vector_20+0x270>
     f74:	89 c0       	rjmp	.+274    	; 0x1088 <__vector_20+0x382>
     f76:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dcSpeedLeft>
     f7a:	86 5f       	subi	r24, 0xF6	; 246
     f7c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     f80:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     f84:	86 5f       	subi	r24, 0xF6	; 246
     f86:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     f8a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dcSpeedLeft>
     f8e:	30 dc       	rcall	.-1952   	; 0x7f0 <motor_speed>
     f90:	7b c0       	rjmp	.+246    	; 0x1088 <__vector_20+0x382>
     f92:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     f96:	88 23       	and	r24, r24
     f98:	09 f4       	brne	.+2      	; 0xf9c <__vector_20+0x296>
     f9a:	76 c0       	rjmp	.+236    	; 0x1088 <__vector_20+0x382>
     f9c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dcSpeedLeft>
     fa0:	89 32       	cpi	r24, 0x29	; 41
     fa2:	08 f4       	brcc	.+2      	; 0xfa6 <__vector_20+0x2a0>
     fa4:	71 c0       	rjmp	.+226    	; 0x1088 <__vector_20+0x382>
     fa6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     faa:	89 32       	cpi	r24, 0x29	; 41
     fac:	08 f4       	brcc	.+2      	; 0xfb0 <__vector_20+0x2aa>
     fae:	6c c0       	rjmp	.+216    	; 0x1088 <__vector_20+0x382>
     fb0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dcSpeedLeft>
     fb4:	8a 50       	subi	r24, 0x0A	; 10
     fb6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     fba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     fbe:	8a 50       	subi	r24, 0x0A	; 10
     fc0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     fc4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dcSpeedLeft>
     fc8:	13 dc       	rcall	.-2010   	; 0x7f0 <motor_speed>
     fca:	5e c0       	rjmp	.+188    	; 0x1088 <__vector_20+0x382>
     fcc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     fd0:	88 23       	and	r24, r24
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <__vector_20+0x2d0>
     fd4:	59 c0       	rjmp	.+178    	; 0x1088 <__vector_20+0x382>
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	cf db       	rcall	.-2146   	; 0x778 <motor_direction>
     fda:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <dcSpeedLeft>
     fde:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	82 0f       	add	r24, r18
     fe6:	91 1d       	adc	r25, r1
     fe8:	95 95       	asr	r25
     fea:	87 95       	ror	r24
     fec:	01 dc       	rcall	.-2046   	; 0x7f0 <motor_speed>
     fee:	4c c0       	rjmp	.+152    	; 0x1088 <__vector_20+0x382>
     ff0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     ff4:	88 23       	and	r24, r24
     ff6:	09 f4       	brne	.+2      	; 0xffa <__vector_20+0x2f4>
     ff8:	47 c0       	rjmp	.+142    	; 0x1088 <__vector_20+0x382>
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	bd db       	rcall	.-2182   	; 0x778 <motor_direction>
     ffe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <dcSpeedLeft>
    1002:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	82 0f       	add	r24, r18
    100a:	91 1d       	adc	r25, r1
    100c:	95 95       	asr	r25
    100e:	87 95       	ror	r24
    1010:	ef db       	rcall	.-2082   	; 0x7f0 <motor_speed>
    1012:	3a c0       	rjmp	.+116    	; 0x1088 <__vector_20+0x382>
    1014:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
    1018:	88 23       	and	r24, r24
    101a:	b1 f1       	breq	.+108    	; 0x1088 <__vector_20+0x382>
    101c:	86 da       	rcall	.-2804   	; 0x52a <encoder_reset>
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	ab db       	rcall	.-2218   	; 0x778 <motor_direction>
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <rotatingFlag>
    1028:	2f c0       	rjmp	.+94     	; 0x1088 <__vector_20+0x382>
    102a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
    102e:	88 23       	and	r24, r24
    1030:	59 f1       	breq	.+86     	; 0x1088 <__vector_20+0x382>
    1032:	7b da       	rcall	.-2826   	; 0x52a <encoder_reset>
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	a0 db       	rcall	.-2240   	; 0x778 <motor_direction>
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <rotatingFlag>
    103e:	24 c0       	rjmp	.+72     	; 0x1088 <__vector_20+0x382>
    1040:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <systemEnable>
    1044:	88 23       	and	r24, r24
    1046:	01 f1       	breq	.+64     	; 0x1088 <__vector_20+0x382>
    1048:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <cannonState>
    104c:	81 11       	cpse	r24, r1
    104e:	0f c0       	rjmp	.+30     	; 0x106e <__vector_20+0x368>
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <cannonState>
    1056:	2a e7       	ldi	r18, 0x7A	; 122
    1058:	31 ee       	ldi	r19, 0xE1	; 225
    105a:	30 93 95 00 	sts	0x0095, r19	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    105e:	20 93 94 00 	sts	0x0094, r18	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    1062:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1066:	84 e0       	ldi	r24, 0x04	; 4
    1068:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    106c:	0d c0       	rjmp	.+26     	; 0x1088 <__vector_20+0x382>
    106e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <cannonState>
    1072:	65 e0       	ldi	r22, 0x05	; 5
    1074:	83 e0       	ldi	r24, 0x03	; 3
    1076:	c8 da       	rcall	.-2672   	; 0x608 <gpio_out_reset>
    1078:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    107c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    1080:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    1084:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1088:	ff 91       	pop	r31
    108a:	ef 91       	pop	r30
    108c:	bf 91       	pop	r27
    108e:	af 91       	pop	r26
    1090:	9f 91       	pop	r25
    1092:	8f 91       	pop	r24
    1094:	7f 91       	pop	r23
    1096:	6f 91       	pop	r22
    1098:	5f 91       	pop	r21
    109a:	4f 91       	pop	r20
    109c:	3f 91       	pop	r19
    109e:	2f 91       	pop	r18
    10a0:	0f 90       	pop	r0
    10a2:	0b be       	out	0x3b, r0	; 59
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	0f 90       	pop	r0
    10aa:	1f 90       	pop	r1
    10ac:	18 95       	reti

000010ae <uart_init>:
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	08 2f       	mov	r16, r24
    10b8:	16 2f       	mov	r17, r22
    10ba:	d4 2f       	mov	r29, r20
    10bc:	c2 2f       	mov	r28, r18
    10be:	61 e0       	ldi	r22, 0x01	; 1
    10c0:	80 ec       	ldi	r24, 0xC0	; 192
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	dd da       	rcall	.-2630   	; 0x680 <clearBit>
    10c6:	62 e0       	ldi	r22, 0x02	; 2
    10c8:	81 ec       	ldi	r24, 0xC1	; 193
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	d9 da       	rcall	.-2638   	; 0x680 <clearBit>
    10ce:	62 e0       	ldi	r22, 0x02	; 2
    10d0:	82 ec       	ldi	r24, 0xC2	; 194
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	c9 da       	rcall	.-2670   	; 0x668 <setBit>
    10d6:	61 e0       	ldi	r22, 0x01	; 1
    10d8:	82 ec       	ldi	r24, 0xC2	; 194
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	c5 da       	rcall	.-2678   	; 0x668 <setBit>
    10de:	67 e0       	ldi	r22, 0x07	; 7
    10e0:	82 ec       	ldi	r24, 0xC2	; 194
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	cd da       	rcall	.-2662   	; 0x680 <clearBit>
    10e6:	40 2f       	mov	r20, r16
    10e8:	66 e0       	ldi	r22, 0x06	; 6
    10ea:	82 ec       	ldi	r24, 0xC2	; 194
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	e1 da       	rcall	.-2622   	; 0x6b2 <updateBit>
    10f0:	65 e0       	ldi	r22, 0x05	; 5
    10f2:	82 ec       	ldi	r24, 0xC2	; 194
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	b8 da       	rcall	.-2704   	; 0x668 <setBit>
    10f8:	41 2f       	mov	r20, r17
    10fa:	64 e0       	ldi	r22, 0x04	; 4
    10fc:	82 ec       	ldi	r24, 0xC2	; 194
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	d8 da       	rcall	.-2640   	; 0x6b2 <updateBit>
    1102:	4d 2f       	mov	r20, r29
    1104:	63 e0       	ldi	r22, 0x03	; 3
    1106:	82 ec       	ldi	r24, 0xC2	; 194
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	d3 da       	rcall	.-2650   	; 0x6b2 <updateBit>
    110c:	2c 2f       	mov	r18, r28
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1114:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1118:	67 e0       	ldi	r22, 0x07	; 7
    111a:	81 ec       	ldi	r24, 0xC1	; 193
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	a4 da       	rcall	.-2744   	; 0x668 <setBit>
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	08 95       	ret

0000112a <uart_start>:
    112a:	cf 93       	push	r28
    112c:	c8 2f       	mov	r28, r24
    112e:	46 2f       	mov	r20, r22
    1130:	64 e0       	ldi	r22, 0x04	; 4
    1132:	81 ec       	ldi	r24, 0xC1	; 193
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	bd da       	rcall	.-2694   	; 0x6b2 <updateBit>
    1138:	4c 2f       	mov	r20, r28
    113a:	63 e0       	ldi	r22, 0x03	; 3
    113c:	81 ec       	ldi	r24, 0xC1	; 193
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	b8 da       	rcall	.-2704   	; 0x6b2 <updateBit>
    1142:	cf 91       	pop	r28
    1144:	08 95       	ret

00001146 <uart_transmit>:
}

void uart_transmit(u8 data){
	while(!(UCSR0A & (1 << UDRE0)));
    1146:	e0 ec       	ldi	r30, 0xC0	; 192
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	90 81       	ld	r25, Z
    114c:	95 ff       	sbrs	r25, 5
    114e:	fd cf       	rjmp	.-6      	; 0x114a <uart_transmit+0x4>
	UDR0 = data;
    1150:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1154:	08 95       	ret

00001156 <__udivmodsi4>:
    1156:	a1 e2       	ldi	r26, 0x21	; 33
    1158:	1a 2e       	mov	r1, r26
    115a:	aa 1b       	sub	r26, r26
    115c:	bb 1b       	sub	r27, r27
    115e:	fd 01       	movw	r30, r26
    1160:	0d c0       	rjmp	.+26     	; 0x117c <__udivmodsi4_ep>

00001162 <__udivmodsi4_loop>:
    1162:	aa 1f       	adc	r26, r26
    1164:	bb 1f       	adc	r27, r27
    1166:	ee 1f       	adc	r30, r30
    1168:	ff 1f       	adc	r31, r31
    116a:	a2 17       	cp	r26, r18
    116c:	b3 07       	cpc	r27, r19
    116e:	e4 07       	cpc	r30, r20
    1170:	f5 07       	cpc	r31, r21
    1172:	20 f0       	brcs	.+8      	; 0x117c <__udivmodsi4_ep>
    1174:	a2 1b       	sub	r26, r18
    1176:	b3 0b       	sbc	r27, r19
    1178:	e4 0b       	sbc	r30, r20
    117a:	f5 0b       	sbc	r31, r21

0000117c <__udivmodsi4_ep>:
    117c:	66 1f       	adc	r22, r22
    117e:	77 1f       	adc	r23, r23
    1180:	88 1f       	adc	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	1a 94       	dec	r1
    1186:	69 f7       	brne	.-38     	; 0x1162 <__udivmodsi4_loop>
    1188:	60 95       	com	r22
    118a:	70 95       	com	r23
    118c:	80 95       	com	r24
    118e:	90 95       	com	r25
    1190:	9b 01       	movw	r18, r22
    1192:	ac 01       	movw	r20, r24
    1194:	bd 01       	movw	r22, r26
    1196:	cf 01       	movw	r24, r30
    1198:	08 95       	ret

0000119a <__tablejump2__>:
    119a:	ee 0f       	add	r30, r30
    119c:	ff 1f       	adc	r31, r31
    119e:	00 24       	eor	r0, r0
    11a0:	00 1c       	adc	r0, r0
    11a2:	0b be       	out	0x3b, r0	; 59
    11a4:	07 90       	elpm	r0, Z+
    11a6:	f6 91       	elpm	r31, Z
    11a8:	e0 2d       	mov	r30, r0
    11aa:	09 94       	ijmp

000011ac <__umulhisi3>:
    11ac:	a2 9f       	mul	r26, r18
    11ae:	b0 01       	movw	r22, r0
    11b0:	b3 9f       	mul	r27, r19
    11b2:	c0 01       	movw	r24, r0
    11b4:	a3 9f       	mul	r26, r19
    11b6:	70 0d       	add	r23, r0
    11b8:	81 1d       	adc	r24, r1
    11ba:	11 24       	eor	r1, r1
    11bc:	91 1d       	adc	r25, r1
    11be:	b2 9f       	mul	r27, r18
    11c0:	70 0d       	add	r23, r0
    11c2:	81 1d       	adc	r24, r1
    11c4:	11 24       	eor	r1, r1
    11c6:	91 1d       	adc	r25, r1
    11c8:	08 95       	ret

000011ca <_exit>:
    11ca:	f8 94       	cli

000011cc <__stop_program>:
    11cc:	ff cf       	rjmp	.-2      	; 0x11cc <__stop_program>
