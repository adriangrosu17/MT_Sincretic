
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000690  00000724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000690  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800108  00800108  0000072c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001769  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bc6  00000000  00000000  00001fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c7  00000000  00000000  00002bab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  00003474  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000744  00000000  00000000  0000367c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000986  00000000  00000000  00003dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004746  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e9       	ldi	r30, 0x90	; 144
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	e3 c2       	rjmp	.+1478   	; 0x68c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:

#include "pwm.h"
#include "adc.h"

int main(void)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	28 97       	sbiw	r28, 0x08	; 8
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
	pwm_init(5, 50, TIMER1, CHANNEL_A);
  dc:	00 e0       	ldi	r16, 0x00	; 0
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	42 e3       	ldi	r20, 0x32	; 50
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	85 e0       	ldi	r24, 0x05	; 5
  ea:	be d1       	rcall	.+892    	; 0x468 <pwm_init>
	pwm_init(12, 50, TIMER1, CHANNEL_B);
  ec:	01 e0       	ldi	r16, 0x01	; 1
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	42 e3       	ldi	r20, 0x32	; 50
  f2:	50 e0       	ldi	r21, 0x00	; 0
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	8c e0       	ldi	r24, 0x0C	; 12
	pwm_start(TIMER1);
  fa:	b6 d1       	rcall	.+876    	; 0x468 <pwm_init>
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	7a d2       	rcall	.+1268   	; 0x5f4 <pwm_start>
	DDRA |= 0x30;
 100:	81 b1       	in	r24, 0x01	; 1
 102:	80 63       	ori	r24, 0x30	; 48
 104:	81 b9       	out	0x01, r24	; 1
	u8 channels[8] = {1, 1, 0, 0, 0, 0, 0, 0};
 106:	88 e0       	ldi	r24, 0x08	; 8
 108:	e0 e0       	ldi	r30, 0x00	; 0
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	de 01       	movw	r26, r28
 10e:	11 96       	adiw	r26, 0x01	; 1
 110:	01 90       	ld	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	8a 95       	dec	r24
	adc_init(_8BIT, ADC_PRESCALER_2, SINGLE_CONVERSION);
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x48>
 118:	40 e0       	ldi	r20, 0x00	; 0
 11a:	61 e0       	ldi	r22, 0x01	; 1
	adc_start(channels);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	34 d0       	rcall	.+104    	; 0x188 <adc_init>
 120:	ce 01       	movw	r24, r28
 122:	01 96       	adiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	7b d0       	rcall	.+246    	; 0x21c <adc_start>
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	83 ed       	ldi	r24, 0xD3	; 211
 12a:	90 e3       	ldi	r25, 0x30	; 48
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x64>
	u8 aux = 0;
    while (1) 
    {
		_delay_ms(2000);
		pwm_setDutyCycle(12, TIMER1, CHANNEL_A);
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x6e>
 136:	00 00       	nop
 138:	40 e0       	ldi	r20, 0x00	; 0
		pwm_setDutyCycle(5, TIMER1, CHANNEL_B);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	8c e0       	ldi	r24, 0x0C	; 12
 13e:	25 d2       	rcall	.+1098   	; 0x58a <pwm_setDutyCycle>
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	61 e0       	ldi	r22, 0x01	; 1
		aux = adc_singleRead(0);
 144:	85 e0       	ldi	r24, 0x05	; 5
 146:	21 d2       	rcall	.+1090   	; 0x58a <pwm_setDutyCycle>
 148:	80 e0       	ldi	r24, 0x00	; 0
		if(aux > 100)
 14a:	9d d0       	rcall	.+314    	; 0x286 <adc_singleRead>
 14c:	85 36       	cpi	r24, 0x65	; 101
			PORTA |= 0x10;
 14e:	10 f0       	brcs	.+4      	; 0x154 <main+0x8c>
 150:	14 9a       	sbi	0x02, 4	; 2
		else
			PORTA &= ~0x10;
 152:	01 c0       	rjmp	.+2      	; 0x156 <main+0x8e>
 154:	14 98       	cbi	0x02, 4	; 2
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	83 ed       	ldi	r24, 0xD3	; 211
 15a:	90 e3       	ldi	r25, 0x30	; 48
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
		_delay_ms(2000);
		pwm_setDutyCycle(5, TIMER1, CHANNEL_A);
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x94>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x9e>
 166:	00 00       	nop
 168:	40 e0       	ldi	r20, 0x00	; 0
		pwm_setDutyCycle(12, TIMER1, CHANNEL_B);
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	85 e0       	ldi	r24, 0x05	; 5
 16e:	0d d2       	rcall	.+1050   	; 0x58a <pwm_setDutyCycle>
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	61 e0       	ldi	r22, 0x01	; 1
		aux = adc_singleRead(1);
 174:	8c e0       	ldi	r24, 0x0C	; 12
 176:	09 d2       	rcall	.+1042   	; 0x58a <pwm_setDutyCycle>
 178:	81 e0       	ldi	r24, 0x01	; 1
		if(aux > 150)
 17a:	85 d0       	rcall	.+266    	; 0x286 <adc_singleRead>
 17c:	87 39       	cpi	r24, 0x97	; 151
			PORTA |= 0x20;
 17e:	10 f0       	brcs	.+4      	; 0x184 <main+0xbc>
 180:	15 9a       	sbi	0x02, 5	; 2
		else
			PORTA &= ~0x20;
 182:	d1 cf       	rjmp	.-94     	; 0x126 <main+0x5e>
 184:	15 98       	cbi	0x02, 5	; 2
 186:	cf cf       	rjmp	.-98     	; 0x126 <main+0x5e>

00000188 <adc_init>:
void adc_stop(u8 *channelsEnabled){
	u8 channel;
	clearBit(&ADCSRA, ADEN);
	for (channel = 0; channel < 8; channel++)
		updateBit(&DIDR0, 1 << channel, ~channelsEnabled[channel]);
}
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	18 2f       	mov	r17, r24
 190:	c6 2f       	mov	r28, r22
 192:	d4 2f       	mov	r29, r20
 194:	67 e0       	ldi	r22, 0x07	; 7
 196:	8c e7       	ldi	r24, 0x7C	; 124
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	bf d0       	rcall	.+382    	; 0x31a <clearBit>
 19c:	66 e0       	ldi	r22, 0x06	; 6
 19e:	8c e7       	ldi	r24, 0x7C	; 124
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	af d0       	rcall	.+350    	; 0x302 <setBit>
 1a4:	41 2f       	mov	r20, r17
 1a6:	65 e0       	ldi	r22, 0x05	; 5
 1a8:	8c e7       	ldi	r24, 0x7C	; 124
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	c3 d0       	rcall	.+390    	; 0x334 <updateBit>
 1ae:	64 e0       	ldi	r22, 0x04	; 4
 1b0:	8c e7       	ldi	r24, 0x7C	; 124
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	b2 d0       	rcall	.+356    	; 0x31a <clearBit>
 1b6:	63 e0       	ldi	r22, 0x03	; 3
 1b8:	8c e7       	ldi	r24, 0x7C	; 124
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	ae d0       	rcall	.+348    	; 0x31a <clearBit>
 1be:	c2 fb       	bst	r28, 2
 1c0:	44 27       	eor	r20, r20
 1c2:	40 f9       	bld	r20, 0
 1c4:	62 e0       	ldi	r22, 0x02	; 2
 1c6:	8a e7       	ldi	r24, 0x7A	; 122
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	b4 d0       	rcall	.+360    	; 0x334 <updateBit>
 1cc:	c1 fb       	bst	r28, 1
 1ce:	44 27       	eor	r20, r20
 1d0:	40 f9       	bld	r20, 0
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	8a e7       	ldi	r24, 0x7A	; 122
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	ad d0       	rcall	.+346    	; 0x334 <updateBit>
 1da:	4c 2f       	mov	r20, r28
 1dc:	41 70       	andi	r20, 0x01	; 1
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	8a e7       	ldi	r24, 0x7A	; 122
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	a7 d0       	rcall	.+334    	; 0x334 <updateBit>
 1e6:	d1 11       	cpse	r29, r1
 1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <adc_init+0x6c>
 1ea:	65 e0       	ldi	r22, 0x05	; 5
 1ec:	8a e7       	ldi	r24, 0x7A	; 122
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	94 d0       	rcall	.+296    	; 0x31a <clearBit>
 1f2:	10 c0       	rjmp	.+32     	; 0x214 <adc_init+0x8c>
 1f4:	65 e0       	ldi	r22, 0x05	; 5
 1f6:	8a e7       	ldi	r24, 0x7A	; 122
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	83 d0       	rcall	.+262    	; 0x302 <setBit>
 1fc:	62 e0       	ldi	r22, 0x02	; 2
 1fe:	8b e7       	ldi	r24, 0x7B	; 123
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	8b d0       	rcall	.+278    	; 0x31a <clearBit>
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	8b e7       	ldi	r24, 0x7B	; 123
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	87 d0       	rcall	.+270    	; 0x31a <clearBit>
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	8b e7       	ldi	r24, 0x7B	; 123
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	83 d0       	rcall	.+262    	; 0x31a <clearBit>
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	08 95       	ret

0000021c <adc_start>:
 21c:	ef 92       	push	r14
 21e:	ff 92       	push	r15
 220:	0f 93       	push	r16
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	d8 2f       	mov	r29, r24
 22a:	c9 2f       	mov	r28, r25
 22c:	67 e0       	ldi	r22, 0x07	; 7
 22e:	8a e7       	ldi	r24, 0x7A	; 122
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	67 d0       	rcall	.+206    	; 0x302 <setBit>
 234:	0d 2f       	mov	r16, r29
 236:	1c 2f       	mov	r17, r28
 238:	c0 e0       	ldi	r28, 0x00	; 0
 23a:	d0 e0       	ldi	r29, 0x00	; 0
 23c:	ee 24       	eor	r14, r14
 23e:	e3 94       	inc	r14
 240:	f1 2c       	mov	r15, r1
 242:	f8 01       	movw	r30, r16
 244:	41 91       	ld	r20, Z+
 246:	8f 01       	movw	r16, r30
 248:	b7 01       	movw	r22, r14
 24a:	0c 2e       	mov	r0, r28
 24c:	02 c0       	rjmp	.+4      	; 0x252 <adc_start+0x36>
 24e:	66 0f       	add	r22, r22
 250:	77 1f       	adc	r23, r23
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <adc_start+0x32>
 256:	8e e7       	ldi	r24, 0x7E	; 126
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	6c d0       	rcall	.+216    	; 0x334 <updateBit>
 25c:	21 96       	adiw	r28, 0x01	; 1
 25e:	c8 30       	cpi	r28, 0x08	; 8
 260:	d1 05       	cpc	r29, r1
 262:	79 f7       	brne	.-34     	; 0x242 <adc_start+0x26>
 264:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 268:	65 e0       	ldi	r22, 0x05	; 5
 26a:	7c d0       	rcall	.+248    	; 0x364 <checkBit>
 26c:	88 23       	and	r24, r24
 26e:	21 f0       	breq	.+8      	; 0x278 <adc_start+0x5c>
 270:	66 e0       	ldi	r22, 0x06	; 6
 272:	8a e7       	ldi	r24, 0x7A	; 122
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	45 d0       	rcall	.+138    	; 0x302 <setBit>
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	08 95       	ret

00000286 <adc_singleRead>:

u16 adc_singleRead(u8 channel){
	u16 readValue = 0;
	u16 temp = 0;
	ADMUX = channel | (ADMUX & 0b11111000);
 286:	ec e7       	ldi	r30, 0x7C	; 124
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	90 81       	ld	r25, Z
 28c:	98 7f       	andi	r25, 0xF8	; 248
 28e:	89 2b       	or	r24, r25
 290:	80 83       	st	Z, r24
	if(!checkBit(ADCSRA, ADATE))
 292:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 296:	65 e0       	ldi	r22, 0x05	; 5
 298:	65 d0       	rcall	.+202    	; 0x364 <checkBit>
 29a:	81 11       	cpse	r24, r1
 29c:	0a c0       	rjmp	.+20     	; 0x2b2 <adc_singleRead+0x2c>
	{
		setBit(&ADCSRA, ADSC);
 29e:	66 e0       	ldi	r22, 0x06	; 6
 2a0:	8a e7       	ldi	r24, 0x7A	; 122
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	2e d0       	rcall	.+92     	; 0x302 <setBit>
		while(!(ADCSRA & (1<<ADIF)));
 2a6:	ea e7       	ldi	r30, 0x7A	; 122
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	84 ff       	sbrs	r24, 4
 2ae:	fd cf       	rjmp	.-6      	; 0x2aa <adc_singleRead+0x24>
 2b0:	12 c0       	rjmp	.+36     	; 0x2d6 <adc_singleRead+0x50>
	}
	else
	{
		setBit(&ADCSRA, ADIF);
 2b2:	64 e0       	ldi	r22, 0x04	; 4
 2b4:	8a e7       	ldi	r24, 0x7A	; 122
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	24 d0       	rcall	.+72     	; 0x302 <setBit>
		while(!(ADCSRA & (1<<ADIF)));
 2ba:	ea e7       	ldi	r30, 0x7A	; 122
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	84 ff       	sbrs	r24, 4
		setBit(&ADCSRA, ADIF);
 2c2:	fd cf       	rjmp	.-6      	; 0x2be <adc_singleRead+0x38>
 2c4:	64 e0       	ldi	r22, 0x04	; 4
 2c6:	8a e7       	ldi	r24, 0x7A	; 122
 2c8:	90 e0       	ldi	r25, 0x00	; 0
		while(!(ADCSRA & (1<<ADIF)));
 2ca:	1b d0       	rcall	.+54     	; 0x302 <setBit>
 2cc:	ea e7       	ldi	r30, 0x7A	; 122
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
		
	}
	switch(checkBit(ADMUX, ADLAR))
 2d2:	84 ff       	sbrs	r24, 4
 2d4:	fd cf       	rjmp	.-6      	; 0x2d0 <adc_singleRead+0x4a>
 2d6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 2da:	65 e0       	ldi	r22, 0x05	; 5
 2dc:	43 d0       	rcall	.+134    	; 0x364 <checkBit>
 2de:	88 23       	and	r24, r24
 2e0:	31 f0       	breq	.+12     	; 0x2ee <adc_singleRead+0x68>
 2e2:	81 30       	cpi	r24, 0x01	; 1
	{
		case 1:
			readValue = ADCH;
 2e4:	59 f4       	brne	.+22     	; 0x2fc <adc_singleRead+0x76>
 2e6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
			break;
 2ea:	90 e0       	ldi	r25, 0x00	; 0
		case 0:
			readValue = ADCL;
 2ec:	08 95       	ret
 2ee:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
			temp = ADCH;
 2f2:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
			readValue |= (temp << 8);
 2f6:	90 e0       	ldi	r25, 0x00	; 0
		break;
 2f8:	92 2b       	or	r25, r18
	for (channel = 0; channel < 8; channel++)
		updateBit(&DIDR0, 1 << channel, ~channelsEnabled[channel]);
}

u16 adc_singleRead(u8 channel){
	u16 readValue = 0;
 2fa:	08 95       	ret
 2fc:	80 e0       	ldi	r24, 0x00	; 0
			temp = ADCH;
			readValue |= (temp << 8);
		break;
	}
	return readValue;
}
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	08 95       	ret

00000302 <setBit>:
void clearBit(volatile u8 *registerName, u8 position){
	*registerName &= ~(1 << position);
}

void toggleBit(volatile u8 *registerName, u8 position){
	*registerName ^= (1 << position);
 302:	fc 01       	movw	r30, r24
 304:	40 81       	ld	r20, Z
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <setBit+0xe>
 30c:	22 0f       	add	r18, r18
 30e:	33 1f       	adc	r19, r19
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <setBit+0xa>
 314:	24 2b       	or	r18, r20
 316:	20 83       	st	Z, r18
 318:	08 95       	ret

0000031a <clearBit>:
 31a:	fc 01       	movw	r30, r24
 31c:	90 81       	ld	r25, Z
 31e:	21 e0       	ldi	r18, 0x01	; 1
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	02 c0       	rjmp	.+4      	; 0x328 <clearBit+0xe>
 324:	22 0f       	add	r18, r18
 326:	33 1f       	adc	r19, r19
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <clearBit+0xa>
 32c:	20 95       	com	r18
 32e:	29 23       	and	r18, r25
 330:	20 83       	st	Z, r18
 332:	08 95       	ret

00000334 <updateBit>:
}

void updateBit(volatile u8 *registerName, u8 position, u8 value){
 334:	fc 01       	movw	r30, r24
 336:	94 2f       	mov	r25, r20
	u8 newValue = value << position;
	newValue |= (*registerName & ~(1 << position));
 338:	20 81       	ld	r18, Z
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	50 e0       	ldi	r21, 0x00	; 0
 33e:	06 2e       	mov	r0, r22
 340:	02 c0       	rjmp	.+4      	; 0x346 <updateBit+0x12>
 342:	44 0f       	add	r20, r20
 344:	55 1f       	adc	r21, r21
 346:	0a 94       	dec	r0
 348:	e2 f7       	brpl	.-8      	; 0x342 <updateBit+0xe>
 34a:	40 95       	com	r20
 34c:	50 95       	com	r21
 34e:	24 23       	and	r18, r20
 350:	49 2f       	mov	r20, r25
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <updateBit+0x26>
 356:	44 0f       	add	r20, r20
 358:	55 1f       	adc	r21, r21
 35a:	6a 95       	dec	r22
 35c:	e2 f7       	brpl	.-8      	; 0x356 <updateBit+0x22>
 35e:	42 2b       	or	r20, r18
	*registerName = newValue;
 360:	40 83       	st	Z, r20
 362:	08 95       	ret

00000364 <checkBit>:
}

bitValue checkBit(u8 registerName, u8 position){
	return (registerName >> position) & 1;
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <checkBit+0x8>
 368:	95 95       	asr	r25
 36a:	87 95       	ror	r24
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <checkBit+0x4>
 370:	81 70       	andi	r24, 0x01	; 1
 372:	08 95       	ret

00000374 <calculateTop>:
#include "math.h"
#include "pwm.h"

u8 timer1ClockSource;

u16 calculateTop(u16 *prescaler, u32 frequency, timer timerSelection){
 374:	cf 92       	push	r12
 376:	df 92       	push	r13
 378:	ef 92       	push	r14
 37a:	ff 92       	push	r15
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	ec 01       	movw	r28, r24
 382:	6a 01       	movw	r12, r20
 384:	7b 01       	movw	r14, r22
	u32 topValue = 0;
	u16 divisor = 0;
	switch(timerSelection){
 386:	21 30       	cpi	r18, 0x01	; 1
 388:	09 f0       	breq	.+2      	; 0x38c <calculateTop+0x18>
 38a:	54 c0       	rjmp	.+168    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		case TIMER0:
			break;
		case TIMER1:
			divisor = 1;
			topValue = S_CLOCK / divisor / frequency - 1;
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	72 e1       	ldi	r23, 0x12	; 18
 390:	8a e7       	ldi	r24, 0x7A	; 122
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	a7 01       	movw	r20, r14
 396:	96 01       	movw	r18, r12
 398:	48 d1       	rcall	.+656    	; 0x62a <__udivmodsi4>
 39a:	da 01       	movw	r26, r20
 39c:	c9 01       	movw	r24, r18
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	a1 09       	sbc	r26, r1
 3a2:	b1 09       	sbc	r27, r1
			if(topValue > 0xFFFF){
 3a4:	00 97       	sbiw	r24, 0x00	; 0
 3a6:	21 e0       	ldi	r18, 0x01	; 1
 3a8:	a2 07       	cpc	r26, r18
 3aa:	b1 05       	cpc	r27, r1
 3ac:	08 f4       	brcc	.+2      	; 0x3b0 <calculateTop+0x3c>
 3ae:	48 c0       	rjmp	.+144    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
				divisor = 8;
				topValue = S_CLOCK / divisor / frequency - 1;
 3b0:	60 e4       	ldi	r22, 0x40	; 64
 3b2:	72 e4       	ldi	r23, 0x42	; 66
 3b4:	8f e0       	ldi	r24, 0x0F	; 15
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	a7 01       	movw	r20, r14
 3ba:	96 01       	movw	r18, r12
 3bc:	36 d1       	rcall	.+620    	; 0x62a <__udivmodsi4>
 3be:	da 01       	movw	r26, r20
 3c0:	c9 01       	movw	r24, r18
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	a1 09       	sbc	r26, r1
 3c6:	b1 09       	sbc	r27, r1
				if(topValue > 0xFFFF){
 3c8:	00 97       	sbiw	r24, 0x00	; 0
 3ca:	21 e0       	ldi	r18, 0x01	; 1
 3cc:	a2 07       	cpc	r26, r18
 3ce:	b1 05       	cpc	r27, r1
 3d0:	d0 f1       	brcs	.+116    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
					divisor = 64;
					topValue = S_CLOCK / divisor / frequency -1;
 3d2:	68 e4       	ldi	r22, 0x48	; 72
 3d4:	78 ee       	ldi	r23, 0xE8	; 232
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	a7 01       	movw	r20, r14
 3dc:	96 01       	movw	r18, r12
 3de:	25 d1       	rcall	.+586    	; 0x62a <__udivmodsi4>
 3e0:	da 01       	movw	r26, r20
 3e2:	c9 01       	movw	r24, r18
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	a1 09       	sbc	r26, r1
 3e8:	b1 09       	sbc	r27, r1
					if(topValue > 0xFFFF){
 3ea:	00 97       	sbiw	r24, 0x00	; 0
 3ec:	21 e0       	ldi	r18, 0x01	; 1
 3ee:	a2 07       	cpc	r26, r18
 3f0:	b1 05       	cpc	r27, r1
 3f2:	60 f1       	brcs	.+88     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
						divisor = 256;
						topValue = S_CLOCK / divisor / frequency - 1;
 3f4:	62 e1       	ldi	r22, 0x12	; 18
 3f6:	7a e7       	ldi	r23, 0x7A	; 122
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	a7 01       	movw	r20, r14
 3fe:	96 01       	movw	r18, r12
 400:	14 d1       	rcall	.+552    	; 0x62a <__udivmodsi4>
 402:	da 01       	movw	r26, r20
 404:	c9 01       	movw	r24, r18
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	a1 09       	sbc	r26, r1
 40a:	b1 09       	sbc	r27, r1
						if(topValue > 0xFFFF){
 40c:	00 97       	sbiw	r24, 0x00	; 0
 40e:	21 e0       	ldi	r18, 0x01	; 1
 410:	a2 07       	cpc	r26, r18
 412:	b1 05       	cpc	r27, r1
 414:	f0 f0       	brcs	.+60     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
							divisor = 1024;
							topValue = S_CLOCK / divisor / frequency - 1;
 416:	64 e8       	ldi	r22, 0x84	; 132
 418:	7e e1       	ldi	r23, 0x1E	; 30
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	a7 01       	movw	r20, r14
 420:	96 01       	movw	r18, r12
 422:	03 d1       	rcall	.+518    	; 0x62a <__udivmodsi4>
 424:	da 01       	movw	r26, r20
 426:	c9 01       	movw	r24, r18
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	a1 09       	sbc	r26, r1
 42c:	b1 09       	sbc	r27, r1
					topValue = S_CLOCK / divisor / frequency -1;
					if(topValue > 0xFFFF){
						divisor = 256;
						topValue = S_CLOCK / divisor / frequency - 1;
						if(topValue > 0xFFFF){
							divisor = 1024;
 42e:	20 e0       	ldi	r18, 0x00	; 0
 430:	34 e0       	ldi	r19, 0x04	; 4
 432:	11 c0       	rjmp	.+34     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>

u8 timer1ClockSource;

u16 calculateTop(u16 *prescaler, u32 frequency, timer timerSelection){
	u32 topValue = 0;
	u16 divisor = 0;
 434:	20 e0       	ldi	r18, 0x00	; 0
 436:	30 e0       	ldi	r19, 0x00	; 0
#include "pwm.h"

u8 timer1ClockSource;

u16 calculateTop(u16 *prescaler, u32 frequency, timer timerSelection){
	u32 topValue = 0;
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	dc 01       	movw	r26, r24
 43e:	0b c0       	rjmp	.+22     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	u16 divisor = 0;
	switch(timerSelection){
		case TIMER0:
			break;
		case TIMER1:
			divisor = 1;
 440:	21 e0       	ldi	r18, 0x01	; 1
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	08 c0       	rjmp	.+16     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			topValue = S_CLOCK / divisor / frequency - 1;
			if(topValue > 0xFFFF){
				divisor = 8;
 446:	28 e0       	ldi	r18, 0x08	; 8
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	05 c0       	rjmp	.+10     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
				topValue = S_CLOCK / divisor / frequency - 1;
				if(topValue > 0xFFFF){
					divisor = 64;
 44c:	20 e4       	ldi	r18, 0x40	; 64
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	02 c0       	rjmp	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
					topValue = S_CLOCK / divisor / frequency -1;
					if(topValue > 0xFFFF){
						divisor = 256;
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	31 e0       	ldi	r19, 0x01	; 1
		case TIMER2:
			break;
		case TIMER3:
			break;
	}
	*prescaler = divisor;
 456:	39 83       	std	Y+1, r19	; 0x01
 458:	28 83       	st	Y, r18
	return topValue;
}
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	ff 90       	pop	r15
 460:	ef 90       	pop	r14
 462:	df 90       	pop	r13
 464:	cf 90       	pop	r12
 466:	08 95       	ret

00000468 <pwm_init>:

void pwm_init(u8 dutyCycle, u32 frequency, timer timerSelection, channel channelSelection){
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	00 d0       	rcall	.+0      	; 0x472 <pwm_init+0xa>
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
	u16 prescaler = 0;
 476:	1a 82       	std	Y+2, r1	; 0x02
 478:	19 82       	std	Y+1, r1	; 0x01
	switch(timerSelection){
 47a:	21 30       	cpi	r18, 0x01	; 1
 47c:	09 f0       	breq	.+2      	; 0x480 <pwm_init+0x18>
 47e:	7e c0       	rjmp	.+252    	; 0x57c <pwm_init+0x114>
 480:	18 2f       	mov	r17, r24
		case TIMER0:
			break;
		case TIMER1:
			/* Calculate TOP register to obtain the desired frequency */
			ICR1 = calculateTop(&prescaler, frequency, timerSelection);
 482:	ce 01       	movw	r24, r28
 484:	01 96       	adiw	r24, 0x01	; 1
 486:	76 df       	rcall	.-276    	; 0x374 <calculateTop>
 488:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 48c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			/* Sets the prescaler data to be later used in pwm_start() */
			switch(prescaler){
 490:	29 81       	ldd	r18, Y+1	; 0x01
 492:	3a 81       	ldd	r19, Y+2	; 0x02
 494:	20 34       	cpi	r18, 0x40	; 64
 496:	31 05       	cpc	r19, r1
 498:	c1 f0       	breq	.+48     	; 0x4ca <pwm_init+0x62>
 49a:	38 f4       	brcc	.+14     	; 0x4aa <pwm_init+0x42>
 49c:	21 30       	cpi	r18, 0x01	; 1
 49e:	31 05       	cpc	r19, r1
 4a0:	61 f0       	breq	.+24     	; 0x4ba <pwm_init+0x52>
 4a2:	28 30       	cpi	r18, 0x08	; 8
 4a4:	31 05       	cpc	r19, r1
 4a6:	69 f0       	breq	.+26     	; 0x4c2 <pwm_init+0x5a>
 4a8:	1b c0       	rjmp	.+54     	; 0x4e0 <pwm_init+0x78>
 4aa:	21 15       	cp	r18, r1
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	38 07       	cpc	r19, r24
 4b0:	81 f0       	breq	.+32     	; 0x4d2 <pwm_init+0x6a>
 4b2:	21 15       	cp	r18, r1
 4b4:	34 40       	sbci	r19, 0x04	; 4
 4b6:	89 f0       	breq	.+34     	; 0x4da <pwm_init+0x72>
 4b8:	13 c0       	rjmp	.+38     	; 0x4e0 <pwm_init+0x78>
				case 1:
					timer1ClockSource = 0x01;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
					break;
 4c0:	0f c0       	rjmp	.+30     	; 0x4e0 <pwm_init+0x78>
				case 8:
					timer1ClockSource = 0x02;
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
					break;
 4c8:	0b c0       	rjmp	.+22     	; 0x4e0 <pwm_init+0x78>
				case 64:
					timer1ClockSource = 0x03;
 4ca:	83 e0       	ldi	r24, 0x03	; 3
 4cc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
					break;
 4d0:	07 c0       	rjmp	.+14     	; 0x4e0 <pwm_init+0x78>
				case 256:
					timer1ClockSource = 0x04;
 4d2:	84 e0       	ldi	r24, 0x04	; 4
 4d4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
					break;
 4d8:	03 c0       	rjmp	.+6      	; 0x4e0 <pwm_init+0x78>
				case 1024:
					timer1ClockSource = 0x05;
 4da:	85 e0       	ldi	r24, 0x05	; 5
 4dc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
					break;
			}
			/* FAST PWM mode with ICR1 as TOP */
			setBit(&TCCR1A, WGM11);
 4e0:	61 e0       	ldi	r22, 0x01	; 1
 4e2:	80 e8       	ldi	r24, 0x80	; 128
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0d df       	rcall	.-486    	; 0x302 <setBit>
			setBit(&TCCR1B, WGM13);
 4e8:	64 e0       	ldi	r22, 0x04	; 4
 4ea:	81 e8       	ldi	r24, 0x81	; 129
 4ec:	90 e0       	ldi	r25, 0x00	; 0
			setBit(&TCCR1B, WGM12);
 4ee:	09 df       	rcall	.-494    	; 0x302 <setBit>
 4f0:	63 e0       	ldi	r22, 0x03	; 3
 4f2:	81 e8       	ldi	r24, 0x81	; 129
 4f4:	90 e0       	ldi	r25, 0x00	; 0
			/* Clear OC1A/B on compare match and set it on BOTTOM */
			switch(channelSelection){
 4f6:	05 df       	rcall	.-502    	; 0x302 <setBit>
 4f8:	00 23       	and	r16, r16
 4fa:	19 f0       	breq	.+6      	; 0x502 <pwm_init+0x9a>
 4fc:	01 30       	cpi	r16, 0x01	; 1
				case CHANNEL_A:
					setBit(&TCCR1A, COM1A1);
 4fe:	01 f1       	breq	.+64     	; 0x540 <pwm_init+0xd8>
 500:	3d c0       	rjmp	.+122    	; 0x57c <pwm_init+0x114>
 502:	67 e0       	ldi	r22, 0x07	; 7
 504:	80 e8       	ldi	r24, 0x80	; 128
					clearBit(&TCCR1A, COM1A0);
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	fc de       	rcall	.-520    	; 0x302 <setBit>
 50a:	66 e0       	ldi	r22, 0x06	; 6
 50c:	80 e8       	ldi	r24, 0x80	; 128
 50e:	90 e0       	ldi	r25, 0x00	; 0
					OCR1A = (dutyCycle * ICR1) / 100;
 510:	04 df       	rcall	.-504    	; 0x31a <clearBit>
 512:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 516:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 51a:	18 9f       	mul	r17, r24
 51c:	90 01       	movw	r18, r0
 51e:	19 9f       	mul	r17, r25
 520:	30 0d       	add	r19, r0
 522:	11 24       	eor	r1, r1
 524:	36 95       	lsr	r19
 526:	27 95       	ror	r18
 528:	36 95       	lsr	r19
 52a:	27 95       	ror	r18
 52c:	ab e7       	ldi	r26, 0x7B	; 123
 52e:	b4 e1       	ldi	r27, 0x14	; 20
 530:	9e d0       	rcall	.+316    	; 0x66e <__umulhisi3>
 532:	96 95       	lsr	r25
 534:	87 95       	ror	r24
 536:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
					break;
				case CHANNEL_B:
					setBit(&TCCR1A, COM1B1);
 53a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 53e:	1e c0       	rjmp	.+60     	; 0x57c <pwm_init+0x114>
 540:	65 e0       	ldi	r22, 0x05	; 5
					clearBit(&TCCR1A, COM1B0);
 542:	80 e8       	ldi	r24, 0x80	; 128
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	dd de       	rcall	.-582    	; 0x302 <setBit>
 548:	64 e0       	ldi	r22, 0x04	; 4
 54a:	80 e8       	ldi	r24, 0x80	; 128
					OCR1B = (dutyCycle * ICR1) / 100;
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	e5 de       	rcall	.-566    	; 0x31a <clearBit>
 550:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 554:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 558:	18 9f       	mul	r17, r24
 55a:	90 01       	movw	r18, r0
 55c:	19 9f       	mul	r17, r25
 55e:	30 0d       	add	r19, r0
 560:	11 24       	eor	r1, r1
 562:	36 95       	lsr	r19
 564:	27 95       	ror	r18
 566:	36 95       	lsr	r19
 568:	27 95       	ror	r18
 56a:	ab e7       	ldi	r26, 0x7B	; 123
 56c:	b4 e1       	ldi	r27, 0x14	; 20
 56e:	7f d0       	rcall	.+254    	; 0x66e <__umulhisi3>
 570:	96 95       	lsr	r25
 572:	87 95       	ror	r24
 574:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
		case TIMER2:
			break;
		case TIMER3:
			break;
	}
}
 578:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 57c:	0f 90       	pop	r0
 57e:	0f 90       	pop	r0
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	1f 91       	pop	r17
 586:	0f 91       	pop	r16
 588:	08 95       	ret

0000058a <pwm_setDutyCycle>:

/** Sets a new duty cycle for the selected timer and channel 
*/
void pwm_setDutyCycle(u8 dutyCycle, timer timerSelection, channel channelSelection){
	switch(timerSelection){
 58a:	61 30       	cpi	r22, 0x01	; 1
 58c:	91 f5       	brne	.+100    	; 0x5f2 <pwm_setDutyCycle+0x68>
		case TIMER0:
			break;
		case TIMER1:
			switch(channelSelection){
 58e:	44 23       	and	r20, r20
 590:	19 f0       	breq	.+6      	; 0x598 <pwm_setDutyCycle+0xe>
 592:	41 30       	cpi	r20, 0x01	; 1
 594:	c1 f0       	breq	.+48     	; 0x5c6 <pwm_setDutyCycle+0x3c>
 596:	08 95       	ret
				case CHANNEL_A:
					OCR1A = (dutyCycle * ICR1) / 100;
 598:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 59c:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 5a0:	84 9f       	mul	r24, r20
 5a2:	90 01       	movw	r18, r0
 5a4:	85 9f       	mul	r24, r21
 5a6:	30 0d       	add	r19, r0
 5a8:	11 24       	eor	r1, r1
 5aa:	36 95       	lsr	r19
 5ac:	27 95       	ror	r18
 5ae:	36 95       	lsr	r19
 5b0:	27 95       	ror	r18
 5b2:	ab e7       	ldi	r26, 0x7B	; 123
 5b4:	b4 e1       	ldi	r27, 0x14	; 20
 5b6:	5b d0       	rcall	.+182    	; 0x66e <__umulhisi3>
 5b8:	96 95       	lsr	r25
 5ba:	87 95       	ror	r24
 5bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 5c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
					break;
 5c4:	08 95       	ret
				case CHANNEL_B:
					OCR1B= (dutyCycle * ICR1) / 100;
 5c6:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 5ca:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 5ce:	84 9f       	mul	r24, r20
 5d0:	90 01       	movw	r18, r0
 5d2:	85 9f       	mul	r24, r21
 5d4:	30 0d       	add	r19, r0
 5d6:	11 24       	eor	r1, r1
 5d8:	36 95       	lsr	r19
 5da:	27 95       	ror	r18
 5dc:	36 95       	lsr	r19
 5de:	27 95       	ror	r18
 5e0:	ab e7       	ldi	r26, 0x7B	; 123
 5e2:	b4 e1       	ldi	r27, 0x14	; 20
 5e4:	44 d0       	rcall	.+136    	; 0x66e <__umulhisi3>
 5e6:	96 95       	lsr	r25
 5e8:	87 95       	ror	r24
 5ea:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 5ee:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 5f2:	08 95       	ret

000005f4 <pwm_start>:
}

/** Starts the selected timer
*/
void pwm_start(timer timerSelection){
	switch(timerSelection){
 5f4:	81 30       	cpi	r24, 0x01	; 1
 5f6:	c1 f4       	brne	.+48     	; 0x628 <pwm_start+0x34>
		case TIMER0:
			break;
		case TIMER1:
			updateBit(&TCCR1B, CS12, (timer1ClockSource >> 2) & 1);
 5f8:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__data_end>
 5fc:	42 fb       	bst	r20, 2
 5fe:	44 27       	eor	r20, r20
 600:	40 f9       	bld	r20, 0
 602:	62 e0       	ldi	r22, 0x02	; 2
 604:	81 e8       	ldi	r24, 0x81	; 129
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	95 de       	rcall	.-726    	; 0x334 <updateBit>
			updateBit(&TCCR1B, CS11, (timer1ClockSource >> 1) & 1);
 60a:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__data_end>
 60e:	46 95       	lsr	r20
 610:	41 70       	andi	r20, 0x01	; 1
 612:	61 e0       	ldi	r22, 0x01	; 1
 614:	81 e8       	ldi	r24, 0x81	; 129
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	8d de       	rcall	.-742    	; 0x334 <updateBit>
			updateBit(&TCCR1B, CS10, timer1ClockSource & 1);
 61a:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__data_end>
 61e:	41 70       	andi	r20, 0x01	; 1
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	81 e8       	ldi	r24, 0x81	; 129
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	86 ce       	rjmp	.-756    	; 0x334 <updateBit>
 628:	08 95       	ret

0000062a <__udivmodsi4>:
 62a:	a1 e2       	ldi	r26, 0x21	; 33
 62c:	1a 2e       	mov	r1, r26
 62e:	aa 1b       	sub	r26, r26
 630:	bb 1b       	sub	r27, r27
 632:	fd 01       	movw	r30, r26
 634:	0d c0       	rjmp	.+26     	; 0x650 <__udivmodsi4_ep>

00000636 <__udivmodsi4_loop>:
 636:	aa 1f       	adc	r26, r26
 638:	bb 1f       	adc	r27, r27
 63a:	ee 1f       	adc	r30, r30
 63c:	ff 1f       	adc	r31, r31
 63e:	a2 17       	cp	r26, r18
 640:	b3 07       	cpc	r27, r19
 642:	e4 07       	cpc	r30, r20
 644:	f5 07       	cpc	r31, r21
 646:	20 f0       	brcs	.+8      	; 0x650 <__udivmodsi4_ep>
 648:	a2 1b       	sub	r26, r18
 64a:	b3 0b       	sbc	r27, r19
 64c:	e4 0b       	sbc	r30, r20
 64e:	f5 0b       	sbc	r31, r21

00000650 <__udivmodsi4_ep>:
 650:	66 1f       	adc	r22, r22
 652:	77 1f       	adc	r23, r23
 654:	88 1f       	adc	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	1a 94       	dec	r1
 65a:	69 f7       	brne	.-38     	; 0x636 <__udivmodsi4_loop>
 65c:	60 95       	com	r22
 65e:	70 95       	com	r23
 660:	80 95       	com	r24
 662:	90 95       	com	r25
 664:	9b 01       	movw	r18, r22
 666:	ac 01       	movw	r20, r24
 668:	bd 01       	movw	r22, r26
 66a:	cf 01       	movw	r24, r30
 66c:	08 95       	ret

0000066e <__umulhisi3>:
 66e:	a2 9f       	mul	r26, r18
 670:	b0 01       	movw	r22, r0
 672:	b3 9f       	mul	r27, r19
 674:	c0 01       	movw	r24, r0
 676:	a3 9f       	mul	r26, r19
 678:	70 0d       	add	r23, r0
 67a:	81 1d       	adc	r24, r1
 67c:	11 24       	eor	r1, r1
 67e:	91 1d       	adc	r25, r1
 680:	b2 9f       	mul	r27, r18
 682:	70 0d       	add	r23, r0
 684:	81 1d       	adc	r24, r1
 686:	11 24       	eor	r1, r1
 688:	91 1d       	adc	r25, r1
 68a:	08 95       	ret

0000068c <_exit>:
 68c:	f8 94       	cli

0000068e <__stop_program>:
 68e:	ff cf       	rjmp	.-2      	; 0x68e <__stop_program>
