
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000590  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000604  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018a7  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b93  00000000  00000000  00002013  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091a  00000000  00000000  00002ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  000034c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000693  00000000  00000000  0000368c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000caa  00000000  00000000  00003d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000049c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	70 c2       	rjmp	.+1248   	; 0x58c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
#include "pwm.h"
#include "adc.h"
#include "gpio.h"

int main(void)
{
  ae:	45 d0       	rcall	.+138    	; 0x13a <disableJTAG>
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	64 e0       	ldi	r22, 0x04	; 4
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	44 d0       	rcall	.+136    	; 0x142 <gpio_init>
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	65 e0       	ldi	r22, 0x05	; 5
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	3f d0       	rcall	.+126    	; 0x142 <gpio_init>
  c4:	00 e0       	ldi	r16, 0x00	; 0
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	42 e3       	ldi	r20, 0x32	; 50
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	85 e0       	ldi	r24, 0x05	; 5
  d2:	54 d1       	rcall	.+680    	; 0x37c <pwm_init>
  d4:	01 e0       	ldi	r16, 0x01	; 1
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	42 e3       	ldi	r20, 0x32	; 50
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	8c e0       	ldi	r24, 0x0C	; 12
  e2:	4c d1       	rcall	.+664    	; 0x37c <pwm_init>
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	06 d2       	rcall	.+1036   	; 0x4f4 <pwm_start>
  e8:	64 e0       	ldi	r22, 0x04	; 4
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	67 d0       	rcall	.+206    	; 0x1bc <gpio_out_set>
  ee:	65 e0       	ldi	r22, 0x05	; 5
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	7c d0       	rcall	.+248    	; 0x1ec <gpio_out_reset>
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	83 ed       	ldi	r24, 0xD3	; 211
  f8:	90 e3       	ldi	r25, 0x30	; 48
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x4c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x56>
 104:	00 00       	nop
 106:	40 e0       	ldi	r20, 0x00	; 0
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	8c e0       	ldi	r24, 0x0C	; 12
 10c:	ca d1       	rcall	.+916    	; 0x4a2 <pwm_setDutyCycle>
 10e:	41 e0       	ldi	r20, 0x01	; 1
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	c6 d1       	rcall	.+908    	; 0x4a2 <pwm_setDutyCycle>
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	83 ed       	ldi	r24, 0xD3	; 211
 11a:	90 e3       	ldi	r25, 0x30	; 48
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x6e>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x78>
 126:	00 00       	nop
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	85 e0       	ldi	r24, 0x05	; 5
 12e:	b9 d1       	rcall	.+882    	; 0x4a2 <pwm_setDutyCycle>
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	8c e0       	ldi	r24, 0x0C	; 12
 136:	b5 d1       	rcall	.+874    	; 0x4a2 <pwm_setDutyCycle>
 138:	dd cf       	rjmp	.-70     	; 0xf4 <main+0x46>

0000013a <disableJTAG>:
			break;
		case PC:
			clearBit(&PORTC, _number);
			break;
		case PD:
			clearBit(&PORTD, _number);
 13a:	80 e8       	ldi	r24, 0x80	; 128
 13c:	85 bf       	out	0x35, r24	; 53
 13e:	85 bf       	out	0x35, r24	; 53
 140:	08 95       	ret

00000142 <gpio_init>:
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	d6 2f       	mov	r29, r22
 14a:	c4 2f       	mov	r28, r20
 14c:	12 2f       	mov	r17, r18
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	89 f0       	breq	.+34     	; 0x174 <gpio_init+0x32>
 152:	28 f0       	brcs	.+10     	; 0x15e <gpio_init+0x1c>
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	c9 f0       	breq	.+50     	; 0x18a <gpio_init+0x48>
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	11 f1       	breq	.+68     	; 0x1a0 <gpio_init+0x5e>
 15c:	2b c0       	rjmp	.+86     	; 0x1b4 <gpio_init+0x72>
 15e:	81 e2       	ldi	r24, 0x21	; 33
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	75 d0       	rcall	.+234    	; 0x24e <updateBit>
 164:	c1 11       	cpse	r28, r1
 166:	26 c0       	rjmp	.+76     	; 0x1b4 <gpio_init+0x72>
 168:	41 2f       	mov	r20, r17
 16a:	6d 2f       	mov	r22, r29
 16c:	82 e2       	ldi	r24, 0x22	; 34
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	6e d0       	rcall	.+220    	; 0x24e <updateBit>
 172:	20 c0       	rjmp	.+64     	; 0x1b4 <gpio_init+0x72>
 174:	84 e2       	ldi	r24, 0x24	; 36
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	6a d0       	rcall	.+212    	; 0x24e <updateBit>
 17a:	c1 11       	cpse	r28, r1
 17c:	1b c0       	rjmp	.+54     	; 0x1b4 <gpio_init+0x72>
 17e:	41 2f       	mov	r20, r17
 180:	6d 2f       	mov	r22, r29
 182:	85 e2       	ldi	r24, 0x25	; 37
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	63 d0       	rcall	.+198    	; 0x24e <updateBit>
 188:	15 c0       	rjmp	.+42     	; 0x1b4 <gpio_init+0x72>
 18a:	87 e2       	ldi	r24, 0x27	; 39
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	5f d0       	rcall	.+190    	; 0x24e <updateBit>
 190:	c1 11       	cpse	r28, r1
 192:	10 c0       	rjmp	.+32     	; 0x1b4 <gpio_init+0x72>
 194:	41 2f       	mov	r20, r17
 196:	6d 2f       	mov	r22, r29
 198:	88 e2       	ldi	r24, 0x28	; 40
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	58 d0       	rcall	.+176    	; 0x24e <updateBit>
 19e:	0a c0       	rjmp	.+20     	; 0x1b4 <gpio_init+0x72>
 1a0:	8a e2       	ldi	r24, 0x2A	; 42
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	54 d0       	rcall	.+168    	; 0x24e <updateBit>
 1a6:	c1 11       	cpse	r28, r1
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <gpio_init+0x72>
 1aa:	41 2f       	mov	r20, r17
 1ac:	6d 2f       	mov	r22, r29
 1ae:	8b e2       	ldi	r24, 0x2B	; 43
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	4d d0       	rcall	.+154    	; 0x24e <updateBit>
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	08 95       	ret

000001bc <gpio_out_set>:
	}
}
	

void gpio_out_set(port _port, u8 _number){
	switch(_port){
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	51 f0       	breq	.+20     	; 0x1d4 <gpio_out_set+0x18>
 1c0:	28 f0       	brcs	.+10     	; 0x1cc <gpio_out_set+0x10>
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	59 f0       	breq	.+22     	; 0x1dc <gpio_out_set+0x20>
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	69 f0       	breq	.+26     	; 0x1e4 <gpio_out_set+0x28>
 1ca:	08 95       	ret
		case PA:
			setBit(&PORTA, _number);
 1cc:	82 e2       	ldi	r24, 0x22	; 34
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	25 c0       	rjmp	.+74     	; 0x21c <setBit>
			break;
 1d2:	08 95       	ret
		case PB:
			setBit(&PORTB, _number);
 1d4:	85 e2       	ldi	r24, 0x25	; 37
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	21 c0       	rjmp	.+66     	; 0x21c <setBit>
			break;
		case PC:
			setBit(&PORTC, _number);
 1da:	08 95       	ret
 1dc:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			setBit(&PORTD, _number);
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	1d c0       	rjmp	.+58     	; 0x21c <setBit>
 1e2:	08 95       	ret
 1e4:	8b e2       	ldi	r24, 0x2B	; 43
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	19 c0       	rjmp	.+50     	; 0x21c <setBit>
 1ea:	08 95       	ret

000001ec <gpio_out_reset>:
			break;
	}
}

void gpio_out_reset(port _port, u8 _number){
	switch(_port){
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	51 f0       	breq	.+20     	; 0x204 <gpio_out_reset+0x18>
 1f0:	28 f0       	brcs	.+10     	; 0x1fc <gpio_out_reset+0x10>
 1f2:	82 30       	cpi	r24, 0x02	; 2
 1f4:	59 f0       	breq	.+22     	; 0x20c <gpio_out_reset+0x20>
 1f6:	83 30       	cpi	r24, 0x03	; 3
 1f8:	69 f0       	breq	.+26     	; 0x214 <gpio_out_reset+0x28>
 1fa:	08 95       	ret
		case PA:
			clearBit(&PORTA, _number);
 1fc:	82 e2       	ldi	r24, 0x22	; 34
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	19 c0       	rjmp	.+50     	; 0x234 <clearBit>
			break;
 202:	08 95       	ret
		case PB:
			clearBit(&PORTB, _number);
 204:	85 e2       	ldi	r24, 0x25	; 37
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	15 c0       	rjmp	.+42     	; 0x234 <clearBit>
			break;
		case PC:
			clearBit(&PORTC, _number);
 20a:	08 95       	ret
 20c:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			clearBit(&PORTD, _number);
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	11 c0       	rjmp	.+34     	; 0x234 <clearBit>
 212:	08 95       	ret
 214:	8b e2       	ldi	r24, 0x2B	; 43
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0d c0       	rjmp	.+26     	; 0x234 <clearBit>
 21a:	08 95       	ret

0000021c <setBit>:
void clearBit(volatile u8 *registerName, u8 position){
	*registerName &= ~(1 << position);
}

void toggleBit(volatile u8 *registerName, u8 position){
	*registerName ^= (1 << position);
 21c:	fc 01       	movw	r30, r24
 21e:	40 81       	ld	r20, Z
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <setBit+0xe>
 226:	22 0f       	add	r18, r18
 228:	33 1f       	adc	r19, r19
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <setBit+0xa>
 22e:	24 2b       	or	r18, r20
 230:	20 83       	st	Z, r18
 232:	08 95       	ret

00000234 <clearBit>:
 234:	fc 01       	movw	r30, r24
 236:	90 81       	ld	r25, Z
 238:	21 e0       	ldi	r18, 0x01	; 1
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <clearBit+0xe>
 23e:	22 0f       	add	r18, r18
 240:	33 1f       	adc	r19, r19
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <clearBit+0xa>
 246:	20 95       	com	r18
 248:	29 23       	and	r18, r25
 24a:	20 83       	st	Z, r18
 24c:	08 95       	ret

0000024e <updateBit>:
}

void updateBit(volatile u8 *registerName, u8 position, u8 value){
 24e:	fc 01       	movw	r30, r24
 250:	94 2f       	mov	r25, r20
	u8 newValue = value << position;
	newValue |= (*registerName & ~(1 << position));
 252:	20 81       	ld	r18, Z
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	06 2e       	mov	r0, r22
 25a:	02 c0       	rjmp	.+4      	; 0x260 <updateBit+0x12>
 25c:	44 0f       	add	r20, r20
 25e:	55 1f       	adc	r21, r21
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <updateBit+0xe>
 264:	40 95       	com	r20
 266:	50 95       	com	r21
 268:	24 23       	and	r18, r20
 26a:	49 2f       	mov	r20, r25
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <updateBit+0x26>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <updateBit+0x22>
 278:	42 2b       	or	r20, r18
	*registerName = newValue;
 27a:	40 83       	st	Z, r20
 27c:	08 95       	ret

0000027e <calculateTop>:
#include "pwm.h"
#include "gpio.h"

u8 timer1ClockSource;

u16 calculateTop(u16 *prescaler, u32 frequency, timer timerSelection){
 27e:	cf 92       	push	r12
 280:	df 92       	push	r13
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	ec 01       	movw	r28, r24
 28c:	6a 01       	movw	r12, r20
 28e:	7b 01       	movw	r14, r22
	u32 topValue = 0;
	u16 divisor = 0;
	switch(timerSelection){
 290:	21 30       	cpi	r18, 0x01	; 1
 292:	09 f0       	breq	.+2      	; 0x296 <calculateTop+0x18>
 294:	69 c0       	rjmp	.+210    	; 0x368 <calculateTop+0xea>
		case TIMER0:
			break;
		case TIMER1:
			divisor = 1;
			*prescaler = divisor;
			topValue = S_CLOCK / divisor / frequency - 1;
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	72 e1       	ldi	r23, 0x12	; 18
 29a:	8a e7       	ldi	r24, 0x7A	; 122
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	a7 01       	movw	r20, r14
 2a0:	96 01       	movw	r18, r12
 2a2:	43 d1       	rcall	.+646    	; 0x52a <__udivmodsi4>
 2a4:	da 01       	movw	r26, r20
 2a6:	c9 01       	movw	r24, r18
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	a1 09       	sbc	r26, r1
 2ac:	b1 09       	sbc	r27, r1
			if(topValue > 0xFFFF){
 2ae:	00 97       	sbiw	r24, 0x00	; 0
 2b0:	21 e0       	ldi	r18, 0x01	; 1
 2b2:	a2 07       	cpc	r26, r18
 2b4:	b1 05       	cpc	r27, r1
 2b6:	28 f4       	brcc	.+10     	; 0x2c2 <calculateTop+0x44>
	switch(timerSelection){
		case TIMER0:
			break;
		case TIMER1:
			divisor = 1;
			*prescaler = divisor;
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	39 83       	std	Y+1, r19	; 0x01
 2be:	28 83       	st	Y, r18
 2c0:	56 c0       	rjmp	.+172    	; 0x36e <calculateTop+0xf0>
			topValue = S_CLOCK / divisor / frequency - 1;
			if(topValue > 0xFFFF){
				divisor = 8;
				*prescaler = divisor;
				topValue = S_CLOCK / divisor / frequency - 1;
 2c2:	60 e4       	ldi	r22, 0x40	; 64
 2c4:	72 e4       	ldi	r23, 0x42	; 66
 2c6:	8f e0       	ldi	r24, 0x0F	; 15
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	a7 01       	movw	r20, r14
 2cc:	96 01       	movw	r18, r12
 2ce:	2d d1       	rcall	.+602    	; 0x52a <__udivmodsi4>
 2d0:	da 01       	movw	r26, r20
 2d2:	c9 01       	movw	r24, r18
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	a1 09       	sbc	r26, r1
 2d8:	b1 09       	sbc	r27, r1
				if(topValue > 0xFFFF){
 2da:	00 97       	sbiw	r24, 0x00	; 0
 2dc:	21 e0       	ldi	r18, 0x01	; 1
 2de:	a2 07       	cpc	r26, r18
 2e0:	b1 05       	cpc	r27, r1
 2e2:	28 f4       	brcc	.+10     	; 0x2ee <calculateTop+0x70>
			divisor = 1;
			*prescaler = divisor;
			topValue = S_CLOCK / divisor / frequency - 1;
			if(topValue > 0xFFFF){
				divisor = 8;
				*prescaler = divisor;
 2e4:	28 e0       	ldi	r18, 0x08	; 8
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	39 83       	std	Y+1, r19	; 0x01
 2ea:	28 83       	st	Y, r18
 2ec:	40 c0       	rjmp	.+128    	; 0x36e <calculateTop+0xf0>
				topValue = S_CLOCK / divisor / frequency - 1;
				if(topValue > 0xFFFF){
					divisor = 64;
					*prescaler = divisor;
					topValue = S_CLOCK / divisor / frequency -1;
 2ee:	68 e4       	ldi	r22, 0x48	; 72
 2f0:	78 ee       	ldi	r23, 0xE8	; 232
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	a7 01       	movw	r20, r14
 2f8:	96 01       	movw	r18, r12
 2fa:	17 d1       	rcall	.+558    	; 0x52a <__udivmodsi4>
 2fc:	da 01       	movw	r26, r20
 2fe:	c9 01       	movw	r24, r18
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	a1 09       	sbc	r26, r1
 304:	b1 09       	sbc	r27, r1
					if(topValue > 0xFFFF){
 306:	00 97       	sbiw	r24, 0x00	; 0
 308:	21 e0       	ldi	r18, 0x01	; 1
 30a:	a2 07       	cpc	r26, r18
 30c:	b1 05       	cpc	r27, r1
 30e:	28 f4       	brcc	.+10     	; 0x31a <calculateTop+0x9c>
				divisor = 8;
				*prescaler = divisor;
				topValue = S_CLOCK / divisor / frequency - 1;
				if(topValue > 0xFFFF){
					divisor = 64;
					*prescaler = divisor;
 310:	20 e4       	ldi	r18, 0x40	; 64
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	39 83       	std	Y+1, r19	; 0x01
 316:	28 83       	st	Y, r18
 318:	2a c0       	rjmp	.+84     	; 0x36e <calculateTop+0xf0>
					topValue = S_CLOCK / divisor / frequency -1;
					if(topValue > 0xFFFF){
						divisor = 256;
						*prescaler = divisor;
						topValue = S_CLOCK / divisor / frequency - 1;
 31a:	62 e1       	ldi	r22, 0x12	; 18
 31c:	7a e7       	ldi	r23, 0x7A	; 122
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	a7 01       	movw	r20, r14
 324:	96 01       	movw	r18, r12
 326:	01 d1       	rcall	.+514    	; 0x52a <__udivmodsi4>
 328:	da 01       	movw	r26, r20
 32a:	c9 01       	movw	r24, r18
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	a1 09       	sbc	r26, r1
 330:	b1 09       	sbc	r27, r1
						if(topValue > 0xFFFF){
 332:	00 97       	sbiw	r24, 0x00	; 0
 334:	21 e0       	ldi	r18, 0x01	; 1
 336:	a2 07       	cpc	r26, r18
 338:	b1 05       	cpc	r27, r1
 33a:	28 f4       	brcc	.+10     	; 0x346 <calculateTop+0xc8>
					divisor = 64;
					*prescaler = divisor;
					topValue = S_CLOCK / divisor / frequency -1;
					if(topValue > 0xFFFF){
						divisor = 256;
						*prescaler = divisor;
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	31 e0       	ldi	r19, 0x01	; 1
 340:	39 83       	std	Y+1, r19	; 0x01
 342:	28 83       	st	Y, r18
 344:	14 c0       	rjmp	.+40     	; 0x36e <calculateTop+0xf0>
						topValue = S_CLOCK / divisor / frequency - 1;
						if(topValue > 0xFFFF){
							divisor = 1024;
							*prescaler = divisor;
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	94 e0       	ldi	r25, 0x04	; 4
 34a:	99 83       	std	Y+1, r25	; 0x01
 34c:	88 83       	st	Y, r24
							topValue = S_CLOCK / divisor / frequency - 1;
 34e:	64 e8       	ldi	r22, 0x84	; 132
 350:	7e e1       	ldi	r23, 0x1E	; 30
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	a7 01       	movw	r20, r14
 358:	96 01       	movw	r18, r12
 35a:	e7 d0       	rcall	.+462    	; 0x52a <__udivmodsi4>
 35c:	da 01       	movw	r26, r20
 35e:	c9 01       	movw	r24, r18
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	a1 09       	sbc	r26, r1
 364:	b1 09       	sbc	r27, r1
 366:	03 c0       	rjmp	.+6      	; 0x36e <calculateTop+0xf0>
#include "gpio.h"

u8 timer1ClockSource;

u16 calculateTop(u16 *prescaler, u32 frequency, timer timerSelection){
	u32 topValue = 0;
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	dc 01       	movw	r26, r24
			break;
		case TIMER3:
			break;
	}
	return (u16)topValue;
}
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	ff 90       	pop	r15
 374:	ef 90       	pop	r14
 376:	df 90       	pop	r13
 378:	cf 90       	pop	r12
 37a:	08 95       	ret

0000037c <pwm_init>:

void pwm_init(u8 dutyCycle, u32 frequency, timer timerSelection, channel channelSelection){
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	00 d0       	rcall	.+0      	; 0x386 <pwm_init+0xa>
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
	u16 prescaler = 0;
 38a:	1a 82       	std	Y+2, r1	; 0x02
 38c:	19 82       	std	Y+1, r1	; 0x01
	u32 dutyAux = 0;
	switch(timerSelection){
 38e:	21 30       	cpi	r18, 0x01	; 1
 390:	09 f0       	breq	.+2      	; 0x394 <pwm_init+0x18>
 392:	80 c0       	rjmp	.+256    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 394:	18 2f       	mov	r17, r24
		case TIMER0:
			break;
		case TIMER1:
			/* Calculate TOP register to obtain the desired frequency */
			ICR1 = calculateTop(&prescaler, frequency, timerSelection);
 396:	ce 01       	movw	r24, r28
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	71 df       	rcall	.-286    	; 0x27e <calculateTop>
 39c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 3a0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			/* Sets the prescaler data to be later used in pwm_start() */
			switch(prescaler){
 3a4:	29 81       	ldd	r18, Y+1	; 0x01
 3a6:	3a 81       	ldd	r19, Y+2	; 0x02
 3a8:	20 34       	cpi	r18, 0x40	; 64
 3aa:	31 05       	cpc	r19, r1
 3ac:	c1 f0       	breq	.+48     	; 0x3de <pwm_init+0x62>
 3ae:	38 f4       	brcc	.+14     	; 0x3be <pwm_init+0x42>
 3b0:	21 30       	cpi	r18, 0x01	; 1
 3b2:	31 05       	cpc	r19, r1
 3b4:	61 f0       	breq	.+24     	; 0x3ce <pwm_init+0x52>
 3b6:	28 30       	cpi	r18, 0x08	; 8
 3b8:	31 05       	cpc	r19, r1
 3ba:	69 f0       	breq	.+26     	; 0x3d6 <pwm_init+0x5a>
 3bc:	1b c0       	rjmp	.+54     	; 0x3f4 <pwm_init+0x78>
 3be:	21 15       	cp	r18, r1
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	38 07       	cpc	r19, r24
 3c4:	81 f0       	breq	.+32     	; 0x3e6 <pwm_init+0x6a>
 3c6:	21 15       	cp	r18, r1
 3c8:	34 40       	sbci	r19, 0x04	; 4
 3ca:	89 f0       	breq	.+34     	; 0x3ee <pwm_init+0x72>
 3cc:	13 c0       	rjmp	.+38     	; 0x3f4 <pwm_init+0x78>
				case 1:
					timer1ClockSource = 0x01;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					break;
 3d4:	0f c0       	rjmp	.+30     	; 0x3f4 <pwm_init+0x78>
				case 8:
					timer1ClockSource = 0x02;
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					break;
 3dc:	0b c0       	rjmp	.+22     	; 0x3f4 <pwm_init+0x78>
				case 64:
					timer1ClockSource = 0x03;
 3de:	83 e0       	ldi	r24, 0x03	; 3
 3e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					break;
 3e4:	07 c0       	rjmp	.+14     	; 0x3f4 <pwm_init+0x78>
				case 256:
					timer1ClockSource = 0x04;
 3e6:	84 e0       	ldi	r24, 0x04	; 4
 3e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					break;
 3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <pwm_init+0x78>
				case 1024:
					timer1ClockSource = 0x05;
 3ee:	85 e0       	ldi	r24, 0x05	; 5
 3f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					break;
			}
			/* FAST PWM mode with ICR1 as TOP */
			clearBit(&TCCR1A, WGM10);
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	80 e8       	ldi	r24, 0x80	; 128
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	1c df       	rcall	.-456    	; 0x234 <clearBit>
			setBit(&TCCR1A, WGM11);
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	80 e8       	ldi	r24, 0x80	; 128
 400:	90 e0       	ldi	r25, 0x00	; 0
			setBit(&TCCR1B, WGM13);
 402:	0c df       	rcall	.-488    	; 0x21c <setBit>
 404:	64 e0       	ldi	r22, 0x04	; 4
 406:	81 e8       	ldi	r24, 0x81	; 129
			setBit(&TCCR1B, WGM12);
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	08 df       	rcall	.-496    	; 0x21c <setBit>
 40c:	63 e0       	ldi	r22, 0x03	; 3
 40e:	81 e8       	ldi	r24, 0x81	; 129
 410:	90 e0       	ldi	r25, 0x00	; 0
			/* Clear OC1A/B on compare match and set it on BOTTOM */
			switch(channelSelection){
 412:	04 df       	rcall	.-504    	; 0x21c <setBit>
 414:	00 23       	and	r16, r16
 416:	19 f0       	breq	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 418:	01 30       	cpi	r16, 0x01	; 1
				case CHANNEL_A:
					gpio_init(PD, 5, OUTPUT, NO_PULL);
 41a:	f9 f0       	breq	.+62     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 41c:	3b c0       	rjmp	.+118    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 41e:	20 e0       	ldi	r18, 0x00	; 0
 420:	41 e0       	ldi	r20, 0x01	; 1
 422:	65 e0       	ldi	r22, 0x05	; 5
					setBit(&TCCR1A, COM1A1);
 424:	83 e0       	ldi	r24, 0x03	; 3
 426:	8d de       	rcall	.-742    	; 0x142 <gpio_init>
 428:	67 e0       	ldi	r22, 0x07	; 7
 42a:	80 e8       	ldi	r24, 0x80	; 128
					clearBit(&TCCR1A, COM1A0);
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	f6 de       	rcall	.-532    	; 0x21c <setBit>
 430:	66 e0       	ldi	r22, 0x06	; 6
 432:	80 e8       	ldi	r24, 0x80	; 128
					dutyAux = (u32) dutyCycle * ICR1 / 100;
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	fe de       	rcall	.-516    	; 0x234 <clearBit>
 438:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
					OCR1A = (u16) dutyAux;
 43c:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 440:	21 2f       	mov	r18, r17
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	94 d0       	rcall	.+296    	; 0x56e <__umulhisi3>
 446:	24 e6       	ldi	r18, 0x64	; 100
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	40 e0       	ldi	r20, 0x00	; 0
 44c:	50 e0       	ldi	r21, 0x00	; 0
 44e:	6d d0       	rcall	.+218    	; 0x52a <__udivmodsi4>
 450:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
					break;
				case CHANNEL_B:
					gpio_init(PD, 4, OUTPUT, NO_PULL);
 454:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 458:	1d c0       	rjmp	.+58     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 45a:	20 e0       	ldi	r18, 0x00	; 0
 45c:	41 e0       	ldi	r20, 0x01	; 1
					setBit(&TCCR1A, COM1B1);
 45e:	64 e0       	ldi	r22, 0x04	; 4
 460:	83 e0       	ldi	r24, 0x03	; 3
 462:	6f de       	rcall	.-802    	; 0x142 <gpio_init>
 464:	65 e0       	ldi	r22, 0x05	; 5
					clearBit(&TCCR1A, COM1B0);
 466:	80 e8       	ldi	r24, 0x80	; 128
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	d8 de       	rcall	.-592    	; 0x21c <setBit>
 46c:	64 e0       	ldi	r22, 0x04	; 4
					dutyAux = (u32) dutyCycle * ICR1 / 100;
 46e:	80 e8       	ldi	r24, 0x80	; 128
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	e0 de       	rcall	.-576    	; 0x234 <clearBit>
 474:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
					OCR1B = (u16) dutyAux;
 478:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 47c:	21 2f       	mov	r18, r17
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	76 d0       	rcall	.+236    	; 0x56e <__umulhisi3>
 482:	24 e6       	ldi	r18, 0x64	; 100
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	50 e0       	ldi	r21, 0x00	; 0
 48a:	4f d0       	rcall	.+158    	; 0x52a <__udivmodsi4>
 48c:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 490:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		case TIMER2:
			break;
		case TIMER3:
			break;
	}
}
 494:	0f 90       	pop	r0
 496:	0f 90       	pop	r0
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	1f 91       	pop	r17
 49e:	0f 91       	pop	r16
 4a0:	08 95       	ret

000004a2 <pwm_setDutyCycle>:

/** Sets a new duty cycle for the selected timer and channel 
*/
void pwm_setDutyCycle(u8 dutyCycle, timer timerSelection, channel channelSelection){
	u32 dutyAux = 0;
	switch(timerSelection){
 4a2:	61 30       	cpi	r22, 0x01	; 1
 4a4:	31 f5       	brne	.+76     	; 0x4f2 <pwm_setDutyCycle+0x50>
		case TIMER0:
			break;
		case TIMER1:
			switch(channelSelection){
 4a6:	44 23       	and	r20, r20
 4a8:	19 f0       	breq	.+6      	; 0x4b0 <pwm_setDutyCycle+0xe>
 4aa:	41 30       	cpi	r20, 0x01	; 1
 4ac:	91 f0       	breq	.+36     	; 0x4d2 <pwm_setDutyCycle+0x30>
 4ae:	08 95       	ret
				case CHANNEL_A:
					dutyAux = (u32) dutyCycle * ICR1 / 100;
 4b0:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 4b4:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
					OCR1A = (u16) dutyAux;
 4b8:	28 2f       	mov	r18, r24
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	58 d0       	rcall	.+176    	; 0x56e <__umulhisi3>
 4be:	24 e6       	ldi	r18, 0x64	; 100
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	50 e0       	ldi	r21, 0x00	; 0
 4c6:	31 d0       	rcall	.+98     	; 0x52a <__udivmodsi4>
 4c8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4cc:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
					break;
 4d0:	08 95       	ret
				case CHANNEL_B:
					dutyAux = (u32) dutyCycle * ICR1 / 100;
 4d2:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 4d6:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
					OCR1B = (u16) dutyAux;
 4da:	28 2f       	mov	r18, r24
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	47 d0       	rcall	.+142    	; 0x56e <__umulhisi3>
 4e0:	24 e6       	ldi	r18, 0x64	; 100
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	40 e0       	ldi	r20, 0x00	; 0
 4e6:	50 e0       	ldi	r21, 0x00	; 0
 4e8:	20 d0       	rcall	.+64     	; 0x52a <__udivmodsi4>
 4ea:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 4ee:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 4f2:	08 95       	ret

000004f4 <pwm_start>:
}

/** Starts the selected timer
*/
void pwm_start(timer timerSelection){
	switch(timerSelection){
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	c1 f4       	brne	.+48     	; 0x528 <pwm_start+0x34>
		case TIMER0:
			break;
		case TIMER1:
			updateBit(&TCCR1B, CS12, (timer1ClockSource >> 2) & 1);
 4f8:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 4fc:	42 fb       	bst	r20, 2
 4fe:	44 27       	eor	r20, r20
 500:	40 f9       	bld	r20, 0
 502:	62 e0       	ldi	r22, 0x02	; 2
 504:	81 e8       	ldi	r24, 0x81	; 129
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	a2 de       	rcall	.-700    	; 0x24e <updateBit>
			updateBit(&TCCR1B, CS11, (timer1ClockSource >> 1) & 1);
 50a:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 50e:	46 95       	lsr	r20
 510:	41 70       	andi	r20, 0x01	; 1
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	81 e8       	ldi	r24, 0x81	; 129
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	9a de       	rcall	.-716    	; 0x24e <updateBit>
			updateBit(&TCCR1B, CS10, timer1ClockSource & 1);
 51a:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 51e:	41 70       	andi	r20, 0x01	; 1
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	81 e8       	ldi	r24, 0x81	; 129
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	93 ce       	rjmp	.-730    	; 0x24e <updateBit>
 528:	08 95       	ret

0000052a <__udivmodsi4>:
 52a:	a1 e2       	ldi	r26, 0x21	; 33
 52c:	1a 2e       	mov	r1, r26
 52e:	aa 1b       	sub	r26, r26
 530:	bb 1b       	sub	r27, r27
 532:	fd 01       	movw	r30, r26
 534:	0d c0       	rjmp	.+26     	; 0x550 <__udivmodsi4_ep>

00000536 <__udivmodsi4_loop>:
 536:	aa 1f       	adc	r26, r26
 538:	bb 1f       	adc	r27, r27
 53a:	ee 1f       	adc	r30, r30
 53c:	ff 1f       	adc	r31, r31
 53e:	a2 17       	cp	r26, r18
 540:	b3 07       	cpc	r27, r19
 542:	e4 07       	cpc	r30, r20
 544:	f5 07       	cpc	r31, r21
 546:	20 f0       	brcs	.+8      	; 0x550 <__udivmodsi4_ep>
 548:	a2 1b       	sub	r26, r18
 54a:	b3 0b       	sbc	r27, r19
 54c:	e4 0b       	sbc	r30, r20
 54e:	f5 0b       	sbc	r31, r21

00000550 <__udivmodsi4_ep>:
 550:	66 1f       	adc	r22, r22
 552:	77 1f       	adc	r23, r23
 554:	88 1f       	adc	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	1a 94       	dec	r1
 55a:	69 f7       	brne	.-38     	; 0x536 <__udivmodsi4_loop>
 55c:	60 95       	com	r22
 55e:	70 95       	com	r23
 560:	80 95       	com	r24
 562:	90 95       	com	r25
 564:	9b 01       	movw	r18, r22
 566:	ac 01       	movw	r20, r24
 568:	bd 01       	movw	r22, r26
 56a:	cf 01       	movw	r24, r30
 56c:	08 95       	ret

0000056e <__umulhisi3>:
 56e:	a2 9f       	mul	r26, r18
 570:	b0 01       	movw	r22, r0
 572:	b3 9f       	mul	r27, r19
 574:	c0 01       	movw	r24, r0
 576:	a3 9f       	mul	r26, r19
 578:	70 0d       	add	r23, r0
 57a:	81 1d       	adc	r24, r1
 57c:	11 24       	eor	r1, r1
 57e:	91 1d       	adc	r25, r1
 580:	b2 9f       	mul	r27, r18
 582:	70 0d       	add	r23, r0
 584:	81 1d       	adc	r24, r1
 586:	11 24       	eor	r1, r1
 588:	91 1d       	adc	r25, r1
 58a:	08 95       	ret

0000058c <_exit>:
 58c:	f8 94       	cli

0000058e <__stop_program>:
 58e:	ff cf       	rjmp	.-2      	; 0x58e <__stop_program>
