
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000116c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800100  00800100  0000116c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000119c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003520  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fac  00000000  00000000  000048f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014ec  00000000  00000000  000058a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a0  00000000  00000000  00006d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a00  00000000  00000000  0000722c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015af  00000000  00000000  00007c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  000091db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	75 c0       	rjmp	.+234    	; 0xec <__ctors_end>
       2:	00 00       	nop
       4:	83 c0       	rjmp	.+262    	; 0x10c <__bad_interrupt>
       6:	00 00       	nop
       8:	81 c0       	rjmp	.+258    	; 0x10c <__bad_interrupt>
       a:	00 00       	nop
       c:	7f c0       	rjmp	.+254    	; 0x10c <__bad_interrupt>
       e:	00 00       	nop
      10:	5e c2       	rjmp	.+1212   	; 0x4ce <__vector_4>
      12:	00 00       	nop
      14:	7b c0       	rjmp	.+246    	; 0x10c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c2       	rjmp	.+1282   	; 0x51c <__vector_6>
      1a:	00 00       	nop
      1c:	77 c0       	rjmp	.+238    	; 0x10c <__bad_interrupt>
      1e:	00 00       	nop
      20:	75 c0       	rjmp	.+234    	; 0x10c <__bad_interrupt>
      22:	00 00       	nop
      24:	73 c0       	rjmp	.+230    	; 0x10c <__bad_interrupt>
      26:	00 00       	nop
      28:	71 c0       	rjmp	.+226    	; 0x10c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6f c0       	rjmp	.+222    	; 0x10c <__bad_interrupt>
      2e:	00 00       	nop
      30:	6d c0       	rjmp	.+218    	; 0x10c <__bad_interrupt>
      32:	00 00       	nop
      34:	6b c0       	rjmp	.+214    	; 0x10c <__bad_interrupt>
      36:	00 00       	nop
      38:	69 c0       	rjmp	.+210    	; 0x10c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	67 c0       	rjmp	.+206    	; 0x10c <__bad_interrupt>
      3e:	00 00       	nop
      40:	65 c0       	rjmp	.+202    	; 0x10c <__bad_interrupt>
      42:	00 00       	nop
      44:	63 c0       	rjmp	.+198    	; 0x10c <__bad_interrupt>
      46:	00 00       	nop
      48:	61 c0       	rjmp	.+194    	; 0x10c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5f c0       	rjmp	.+190    	; 0x10c <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c6       	rjmp	.+3280   	; 0xd22 <__vector_20>
      52:	00 00       	nop
      54:	5b c0       	rjmp	.+182    	; 0x10c <__bad_interrupt>
      56:	00 00       	nop
      58:	59 c0       	rjmp	.+178    	; 0x10c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	57 c0       	rjmp	.+174    	; 0x10c <__bad_interrupt>
      5e:	00 00       	nop
      60:	55 c0       	rjmp	.+170    	; 0x10c <__bad_interrupt>
      62:	00 00       	nop
      64:	53 c0       	rjmp	.+166    	; 0x10c <__bad_interrupt>
      66:	00 00       	nop
      68:	51 c0       	rjmp	.+162    	; 0x10c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4f c0       	rjmp	.+158    	; 0x10c <__bad_interrupt>
      6e:	00 00       	nop
      70:	4d c0       	rjmp	.+154    	; 0x10c <__bad_interrupt>
      72:	00 00       	nop
      74:	4b c0       	rjmp	.+150    	; 0x10c <__bad_interrupt>
      76:	00 00       	nop
      78:	49 c0       	rjmp	.+146    	; 0x10c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	47 c0       	rjmp	.+142    	; 0x10c <__bad_interrupt>
      7e:	00 00       	nop
      80:	45 c0       	rjmp	.+138    	; 0x10c <__bad_interrupt>
      82:	00 00       	nop
      84:	43 c0       	rjmp	.+134    	; 0x10c <__bad_interrupt>
      86:	00 00       	nop
      88:	41 c0       	rjmp	.+130    	; 0x10c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b4 06       	cpc	r11, r20
      8e:	d0 06       	cpc	r13, r16
      90:	d9 07       	cpc	r29, r25
      92:	d9 07       	cpc	r29, r25
      94:	d9 07       	cpc	r29, r25
      96:	d9 07       	cpc	r29, r25
      98:	d9 07       	cpc	r29, r25
      9a:	d9 07       	cpc	r29, r25
      9c:	d9 07       	cpc	r29, r25
      9e:	d9 07       	cpc	r29, r25
      a0:	f1 06       	cpc	r15, r17
      a2:	f4 06       	cpc	r15, r20
      a4:	d9 07       	cpc	r29, r25
      a6:	d9 07       	cpc	r29, r25
      a8:	d9 07       	cpc	r29, r25
      aa:	d9 07       	cpc	r29, r25
      ac:	f8 06       	cpc	r15, r24
      ae:	fd 06       	cpc	r15, r29
      b0:	d9 07       	cpc	r29, r25
      b2:	d9 07       	cpc	r29, r25
      b4:	d9 07       	cpc	r29, r25
      b6:	d9 07       	cpc	r29, r25
      b8:	d9 07       	cpc	r29, r25
      ba:	d9 07       	cpc	r29, r25
      bc:	d9 07       	cpc	r29, r25
      be:	d9 07       	cpc	r29, r25
      c0:	02 07       	cpc	r16, r18
      c2:	0c 07       	cpc	r16, r28
      c4:	16 07       	cpc	r17, r22
      c6:	d9 07       	cpc	r29, r25
      c8:	d9 07       	cpc	r29, r25
      ca:	d9 07       	cpc	r29, r25
      cc:	20 07       	cpc	r18, r16
      ce:	24 07       	cpc	r18, r20
      d0:	2e 07       	cpc	r18, r30
      d2:	61 07       	cpc	r22, r17
      d4:	d9 07       	cpc	r29, r25
      d6:	d9 07       	cpc	r29, r25
      d8:	d9 07       	cpc	r29, r25
      da:	d9 07       	cpc	r29, r25
      dc:	d9 07       	cpc	r29, r25
      de:	d9 07       	cpc	r29, r25
      e0:	94 07       	cpc	r25, r20
      e2:	aa 07       	cpc	r26, r26
      e4:	be 07       	cpc	r27, r30
      e6:	c5 07       	cpc	r28, r21
      e8:	cc 07       	cpc	r28, r28
      ea:	d3 07       	cpc	r29, r19

000000ec <__ctors_end>:
      ec:	11 24       	eor	r1, r1
      ee:	1f be       	out	0x3f, r1	; 63
      f0:	cf ef       	ldi	r28, 0xFF	; 255
      f2:	d0 e4       	ldi	r29, 0x40	; 64
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	cd bf       	out	0x3d, r28	; 61

000000f8 <__do_clear_bss>:
      f8:	21 e0       	ldi	r18, 0x01	; 1
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b1 e0       	ldi	r27, 0x01	; 1
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	ab 31       	cpi	r26, 0x1B	; 27
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	7b d0       	rcall	.+246    	; 0x200 <main>
     10a:	f4 c7       	rjmp	.+4072   	; 0x10f4 <_exit>

0000010c <__bad_interrupt>:
     10c:	79 cf       	rjmp	.-270    	; 0x0 <__vectors>

0000010e <init>:
u8 servoEnable;
u8 dcEnable;
u8 dcSpeedLeft;
u8 dcSpeedRight;

void init(){
     10e:	0f 93       	push	r16
     110:	cf 93       	push	r28
	/** System flags and variables */
	systemEnable = 0;
     112:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <systemEnable>
	systemMode = 1;
     116:	c1 e0       	ldi	r28, 0x01	; 1
     118:	c0 93 05 01 	sts	0x0105, r28	; 0x800105 <systemMode>
	servoEnable = 0;
     11c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <servoEnable>
	dcEnable = 0;
     120:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dcEnable>
	dcSpeedLeft = 0;
     124:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <dcSpeedLeft>
	dcSpeedRight = 0;
     128:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	/** System status LED Red*/
	gpio_init(PB, 0, OUTPUT, NO_PULL);
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	41 e0       	ldi	r20, 0x01	; 1
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	77 d2       	rcall	.+1262   	; 0x624 <gpio_init>
	gpio_init(PB, 1, OUTPUT, NO_PULL);
     136:	20 e0       	ldi	r18, 0x00	; 0
     138:	41 e0       	ldi	r20, 0x01	; 1
     13a:	61 e0       	ldi	r22, 0x01	; 1
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	72 d2       	rcall	.+1252   	; 0x624 <gpio_init>
	gpio_init(PB, 2, OUTPUT, NO_PULL);
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	41 e0       	ldi	r20, 0x01	; 1
     144:	62 e0       	ldi	r22, 0x02	; 2
     146:	81 e0       	ldi	r24, 0x01	; 1
	gpio_out_set(PB, 0);
     148:	6d d2       	rcall	.+1242   	; 0x624 <gpio_init>
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	81 e0       	ldi	r24, 0x01	; 1
	gpio_out_reset(PB, 1);
     14e:	a7 d2       	rcall	.+1358   	; 0x69e <gpio_out_set>
     150:	61 e0       	ldi	r22, 0x01	; 1
     152:	81 e0       	ldi	r24, 0x01	; 1
	gpio_out_reset(PB, 2);
     154:	bc d2       	rcall	.+1400   	; 0x6ce <gpio_out_reset>
     156:	62 e0       	ldi	r22, 0x02	; 2
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	b9 d2       	rcall	.+1394   	; 0x6ce <gpio_out_reset>
	/** Tank cannon LED initialized but turned off*/
	pwm_init(0, 50, TIMER1, CHANNEL_A);
     15c:	00 e0       	ldi	r16, 0x00	; 0
     15e:	21 e0       	ldi	r18, 0x01	; 1
     160:	42 e3       	ldi	r20, 0x32	; 50
     162:	50 e0       	ldi	r21, 0x00	; 0
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	70 e0       	ldi	r23, 0x00	; 0
	/** 7V Voltage Regulator disabled */
	gpio_init(PA, 2, OUTPUT, NO_PULL);
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	3f d4       	rcall	.+2174   	; 0x9ea <pwm_init>
     16c:	20 e0       	ldi	r18, 0x00	; 0
     16e:	41 e0       	ldi	r20, 0x01	; 1
     170:	62 e0       	ldi	r22, 0x02	; 2
	gpio_out_reset(PA, 2);
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	57 d2       	rcall	.+1198   	; 0x624 <gpio_init>
     176:	62 e0       	ldi	r22, 0x02	; 2
	/** Servo initialized but disabled*/
	pwm_init(7, 50, TIMER1, CHANNEL_B);
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	a9 d2       	rcall	.+1362   	; 0x6ce <gpio_out_reset>
     17c:	01 e0       	ldi	r16, 0x01	; 1
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	42 e3       	ldi	r20, 0x32	; 50
     182:	50 e0       	ldi	r21, 0x00	; 0
     184:	60 e0       	ldi	r22, 0x00	; 0
	/** Bluetooth module enabled */
	uart_init(ASYNCHRONOUS, EVEN, _2BIT, _9600);
     186:	70 e0       	ldi	r23, 0x00	; 0
     188:	87 e0       	ldi	r24, 0x07	; 7
     18a:	2f d4       	rcall	.+2142   	; 0x9ea <pwm_init>
	uart_start(TRUE, TRUE);
     18c:	23 e3       	ldi	r18, 0x33	; 51
     18e:	41 e0       	ldi	r20, 0x01	; 1
	
	
	
	systemEnable = 1;
     190:	60 e0       	ldi	r22, 0x00	; 0
	dcEnable = 1;
     192:	80 e0       	ldi	r24, 0x00	; 0
	motor_init();
     194:	21 d7       	rcall	.+3650   	; 0xfd8 <uart_init>
     196:	61 e0       	ldi	r22, 0x01	; 1
	encoder_init();
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	5c d7       	rcall	.+3768   	; 0x1054 <uart_start>
	pwm_start(TIMER1);
     19c:	c0 93 03 01 	sts	0x0103, r28	; 0x800103 <systemEnable>
	gpio_out_set(PA, 2);
     1a0:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <dcEnable>
     1a4:	e5 d2       	rcall	.+1482   	; 0x770 <motor_init>
	gpio_out_reset(PB, 0);
     1a6:	e1 d1       	rcall	.+962    	; 0x56a <encoder_init>
     1a8:	81 e0       	ldi	r24, 0x01	; 1
	if(systemMode == 0){
     1aa:	4a d5       	rcall	.+2708   	; 0xc40 <pwm_start>
     1ac:	62 e0       	ldi	r22, 0x02	; 2
		gpio_out_set(PB, 1);
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	76 d2       	rcall	.+1260   	; 0x69e <gpio_out_set>
     1b2:	60 e0       	ldi	r22, 0x00	; 0
		gpio_out_reset(PB, 2);
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	8b d2       	rcall	.+1302   	; 0x6ce <gpio_out_reset>
     1b8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <systemMode>
	}
	else{
		gpio_out_reset(PB, 1);
     1bc:	81 11       	cpse	r24, r1
     1be:	07 c0       	rjmp	.+14     	; 0x1ce <init+0xc0>
		gpio_out_set(PB, 2);
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	6c d2       	rcall	.+1240   	; 0x69e <gpio_out_set>
     1c6:	62 e0       	ldi	r22, 0x02	; 2
	}
	dcEnable = 1;
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	81 d2       	rcall	.+1282   	; 0x6ce <gpio_out_reset>
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <init+0xcc>
	motor_start();
     1ce:	61 e0       	ldi	r22, 0x01	; 1
     1d0:	81 e0       	ldi	r24, 0x01	; 1
	dcSpeedLeft = 80;
     1d2:	7d d2       	rcall	.+1274   	; 0x6ce <gpio_out_reset>
     1d4:	62 e0       	ldi	r22, 0x02	; 2
     1d6:	81 e0       	ldi	r24, 0x01	; 1
	dcSpeedRight = 80;
     1d8:	62 d2       	rcall	.+1220   	; 0x69e <gpio_out_set>
     1da:	81 e0       	ldi	r24, 0x01	; 1
	motor_speed(80);
     1dc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dcEnable>
	pwm_start(TIMER1);
     1e0:	ee d2       	rcall	.+1500   	; 0x7be <motor_start>
     1e2:	80 e5       	ldi	r24, 0x50	; 80
     1e4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
	pwm_setDutyCycle(90, TIMER1, CHANNEL_A);
     1e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     1ec:	3e d3       	rcall	.+1660   	; 0x86a <motor_speed>
     1ee:	81 e0       	ldi	r24, 0x01	; 1
	//motor_init();
	//encoder_init();
	//motor_start();
	//pwm_start(TIMER1);
	//encoder_start();	
}
     1f0:	27 d5       	rcall	.+2638   	; 0xc40 <pwm_start>
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	8a e5       	ldi	r24, 0x5A	; 90
     1f8:	d2 d4       	rcall	.+2468   	; 0xb9e <pwm_setDutyCycle>
     1fa:	cf 91       	pop	r28
     1fc:	0f 91       	pop	r16
     1fe:	08 95       	ret

00000200 <main>:

int main(void)
{
	disableJTAG();
	init();
     200:	0d d2       	rcall	.+1050   	; 0x61c <disableJTAG>
     202:	85 df       	rcall	.-246    	; 0x10e <init>
	sei();
     204:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     206:	2f ef       	ldi	r18, 0xFF	; 255
     208:	83 ed       	ldi	r24, 0xD3	; 211
     20a:	90 e3       	ldi	r25, 0x30	; 48
     20c:	21 50       	subi	r18, 0x01	; 1
     20e:	80 40       	sbci	r24, 0x00	; 0
     210:	90 40       	sbci	r25, 0x00	; 0
     212:	e1 f7       	brne	.-8      	; 0x20c <main+0xc>
     214:	00 c0       	rjmp	.+0      	; 0x216 <main+0x16>
    while (1) 
    {
		_delay_ms(2000);
		motor_direction(BACKWARD);
     216:	00 00       	nop
     218:	81 e0       	ldi	r24, 0x01	; 1
		pwm_setDutyCycle(3, TIMER1, CHANNEL_B);
     21a:	eb d2       	rcall	.+1494   	; 0x7f2 <motor_direction>
     21c:	41 e0       	ldi	r20, 0x01	; 1
     21e:	61 e0       	ldi	r22, 0x01	; 1
		gpio_out_reset(PB, 0);
     220:	83 e0       	ldi	r24, 0x03	; 3
     222:	bd d4       	rcall	.+2426   	; 0xb9e <pwm_setDutyCycle>
		gpio_out_reset(PB, 1);
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	52 d2       	rcall	.+1188   	; 0x6ce <gpio_out_reset>
		gpio_out_set(PB, 2);
     22a:	61 e0       	ldi	r22, 0x01	; 1
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	4f d2       	rcall	.+1182   	; 0x6ce <gpio_out_reset>
     230:	62 e0       	ldi	r22, 0x02	; 2
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	34 d2       	rcall	.+1128   	; 0x69e <gpio_out_set>
     236:	2f ef       	ldi	r18, 0xFF	; 255
     238:	83 ed       	ldi	r24, 0xD3	; 211
     23a:	90 e3       	ldi	r25, 0x30	; 48
     23c:	21 50       	subi	r18, 0x01	; 1
     23e:	80 40       	sbci	r24, 0x00	; 0
		_delay_ms(2000);
		motor_direction(LEFT);
     240:	90 40       	sbci	r25, 0x00	; 0
     242:	e1 f7       	brne	.-8      	; 0x23c <main+0x3c>
		pwm_setDutyCycle(7, TIMER1, CHANNEL_B);
     244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x46>
     246:	00 00       	nop
     248:	82 e0       	ldi	r24, 0x02	; 2
		pwm_setDutyCycle(0, TIMER1, CHANNEL_A);
     24a:	d3 d2       	rcall	.+1446   	; 0x7f2 <motor_direction>
     24c:	41 e0       	ldi	r20, 0x01	; 1
     24e:	61 e0       	ldi	r22, 0x01	; 1
		gpio_out_set(PB, 0);
     250:	87 e0       	ldi	r24, 0x07	; 7
     252:	a5 d4       	rcall	.+2378   	; 0xb9e <pwm_setDutyCycle>
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	61 e0       	ldi	r22, 0x01	; 1
		gpio_out_reset(PB, 1);
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	a1 d4       	rcall	.+2370   	; 0xb9e <pwm_setDutyCycle>
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	81 e0       	ldi	r24, 0x01	; 1
		gpio_out_reset(PB, 2);
     260:	1e d2       	rcall	.+1084   	; 0x69e <gpio_out_set>
     262:	61 e0       	ldi	r22, 0x01	; 1
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	33 d2       	rcall	.+1126   	; 0x6ce <gpio_out_reset>
     268:	62 e0       	ldi	r22, 0x02	; 2
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	30 d2       	rcall	.+1120   	; 0x6ce <gpio_out_reset>
     26e:	2f ef       	ldi	r18, 0xFF	; 255
     270:	83 ed       	ldi	r24, 0xD3	; 211
		_delay_ms(2000);
		motor_direction(RIGHT);
     272:	90 e3       	ldi	r25, 0x30	; 48
     274:	21 50       	subi	r18, 0x01	; 1
		pwm_setDutyCycle(12, TIMER1, CHANNEL_B);
     276:	80 40       	sbci	r24, 0x00	; 0
     278:	90 40       	sbci	r25, 0x00	; 0
     27a:	e1 f7       	brne	.-8      	; 0x274 <main+0x74>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x7e>
     27e:	00 00       	nop
		gpio_out_reset(PB, 0);
     280:	83 e0       	ldi	r24, 0x03	; 3
     282:	b7 d2       	rcall	.+1390   	; 0x7f2 <motor_direction>
     284:	41 e0       	ldi	r20, 0x01	; 1
		gpio_out_set(PB, 1);
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	8c e0       	ldi	r24, 0x0C	; 12
		gpio_out_reset(PB, 2);
     28a:	89 d4       	rcall	.+2322   	; 0xb9e <pwm_setDutyCycle>
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	1e d2       	rcall	.+1084   	; 0x6ce <gpio_out_reset>
     292:	61 e0       	ldi	r22, 0x01	; 1
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	03 d2       	rcall	.+1030   	; 0x69e <gpio_out_set>
		_delay_ms(2000);
		motor_direction(FORWARD);
     298:	62 e0       	ldi	r22, 0x02	; 2
     29a:	81 e0       	ldi	r24, 0x01	; 1
		pwm_setDutyCycle(7, TIMER1, CHANNEL_B);
     29c:	18 d2       	rcall	.+1072   	; 0x6ce <gpio_out_reset>
     29e:	2f ef       	ldi	r18, 0xFF	; 255
     2a0:	83 ed       	ldi	r24, 0xD3	; 211
     2a2:	90 e3       	ldi	r25, 0x30	; 48
     2a4:	21 50       	subi	r18, 0x01	; 1
		pwm_setDutyCycle(100, TIMER1, CHANNEL_A);
     2a6:	80 40       	sbci	r24, 0x00	; 0
     2a8:	90 40       	sbci	r25, 0x00	; 0
     2aa:	e1 f7       	brne	.-8      	; 0x2a4 <main+0xa4>
     2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0xae>
     2ae:	00 00       	nop
		gpio_out_set(PB, 0);
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	9f d2       	rcall	.+1342   	; 0x7f2 <motor_direction>
     2b4:	41 e0       	ldi	r20, 0x01	; 1
     2b6:	61 e0       	ldi	r22, 0x01	; 1
		gpio_out_set(PB, 1);
     2b8:	87 e0       	ldi	r24, 0x07	; 7
     2ba:	71 d4       	rcall	.+2274   	; 0xb9e <pwm_setDutyCycle>
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	61 e0       	ldi	r22, 0x01	; 1
		gpio_out_set(PB, 2);
     2c0:	84 e6       	ldi	r24, 0x64	; 100
     2c2:	6d d4       	rcall	.+2266   	; 0xb9e <pwm_setDutyCycle>
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	ea d1       	rcall	.+980    	; 0x69e <gpio_out_set>
     2ca:	61 e0       	ldi	r22, 0x01	; 1
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	e7 d1       	rcall	.+974    	; 0x69e <gpio_out_set>
     2d0:	62 e0       	ldi	r22, 0x02	; 2
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	e4 d1       	rcall	.+968    	; 0x69e <gpio_out_set>
     2d6:	97 cf       	rjmp	.-210    	; 0x206 <main+0x6>

000002d8 <pinChangeCallback>:
	return leftCounter;
}

u32 encoder_getRightCounter(){
	return rightCounter;
}
     2d8:	cf 93       	push	r28
     2da:	f8 94       	cli
     2dc:	80 b1       	in	r24, 0x00	; 0
     2de:	67 e0       	ldi	r22, 0x07	; 7
     2e0:	3f d2       	rcall	.+1150   	; 0x760 <checkBit>
     2e2:	c8 2f       	mov	r28, r24
     2e4:	80 b1       	in	r24, 0x00	; 0
     2e6:	66 e0       	ldi	r22, 0x06	; 6
     2e8:	3b d2       	rcall	.+1142   	; 0x760 <checkBit>
     2ea:	40 e8       	ldi	r20, 0x80	; 128
     2ec:	c4 9f       	mul	r28, r20
     2ee:	90 01       	movw	r18, r0
     2f0:	11 24       	eor	r1, r1
     2f2:	40 e4       	ldi	r20, 0x40	; 64
     2f4:	84 9f       	mul	r24, r20
     2f6:	c0 01       	movw	r24, r0
     2f8:	11 24       	eor	r1, r1
     2fa:	82 2b       	or	r24, r18
     2fc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <leftCurrentState>
     300:	86 b1       	in	r24, 0x06	; 6
     302:	61 e0       	ldi	r22, 0x01	; 1
     304:	2d d2       	rcall	.+1114   	; 0x760 <checkBit>
     306:	c8 2f       	mov	r28, r24
     308:	86 b1       	in	r24, 0x06	; 6
     30a:	60 e0       	ldi	r22, 0x00	; 0
     30c:	29 d2       	rcall	.+1106   	; 0x760 <checkBit>
     30e:	cc 0f       	add	r28, r28
     310:	8c 2b       	or	r24, r28
     312:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rightCurrentState>
     316:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <leftLastState>
     31a:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <rightLastState>
     31e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <leftCurrentState>
     322:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <rightCurrentState>
     326:	23 2b       	or	r18, r19
     328:	89 2b       	or	r24, r25
     32a:	82 27       	eor	r24, r18
     32c:	80 38       	cpi	r24, 0x80	; 128
     32e:	a1 f4       	brne	.+40     	; 0x358 <pinChangeCallback+0x80>
     330:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <leftCounter>
     334:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <leftCounter+0x1>
     338:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <leftCounter+0x2>
     33c:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <leftCounter+0x3>
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	a1 1d       	adc	r26, r1
     344:	b1 1d       	adc	r27, r1
     346:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <leftCounter>
     34a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <leftCounter+0x1>
     34e:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <leftCounter+0x2>
     352:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <leftCounter+0x3>
     356:	62 c0       	rjmp	.+196    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     358:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <leftLastState>
     35c:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <rightLastState>
     360:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <leftCurrentState>
     364:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <rightCurrentState>
     368:	23 2b       	or	r18, r19
     36a:	89 2b       	or	r24, r25
     36c:	82 27       	eor	r24, r18
     36e:	80 34       	cpi	r24, 0x40	; 64
     370:	a1 f4       	brne	.+40     	; 0x39a <pinChangeCallback+0xc2>
     372:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <leftCounter>
     376:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <leftCounter+0x1>
     37a:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <leftCounter+0x2>
     37e:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <leftCounter+0x3>
     382:	01 96       	adiw	r24, 0x01	; 1
     384:	a1 1d       	adc	r26, r1
     386:	b1 1d       	adc	r27, r1
     388:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <leftCounter>
     38c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <leftCounter+0x1>
     390:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <leftCounter+0x2>
     394:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <leftCounter+0x3>
     398:	41 c0       	rjmp	.+130    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     39a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <leftLastState>
     39e:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <rightLastState>
     3a2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <leftCurrentState>
     3a6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <rightCurrentState>
     3aa:	23 2b       	or	r18, r19
     3ac:	89 2b       	or	r24, r25
     3ae:	82 27       	eor	r24, r18
     3b0:	82 30       	cpi	r24, 0x02	; 2
     3b2:	a1 f4       	brne	.+40     	; 0x3dc <pinChangeCallback+0x104>
     3b4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rightCounter>
     3b8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <rightCounter+0x1>
     3bc:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <rightCounter+0x2>
     3c0:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <rightCounter+0x3>
     3c4:	01 96       	adiw	r24, 0x01	; 1
     3c6:	a1 1d       	adc	r26, r1
     3c8:	b1 1d       	adc	r27, r1
     3ca:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <rightCounter>
     3ce:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <rightCounter+0x1>
     3d2:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <rightCounter+0x2>
     3d6:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <rightCounter+0x3>
     3da:	20 c0       	rjmp	.+64     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     3dc:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <leftLastState>
     3e0:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <rightLastState>
     3e4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <leftCurrentState>
     3e8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <rightCurrentState>
     3ec:	23 2b       	or	r18, r19
     3ee:	89 2b       	or	r24, r25
     3f0:	82 27       	eor	r24, r18
     3f2:	81 30       	cpi	r24, 0x01	; 1
     3f4:	99 f4       	brne	.+38     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     3f6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rightCounter>
     3fa:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <rightCounter+0x1>
     3fe:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <rightCounter+0x2>
     402:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <rightCounter+0x3>
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	a1 1d       	adc	r26, r1
     40a:	b1 1d       	adc	r27, r1
     40c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <rightCounter>
     410:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <rightCounter+0x1>
     414:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <rightCounter+0x2>
     418:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <rightCounter+0x3>
     41c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <leftCurrentState>
     420:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <leftLastState>
     424:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rightCurrentState>
     428:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rightLastState>
     42c:	86 b1       	in	r24, 0x06	; 6
     42e:	62 e0       	ldi	r22, 0x02	; 2
     430:	97 d1       	rcall	.+814    	; 0x760 <checkBit>
     432:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <d1CurrentState>
     436:	86 b1       	in	r24, 0x06	; 6
     438:	64 e0       	ldi	r22, 0x04	; 4
     43a:	92 d1       	rcall	.+804    	; 0x760 <checkBit>
     43c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <d2CurrentState>
     440:	80 b1       	in	r24, 0x00	; 0
     442:	65 e0       	ldi	r22, 0x05	; 5
     444:	8d d1       	rcall	.+794    	; 0x760 <checkBit>
     446:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <d3CurrentState>
     44a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <d1CurrentState>
     44e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <d1LastState>
     452:	98 13       	cpse	r25, r24
     454:	0c c0       	rjmp	.+24     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     456:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <d2CurrentState>
     45a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <d2LastState>
     45e:	98 13       	cpse	r25, r24
     460:	06 c0       	rjmp	.+12     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     462:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <d3CurrentState>
     466:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <d3LastState>
     46a:	98 17       	cp	r25, r24
     46c:	09 f1       	breq	.+66     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     46e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <d1CurrentState>
     472:	88 23       	and	r24, r24
     474:	39 f0       	breq	.+14     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     476:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <d1CurrentState>
     47a:	fa d5       	rcall	.+3060   	; 0x1070 <uart_transmit>
     47c:	8d e0       	ldi	r24, 0x0D	; 13
     47e:	f8 d5       	rcall	.+3056   	; 0x1070 <uart_transmit>
     480:	8a e0       	ldi	r24, 0x0A	; 10
     482:	f6 d5       	rcall	.+3052   	; 0x1070 <uart_transmit>
     484:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <d2CurrentState>
     488:	88 23       	and	r24, r24
     48a:	39 f0       	breq	.+14     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     48c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <d2CurrentState>
     490:	ef d5       	rcall	.+3038   	; 0x1070 <uart_transmit>
     492:	8d e0       	ldi	r24, 0x0D	; 13
     494:	ed d5       	rcall	.+3034   	; 0x1070 <uart_transmit>
     496:	8a e0       	ldi	r24, 0x0A	; 10
     498:	eb d5       	rcall	.+3030   	; 0x1070 <uart_transmit>
     49a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <d3CurrentState>
     49e:	88 23       	and	r24, r24
     4a0:	39 f0       	breq	.+14     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4a2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <d3CurrentState>
     4a6:	e4 d5       	rcall	.+3016   	; 0x1070 <uart_transmit>
     4a8:	8d e0       	ldi	r24, 0x0D	; 13
     4aa:	e2 d5       	rcall	.+3012   	; 0x1070 <uart_transmit>
     4ac:	8a e0       	ldi	r24, 0x0A	; 10
     4ae:	e0 d5       	rcall	.+3008   	; 0x1070 <uart_transmit>
     4b0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <d1CurrentState>
     4b4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <d1LastState>
     4b8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <d2CurrentState>
     4bc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <d2LastState>
     4c0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <d3CurrentState>
     4c4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <d3LastState>
     4c8:	78 94       	sei
     4ca:	cf 91       	pop	r28
     4cc:	08 95       	ret

000004ce <__vector_4>:
     4ce:	1f 92       	push	r1
     4d0:	0f 92       	push	r0
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	0f 92       	push	r0
     4d6:	11 24       	eor	r1, r1
     4d8:	0b b6       	in	r0, 0x3b	; 59
     4da:	0f 92       	push	r0
     4dc:	2f 93       	push	r18
     4de:	3f 93       	push	r19
     4e0:	4f 93       	push	r20
     4e2:	5f 93       	push	r21
     4e4:	6f 93       	push	r22
     4e6:	7f 93       	push	r23
     4e8:	8f 93       	push	r24
     4ea:	9f 93       	push	r25
     4ec:	af 93       	push	r26
     4ee:	bf 93       	push	r27
     4f0:	ef 93       	push	r30
     4f2:	ff 93       	push	r31
     4f4:	f1 de       	rcall	.-542    	; 0x2d8 <pinChangeCallback>
     4f6:	ff 91       	pop	r31
     4f8:	ef 91       	pop	r30
     4fa:	bf 91       	pop	r27
     4fc:	af 91       	pop	r26
     4fe:	9f 91       	pop	r25
     500:	8f 91       	pop	r24
     502:	7f 91       	pop	r23
     504:	6f 91       	pop	r22
     506:	5f 91       	pop	r21
     508:	4f 91       	pop	r20
     50a:	3f 91       	pop	r19
     50c:	2f 91       	pop	r18
     50e:	0f 90       	pop	r0
     510:	0b be       	out	0x3b, r0	; 59
     512:	0f 90       	pop	r0
     514:	0f be       	out	0x3f, r0	; 63
     516:	0f 90       	pop	r0
     518:	1f 90       	pop	r1
     51a:	18 95       	reti

0000051c <__vector_6>:
     51c:	1f 92       	push	r1
     51e:	0f 92       	push	r0
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	0f 92       	push	r0
     524:	11 24       	eor	r1, r1
     526:	0b b6       	in	r0, 0x3b	; 59
     528:	0f 92       	push	r0
     52a:	2f 93       	push	r18
     52c:	3f 93       	push	r19
     52e:	4f 93       	push	r20
     530:	5f 93       	push	r21
     532:	6f 93       	push	r22
     534:	7f 93       	push	r23
     536:	8f 93       	push	r24
     538:	9f 93       	push	r25
     53a:	af 93       	push	r26
     53c:	bf 93       	push	r27
     53e:	ef 93       	push	r30
     540:	ff 93       	push	r31
     542:	ca de       	rcall	.-620    	; 0x2d8 <pinChangeCallback>
     544:	ff 91       	pop	r31
     546:	ef 91       	pop	r30
     548:	bf 91       	pop	r27
     54a:	af 91       	pop	r26
     54c:	9f 91       	pop	r25
     54e:	8f 91       	pop	r24
     550:	7f 91       	pop	r23
     552:	6f 91       	pop	r22
     554:	5f 91       	pop	r21
     556:	4f 91       	pop	r20
     558:	3f 91       	pop	r19
     55a:	2f 91       	pop	r18
     55c:	0f 90       	pop	r0
     55e:	0b be       	out	0x3b, r0	; 59
     560:	0f 90       	pop	r0
     562:	0f be       	out	0x3f, r0	; 63
     564:	0f 90       	pop	r0
     566:	1f 90       	pop	r1
     568:	18 95       	reti

0000056a <encoder_init>:
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	40 e0       	ldi	r20, 0x00	; 0
     56e:	67 e0       	ldi	r22, 0x07	; 7
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	58 d0       	rcall	.+176    	; 0x624 <gpio_init>
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	40 e0       	ldi	r20, 0x00	; 0
     578:	66 e0       	ldi	r22, 0x06	; 6
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	53 d0       	rcall	.+166    	; 0x624 <gpio_init>
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	61 e0       	ldi	r22, 0x01	; 1
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	4e d0       	rcall	.+156    	; 0x624 <gpio_init>
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	49 d0       	rcall	.+146    	; 0x624 <gpio_init>
     592:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <leftCounter>
     596:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <leftCounter+0x1>
     59a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <leftCounter+0x2>
     59e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <leftCounter+0x3>
     5a2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <leftCurrentState>
     5a6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <leftLastState>
     5aa:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <rightCounter>
     5ae:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <rightCounter+0x1>
     5b2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rightCounter+0x2>
     5b6:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <rightCounter+0x3>
     5ba:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rightCurrentState>
     5be:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rightLastState>
     5c2:	eb e6       	ldi	r30, 0x6B	; 107
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	80 81       	ld	r24, Z
     5c8:	80 6e       	ori	r24, 0xE0	; 224
     5ca:	80 83       	st	Z, r24
     5cc:	ed e6       	ldi	r30, 0x6D	; 109
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	80 81       	ld	r24, Z
     5d2:	87 61       	ori	r24, 0x17	; 23
     5d4:	80 83       	st	Z, r24
     5d6:	08 95       	ret

000005d8 <encoder_stop>:
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	88 e6       	ldi	r24, 0x68	; 104
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	9b d0       	rcall	.+310    	; 0x716 <clearBit>
     5e0:	62 e0       	ldi	r22, 0x02	; 2
     5e2:	88 e6       	ldi	r24, 0x68	; 104
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	97 c0       	rjmp	.+302    	; 0x716 <clearBit>
     5e8:	08 95       	ret

000005ea <encoder_reset>:

void encoder_reset(){
	leftCounter = 0;
     5ea:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <leftCounter>
     5ee:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <leftCounter+0x1>
     5f2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <leftCounter+0x2>
     5f6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <leftCounter+0x3>
	leftCurrentState = 0;
     5fa:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <leftCurrentState>
	leftLastState = 0;
     5fe:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <leftLastState>
	rightCounter = 0;
     602:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <rightCounter>
     606:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <rightCounter+0x1>
     60a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rightCounter+0x2>
     60e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <rightCounter+0x3>
	rightCurrentState = 0;
     612:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rightCurrentState>
	rightLastState = 0;
     616:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rightLastState>
     61a:	08 95       	ret

0000061c <disableJTAG>:
			break;
		case PC:
			clearBit(&PORTC, _number);
			break;
		case PD:
			clearBit(&PORTD, _number);
     61c:	80 e8       	ldi	r24, 0x80	; 128
     61e:	85 bf       	out	0x35, r24	; 53
     620:	85 bf       	out	0x35, r24	; 53
     622:	08 95       	ret

00000624 <gpio_init>:
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	d6 2f       	mov	r29, r22
     62c:	c4 2f       	mov	r28, r20
     62e:	12 2f       	mov	r17, r18
     630:	81 30       	cpi	r24, 0x01	; 1
     632:	89 f0       	breq	.+34     	; 0x656 <gpio_init+0x32>
     634:	28 f0       	brcs	.+10     	; 0x640 <gpio_init+0x1c>
     636:	82 30       	cpi	r24, 0x02	; 2
     638:	c9 f0       	breq	.+50     	; 0x66c <gpio_init+0x48>
     63a:	83 30       	cpi	r24, 0x03	; 3
     63c:	11 f1       	breq	.+68     	; 0x682 <gpio_init+0x5e>
     63e:	2b c0       	rjmp	.+86     	; 0x696 <gpio_init+0x72>
     640:	81 e2       	ldi	r24, 0x21	; 33
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	75 d0       	rcall	.+234    	; 0x730 <updateBit>
     646:	c1 11       	cpse	r28, r1
     648:	26 c0       	rjmp	.+76     	; 0x696 <gpio_init+0x72>
     64a:	41 2f       	mov	r20, r17
     64c:	6d 2f       	mov	r22, r29
     64e:	82 e2       	ldi	r24, 0x22	; 34
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	6e d0       	rcall	.+220    	; 0x730 <updateBit>
     654:	20 c0       	rjmp	.+64     	; 0x696 <gpio_init+0x72>
     656:	84 e2       	ldi	r24, 0x24	; 36
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	6a d0       	rcall	.+212    	; 0x730 <updateBit>
     65c:	c1 11       	cpse	r28, r1
     65e:	1b c0       	rjmp	.+54     	; 0x696 <gpio_init+0x72>
     660:	41 2f       	mov	r20, r17
     662:	6d 2f       	mov	r22, r29
     664:	85 e2       	ldi	r24, 0x25	; 37
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	63 d0       	rcall	.+198    	; 0x730 <updateBit>
     66a:	15 c0       	rjmp	.+42     	; 0x696 <gpio_init+0x72>
     66c:	87 e2       	ldi	r24, 0x27	; 39
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	5f d0       	rcall	.+190    	; 0x730 <updateBit>
     672:	c1 11       	cpse	r28, r1
     674:	10 c0       	rjmp	.+32     	; 0x696 <gpio_init+0x72>
     676:	41 2f       	mov	r20, r17
     678:	6d 2f       	mov	r22, r29
     67a:	88 e2       	ldi	r24, 0x28	; 40
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	58 d0       	rcall	.+176    	; 0x730 <updateBit>
     680:	0a c0       	rjmp	.+20     	; 0x696 <gpio_init+0x72>
     682:	8a e2       	ldi	r24, 0x2A	; 42
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	54 d0       	rcall	.+168    	; 0x730 <updateBit>
     688:	c1 11       	cpse	r28, r1
     68a:	05 c0       	rjmp	.+10     	; 0x696 <gpio_init+0x72>
     68c:	41 2f       	mov	r20, r17
     68e:	6d 2f       	mov	r22, r29
     690:	8b e2       	ldi	r24, 0x2B	; 43
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	4d d0       	rcall	.+154    	; 0x730 <updateBit>
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	08 95       	ret

0000069e <gpio_out_set>:
	}
}
	

void gpio_out_set(port _port, u8 _number){
	switch(_port){
     69e:	81 30       	cpi	r24, 0x01	; 1
     6a0:	51 f0       	breq	.+20     	; 0x6b6 <gpio_out_set+0x18>
     6a2:	28 f0       	brcs	.+10     	; 0x6ae <gpio_out_set+0x10>
     6a4:	82 30       	cpi	r24, 0x02	; 2
     6a6:	59 f0       	breq	.+22     	; 0x6be <gpio_out_set+0x20>
     6a8:	83 30       	cpi	r24, 0x03	; 3
     6aa:	69 f0       	breq	.+26     	; 0x6c6 <gpio_out_set+0x28>
     6ac:	08 95       	ret
		case PA:
			setBit(&PORTA, _number);
     6ae:	82 e2       	ldi	r24, 0x22	; 34
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	25 c0       	rjmp	.+74     	; 0x6fe <setBit>
			break;
     6b4:	08 95       	ret
		case PB:
			setBit(&PORTB, _number);
     6b6:	85 e2       	ldi	r24, 0x25	; 37
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	21 c0       	rjmp	.+66     	; 0x6fe <setBit>
			break;
		case PC:
			setBit(&PORTC, _number);
     6bc:	08 95       	ret
     6be:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			setBit(&PORTD, _number);
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	1d c0       	rjmp	.+58     	; 0x6fe <setBit>
     6c4:	08 95       	ret
     6c6:	8b e2       	ldi	r24, 0x2B	; 43
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	19 c0       	rjmp	.+50     	; 0x6fe <setBit>
     6cc:	08 95       	ret

000006ce <gpio_out_reset>:
			break;
	}
}

void gpio_out_reset(port _port, u8 _number){
	switch(_port){
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	51 f0       	breq	.+20     	; 0x6e6 <gpio_out_reset+0x18>
     6d2:	28 f0       	brcs	.+10     	; 0x6de <gpio_out_reset+0x10>
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	59 f0       	breq	.+22     	; 0x6ee <gpio_out_reset+0x20>
     6d8:	83 30       	cpi	r24, 0x03	; 3
     6da:	69 f0       	breq	.+26     	; 0x6f6 <gpio_out_reset+0x28>
     6dc:	08 95       	ret
		case PA:
			clearBit(&PORTA, _number);
     6de:	82 e2       	ldi	r24, 0x22	; 34
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	19 c0       	rjmp	.+50     	; 0x716 <clearBit>
			break;
     6e4:	08 95       	ret
		case PB:
			clearBit(&PORTB, _number);
     6e6:	85 e2       	ldi	r24, 0x25	; 37
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	15 c0       	rjmp	.+42     	; 0x716 <clearBit>
			break;
		case PC:
			clearBit(&PORTC, _number);
     6ec:	08 95       	ret
     6ee:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			clearBit(&PORTD, _number);
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	11 c0       	rjmp	.+34     	; 0x716 <clearBit>
     6f4:	08 95       	ret
     6f6:	8b e2       	ldi	r24, 0x2B	; 43
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0d c0       	rjmp	.+26     	; 0x716 <clearBit>
     6fc:	08 95       	ret

000006fe <setBit>:
void clearBit(volatile u8 *registerName, u8 position){
	*registerName &= ~(1 << position);
}

void toggleBit(volatile u8 *registerName, u8 position){
	*registerName ^= (1 << position);
     6fe:	fc 01       	movw	r30, r24
     700:	40 81       	ld	r20, Z
     702:	21 e0       	ldi	r18, 0x01	; 1
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	02 c0       	rjmp	.+4      	; 0x70c <setBit+0xe>
     708:	22 0f       	add	r18, r18
     70a:	33 1f       	adc	r19, r19
     70c:	6a 95       	dec	r22
     70e:	e2 f7       	brpl	.-8      	; 0x708 <setBit+0xa>
     710:	24 2b       	or	r18, r20
     712:	20 83       	st	Z, r18
     714:	08 95       	ret

00000716 <clearBit>:
     716:	fc 01       	movw	r30, r24
     718:	90 81       	ld	r25, Z
     71a:	21 e0       	ldi	r18, 0x01	; 1
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	02 c0       	rjmp	.+4      	; 0x724 <clearBit+0xe>
     720:	22 0f       	add	r18, r18
     722:	33 1f       	adc	r19, r19
     724:	6a 95       	dec	r22
     726:	e2 f7       	brpl	.-8      	; 0x720 <clearBit+0xa>
     728:	20 95       	com	r18
     72a:	29 23       	and	r18, r25
     72c:	20 83       	st	Z, r18
     72e:	08 95       	ret

00000730 <updateBit>:
}

void updateBit(volatile u8 *registerName, u8 position, u8 value){
     730:	fc 01       	movw	r30, r24
     732:	94 2f       	mov	r25, r20
	u8 newValue = value << position;
	newValue |= (*registerName & ~(1 << position));
     734:	20 81       	ld	r18, Z
     736:	41 e0       	ldi	r20, 0x01	; 1
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	06 2e       	mov	r0, r22
     73c:	02 c0       	rjmp	.+4      	; 0x742 <updateBit+0x12>
     73e:	44 0f       	add	r20, r20
     740:	55 1f       	adc	r21, r21
     742:	0a 94       	dec	r0
     744:	e2 f7       	brpl	.-8      	; 0x73e <updateBit+0xe>
     746:	40 95       	com	r20
     748:	50 95       	com	r21
     74a:	24 23       	and	r18, r20
     74c:	49 2f       	mov	r20, r25
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	02 c0       	rjmp	.+4      	; 0x756 <updateBit+0x26>
     752:	44 0f       	add	r20, r20
     754:	55 1f       	adc	r21, r21
     756:	6a 95       	dec	r22
     758:	e2 f7       	brpl	.-8      	; 0x752 <updateBit+0x22>
     75a:	42 2b       	or	r20, r18
	*registerName = newValue;
     75c:	40 83       	st	Z, r20
     75e:	08 95       	ret

00000760 <checkBit>:
}

bitValue checkBit(u8 registerName, u8 position){
	return (registerName >> position) & 1;
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	02 c0       	rjmp	.+4      	; 0x768 <checkBit+0x8>
     764:	95 95       	asr	r25
     766:	87 95       	ror	r24
     768:	6a 95       	dec	r22
     76a:	e2 f7       	brpl	.-8      	; 0x764 <checkBit+0x4>
     76c:	81 70       	andi	r24, 0x01	; 1
     76e:	08 95       	ret

00000770 <motor_init>:

u8 calibrateSpeed(u8 speed){
	return 0.91*speed;
}

void motor_init(){
     770:	0f 93       	push	r16
	gpio_init(PC, 7, OUTPUT, NO_PULL);
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	41 e0       	ldi	r20, 0x01	; 1
     776:	67 e0       	ldi	r22, 0x07	; 7
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	54 df       	rcall	.-344    	; 0x624 <gpio_init>
	gpio_init(PC, 6, OUTPUT, NO_PULL);
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	41 e0       	ldi	r20, 0x01	; 1
     780:	66 e0       	ldi	r22, 0x06	; 6
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	4f df       	rcall	.-354    	; 0x624 <gpio_init>
	gpio_init(PC, 5, OUTPUT, NO_PULL);
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	41 e0       	ldi	r20, 0x01	; 1
     78a:	65 e0       	ldi	r22, 0x05	; 5
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	4a df       	rcall	.-364    	; 0x624 <gpio_init>
	gpio_init(PC, 3, OUTPUT, NO_PULL);
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	41 e0       	ldi	r20, 0x01	; 1
     794:	63 e0       	ldi	r22, 0x03	; 3
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	45 df       	rcall	.-374    	; 0x624 <gpio_init>
	pwm_init(0, 35000, TIMER2, CHANNEL_A);
     79a:	00 e0       	ldi	r16, 0x00	; 0
     79c:	22 e0       	ldi	r18, 0x02	; 2
     79e:	48 eb       	ldi	r20, 0xB8	; 184
     7a0:	58 e8       	ldi	r21, 0x88	; 136
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	20 d1       	rcall	.+576    	; 0x9ea <pwm_init>
	pwm_init(0, 25000, TIMER2, CHANNEL_B);
     7aa:	01 e0       	ldi	r16, 0x01	; 1
     7ac:	22 e0       	ldi	r18, 0x02	; 2
     7ae:	48 ea       	ldi	r20, 0xA8	; 168
     7b0:	51 e6       	ldi	r21, 0x61	; 97
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	18 d1       	rcall	.+560    	; 0x9ea <pwm_init>
}
     7ba:	0f 91       	pop	r16
     7bc:	08 95       	ret

000007be <motor_start>:

void motor_start(){
	gpio_out_set(PC, 7);
     7be:	67 e0       	ldi	r22, 0x07	; 7
     7c0:	82 e0       	ldi	r24, 0x02	; 2
     7c2:	6d df       	rcall	.-294    	; 0x69e <gpio_out_set>
	gpio_out_reset(PC, 6);
     7c4:	66 e0       	ldi	r22, 0x06	; 6
     7c6:	82 e0       	ldi	r24, 0x02	; 2
	gpio_out_reset(PC, 5);
     7c8:	82 df       	rcall	.-252    	; 0x6ce <gpio_out_reset>
     7ca:	65 e0       	ldi	r22, 0x05	; 5
	gpio_out_set(PC, 3);
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	7f df       	rcall	.-258    	; 0x6ce <gpio_out_reset>
     7d0:	63 e0       	ldi	r22, 0x03	; 3
	pwm_setDutyCycle(40, TIMER2, CHANNEL_A);
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	64 df       	rcall	.-312    	; 0x69e <gpio_out_set>
     7d6:	40 e0       	ldi	r20, 0x00	; 0
	pwm_setDutyCycle(40, TIMER2, CHANNEL_B);
     7d8:	62 e0       	ldi	r22, 0x02	; 2
     7da:	88 e2       	ldi	r24, 0x28	; 40
     7dc:	e0 d1       	rcall	.+960    	; 0xb9e <pwm_setDutyCycle>
     7de:	41 e0       	ldi	r20, 0x01	; 1
	pwm_start(TIMER2);
     7e0:	62 e0       	ldi	r22, 0x02	; 2
     7e2:	88 e2       	ldi	r24, 0x28	; 40
     7e4:	dc d1       	rcall	.+952    	; 0xb9e <pwm_setDutyCycle>
     7e6:	82 e0       	ldi	r24, 0x02	; 2
     7e8:	2b c2       	rjmp	.+1110   	; 0xc40 <pwm_start>
     7ea:	08 95       	ret

000007ec <motor_stop>:
}

void motor_stop(){
	pwm_stop(TIMER2);
     7ec:	82 e0       	ldi	r24, 0x02	; 2
     7ee:	6f c2       	rjmp	.+1246   	; 0xcce <pwm_stop>
     7f0:	08 95       	ret

000007f2 <motor_direction>:
}

void motor_direction(motorDirection direction){
	switch(direction){
     7f2:	81 30       	cpi	r24, 0x01	; 1
     7f4:	99 f0       	breq	.+38     	; 0x81c <motor_direction+0x2a>
     7f6:	28 f0       	brcs	.+10     	; 0x802 <motor_direction+0x10>
     7f8:	82 30       	cpi	r24, 0x02	; 2
     7fa:	e9 f0       	breq	.+58     	; 0x836 <motor_direction+0x44>
     7fc:	83 30       	cpi	r24, 0x03	; 3
     7fe:	41 f1       	breq	.+80     	; 0x850 <motor_direction+0x5e>
     800:	08 95       	ret
		case FORWARD:
			gpio_out_set(PC, 7);
     802:	67 e0       	ldi	r22, 0x07	; 7
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	4b df       	rcall	.-362    	; 0x69e <gpio_out_set>
			gpio_out_reset(PC, 6);
     808:	66 e0       	ldi	r22, 0x06	; 6
     80a:	82 e0       	ldi	r24, 0x02	; 2
			gpio_out_reset(PC, 5);
     80c:	60 df       	rcall	.-320    	; 0x6ce <gpio_out_reset>
     80e:	65 e0       	ldi	r22, 0x05	; 5
			gpio_out_set(PC, 3);
     810:	82 e0       	ldi	r24, 0x02	; 2
     812:	5d df       	rcall	.-326    	; 0x6ce <gpio_out_reset>
     814:	63 e0       	ldi	r22, 0x03	; 3
			break;
     816:	82 e0       	ldi	r24, 0x02	; 2
		case BACKWARD:
			gpio_out_reset(PC, 7);
     818:	42 cf       	rjmp	.-380    	; 0x69e <gpio_out_set>
     81a:	08 95       	ret
			gpio_out_set(PC, 6);
     81c:	67 e0       	ldi	r22, 0x07	; 7
     81e:	82 e0       	ldi	r24, 0x02	; 2
			gpio_out_set(PC, 5);
     820:	56 df       	rcall	.-340    	; 0x6ce <gpio_out_reset>
     822:	66 e0       	ldi	r22, 0x06	; 6
     824:	82 e0       	ldi	r24, 0x02	; 2
			gpio_out_reset(PC, 3);
     826:	3b df       	rcall	.-394    	; 0x69e <gpio_out_set>
     828:	65 e0       	ldi	r22, 0x05	; 5
     82a:	82 e0       	ldi	r24, 0x02	; 2
			break;
		case LEFT:
			gpio_out_reset(PC, 7);
     82c:	38 df       	rcall	.-400    	; 0x69e <gpio_out_set>
     82e:	63 e0       	ldi	r22, 0x03	; 3
			gpio_out_set(PC, 6);
     830:	82 e0       	ldi	r24, 0x02	; 2
     832:	4d cf       	rjmp	.-358    	; 0x6ce <gpio_out_reset>
     834:	08 95       	ret
			gpio_out_reset(PC, 5);
     836:	67 e0       	ldi	r22, 0x07	; 7
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	49 df       	rcall	.-366    	; 0x6ce <gpio_out_reset>
			gpio_out_set(PC, 3);
     83c:	66 e0       	ldi	r22, 0x06	; 6
     83e:	82 e0       	ldi	r24, 0x02	; 2
			break;
		case RIGHT:
			gpio_out_set(PC, 7);
     840:	2e df       	rcall	.-420    	; 0x69e <gpio_out_set>
     842:	65 e0       	ldi	r22, 0x05	; 5
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	43 df       	rcall	.-378    	; 0x6ce <gpio_out_reset>
			gpio_out_reset(PC, 6);
     848:	63 e0       	ldi	r22, 0x03	; 3
     84a:	82 e0       	ldi	r24, 0x02	; 2
     84c:	28 cf       	rjmp	.-432    	; 0x69e <gpio_out_set>
     84e:	08 95       	ret
			gpio_out_set(PC, 5);
     850:	67 e0       	ldi	r22, 0x07	; 7
     852:	82 e0       	ldi	r24, 0x02	; 2
     854:	24 df       	rcall	.-440    	; 0x69e <gpio_out_set>
     856:	66 e0       	ldi	r22, 0x06	; 6
			gpio_out_reset(PC, 3);
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	39 df       	rcall	.-398    	; 0x6ce <gpio_out_reset>
     85c:	65 e0       	ldi	r22, 0x05	; 5
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	1e df       	rcall	.-452    	; 0x69e <gpio_out_set>
     862:	63 e0       	ldi	r22, 0x03	; 3
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	33 cf       	rjmp	.-410    	; 0x6ce <gpio_out_reset>
     868:	08 95       	ret

0000086a <motor_speed>:
		case NO_DIR:
			break;
	}
}

void motor_speed(u8 speed){
     86a:	cf 93       	push	r28
     86c:	c8 2f       	mov	r28, r24
	pwm_setDutyCycle(speed, TIMER2, CHANNEL_A);
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	62 e0       	ldi	r22, 0x02	; 2
     872:	95 d1       	rcall	.+810    	; 0xb9e <pwm_setDutyCycle>
	pwm_setDutyCycle(speed, TIMER2, CHANNEL_B);
     874:	41 e0       	ldi	r20, 0x01	; 1
     876:	62 e0       	ldi	r22, 0x02	; 2
     878:	8c 2f       	mov	r24, r28
     87a:	91 d1       	rcall	.+802    	; 0xb9e <pwm_setDutyCycle>
}
     87c:	cf 91       	pop	r28
     87e:	08 95       	ret

00000880 <motor_individualDirSpeed>:

void motor_individualDirSpeed(motorDirection directionA, u8 speedA, motorDirection directionB, u8 speedB){
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	16 2f       	mov	r17, r22
     888:	c4 2f       	mov	r28, r20
     88a:	d2 2f       	mov	r29, r18
	switch(directionA){
     88c:	88 23       	and	r24, r24
     88e:	19 f0       	breq	.+6      	; 0x896 <motor_individualDirSpeed+0x16>
     890:	81 30       	cpi	r24, 0x01	; 1
     892:	41 f0       	breq	.+16     	; 0x8a4 <motor_individualDirSpeed+0x24>
     894:	0d c0       	rjmp	.+26     	; 0x8b0 <motor_individualDirSpeed+0x30>
		case FORWARD:
			gpio_out_reset(PC, 7);
     896:	67 e0       	ldi	r22, 0x07	; 7
     898:	82 e0       	ldi	r24, 0x02	; 2
     89a:	19 df       	rcall	.-462    	; 0x6ce <gpio_out_reset>
			gpio_out_set(PC, 6);
     89c:	66 e0       	ldi	r22, 0x06	; 6
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	fe de       	rcall	.-516    	; 0x69e <gpio_out_set>
			break;
		case BACKWARD:
			gpio_out_set(PC, 7);
     8a2:	06 c0       	rjmp	.+12     	; 0x8b0 <motor_individualDirSpeed+0x30>
     8a4:	67 e0       	ldi	r22, 0x07	; 7
			gpio_out_reset(PC, 6);
     8a6:	82 e0       	ldi	r24, 0x02	; 2
     8a8:	fa de       	rcall	.-524    	; 0x69e <gpio_out_set>
     8aa:	66 e0       	ldi	r22, 0x06	; 6
		case RIGHT:
			break;
		case NO_DIR:
			break;
	}
	pwm_setDutyCycle(speedA, TIMER2, CHANNEL_A);
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	0f df       	rcall	.-482    	; 0x6ce <gpio_out_reset>
     8b0:	40 e0       	ldi	r20, 0x00	; 0
     8b2:	62 e0       	ldi	r22, 0x02	; 2
     8b4:	81 2f       	mov	r24, r17
	switch(directionB){
     8b6:	73 d1       	rcall	.+742    	; 0xb9e <pwm_setDutyCycle>
     8b8:	cc 23       	and	r28, r28
     8ba:	19 f0       	breq	.+6      	; 0x8c2 <motor_individualDirSpeed+0x42>
		case FORWARD:
			gpio_out_reset(PC, 5);
     8bc:	c1 30       	cpi	r28, 0x01	; 1
     8be:	41 f0       	breq	.+16     	; 0x8d0 <motor_individualDirSpeed+0x50>
			gpio_out_set(PC, 3);
     8c0:	0d c0       	rjmp	.+26     	; 0x8dc <motor_individualDirSpeed+0x5c>
     8c2:	65 e0       	ldi	r22, 0x05	; 5
			break;
     8c4:	82 e0       	ldi	r24, 0x02	; 2
		case BACKWARD:
			gpio_out_set(PC, 5);
     8c6:	03 df       	rcall	.-506    	; 0x6ce <gpio_out_reset>
     8c8:	63 e0       	ldi	r22, 0x03	; 3
     8ca:	82 e0       	ldi	r24, 0x02	; 2
			gpio_out_reset(PC, 3);
     8cc:	e8 de       	rcall	.-560    	; 0x69e <gpio_out_set>
     8ce:	06 c0       	rjmp	.+12     	; 0x8dc <motor_individualDirSpeed+0x5c>
     8d0:	65 e0       	ldi	r22, 0x05	; 5
     8d2:	82 e0       	ldi	r24, 0x02	; 2
		case RIGHT:
			break;
		case NO_DIR:
			break;
	}
	pwm_setDutyCycle(speedB, TIMER2, CHANNEL_B);
     8d4:	e4 de       	rcall	.-568    	; 0x69e <gpio_out_set>
     8d6:	63 e0       	ldi	r22, 0x03	; 3
     8d8:	82 e0       	ldi	r24, 0x02	; 2
     8da:	f9 de       	rcall	.-526    	; 0x6ce <gpio_out_reset>
     8dc:	41 e0       	ldi	r20, 0x01	; 1
     8de:	62 e0       	ldi	r22, 0x02	; 2
     8e0:	8d 2f       	mov	r24, r29
     8e2:	5d d1       	rcall	.+698    	; 0xb9e <pwm_setDutyCycle>
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	1f 91       	pop	r17
     8ea:	08 95       	ret

000008ec <calculateTop>:
#include "gpio.h"

u8 timer1ClockSource;
u8 timer2ClockSource;

u16 calculateTop(u16 *prescaler, u32 frequency, timer timerSelection){
     8ec:	cf 92       	push	r12
     8ee:	df 92       	push	r13
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	ec 01       	movw	r28, r24
     8fa:	6a 01       	movw	r12, r20
     8fc:	7b 01       	movw	r14, r22
	u32 topValue = 0;
	u16 divisor = 0;
	switch(timerSelection){
     8fe:	21 30       	cpi	r18, 0x01	; 1
     900:	09 f0       	breq	.+2      	; 0x904 <calculateTop+0x18>
     902:	69 c0       	rjmp	.+210    	; 0x9d6 <calculateTop+0xea>
		case TIMER0:
			break;
		case TIMER1:
			divisor = 1;
			*prescaler = divisor;
			topValue = S_CLOCK / divisor / frequency - 1;
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	72 e1       	ldi	r23, 0x12	; 18
     908:	8a e7       	ldi	r24, 0x7A	; 122
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a7 01       	movw	r20, r14
     90e:	96 01       	movw	r18, r12
     910:	b7 d3       	rcall	.+1902   	; 0x1080 <__udivmodsi4>
     912:	da 01       	movw	r26, r20
     914:	c9 01       	movw	r24, r18
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	a1 09       	sbc	r26, r1
     91a:	b1 09       	sbc	r27, r1
			if(topValue > 0xFFFF){
     91c:	00 97       	sbiw	r24, 0x00	; 0
     91e:	21 e0       	ldi	r18, 0x01	; 1
     920:	a2 07       	cpc	r26, r18
     922:	b1 05       	cpc	r27, r1
     924:	28 f4       	brcc	.+10     	; 0x930 <calculateTop+0x44>
	switch(timerSelection){
		case TIMER0:
			break;
		case TIMER1:
			divisor = 1;
			*prescaler = divisor;
     926:	21 e0       	ldi	r18, 0x01	; 1
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	39 83       	std	Y+1, r19	; 0x01
     92c:	28 83       	st	Y, r18
     92e:	56 c0       	rjmp	.+172    	; 0x9dc <calculateTop+0xf0>
			topValue = S_CLOCK / divisor / frequency - 1;
			if(topValue > 0xFFFF){
				divisor = 8;
				*prescaler = divisor;
				topValue = S_CLOCK / divisor / frequency - 1;
     930:	60 e4       	ldi	r22, 0x40	; 64
     932:	72 e4       	ldi	r23, 0x42	; 66
     934:	8f e0       	ldi	r24, 0x0F	; 15
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a7 01       	movw	r20, r14
     93a:	96 01       	movw	r18, r12
     93c:	a1 d3       	rcall	.+1858   	; 0x1080 <__udivmodsi4>
     93e:	da 01       	movw	r26, r20
     940:	c9 01       	movw	r24, r18
     942:	01 97       	sbiw	r24, 0x01	; 1
     944:	a1 09       	sbc	r26, r1
     946:	b1 09       	sbc	r27, r1
				if(topValue > 0xFFFF){
     948:	00 97       	sbiw	r24, 0x00	; 0
     94a:	21 e0       	ldi	r18, 0x01	; 1
     94c:	a2 07       	cpc	r26, r18
     94e:	b1 05       	cpc	r27, r1
     950:	28 f4       	brcc	.+10     	; 0x95c <calculateTop+0x70>
			divisor = 1;
			*prescaler = divisor;
			topValue = S_CLOCK / divisor / frequency - 1;
			if(topValue > 0xFFFF){
				divisor = 8;
				*prescaler = divisor;
     952:	28 e0       	ldi	r18, 0x08	; 8
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	39 83       	std	Y+1, r19	; 0x01
     958:	28 83       	st	Y, r18
     95a:	40 c0       	rjmp	.+128    	; 0x9dc <calculateTop+0xf0>
				topValue = S_CLOCK / divisor / frequency - 1;
				if(topValue > 0xFFFF){
					divisor = 64;
					*prescaler = divisor;
					topValue = S_CLOCK / divisor / frequency -1;
     95c:	68 e4       	ldi	r22, 0x48	; 72
     95e:	78 ee       	ldi	r23, 0xE8	; 232
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a7 01       	movw	r20, r14
     966:	96 01       	movw	r18, r12
     968:	8b d3       	rcall	.+1814   	; 0x1080 <__udivmodsi4>
     96a:	da 01       	movw	r26, r20
     96c:	c9 01       	movw	r24, r18
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	a1 09       	sbc	r26, r1
     972:	b1 09       	sbc	r27, r1
					if(topValue > 0xFFFF){
     974:	00 97       	sbiw	r24, 0x00	; 0
     976:	21 e0       	ldi	r18, 0x01	; 1
     978:	a2 07       	cpc	r26, r18
     97a:	b1 05       	cpc	r27, r1
     97c:	28 f4       	brcc	.+10     	; 0x988 <calculateTop+0x9c>
				divisor = 8;
				*prescaler = divisor;
				topValue = S_CLOCK / divisor / frequency - 1;
				if(topValue > 0xFFFF){
					divisor = 64;
					*prescaler = divisor;
     97e:	20 e4       	ldi	r18, 0x40	; 64
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	39 83       	std	Y+1, r19	; 0x01
     984:	28 83       	st	Y, r18
     986:	2a c0       	rjmp	.+84     	; 0x9dc <calculateTop+0xf0>
					topValue = S_CLOCK / divisor / frequency -1;
					if(topValue > 0xFFFF){
						divisor = 256;
						*prescaler = divisor;
						topValue = S_CLOCK / divisor / frequency - 1;
     988:	62 e1       	ldi	r22, 0x12	; 18
     98a:	7a e7       	ldi	r23, 0x7A	; 122
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	a7 01       	movw	r20, r14
     992:	96 01       	movw	r18, r12
     994:	75 d3       	rcall	.+1770   	; 0x1080 <__udivmodsi4>
     996:	da 01       	movw	r26, r20
     998:	c9 01       	movw	r24, r18
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	a1 09       	sbc	r26, r1
     99e:	b1 09       	sbc	r27, r1
						if(topValue > 0xFFFF){
     9a0:	00 97       	sbiw	r24, 0x00	; 0
     9a2:	21 e0       	ldi	r18, 0x01	; 1
     9a4:	a2 07       	cpc	r26, r18
     9a6:	b1 05       	cpc	r27, r1
     9a8:	28 f4       	brcc	.+10     	; 0x9b4 <calculateTop+0xc8>
					divisor = 64;
					*prescaler = divisor;
					topValue = S_CLOCK / divisor / frequency -1;
					if(topValue > 0xFFFF){
						divisor = 256;
						*prescaler = divisor;
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	31 e0       	ldi	r19, 0x01	; 1
     9ae:	39 83       	std	Y+1, r19	; 0x01
     9b0:	28 83       	st	Y, r18
     9b2:	14 c0       	rjmp	.+40     	; 0x9dc <calculateTop+0xf0>
						topValue = S_CLOCK / divisor / frequency - 1;
						if(topValue > 0xFFFF){
							divisor = 1024;
							*prescaler = divisor;
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	94 e0       	ldi	r25, 0x04	; 4
     9b8:	99 83       	std	Y+1, r25	; 0x01
     9ba:	88 83       	st	Y, r24
							topValue = S_CLOCK / divisor / frequency - 1;
     9bc:	64 e8       	ldi	r22, 0x84	; 132
     9be:	7e e1       	ldi	r23, 0x1E	; 30
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	a7 01       	movw	r20, r14
     9c6:	96 01       	movw	r18, r12
     9c8:	5b d3       	rcall	.+1718   	; 0x1080 <__udivmodsi4>
     9ca:	da 01       	movw	r26, r20
     9cc:	c9 01       	movw	r24, r18
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	a1 09       	sbc	r26, r1
     9d2:	b1 09       	sbc	r27, r1
     9d4:	03 c0       	rjmp	.+6      	; 0x9dc <calculateTop+0xf0>

u8 timer1ClockSource;
u8 timer2ClockSource;

u16 calculateTop(u16 *prescaler, u32 frequency, timer timerSelection){
	u32 topValue = 0;
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	dc 01       	movw	r26, r24
			break;
		case TIMER3:
			break;
	}
	return (u16)topValue;
}
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	ff 90       	pop	r15
     9e2:	ef 90       	pop	r14
     9e4:	df 90       	pop	r13
     9e6:	cf 90       	pop	r12
     9e8:	08 95       	ret

000009ea <pwm_init>:

void pwm_init(u8 dutyCycle, u32 frequency, timer timerSelection, channel channelSelection){
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <pwm_init+0xa>
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	18 2f       	mov	r17, r24
	u16 prescaler = 0;
     9fa:	1a 82       	std	Y+2, r1	; 0x02
     9fc:	19 82       	std	Y+1, r1	; 0x01
	u32 dutyAux = 0;
	switch(timerSelection){
     9fe:	21 30       	cpi	r18, 0x01	; 1
     a00:	21 f0       	breq	.+8      	; 0xa0a <pwm_init+0x20>
     a02:	22 30       	cpi	r18, 0x02	; 2
     a04:	09 f4       	brne	.+2      	; 0xa08 <pwm_init+0x1e>
     a06:	81 c0       	rjmp	.+258    	; 0xb0a <pwm_init+0x120>
     a08:	c3 c0       	rjmp	.+390    	; 0xb90 <pwm_init+0x1a6>
		case TIMER0:
			break;
		case TIMER1:
			/* Calculate TOP register to obtain the desired frequency */
			ICR1 = calculateTop(&prescaler, frequency, timerSelection);
     a0a:	21 e0       	ldi	r18, 0x01	; 1
     a0c:	ce 01       	movw	r24, r28
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	6d df       	rcall	.-294    	; 0x8ec <calculateTop>
     a12:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a16:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			/* Sets the prescaler data to be later used in pwm_start() */
			switch(prescaler){
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	9a 81       	ldd	r25, Y+2	; 0x02
     a1e:	80 34       	cpi	r24, 0x40	; 64
     a20:	91 05       	cpc	r25, r1
     a22:	b9 f0       	breq	.+46     	; 0xa52 <pwm_init+0x68>
     a24:	30 f4       	brcc	.+12     	; 0xa32 <pwm_init+0x48>
     a26:	81 30       	cpi	r24, 0x01	; 1
     a28:	91 05       	cpc	r25, r1
     a2a:	59 f0       	breq	.+22     	; 0xa42 <pwm_init+0x58>
     a2c:	08 97       	sbiw	r24, 0x08	; 8
     a2e:	69 f0       	breq	.+26     	; 0xa4a <pwm_init+0x60>
     a30:	1b c0       	rjmp	.+54     	; 0xa68 <pwm_init+0x7e>
     a32:	81 15       	cp	r24, r1
     a34:	21 e0       	ldi	r18, 0x01	; 1
     a36:	92 07       	cpc	r25, r18
     a38:	81 f0       	breq	.+32     	; 0xa5a <pwm_init+0x70>
     a3a:	81 15       	cp	r24, r1
     a3c:	94 40       	sbci	r25, 0x04	; 4
     a3e:	89 f0       	breq	.+34     	; 0xa62 <pwm_init+0x78>
     a40:	13 c0       	rjmp	.+38     	; 0xa68 <pwm_init+0x7e>
				case 1:
					timer1ClockSource = 0x01;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <timer1ClockSource>
					break;
     a48:	0f c0       	rjmp	.+30     	; 0xa68 <pwm_init+0x7e>
				case 8:
					timer1ClockSource = 0x02;
     a4a:	82 e0       	ldi	r24, 0x02	; 2
     a4c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <timer1ClockSource>
					break;
     a50:	0b c0       	rjmp	.+22     	; 0xa68 <pwm_init+0x7e>
				case 64:
					timer1ClockSource = 0x03;
     a52:	83 e0       	ldi	r24, 0x03	; 3
     a54:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <timer1ClockSource>
					break;
     a58:	07 c0       	rjmp	.+14     	; 0xa68 <pwm_init+0x7e>
				case 256:
					timer1ClockSource = 0x04;
     a5a:	84 e0       	ldi	r24, 0x04	; 4
     a5c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <timer1ClockSource>
					break;
     a60:	03 c0       	rjmp	.+6      	; 0xa68 <pwm_init+0x7e>
				case 1024:
					timer1ClockSource = 0x05;
     a62:	85 e0       	ldi	r24, 0x05	; 5
     a64:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <timer1ClockSource>
					break;
			}
			/* FAST PWM mode with ICR1 as TOP */
			clearBit(&TCCR1A, WGM10);
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	80 e8       	ldi	r24, 0x80	; 128
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	53 de       	rcall	.-858    	; 0x716 <clearBit>
			setBit(&TCCR1A, WGM11);
     a70:	61 e0       	ldi	r22, 0x01	; 1
     a72:	80 e8       	ldi	r24, 0x80	; 128
     a74:	90 e0       	ldi	r25, 0x00	; 0
			setBit(&TCCR1B, WGM13);
     a76:	43 de       	rcall	.-890    	; 0x6fe <setBit>
     a78:	64 e0       	ldi	r22, 0x04	; 4
     a7a:	81 e8       	ldi	r24, 0x81	; 129
			setBit(&TCCR1B, WGM12);
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	3f de       	rcall	.-898    	; 0x6fe <setBit>
     a80:	63 e0       	ldi	r22, 0x03	; 3
     a82:	81 e8       	ldi	r24, 0x81	; 129
     a84:	90 e0       	ldi	r25, 0x00	; 0
			/* Clear OC1A/B on compare match and set it on BOTTOM */
			switch(channelSelection){
     a86:	3b de       	rcall	.-906    	; 0x6fe <setBit>
     a88:	00 23       	and	r16, r16
     a8a:	19 f0       	breq	.+6      	; 0xa92 <pwm_init+0xa8>
     a8c:	01 30       	cpi	r16, 0x01	; 1
				case CHANNEL_A:
					gpio_init(PD, 5, OUTPUT, NO_PULL);
     a8e:	f9 f0       	breq	.+62     	; 0xace <pwm_init+0xe4>
     a90:	7f c0       	rjmp	.+254    	; 0xb90 <pwm_init+0x1a6>
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	65 e0       	ldi	r22, 0x05	; 5
					setBit(&TCCR1A, COM1A1);
     a98:	83 e0       	ldi	r24, 0x03	; 3
     a9a:	c4 dd       	rcall	.-1144   	; 0x624 <gpio_init>
     a9c:	67 e0       	ldi	r22, 0x07	; 7
     a9e:	80 e8       	ldi	r24, 0x80	; 128
					clearBit(&TCCR1A, COM1A0);
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	2d de       	rcall	.-934    	; 0x6fe <setBit>
     aa4:	66 e0       	ldi	r22, 0x06	; 6
     aa6:	80 e8       	ldi	r24, 0x80	; 128
					dutyAux = (u32) dutyCycle * ICR1 / 100;
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	35 de       	rcall	.-918    	; 0x716 <clearBit>
     aac:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
					OCR1A = (u16) dutyAux;
     ab0:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     ab4:	21 2f       	mov	r18, r17
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	0e d3       	rcall	.+1564   	; 0x10d6 <__umulhisi3>
     aba:	24 e6       	ldi	r18, 0x64	; 100
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	50 e0       	ldi	r21, 0x00	; 0
     ac2:	de d2       	rcall	.+1468   	; 0x1080 <__udivmodsi4>
     ac4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
					break;
				case CHANNEL_B:
					gpio_init(PD, 4, OUTPUT, NO_PULL);
     ac8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     acc:	61 c0       	rjmp	.+194    	; 0xb90 <pwm_init+0x1a6>
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	41 e0       	ldi	r20, 0x01	; 1
					setBit(&TCCR1A, COM1B1);
     ad2:	64 e0       	ldi	r22, 0x04	; 4
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	a6 dd       	rcall	.-1204   	; 0x624 <gpio_init>
     ad8:	65 e0       	ldi	r22, 0x05	; 5
					clearBit(&TCCR1A, COM1B0);
     ada:	80 e8       	ldi	r24, 0x80	; 128
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0f de       	rcall	.-994    	; 0x6fe <setBit>
     ae0:	64 e0       	ldi	r22, 0x04	; 4
					dutyAux = (u32) dutyCycle * ICR1 / 100;
     ae2:	80 e8       	ldi	r24, 0x80	; 128
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	17 de       	rcall	.-978    	; 0x716 <clearBit>
     ae8:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
					OCR1B = (u16) dutyAux;
     aec:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     af0:	21 2f       	mov	r18, r17
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	f0 d2       	rcall	.+1504   	; 0x10d6 <__umulhisi3>
     af6:	24 e6       	ldi	r18, 0x64	; 100
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 e0       	ldi	r20, 0x00	; 0
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	c0 d2       	rcall	.+1408   	; 0x1080 <__udivmodsi4>
					break;
     b00:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
					break;
			}
			break;
		case TIMER2:
			TIMSK2 = 0;
			clearBit(&ASSR, AS2);
     b04:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     b08:	43 c0       	rjmp	.+134    	; 0xb90 <pwm_init+0x1a6>
     b0a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
			clearBit(&TCCR2B, WGM22);
     b0e:	65 e0       	ldi	r22, 0x05	; 5
     b10:	86 eb       	ldi	r24, 0xB6	; 182
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	00 de       	rcall	.-1024   	; 0x716 <clearBit>
			setBit(&TCCR2A, WGM21);
     b16:	63 e0       	ldi	r22, 0x03	; 3
     b18:	81 eb       	ldi	r24, 0xB1	; 177
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	fc dd       	rcall	.-1032   	; 0x716 <clearBit>
			setBit(&TCCR2A, WGM20);
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	80 eb       	ldi	r24, 0xB0	; 176
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	ec dd       	rcall	.-1064   	; 0x6fe <setBit>
     b26:	60 e0       	ldi	r22, 0x00	; 0
			timer2ClockSource = 0x01;
     b28:	80 eb       	ldi	r24, 0xB0	; 176
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	e8 dd       	rcall	.-1072   	; 0x6fe <setBit>
			switch(channelSelection){
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <timer2ClockSource>
     b34:	00 23       	and	r16, r16
				case CHANNEL_A:
					gpio_init(PD, 7, OUTPUT, NO_PULL);
     b36:	19 f0       	breq	.+6      	; 0xb3e <pwm_init+0x154>
     b38:	01 30       	cpi	r16, 0x01	; 1
     b3a:	b1 f0       	breq	.+44     	; 0xb68 <pwm_init+0x17e>
     b3c:	29 c0       	rjmp	.+82     	; 0xb90 <pwm_init+0x1a6>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2A = (u8) dutyAux;
     b40:	41 e0       	ldi	r20, 0x01	; 1
     b42:	67 e0       	ldi	r22, 0x07	; 7
     b44:	83 e0       	ldi	r24, 0x03	; 3
     b46:	6e dd       	rcall	.-1316   	; 0x624 <gpio_init>
     b48:	8f ef       	ldi	r24, 0xFF	; 255
     b4a:	18 9f       	mul	r17, r24
     b4c:	90 01       	movw	r18, r0
     b4e:	11 24       	eor	r1, r1
     b50:	36 95       	lsr	r19
     b52:	27 95       	ror	r18
     b54:	36 95       	lsr	r19
     b56:	27 95       	ror	r18
     b58:	ab e7       	ldi	r26, 0x7B	; 123
     b5a:	b4 e1       	ldi	r27, 0x14	; 20
					break;
     b5c:	bc d2       	rcall	.+1400   	; 0x10d6 <__umulhisi3>
				case CHANNEL_B:
					gpio_init(PD, 6, OUTPUT, NO_PULL);
     b5e:	96 95       	lsr	r25
     b60:	87 95       	ror	r24
     b62:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     b66:	14 c0       	rjmp	.+40     	; 0xb90 <pwm_init+0x1a6>
     b68:	20 e0       	ldi	r18, 0x00	; 0
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2B = (u8) dutyAux;
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	66 e0       	ldi	r22, 0x06	; 6
     b6e:	83 e0       	ldi	r24, 0x03	; 3
     b70:	59 dd       	rcall	.-1358   	; 0x624 <gpio_init>
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	18 9f       	mul	r17, r24
     b76:	90 01       	movw	r18, r0
     b78:	11 24       	eor	r1, r1
     b7a:	36 95       	lsr	r19
     b7c:	27 95       	ror	r18
     b7e:	36 95       	lsr	r19
     b80:	27 95       	ror	r18
     b82:	ab e7       	ldi	r26, 0x7B	; 123
     b84:	b4 e1       	ldi	r27, 0x14	; 20
     b86:	a7 d2       	rcall	.+1358   	; 0x10d6 <__umulhisi3>
     b88:	96 95       	lsr	r25
			}
			break;
		case TIMER3:
			break;
	}
}
     b8a:	87 95       	ror	r24
     b8c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	08 95       	ret

00000b9e <pwm_setDutyCycle>:

/** Sets a new duty cycle for the selected timer and channel 
*/
void pwm_setDutyCycle(u8 dutyCycle, timer timerSelection, channel channelSelection){
	u32 dutyAux = 0;
	switch(timerSelection){
     b9e:	61 30       	cpi	r22, 0x01	; 1
     ba0:	19 f0       	breq	.+6      	; 0xba8 <pwm_setDutyCycle+0xa>
     ba2:	62 30       	cpi	r22, 0x02	; 2
     ba4:	41 f1       	breq	.+80     	; 0xbf6 <pwm_setDutyCycle+0x58>
     ba6:	08 95       	ret
		case TIMER0:
			break;
		case TIMER1:
			switch(channelSelection){
     ba8:	44 23       	and	r20, r20
     baa:	19 f0       	breq	.+6      	; 0xbb2 <pwm_setDutyCycle+0x14>
     bac:	41 30       	cpi	r20, 0x01	; 1
     bae:	91 f0       	breq	.+36     	; 0xbd4 <pwm_setDutyCycle+0x36>
     bb0:	08 95       	ret
				case CHANNEL_A:
					dutyAux = (u32) dutyCycle * ICR1 / 100;
     bb2:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     bb6:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
					OCR1A = (u16) dutyAux;
     bba:	28 2f       	mov	r18, r24
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	8b d2       	rcall	.+1302   	; 0x10d6 <__umulhisi3>
     bc0:	24 e6       	ldi	r18, 0x64	; 100
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	5b d2       	rcall	.+1206   	; 0x1080 <__udivmodsi4>
     bca:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     bce:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
					break;
     bd2:	08 95       	ret
				case CHANNEL_B:
					dutyAux = (u32) dutyCycle * ICR1 / 100;
     bd4:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     bd8:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
					OCR1B = (u16) dutyAux;
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	7a d2       	rcall	.+1268   	; 0x10d6 <__umulhisi3>
     be2:	24 e6       	ldi	r18, 0x64	; 100
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e0       	ldi	r20, 0x00	; 0
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	4a d2       	rcall	.+1172   	; 0x1080 <__udivmodsi4>
     bec:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     bf0:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				case NO_CHANNEL:
					break;
			}
			break;
		case TIMER2:
			switch(channelSelection){
     bf4:	08 95       	ret
     bf6:	44 23       	and	r20, r20
     bf8:	19 f0       	breq	.+6      	; 0xc00 <pwm_setDutyCycle+0x62>
     bfa:	41 30       	cpi	r20, 0x01	; 1
     bfc:	89 f0       	breq	.+34     	; 0xc20 <pwm_setDutyCycle+0x82>
				case CHANNEL_A:
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2A = (u8) dutyAux;
     bfe:	08 95       	ret
     c00:	9f ef       	ldi	r25, 0xFF	; 255
     c02:	89 9f       	mul	r24, r25
     c04:	90 01       	movw	r18, r0
     c06:	11 24       	eor	r1, r1
     c08:	36 95       	lsr	r19
     c0a:	27 95       	ror	r18
     c0c:	36 95       	lsr	r19
     c0e:	27 95       	ror	r18
     c10:	ab e7       	ldi	r26, 0x7B	; 123
     c12:	b4 e1       	ldi	r27, 0x14	; 20
     c14:	60 d2       	rcall	.+1216   	; 0x10d6 <__umulhisi3>
     c16:	96 95       	lsr	r25
     c18:	87 95       	ror	r24
     c1a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
					break;
				case CHANNEL_B:
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2B = (u8) dutyAux;
     c1e:	08 95       	ret
     c20:	9f ef       	ldi	r25, 0xFF	; 255
     c22:	89 9f       	mul	r24, r25
     c24:	90 01       	movw	r18, r0
     c26:	11 24       	eor	r1, r1
     c28:	36 95       	lsr	r19
     c2a:	27 95       	ror	r18
     c2c:	36 95       	lsr	r19
     c2e:	27 95       	ror	r18
     c30:	ab e7       	ldi	r26, 0x7B	; 123
     c32:	b4 e1       	ldi	r27, 0x14	; 20
     c34:	50 d2       	rcall	.+1184   	; 0x10d6 <__umulhisi3>
     c36:	96 95       	lsr	r25
     c38:	87 95       	ror	r24
     c3a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     c3e:	08 95       	ret

00000c40 <pwm_start>:
}

/** Starts the selected timer
*/
void pwm_start(timer timerSelection){
	switch(timerSelection){
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	19 f0       	breq	.+6      	; 0xc4a <pwm_start+0xa>
     c44:	82 30       	cpi	r24, 0x02	; 2
     c46:	d1 f0       	breq	.+52     	; 0xc7c <pwm_start+0x3c>
     c48:	08 95       	ret
		case TIMER0:
			break;
		case TIMER1:
			updateBit(&TCCR1B, CS12, (timer1ClockSource >> 2) & 1);
     c4a:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <timer1ClockSource>
     c4e:	42 fb       	bst	r20, 2
     c50:	44 27       	eor	r20, r20
     c52:	40 f9       	bld	r20, 0
     c54:	62 e0       	ldi	r22, 0x02	; 2
     c56:	81 e8       	ldi	r24, 0x81	; 129
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	6a dd       	rcall	.-1324   	; 0x730 <updateBit>
			updateBit(&TCCR1B, CS11, (timer1ClockSource >> 1) & 1);
     c5c:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <timer1ClockSource>
     c60:	46 95       	lsr	r20
     c62:	41 70       	andi	r20, 0x01	; 1
     c64:	61 e0       	ldi	r22, 0x01	; 1
     c66:	81 e8       	ldi	r24, 0x81	; 129
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	62 dd       	rcall	.-1340   	; 0x730 <updateBit>
			updateBit(&TCCR1B, CS10, timer1ClockSource & 1);
     c6c:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <timer1ClockSource>
     c70:	41 70       	andi	r20, 0x01	; 1
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	81 e8       	ldi	r24, 0x81	; 129
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	5b cd       	rjmp	.-1354   	; 0x730 <updateBit>
			break;
     c7a:	08 95       	ret
		case TIMER2:
			updateBit(&TCCR2B, CS22, (timer2ClockSource >> 2) & 1);
     c7c:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <timer2ClockSource>
     c80:	42 fb       	bst	r20, 2
     c82:	44 27       	eor	r20, r20
     c84:	40 f9       	bld	r20, 0
     c86:	62 e0       	ldi	r22, 0x02	; 2
     c88:	81 eb       	ldi	r24, 0xB1	; 177
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	51 dd       	rcall	.-1374   	; 0x730 <updateBit>
			updateBit(&TCCR2B, CS21, (timer2ClockSource >> 1) & 1);
     c8e:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <timer2ClockSource>
     c92:	46 95       	lsr	r20
     c94:	41 70       	andi	r20, 0x01	; 1
     c96:	61 e0       	ldi	r22, 0x01	; 1
     c98:	81 eb       	ldi	r24, 0xB1	; 177
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	49 dd       	rcall	.-1390   	; 0x730 <updateBit>
			updateBit(&TCCR2B, CS20, timer2ClockSource & 1);
     c9e:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <timer2ClockSource>
     ca2:	41 70       	andi	r20, 0x01	; 1
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	81 eb       	ldi	r24, 0xB1	; 177
     ca8:	90 e0       	ldi	r25, 0x00	; 0
			setBit(&TCCR2A, COM2A1);
     caa:	42 dd       	rcall	.-1404   	; 0x730 <updateBit>
     cac:	67 e0       	ldi	r22, 0x07	; 7
     cae:	80 eb       	ldi	r24, 0xB0	; 176
			clearBit(&TCCR2A, COM2A0);
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	25 dd       	rcall	.-1462   	; 0x6fe <setBit>
     cb4:	66 e0       	ldi	r22, 0x06	; 6
			setBit(&TCCR2A, COM2B1);
     cb6:	80 eb       	ldi	r24, 0xB0	; 176
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	2d dd       	rcall	.-1446   	; 0x716 <clearBit>
     cbc:	65 e0       	ldi	r22, 0x05	; 5
     cbe:	80 eb       	ldi	r24, 0xB0	; 176
			clearBit(&TCCR2A, COM2B0);
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	1d dd       	rcall	.-1478   	; 0x6fe <setBit>
     cc4:	64 e0       	ldi	r22, 0x04	; 4
     cc6:	80 eb       	ldi	r24, 0xB0	; 176
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	25 cd       	rjmp	.-1462   	; 0x716 <clearBit>
     ccc:	08 95       	ret

00000cce <pwm_stop>:
	}
}
/** Stops the selected timer
*/
void pwm_stop(timer timerSelection){
	switch(timerSelection){
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	19 f0       	breq	.+6      	; 0xcd8 <pwm_stop+0xa>
     cd2:	82 30       	cpi	r24, 0x02	; 2
     cd4:	71 f0       	breq	.+28     	; 0xcf2 <pwm_stop+0x24>
     cd6:	08 95       	ret
		case TIMER0:
			break;
		case TIMER1:
			clearBit(&TCCR1B, CS12);
     cd8:	62 e0       	ldi	r22, 0x02	; 2
     cda:	81 e8       	ldi	r24, 0x81	; 129
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	1b dd       	rcall	.-1482   	; 0x716 <clearBit>
			clearBit(&TCCR1B, CS11);
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	81 e8       	ldi	r24, 0x81	; 129
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	17 dd       	rcall	.-1490   	; 0x716 <clearBit>
			clearBit(&TCCR1B, CS10);
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	81 e8       	ldi	r24, 0x81	; 129
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	13 cd       	rjmp	.-1498   	; 0x716 <clearBit>
			break;
		case TIMER2:
			clearBit(&TCCR2B, CS22);
     cf0:	08 95       	ret
     cf2:	62 e0       	ldi	r22, 0x02	; 2
     cf4:	81 eb       	ldi	r24, 0xB1	; 177
			clearBit(&TCCR2B, CS21);
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0e dd       	rcall	.-1508   	; 0x716 <clearBit>
     cfa:	61 e0       	ldi	r22, 0x01	; 1
     cfc:	81 eb       	ldi	r24, 0xB1	; 177
			clearBit(&TCCR2B, CS20);
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	0a dd       	rcall	.-1516   	; 0x716 <clearBit>
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	81 eb       	ldi	r24, 0xB1	; 177
     d06:	90 e0       	ldi	r25, 0x00	; 0
			TCCR2A &= 0x0F;
     d08:	06 dd       	rcall	.-1524   	; 0x716 <clearBit>
     d0a:	e0 eb       	ldi	r30, 0xB0	; 176
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
			gpio_out_reset(PD, 7);
     d0e:	80 81       	ld	r24, Z
     d10:	8f 70       	andi	r24, 0x0F	; 15
     d12:	80 83       	st	Z, r24
     d14:	67 e0       	ldi	r22, 0x07	; 7
			gpio_out_reset(PD, 6);
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	da dc       	rcall	.-1612   	; 0x6ce <gpio_out_reset>
     d1a:	66 e0       	ldi	r22, 0x06	; 6
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	d7 cc       	rjmp	.-1618   	; 0x6ce <gpio_out_reset>
     d20:	08 95       	ret

00000d22 <__vector_20>:
	
}

void uart_stop(bool uartTx, bool uartRx){
	clearBit(&UCSR0B, RXEN0);
	clearBit(&UCSR0B, TXEN0);
     d22:	1f 92       	push	r1
     d24:	0f 92       	push	r0
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	0f 92       	push	r0
     d2a:	11 24       	eor	r1, r1
     d2c:	0b b6       	in	r0, 0x3b	; 59
     d2e:	0f 92       	push	r0
     d30:	2f 93       	push	r18
     d32:	3f 93       	push	r19
     d34:	4f 93       	push	r20
     d36:	5f 93       	push	r21
     d38:	6f 93       	push	r22
     d3a:	7f 93       	push	r23
     d3c:	8f 93       	push	r24
     d3e:	9f 93       	push	r25
     d40:	af 93       	push	r26
     d42:	bf 93       	push	r27
     d44:	ef 93       	push	r30
     d46:	ff 93       	push	r31
     d48:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     d4c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <aux>
     d50:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <aux>
     d54:	8e 2f       	mov	r24, r30
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	80 33       	cpi	r24, 0x30	; 48
     d5a:	91 05       	cpc	r25, r1
     d5c:	08 f0       	brcs	.+2      	; 0xd60 <__vector_20+0x3e>
     d5e:	29 c1       	rjmp	.+594    	; 0xfb2 <__vector_20+0x290>
     d60:	fc 01       	movw	r30, r24
     d62:	ea 5b       	subi	r30, 0xBA	; 186
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	ae c1       	rjmp	.+860    	; 0x10c4 <__tablejump2__>
     d68:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <systemEnable>
     d6c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <servoEnable>
     d70:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dcEnable>
     d74:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <dcSpeedLeft>
     d78:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
     d7c:	37 dd       	rcall	.-1426   	; 0x7ec <motor_stop>
     d7e:	35 dc       	rcall	.-1942   	; 0x5ea <encoder_reset>
     d80:	2b dc       	rcall	.-1962   	; 0x5d8 <encoder_stop>
     d82:	62 e0       	ldi	r22, 0x02	; 2
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	a3 dc       	rcall	.-1722   	; 0x6ce <gpio_out_reset>
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	a1 df       	rcall	.-190    	; 0xcce <pwm_stop>
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	86 dc       	rcall	.-1780   	; 0x69e <gpio_out_set>
     d92:	61 e0       	ldi	r22, 0x01	; 1
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	9b dc       	rcall	.-1738   	; 0x6ce <gpio_out_reset>
     d98:	62 e0       	ldi	r22, 0x02	; 2
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	98 dc       	rcall	.-1744   	; 0x6ce <gpio_out_reset>
     d9e:	09 c1       	rjmp	.+530    	; 0xfb2 <__vector_20+0x290>
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <systemEnable>
     da6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dcEnable>
     daa:	e2 dc       	rcall	.-1596   	; 0x770 <motor_init>
     dac:	de db       	rcall	.-2116   	; 0x56a <encoder_init>
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	47 df       	rcall	.-370    	; 0xc40 <pwm_start>
     db2:	62 e0       	ldi	r22, 0x02	; 2
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	73 dc       	rcall	.-1818   	; 0x69e <gpio_out_set>
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	88 dc       	rcall	.-1776   	; 0x6ce <gpio_out_reset>
     dbe:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <systemMode>
     dc2:	81 11       	cpse	r24, r1
     dc4:	07 c0       	rjmp	.+14     	; 0xdd4 <__vector_20+0xb2>
     dc6:	61 e0       	ldi	r22, 0x01	; 1
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	69 dc       	rcall	.-1838   	; 0x69e <gpio_out_set>
     dcc:	62 e0       	ldi	r22, 0x02	; 2
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	7e dc       	rcall	.-1796   	; 0x6ce <gpio_out_reset>
     dd2:	ef c0       	rjmp	.+478    	; 0xfb2 <__vector_20+0x290>
     dd4:	61 e0       	ldi	r22, 0x01	; 1
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	7a dc       	rcall	.-1804   	; 0x6ce <gpio_out_reset>
     dda:	62 e0       	ldi	r22, 0x02	; 2
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	5f dc       	rcall	.-1858   	; 0x69e <gpio_out_set>
     de0:	e8 c0       	rjmp	.+464    	; 0xfb2 <__vector_20+0x290>
     de2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <systemMode>
     de6:	e5 c0       	rjmp	.+458    	; 0xfb2 <__vector_20+0x290>
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <systemMode>
     dee:	e1 c0       	rjmp	.+450    	; 0xfb2 <__vector_20+0x290>
     df0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <servoEnable>
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	6b df       	rcall	.-298    	; 0xcce <pwm_stop>
     df8:	dc c0       	rjmp	.+440    	; 0xfb2 <__vector_20+0x290>
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <servoEnable>
     e00:	1f df       	rcall	.-450    	; 0xc40 <pwm_start>
     e02:	d7 c0       	rjmp	.+430    	; 0xfb2 <__vector_20+0x290>
     e04:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servoEnable>
     e08:	88 23       	and	r24, r24
     e0a:	09 f4       	brne	.+2      	; 0xe0e <__vector_20+0xec>
     e0c:	d2 c0       	rjmp	.+420    	; 0xfb2 <__vector_20+0x290>
     e0e:	41 e0       	ldi	r20, 0x01	; 1
     e10:	61 e0       	ldi	r22, 0x01	; 1
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	c4 de       	rcall	.-632    	; 0xb9e <pwm_setDutyCycle>
     e16:	cd c0       	rjmp	.+410    	; 0xfb2 <__vector_20+0x290>
     e18:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servoEnable>
     e1c:	88 23       	and	r24, r24
     e1e:	09 f4       	brne	.+2      	; 0xe22 <__vector_20+0x100>
     e20:	c8 c0       	rjmp	.+400    	; 0xfb2 <__vector_20+0x290>
     e22:	41 e0       	ldi	r20, 0x01	; 1
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	87 e0       	ldi	r24, 0x07	; 7
     e28:	ba de       	rcall	.-652    	; 0xb9e <pwm_setDutyCycle>
     e2a:	c3 c0       	rjmp	.+390    	; 0xfb2 <__vector_20+0x290>
     e2c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servoEnable>
     e30:	88 23       	and	r24, r24
     e32:	09 f4       	brne	.+2      	; 0xe36 <__vector_20+0x114>
     e34:	be c0       	rjmp	.+380    	; 0xfb2 <__vector_20+0x290>
     e36:	41 e0       	ldi	r20, 0x01	; 1
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	8c e0       	ldi	r24, 0x0C	; 12
     e3c:	b0 de       	rcall	.-672    	; 0xb9e <pwm_setDutyCycle>
     e3e:	b9 c0       	rjmp	.+370    	; 0xfb2 <__vector_20+0x290>
     e40:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dcEnable>
     e44:	d3 dc       	rcall	.-1626   	; 0x7ec <motor_stop>
     e46:	b5 c0       	rjmp	.+362    	; 0xfb2 <__vector_20+0x290>
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dcEnable>
     e4e:	b7 dc       	rcall	.-1682   	; 0x7be <motor_start>
     e50:	88 e2       	ldi	r24, 0x28	; 40
     e52:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     e56:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     e5a:	ab c0       	rjmp	.+342    	; 0xfb2 <__vector_20+0x290>
     e5c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     e60:	88 23       	and	r24, r24
     e62:	09 f4       	brne	.+2      	; 0xe66 <__vector_20+0x144>
     e64:	a6 c0       	rjmp	.+332    	; 0xfb2 <__vector_20+0x290>
     e66:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <dcSpeedLeft>
     e70:	ac 01       	movw	r20, r24
     e72:	42 0f       	add	r20, r18
     e74:	51 1d       	adc	r21, r1
     e76:	9a 01       	movw	r18, r20
     e78:	35 95       	asr	r19
     e7a:	27 95       	ror	r18
     e7c:	2a 50       	subi	r18, 0x0A	; 10
     e7e:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <dcSpeedLeft>
     e82:	82 0f       	add	r24, r18
     e84:	91 1d       	adc	r25, r1
     e86:	95 95       	asr	r25
     e88:	87 95       	ror	r24
     e8a:	86 5f       	subi	r24, 0xF6	; 246
     e8c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     e90:	29 32       	cpi	r18, 0x29	; 41
     e92:	38 f4       	brcc	.+14     	; 0xea2 <__vector_20+0x180>
     e94:	88 e2       	ldi	r24, 0x28	; 40
     e96:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     e9a:	82 e3       	ldi	r24, 0x32	; 50
     e9c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     ea0:	08 c0       	rjmp	.+16     	; 0xeb2 <__vector_20+0x190>
     ea2:	84 36       	cpi	r24, 0x64	; 100
     ea4:	30 f0       	brcs	.+12     	; 0xeb2 <__vector_20+0x190>
     ea6:	84 e6       	ldi	r24, 0x64	; 100
     ea8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     eac:	8a e5       	ldi	r24, 0x5A	; 90
     eae:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     eb2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     eb6:	44 e0       	ldi	r20, 0x04	; 4
     eb8:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <dcSpeedLeft>
     ebc:	84 e0       	ldi	r24, 0x04	; 4
     ebe:	e0 dc       	rcall	.-1600   	; 0x880 <motor_individualDirSpeed>
     ec0:	78 c0       	rjmp	.+240    	; 0xfb2 <__vector_20+0x290>
     ec2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     ec6:	88 23       	and	r24, r24
     ec8:	09 f4       	brne	.+2      	; 0xecc <__vector_20+0x1aa>
     eca:	73 c0       	rjmp	.+230    	; 0xfb2 <__vector_20+0x290>
     ecc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <dcSpeedLeft>
     ed6:	ac 01       	movw	r20, r24
     ed8:	42 0f       	add	r20, r18
     eda:	51 1d       	adc	r21, r1
     edc:	9a 01       	movw	r18, r20
     ede:	35 95       	asr	r19
     ee0:	27 95       	ror	r18
     ee2:	26 5f       	subi	r18, 0xF6	; 246
     ee4:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <dcSpeedLeft>
     ee8:	82 0f       	add	r24, r18
     eea:	91 1d       	adc	r25, r1
     eec:	95 95       	asr	r25
     eee:	87 95       	ror	r24
     ef0:	8a 50       	subi	r24, 0x0A	; 10
     ef2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     ef6:	89 32       	cpi	r24, 0x29	; 41
     ef8:	38 f4       	brcc	.+14     	; 0xf08 <__vector_20+0x1e6>
     efa:	88 e2       	ldi	r24, 0x28	; 40
     efc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     f00:	82 e3       	ldi	r24, 0x32	; 50
     f02:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     f06:	08 c0       	rjmp	.+16     	; 0xf18 <__vector_20+0x1f6>
     f08:	24 36       	cpi	r18, 0x64	; 100
     f0a:	30 f0       	brcs	.+12     	; 0xf18 <__vector_20+0x1f6>
     f0c:	84 e6       	ldi	r24, 0x64	; 100
     f0e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     f12:	8a e5       	ldi	r24, 0x5A	; 90
     f14:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     f18:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     f1c:	44 e0       	ldi	r20, 0x04	; 4
     f1e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <dcSpeedLeft>
     f22:	84 e0       	ldi	r24, 0x04	; 4
     f24:	ad dc       	rcall	.-1702   	; 0x880 <motor_individualDirSpeed>
     f26:	45 c0       	rjmp	.+138    	; 0xfb2 <__vector_20+0x290>
     f28:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     f2c:	88 23       	and	r24, r24
     f2e:	09 f4       	brne	.+2      	; 0xf32 <__vector_20+0x210>
     f30:	40 c0       	rjmp	.+128    	; 0xfb2 <__vector_20+0x290>
     f32:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dcSpeedLeft>
     f36:	84 36       	cpi	r24, 0x64	; 100
     f38:	08 f0       	brcs	.+2      	; 0xf3c <__vector_20+0x21a>
     f3a:	3b c0       	rjmp	.+118    	; 0xfb2 <__vector_20+0x290>
     f3c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
     f40:	94 36       	cpi	r25, 0x64	; 100
     f42:	b8 f5       	brcc	.+110    	; 0xfb2 <__vector_20+0x290>
     f44:	86 5f       	subi	r24, 0xF6	; 246
     f46:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     f4a:	96 5f       	subi	r25, 0xF6	; 246
     f4c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
     f50:	8c dc       	rcall	.-1768   	; 0x86a <motor_speed>
     f52:	2f c0       	rjmp	.+94     	; 0xfb2 <__vector_20+0x290>
     f54:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     f58:	88 23       	and	r24, r24
     f5a:	59 f1       	breq	.+86     	; 0xfb2 <__vector_20+0x290>
     f5c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dcSpeedLeft>
     f60:	89 32       	cpi	r24, 0x29	; 41
     f62:	38 f1       	brcs	.+78     	; 0xfb2 <__vector_20+0x290>
     f64:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
     f68:	99 32       	cpi	r25, 0x29	; 41
     f6a:	18 f1       	brcs	.+70     	; 0xfb2 <__vector_20+0x290>
     f6c:	8a 50       	subi	r24, 0x0A	; 10
     f6e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     f72:	9a 50       	subi	r25, 0x0A	; 10
     f74:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
     f78:	78 dc       	rcall	.-1808   	; 0x86a <motor_speed>
     f7a:	1b c0       	rjmp	.+54     	; 0xfb2 <__vector_20+0x290>
     f7c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     f80:	88 23       	and	r24, r24
     f82:	b9 f0       	breq	.+46     	; 0xfb2 <__vector_20+0x290>
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	35 dc       	rcall	.-1942   	; 0x7f2 <motor_direction>
     f88:	14 c0       	rjmp	.+40     	; 0xfb2 <__vector_20+0x290>
     f8a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     f8e:	88 23       	and	r24, r24
     f90:	81 f0       	breq	.+32     	; 0xfb2 <__vector_20+0x290>
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	2e dc       	rcall	.-1956   	; 0x7f2 <motor_direction>
     f96:	0d c0       	rjmp	.+26     	; 0xfb2 <__vector_20+0x290>
     f98:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     f9c:	88 23       	and	r24, r24
     f9e:	49 f0       	breq	.+18     	; 0xfb2 <__vector_20+0x290>
     fa0:	82 e0       	ldi	r24, 0x02	; 2
     fa2:	27 dc       	rcall	.-1970   	; 0x7f2 <motor_direction>
     fa4:	06 c0       	rjmp	.+12     	; 0xfb2 <__vector_20+0x290>
     fa6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     faa:	88 23       	and	r24, r24
     fac:	11 f0       	breq	.+4      	; 0xfb2 <__vector_20+0x290>
     fae:	83 e0       	ldi	r24, 0x03	; 3
     fb0:	20 dc       	rcall	.-1984   	; 0x7f2 <motor_direction>
     fb2:	ff 91       	pop	r31
     fb4:	ef 91       	pop	r30
     fb6:	bf 91       	pop	r27
     fb8:	af 91       	pop	r26
     fba:	9f 91       	pop	r25
     fbc:	8f 91       	pop	r24
     fbe:	7f 91       	pop	r23
     fc0:	6f 91       	pop	r22
     fc2:	5f 91       	pop	r21
     fc4:	4f 91       	pop	r20
     fc6:	3f 91       	pop	r19
     fc8:	2f 91       	pop	r18
     fca:	0f 90       	pop	r0
     fcc:	0b be       	out	0x3b, r0	; 59
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti

00000fd8 <uart_init>:
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	08 2f       	mov	r16, r24
     fe2:	16 2f       	mov	r17, r22
     fe4:	d4 2f       	mov	r29, r20
     fe6:	c2 2f       	mov	r28, r18
     fe8:	61 e0       	ldi	r22, 0x01	; 1
     fea:	80 ec       	ldi	r24, 0xC0	; 192
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	93 db       	rcall	.-2266   	; 0x716 <clearBit>
     ff0:	62 e0       	ldi	r22, 0x02	; 2
     ff2:	81 ec       	ldi	r24, 0xC1	; 193
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	8f db       	rcall	.-2274   	; 0x716 <clearBit>
     ff8:	62 e0       	ldi	r22, 0x02	; 2
     ffa:	82 ec       	ldi	r24, 0xC2	; 194
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	7f db       	rcall	.-2306   	; 0x6fe <setBit>
    1000:	61 e0       	ldi	r22, 0x01	; 1
    1002:	82 ec       	ldi	r24, 0xC2	; 194
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	7b db       	rcall	.-2314   	; 0x6fe <setBit>
    1008:	67 e0       	ldi	r22, 0x07	; 7
    100a:	82 ec       	ldi	r24, 0xC2	; 194
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	83 db       	rcall	.-2298   	; 0x716 <clearBit>
    1010:	40 2f       	mov	r20, r16
    1012:	66 e0       	ldi	r22, 0x06	; 6
    1014:	82 ec       	ldi	r24, 0xC2	; 194
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	8b db       	rcall	.-2282   	; 0x730 <updateBit>
    101a:	65 e0       	ldi	r22, 0x05	; 5
    101c:	82 ec       	ldi	r24, 0xC2	; 194
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	6e db       	rcall	.-2340   	; 0x6fe <setBit>
    1022:	41 2f       	mov	r20, r17
    1024:	64 e0       	ldi	r22, 0x04	; 4
    1026:	82 ec       	ldi	r24, 0xC2	; 194
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	82 db       	rcall	.-2300   	; 0x730 <updateBit>
    102c:	4d 2f       	mov	r20, r29
    102e:	63 e0       	ldi	r22, 0x03	; 3
    1030:	82 ec       	ldi	r24, 0xC2	; 194
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	7d db       	rcall	.-2310   	; 0x730 <updateBit>
    1036:	2c 2f       	mov	r18, r28
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    103e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1042:	67 e0       	ldi	r22, 0x07	; 7
    1044:	81 ec       	ldi	r24, 0xC1	; 193
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	5a db       	rcall	.-2380   	; 0x6fe <setBit>
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	08 95       	ret

00001054 <uart_start>:
    1054:	cf 93       	push	r28
    1056:	c8 2f       	mov	r28, r24
    1058:	46 2f       	mov	r20, r22
    105a:	64 e0       	ldi	r22, 0x04	; 4
    105c:	81 ec       	ldi	r24, 0xC1	; 193
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	67 db       	rcall	.-2354   	; 0x730 <updateBit>
    1062:	4c 2f       	mov	r20, r28
    1064:	63 e0       	ldi	r22, 0x03	; 3
    1066:	81 ec       	ldi	r24, 0xC1	; 193
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	62 db       	rcall	.-2364   	; 0x730 <updateBit>
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <uart_transmit>:
}

void uart_transmit(u8 data){
	while(!(UCSR0A & (1 << UDRE0)));
    1070:	e0 ec       	ldi	r30, 0xC0	; 192
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	90 81       	ld	r25, Z
    1076:	95 ff       	sbrs	r25, 5
    1078:	fd cf       	rjmp	.-6      	; 0x1074 <uart_transmit+0x4>
	UDR0 = data;
    107a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    107e:	08 95       	ret

00001080 <__udivmodsi4>:
    1080:	a1 e2       	ldi	r26, 0x21	; 33
    1082:	1a 2e       	mov	r1, r26
    1084:	aa 1b       	sub	r26, r26
    1086:	bb 1b       	sub	r27, r27
    1088:	fd 01       	movw	r30, r26
    108a:	0d c0       	rjmp	.+26     	; 0x10a6 <__udivmodsi4_ep>

0000108c <__udivmodsi4_loop>:
    108c:	aa 1f       	adc	r26, r26
    108e:	bb 1f       	adc	r27, r27
    1090:	ee 1f       	adc	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	a2 17       	cp	r26, r18
    1096:	b3 07       	cpc	r27, r19
    1098:	e4 07       	cpc	r30, r20
    109a:	f5 07       	cpc	r31, r21
    109c:	20 f0       	brcs	.+8      	; 0x10a6 <__udivmodsi4_ep>
    109e:	a2 1b       	sub	r26, r18
    10a0:	b3 0b       	sbc	r27, r19
    10a2:	e4 0b       	sbc	r30, r20
    10a4:	f5 0b       	sbc	r31, r21

000010a6 <__udivmodsi4_ep>:
    10a6:	66 1f       	adc	r22, r22
    10a8:	77 1f       	adc	r23, r23
    10aa:	88 1f       	adc	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	1a 94       	dec	r1
    10b0:	69 f7       	brne	.-38     	; 0x108c <__udivmodsi4_loop>
    10b2:	60 95       	com	r22
    10b4:	70 95       	com	r23
    10b6:	80 95       	com	r24
    10b8:	90 95       	com	r25
    10ba:	9b 01       	movw	r18, r22
    10bc:	ac 01       	movw	r20, r24
    10be:	bd 01       	movw	r22, r26
    10c0:	cf 01       	movw	r24, r30
    10c2:	08 95       	ret

000010c4 <__tablejump2__>:
    10c4:	ee 0f       	add	r30, r30
    10c6:	ff 1f       	adc	r31, r31
    10c8:	00 24       	eor	r0, r0
    10ca:	00 1c       	adc	r0, r0
    10cc:	0b be       	out	0x3b, r0	; 59
    10ce:	07 90       	elpm	r0, Z+
    10d0:	f6 91       	elpm	r31, Z
    10d2:	e0 2d       	mov	r30, r0
    10d4:	09 94       	ijmp

000010d6 <__umulhisi3>:
    10d6:	a2 9f       	mul	r26, r18
    10d8:	b0 01       	movw	r22, r0
    10da:	b3 9f       	mul	r27, r19
    10dc:	c0 01       	movw	r24, r0
    10de:	a3 9f       	mul	r26, r19
    10e0:	70 0d       	add	r23, r0
    10e2:	81 1d       	adc	r24, r1
    10e4:	11 24       	eor	r1, r1
    10e6:	91 1d       	adc	r25, r1
    10e8:	b2 9f       	mul	r27, r18
    10ea:	70 0d       	add	r23, r0
    10ec:	81 1d       	adc	r24, r1
    10ee:	11 24       	eor	r1, r1
    10f0:	91 1d       	adc	r25, r1
    10f2:	08 95       	ret

000010f4 <_exit>:
    10f4:	f8 94       	cli

000010f6 <__stop_program>:
    10f6:	ff cf       	rjmp	.-2      	; 0x10f6 <__stop_program>
