
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000111c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  00001190  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033c7  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001005  00000000  00000000  000047e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014a6  00000000  00000000  000057ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000534  00000000  00000000  00006c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a39  00000000  00000000  000071c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000160e  00000000  00000000  00007c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  0000920f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	76 c0       	rjmp	.+236    	; 0xee <__ctors_end>
       2:	00 00       	nop
       4:	85 c0       	rjmp	.+266    	; 0x110 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c0       	rjmp	.+262    	; 0x110 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c0       	rjmp	.+258    	; 0x110 <__bad_interrupt>
       e:	00 00       	nop
      10:	bc c1       	rjmp	.+888    	; 0x38a <__vector_4>
      12:	00 00       	nop
      14:	7d c0       	rjmp	.+250    	; 0x110 <__bad_interrupt>
      16:	00 00       	nop
      18:	df c1       	rjmp	.+958    	; 0x3d8 <__vector_6>
      1a:	00 00       	nop
      1c:	79 c0       	rjmp	.+242    	; 0x110 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c0       	rjmp	.+238    	; 0x110 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c0       	rjmp	.+234    	; 0x110 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c0       	rjmp	.+230    	; 0x110 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c0       	rjmp	.+226    	; 0x110 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6f c0       	rjmp	.+222    	; 0x110 <__bad_interrupt>
      32:	00 00       	nop
      34:	6d c0       	rjmp	.+218    	; 0x110 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c0       	rjmp	.+214    	; 0x110 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c0       	rjmp	.+210    	; 0x110 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c0       	rjmp	.+206    	; 0x110 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c0       	rjmp	.+202    	; 0x110 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c0       	rjmp	.+198    	; 0x110 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c0       	rjmp	.+194    	; 0x110 <__bad_interrupt>
      4e:	00 00       	nop
      50:	21 c6       	rjmp	.+3138   	; 0xc94 <__vector_20>
      52:	00 00       	nop
      54:	5d c0       	rjmp	.+186    	; 0x110 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c0       	rjmp	.+182    	; 0x110 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c0       	rjmp	.+178    	; 0x110 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c0       	rjmp	.+174    	; 0x110 <__bad_interrupt>
      62:	00 00       	nop
      64:	55 c0       	rjmp	.+170    	; 0x110 <__bad_interrupt>
      66:	00 00       	nop
      68:	53 c0       	rjmp	.+166    	; 0x110 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	51 c0       	rjmp	.+162    	; 0x110 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c0       	rjmp	.+158    	; 0x110 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c0       	rjmp	.+154    	; 0x110 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c0       	rjmp	.+150    	; 0x110 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c0       	rjmp	.+146    	; 0x110 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c0       	rjmp	.+142    	; 0x110 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c0       	rjmp	.+138    	; 0x110 <__bad_interrupt>
      86:	00 00       	nop
      88:	d6 c5       	rjmp	.+2988   	; 0xc36 <__vector_34>
      8a:	00 00       	nop
      8c:	6d 06       	cpc	r6, r29
      8e:	96 06       	cpc	r9, r22
      90:	eb 07       	cpc	r30, r27
      92:	eb 07       	cpc	r30, r27
      94:	eb 07       	cpc	r30, r27
      96:	eb 07       	cpc	r30, r27
      98:	eb 07       	cpc	r30, r27
      9a:	eb 07       	cpc	r30, r27
      9c:	eb 07       	cpc	r30, r27
      9e:	eb 07       	cpc	r30, r27
      a0:	b9 06       	cpc	r11, r25
      a2:	c2 06       	cpc	r12, r18
      a4:	eb 07       	cpc	r30, r27
      a6:	eb 07       	cpc	r30, r27
      a8:	eb 07       	cpc	r30, r27
      aa:	eb 07       	cpc	r30, r27
      ac:	cb 06       	cpc	r12, r27
      ae:	d0 06       	cpc	r13, r16
      b0:	eb 07       	cpc	r30, r27
      b2:	eb 07       	cpc	r30, r27
      b4:	eb 07       	cpc	r30, r27
      b6:	eb 07       	cpc	r30, r27
      b8:	eb 07       	cpc	r30, r27
      ba:	eb 07       	cpc	r30, r27
      bc:	eb 07       	cpc	r30, r27
      be:	eb 07       	cpc	r30, r27
      c0:	d5 06       	cpc	r13, r21
      c2:	df 06       	cpc	r13, r31
      c4:	e9 06       	cpc	r14, r25
      c6:	eb 07       	cpc	r30, r27
      c8:	eb 07       	cpc	r30, r27
      ca:	eb 07       	cpc	r30, r27
      cc:	f3 06       	cpc	r15, r19
      ce:	f7 06       	cpc	r15, r23
      d0:	01 07       	cpc	r16, r17
      d2:	34 07       	cpc	r19, r20
      d4:	eb 07       	cpc	r30, r27
      d6:	eb 07       	cpc	r30, r27
      d8:	eb 07       	cpc	r30, r27
      da:	eb 07       	cpc	r30, r27
      dc:	eb 07       	cpc	r30, r27
      de:	eb 07       	cpc	r30, r27
      e0:	67 07       	cpc	r22, r23
      e2:	7e 07       	cpc	r23, r30
      e4:	95 07       	cpc	r25, r21
      e6:	a7 07       	cpc	r26, r23
      e8:	b9 07       	cpc	r27, r25
      ea:	c0 07       	cpc	r28, r16
      ec:	c7 07       	cpc	r28, r23

000000ee <__ctors_end>:
      ee:	11 24       	eor	r1, r1
      f0:	1f be       	out	0x3f, r1	; 63
      f2:	cf ef       	ldi	r28, 0xFF	; 255
      f4:	d0 e4       	ldi	r29, 0x40	; 64
      f6:	de bf       	out	0x3e, r29	; 62
      f8:	cd bf       	out	0x3d, r28	; 61

000000fa <__do_clear_bss>:
      fa:	21 e0       	ldi	r18, 0x01	; 1
      fc:	a0 e0       	ldi	r26, 0x00	; 0
      fe:	b1 e0       	ldi	r27, 0x01	; 1
     100:	01 c0       	rjmp	.+2      	; 0x104 <.do_clear_bss_start>

00000102 <.do_clear_bss_loop>:
     102:	1d 92       	st	X+, r1

00000104 <.do_clear_bss_start>:
     104:	a8 31       	cpi	r26, 0x18	; 24
     106:	b2 07       	cpc	r27, r18
     108:	e1 f7       	brne	.-8      	; 0x102 <.do_clear_bss_loop>
     10a:	59 d0       	rcall	.+178    	; 0x1be <main>
     10c:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <_exit>

00000110 <__bad_interrupt>:
     110:	77 cf       	rjmp	.-274    	; 0x0 <__vectors>

00000112 <init>:
	TCCR3A = 0x00;
	TCCR3B = 0x00;
	TCCR3C = 0x00;
	TCNT3 = 0;
	PCMSK0 = 0x40;
	setBit(&PCICR, PCIE0);
     112:	0f 93       	push	r16
     114:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <systemEnable>
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <systemMode>
     11e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <servoEnable>
     122:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dcEnable>
     126:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <dcSpeedLeft>
     12a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
     12e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <cannonState>
     132:	20 e0       	ldi	r18, 0x00	; 0
     134:	41 e0       	ldi	r20, 0x01	; 1
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	d9 d1       	rcall	.+946    	; 0x4ec <gpio_init>
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	41 e0       	ldi	r20, 0x01	; 1
     13e:	61 e0       	ldi	r22, 0x01	; 1
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	d4 d1       	rcall	.+936    	; 0x4ec <gpio_init>
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	41 e0       	ldi	r20, 0x01	; 1
     148:	62 e0       	ldi	r22, 0x02	; 2
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	cf d1       	rcall	.+926    	; 0x4ec <gpio_init>
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	09 d2       	rcall	.+1042   	; 0x566 <gpio_out_set>
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	1e d2       	rcall	.+1084   	; 0x596 <gpio_out_reset>
     15a:	62 e0       	ldi	r22, 0x02	; 2
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	1b d2       	rcall	.+1078   	; 0x596 <gpio_out_reset>
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	41 e0       	ldi	r20, 0x01	; 1
     164:	62 e0       	ldi	r22, 0x02	; 2
     166:	82 e0       	ldi	r24, 0x02	; 2
     168:	c1 d1       	rcall	.+898    	; 0x4ec <gpio_init>
     16a:	62 e0       	ldi	r22, 0x02	; 2
     16c:	82 e0       	ldi	r24, 0x02	; 2
     16e:	13 d2       	rcall	.+1062   	; 0x596 <gpio_out_reset>
     170:	20 e0       	ldi	r18, 0x00	; 0
     172:	40 e0       	ldi	r20, 0x00	; 0
     174:	64 e0       	ldi	r22, 0x04	; 4
     176:	82 e0       	ldi	r24, 0x02	; 2
     178:	b9 d1       	rcall	.+882    	; 0x4ec <gpio_init>
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	41 e0       	ldi	r20, 0x01	; 1
     17e:	65 e0       	ldi	r22, 0x05	; 5
     180:	83 e0       	ldi	r24, 0x03	; 3
     182:	b4 d1       	rcall	.+872    	; 0x4ec <gpio_init>
     184:	65 e0       	ldi	r22, 0x05	; 5
     186:	83 e0       	ldi	r24, 0x03	; 3
     188:	06 d2       	rcall	.+1036   	; 0x596 <gpio_out_reset>
     18a:	20 e0       	ldi	r18, 0x00	; 0
     18c:	41 e0       	ldi	r20, 0x01	; 1
     18e:	62 e0       	ldi	r22, 0x02	; 2
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	ac d1       	rcall	.+856    	; 0x4ec <gpio_init>
     194:	62 e0       	ldi	r22, 0x02	; 2
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	fe d1       	rcall	.+1020   	; 0x596 <gpio_out_reset>
     19a:	01 e0       	ldi	r16, 0x01	; 1
     19c:	21 e0       	ldi	r18, 0x01	; 1
     19e:	42 e3       	ldi	r20, 0x32	; 50
     1a0:	50 e0       	ldi	r21, 0x00	; 0
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	87 e0       	ldi	r24, 0x07	; 7
     1a8:	aa d3       	rcall	.+1876   	; 0x8fe <pwm_init>
     1aa:	23 e3       	ldi	r18, 0x33	; 51
     1ac:	41 e0       	ldi	r20, 0x01	; 1
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	24 d7       	rcall	.+3656   	; 0xffc <uart_init>
     1b4:	61 e0       	ldi	r22, 0x01	; 1
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	5f d7       	rcall	.+3774   	; 0x1078 <uart_start>
     1ba:	0f 91       	pop	r16
     1bc:	08 95       	ret

000001be <main>:
}

int main(void)
{
	disableJTAG();
	init();
     1be:	92 d1       	rcall	.+804    	; 0x4e4 <disableJTAG>
     1c0:	a8 df       	rcall	.-176    	; 0x112 <init>
	//distanceSensorInit();
	u16 aux = 0;
	sei();
     1c2:	78 94       	sei
    while (1) 
    {
		if(systemMode == 0){
     1c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <systemMode>
     1c8:	81 11       	cpse	r24, r1
     1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <main+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1cc:	2f ef       	ldi	r18, 0xFF	; 255
     1ce:	80 e7       	ldi	r24, 0x70	; 112
     1d0:	92 e0       	ldi	r25, 0x02	; 2
     1d2:	21 50       	subi	r18, 0x01	; 1
     1d4:	80 40       	sbci	r24, 0x00	; 0
     1d6:	90 40       	sbci	r25, 0x00	; 0
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0x14>
			//uart_transmit('x');
			//aux2 = ((double)getPulseLength()/(double)0.03125)*0.017;
			/*if(aux2 < 10.0){
				motor_speed(0);
			}*/
			aux = getPulseLength();
     1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x1e>
			uart_transmit((u8)aux);
     1dc:	00 00       	nop
			uart_transmit('\r');
     1de:	7d d1       	rcall	.+762    	; 0x4da <getPulseLength>
     1e0:	ec 01       	movw	r28, r24
     1e2:	58 d7       	rcall	.+3760   	; 0x1094 <uart_transmit>
			uart_transmit('\n');
     1e4:	8d e0       	ldi	r24, 0x0D	; 13
     1e6:	56 d7       	rcall	.+3756   	; 0x1094 <uart_transmit>
			if(aux < 0x20){
     1e8:	8a e0       	ldi	r24, 0x0A	; 10
				motor_speed(0);
     1ea:	54 d7       	rcall	.+3752   	; 0x1094 <uart_transmit>
     1ec:	a0 97       	sbiw	r28, 0x20	; 32
			}
			gpio_out_set(PC, 2);
     1ee:	10 f4       	brcc	.+4      	; 0x1f4 <main+0x36>
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	c5 d2       	rcall	.+1418   	; 0x77e <motor_speed>
     1f4:	62 e0       	ldi	r22, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f6:	82 e0       	ldi	r24, 0x02	; 2
     1f8:	b6 d1       	rcall	.+876    	; 0x566 <gpio_out_set>
     1fa:	25 e3       	ldi	r18, 0x35	; 53
			_delay_us(20);
			gpio_out_reset(PC, 2);
     1fc:	2a 95       	dec	r18
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0x3e>
     200:	00 00       	nop
     202:	62 e0       	ldi	r22, 0x02	; 2
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	c7 d1       	rcall	.+910    	; 0x596 <gpio_out_reset>
     208:	dd cf       	rjmp	.-70     	; 0x1c4 <main+0x6>

0000020a <pinChangeCallback>:
	return ((double) leftCounter /(double)(GEAR_RATIO * 12)) * (double)(3.141592 * WHEEL_DIAMETER);
}

double encoder_getDistanceRightCm(){
	return ((double) rightCounter /(double)(GEAR_RATIO * 12)) * (double)(3.141592 * WHEEL_DIAMETER);
}
     20a:	cf 93       	push	r28
     20c:	86 b1       	in	r24, 0x06	; 6
     20e:	64 e0       	ldi	r22, 0x04	; 4
     210:	2f d2       	rcall	.+1118   	; 0x670 <checkBit>
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	21 f4       	brne	.+8      	; 0x21e <pinChangeCallback+0x14>
     216:	16 bc       	out	0x26, r1	; 38
     218:	84 e0       	ldi	r24, 0x04	; 4
     21a:	85 bd       	out	0x25, r24	; 37
     21c:	0c c0       	rjmp	.+24     	; 0x236 <pinChangeCallback+0x2c>
     21e:	86 b1       	in	r24, 0x06	; 6
     220:	64 e0       	ldi	r22, 0x04	; 4
     222:	26 d2       	rcall	.+1100   	; 0x670 <checkBit>
     224:	81 11       	cpse	r24, r1
     226:	07 c0       	rjmp	.+14     	; 0x236 <pinChangeCallback+0x2c>
     228:	86 b5       	in	r24, 0x26	; 38
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <pulseLength+0x1>
     230:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pulseLength>
     234:	15 bc       	out	0x25, r1	; 37
     236:	80 b1       	in	r24, 0x00	; 0
     238:	67 e0       	ldi	r22, 0x07	; 7
     23a:	1a d2       	rcall	.+1076   	; 0x670 <checkBit>
     23c:	c8 2f       	mov	r28, r24
     23e:	80 b1       	in	r24, 0x00	; 0
     240:	66 e0       	ldi	r22, 0x06	; 6
     242:	16 d2       	rcall	.+1068   	; 0x670 <checkBit>
     244:	40 e8       	ldi	r20, 0x80	; 128
     246:	c4 9f       	mul	r28, r20
     248:	90 01       	movw	r18, r0
     24a:	11 24       	eor	r1, r1
     24c:	40 e4       	ldi	r20, 0x40	; 64
     24e:	84 9f       	mul	r24, r20
     250:	c0 01       	movw	r24, r0
     252:	11 24       	eor	r1, r1
     254:	82 2b       	or	r24, r18
     256:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <leftCurrentState>
     25a:	86 b1       	in	r24, 0x06	; 6
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	08 d2       	rcall	.+1040   	; 0x670 <checkBit>
     260:	c8 2f       	mov	r28, r24
     262:	86 b1       	in	r24, 0x06	; 6
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	04 d2       	rcall	.+1032   	; 0x670 <checkBit>
     268:	cc 0f       	add	r28, r28
     26a:	8c 2b       	or	r24, r28
     26c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <rightCurrentState>
     270:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <leftLastState>
     274:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <rightLastState>
     278:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <leftCurrentState>
     27c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rightCurrentState>
     280:	23 2b       	or	r18, r19
     282:	89 2b       	or	r24, r25
     284:	82 27       	eor	r24, r18
     286:	80 38       	cpi	r24, 0x80	; 128
     288:	a1 f4       	brne	.+40     	; 0x2b2 <pinChangeCallback+0xa8>
     28a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <leftCounter>
     28e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <leftCounter+0x1>
     292:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <leftCounter+0x2>
     296:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <leftCounter+0x3>
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	a1 1d       	adc	r26, r1
     29e:	b1 1d       	adc	r27, r1
     2a0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <leftCounter>
     2a4:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <leftCounter+0x1>
     2a8:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <leftCounter+0x2>
     2ac:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <leftCounter+0x3>
     2b0:	62 c0       	rjmp	.+196    	; 0x376 <pinChangeCallback+0x16c>
     2b2:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <leftLastState>
     2b6:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <rightLastState>
     2ba:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <leftCurrentState>
     2be:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rightCurrentState>
     2c2:	23 2b       	or	r18, r19
     2c4:	89 2b       	or	r24, r25
     2c6:	82 27       	eor	r24, r18
     2c8:	80 34       	cpi	r24, 0x40	; 64
     2ca:	a1 f4       	brne	.+40     	; 0x2f4 <pinChangeCallback+0xea>
     2cc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <leftCounter>
     2d0:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <leftCounter+0x1>
     2d4:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <leftCounter+0x2>
     2d8:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <leftCounter+0x3>
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	a1 1d       	adc	r26, r1
     2e0:	b1 1d       	adc	r27, r1
     2e2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <leftCounter>
     2e6:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <leftCounter+0x1>
     2ea:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <leftCounter+0x2>
     2ee:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <leftCounter+0x3>
     2f2:	41 c0       	rjmp	.+130    	; 0x376 <pinChangeCallback+0x16c>
     2f4:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <leftLastState>
     2f8:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <rightLastState>
     2fc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <leftCurrentState>
     300:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rightCurrentState>
     304:	23 2b       	or	r18, r19
     306:	89 2b       	or	r24, r25
     308:	82 27       	eor	r24, r18
     30a:	82 30       	cpi	r24, 0x02	; 2
     30c:	a1 f4       	brne	.+40     	; 0x336 <pinChangeCallback+0x12c>
     30e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rightCounter>
     312:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <rightCounter+0x1>
     316:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <rightCounter+0x2>
     31a:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <rightCounter+0x3>
     31e:	01 96       	adiw	r24, 0x01	; 1
     320:	a1 1d       	adc	r26, r1
     322:	b1 1d       	adc	r27, r1
     324:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <rightCounter>
     328:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <rightCounter+0x1>
     32c:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <rightCounter+0x2>
     330:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <rightCounter+0x3>
     334:	20 c0       	rjmp	.+64     	; 0x376 <pinChangeCallback+0x16c>
     336:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <leftLastState>
     33a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <rightLastState>
     33e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <leftCurrentState>
     342:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rightCurrentState>
     346:	23 2b       	or	r18, r19
     348:	89 2b       	or	r24, r25
     34a:	82 27       	eor	r24, r18
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	99 f4       	brne	.+38     	; 0x376 <pinChangeCallback+0x16c>
     350:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rightCounter>
     354:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <rightCounter+0x1>
     358:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <rightCounter+0x2>
     35c:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <rightCounter+0x3>
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	a1 1d       	adc	r26, r1
     364:	b1 1d       	adc	r27, r1
     366:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <rightCounter>
     36a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <rightCounter+0x1>
     36e:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <rightCounter+0x2>
     372:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <rightCounter+0x3>
     376:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <leftCurrentState>
     37a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <leftLastState>
     37e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <rightCurrentState>
     382:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rightLastState>
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <__vector_4>:
     38a:	1f 92       	push	r1
     38c:	0f 92       	push	r0
     38e:	0f b6       	in	r0, 0x3f	; 63
     390:	0f 92       	push	r0
     392:	11 24       	eor	r1, r1
     394:	0b b6       	in	r0, 0x3b	; 59
     396:	0f 92       	push	r0
     398:	2f 93       	push	r18
     39a:	3f 93       	push	r19
     39c:	4f 93       	push	r20
     39e:	5f 93       	push	r21
     3a0:	6f 93       	push	r22
     3a2:	7f 93       	push	r23
     3a4:	8f 93       	push	r24
     3a6:	9f 93       	push	r25
     3a8:	af 93       	push	r26
     3aa:	bf 93       	push	r27
     3ac:	ef 93       	push	r30
     3ae:	ff 93       	push	r31
     3b0:	2c df       	rcall	.-424    	; 0x20a <pinChangeCallback>
     3b2:	ff 91       	pop	r31
     3b4:	ef 91       	pop	r30
     3b6:	bf 91       	pop	r27
     3b8:	af 91       	pop	r26
     3ba:	9f 91       	pop	r25
     3bc:	8f 91       	pop	r24
     3be:	7f 91       	pop	r23
     3c0:	6f 91       	pop	r22
     3c2:	5f 91       	pop	r21
     3c4:	4f 91       	pop	r20
     3c6:	3f 91       	pop	r19
     3c8:	2f 91       	pop	r18
     3ca:	0f 90       	pop	r0
     3cc:	0b be       	out	0x3b, r0	; 59
     3ce:	0f 90       	pop	r0
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	0f 90       	pop	r0
     3d4:	1f 90       	pop	r1
     3d6:	18 95       	reti

000003d8 <__vector_6>:
     3d8:	1f 92       	push	r1
     3da:	0f 92       	push	r0
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	0f 92       	push	r0
     3e0:	11 24       	eor	r1, r1
     3e2:	0b b6       	in	r0, 0x3b	; 59
     3e4:	0f 92       	push	r0
     3e6:	2f 93       	push	r18
     3e8:	3f 93       	push	r19
     3ea:	4f 93       	push	r20
     3ec:	5f 93       	push	r21
     3ee:	6f 93       	push	r22
     3f0:	7f 93       	push	r23
     3f2:	8f 93       	push	r24
     3f4:	9f 93       	push	r25
     3f6:	af 93       	push	r26
     3f8:	bf 93       	push	r27
     3fa:	ef 93       	push	r30
     3fc:	ff 93       	push	r31
     3fe:	05 df       	rcall	.-502    	; 0x20a <pinChangeCallback>
     400:	ff 91       	pop	r31
     402:	ef 91       	pop	r30
     404:	bf 91       	pop	r27
     406:	af 91       	pop	r26
     408:	9f 91       	pop	r25
     40a:	8f 91       	pop	r24
     40c:	7f 91       	pop	r23
     40e:	6f 91       	pop	r22
     410:	5f 91       	pop	r21
     412:	4f 91       	pop	r20
     414:	3f 91       	pop	r19
     416:	2f 91       	pop	r18
     418:	0f 90       	pop	r0
     41a:	0b be       	out	0x3b, r0	; 59
     41c:	0f 90       	pop	r0
     41e:	0f be       	out	0x3f, r0	; 63
     420:	0f 90       	pop	r0
     422:	1f 90       	pop	r1
     424:	18 95       	reti

00000426 <encoder_init>:
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	67 e0       	ldi	r22, 0x07	; 7
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	5e d0       	rcall	.+188    	; 0x4ec <gpio_init>
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	40 e0       	ldi	r20, 0x00	; 0
     434:	66 e0       	ldi	r22, 0x06	; 6
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	59 d0       	rcall	.+178    	; 0x4ec <gpio_init>
     43a:	20 e0       	ldi	r18, 0x00	; 0
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	82 e0       	ldi	r24, 0x02	; 2
     442:	54 d0       	rcall	.+168    	; 0x4ec <gpio_init>
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	4f d0       	rcall	.+158    	; 0x4ec <gpio_init>
     44e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <leftCounter>
     452:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <leftCounter+0x1>
     456:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <leftCounter+0x2>
     45a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <leftCounter+0x3>
     45e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <leftCurrentState>
     462:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <leftLastState>
     466:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <rightCounter>
     46a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rightCounter+0x1>
     46e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <rightCounter+0x2>
     472:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <rightCounter+0x3>
     476:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rightCurrentState>
     47a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rightLastState>
     47e:	eb e6       	ldi	r30, 0x6B	; 107
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	80 6c       	ori	r24, 0xC0	; 192
     486:	80 83       	st	Z, r24
     488:	ed e6       	ldi	r30, 0x6D	; 109
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	80 81       	ld	r24, Z
     48e:	87 61       	ori	r24, 0x17	; 23
     490:	80 83       	st	Z, r24
     492:	08 95       	ret

00000494 <encoder_start>:
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	88 e6       	ldi	r24, 0x68	; 104
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	ad d0       	rcall	.+346    	; 0x5f6 <setBit>
     49c:	62 e0       	ldi	r22, 0x02	; 2
     49e:	88 e6       	ldi	r24, 0x68	; 104
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	a9 c0       	rjmp	.+338    	; 0x5f6 <setBit>
     4a4:	08 95       	ret

000004a6 <encoder_stop>:
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	88 e6       	ldi	r24, 0x68	; 104
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	b0 d0       	rcall	.+352    	; 0x60e <clearBit>
     4ae:	62 e0       	ldi	r22, 0x02	; 2
     4b0:	88 e6       	ldi	r24, 0x68	; 104
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	ac c0       	rjmp	.+344    	; 0x60e <clearBit>
     4b6:	08 95       	ret

000004b8 <encoder_reset>:

void encoder_reset(){
	leftCounter = 0;
     4b8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <leftCounter>
     4bc:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <leftCounter+0x1>
     4c0:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <leftCounter+0x2>
     4c4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <leftCounter+0x3>
	rightCounter = 0;
     4c8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <rightCounter>
     4cc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rightCounter+0x1>
     4d0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <rightCounter+0x2>
     4d4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <rightCounter+0x3>
     4d8:	08 95       	ret

000004da <getPulseLength>:
}

u16 getPulseLength(){
	return pulseLength;
     4da:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pulseLength>
     4de:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <pulseLength+0x1>
     4e2:	08 95       	ret

000004e4 <disableJTAG>:
			break;
		case PC:
			clearBit(&PORTC, _number);
			break;
		case PD:
			clearBit(&PORTD, _number);
     4e4:	80 e8       	ldi	r24, 0x80	; 128
     4e6:	85 bf       	out	0x35, r24	; 53
     4e8:	85 bf       	out	0x35, r24	; 53
     4ea:	08 95       	ret

000004ec <gpio_init>:
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	d6 2f       	mov	r29, r22
     4f4:	c4 2f       	mov	r28, r20
     4f6:	12 2f       	mov	r17, r18
     4f8:	81 30       	cpi	r24, 0x01	; 1
     4fa:	89 f0       	breq	.+34     	; 0x51e <gpio_init+0x32>
     4fc:	28 f0       	brcs	.+10     	; 0x508 <gpio_init+0x1c>
     4fe:	82 30       	cpi	r24, 0x02	; 2
     500:	c9 f0       	breq	.+50     	; 0x534 <gpio_init+0x48>
     502:	83 30       	cpi	r24, 0x03	; 3
     504:	11 f1       	breq	.+68     	; 0x54a <gpio_init+0x5e>
     506:	2b c0       	rjmp	.+86     	; 0x55e <gpio_init+0x72>
     508:	81 e2       	ldi	r24, 0x21	; 33
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	99 d0       	rcall	.+306    	; 0x640 <updateBit>
     50e:	c1 11       	cpse	r28, r1
     510:	26 c0       	rjmp	.+76     	; 0x55e <gpio_init+0x72>
     512:	41 2f       	mov	r20, r17
     514:	6d 2f       	mov	r22, r29
     516:	82 e2       	ldi	r24, 0x22	; 34
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	92 d0       	rcall	.+292    	; 0x640 <updateBit>
     51c:	20 c0       	rjmp	.+64     	; 0x55e <gpio_init+0x72>
     51e:	84 e2       	ldi	r24, 0x24	; 36
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	8e d0       	rcall	.+284    	; 0x640 <updateBit>
     524:	c1 11       	cpse	r28, r1
     526:	1b c0       	rjmp	.+54     	; 0x55e <gpio_init+0x72>
     528:	41 2f       	mov	r20, r17
     52a:	6d 2f       	mov	r22, r29
     52c:	85 e2       	ldi	r24, 0x25	; 37
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	87 d0       	rcall	.+270    	; 0x640 <updateBit>
     532:	15 c0       	rjmp	.+42     	; 0x55e <gpio_init+0x72>
     534:	87 e2       	ldi	r24, 0x27	; 39
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	83 d0       	rcall	.+262    	; 0x640 <updateBit>
     53a:	c1 11       	cpse	r28, r1
     53c:	10 c0       	rjmp	.+32     	; 0x55e <gpio_init+0x72>
     53e:	41 2f       	mov	r20, r17
     540:	6d 2f       	mov	r22, r29
     542:	88 e2       	ldi	r24, 0x28	; 40
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	7c d0       	rcall	.+248    	; 0x640 <updateBit>
     548:	0a c0       	rjmp	.+20     	; 0x55e <gpio_init+0x72>
     54a:	8a e2       	ldi	r24, 0x2A	; 42
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	78 d0       	rcall	.+240    	; 0x640 <updateBit>
     550:	c1 11       	cpse	r28, r1
     552:	05 c0       	rjmp	.+10     	; 0x55e <gpio_init+0x72>
     554:	41 2f       	mov	r20, r17
     556:	6d 2f       	mov	r22, r29
     558:	8b e2       	ldi	r24, 0x2B	; 43
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	71 d0       	rcall	.+226    	; 0x640 <updateBit>
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	08 95       	ret

00000566 <gpio_out_set>:
	}
}
	

void gpio_out_set(port _port, u8 _number){
	switch(_port){
     566:	81 30       	cpi	r24, 0x01	; 1
     568:	51 f0       	breq	.+20     	; 0x57e <gpio_out_set+0x18>
     56a:	28 f0       	brcs	.+10     	; 0x576 <gpio_out_set+0x10>
     56c:	82 30       	cpi	r24, 0x02	; 2
     56e:	59 f0       	breq	.+22     	; 0x586 <gpio_out_set+0x20>
     570:	83 30       	cpi	r24, 0x03	; 3
     572:	69 f0       	breq	.+26     	; 0x58e <gpio_out_set+0x28>
     574:	08 95       	ret
		case PA:
			setBit(&PORTA, _number);
     576:	82 e2       	ldi	r24, 0x22	; 34
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	3d c0       	rjmp	.+122    	; 0x5f6 <setBit>
			break;
     57c:	08 95       	ret
		case PB:
			setBit(&PORTB, _number);
     57e:	85 e2       	ldi	r24, 0x25	; 37
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	39 c0       	rjmp	.+114    	; 0x5f6 <setBit>
			break;
		case PC:
			setBit(&PORTC, _number);
     584:	08 95       	ret
     586:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			setBit(&PORTD, _number);
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	35 c0       	rjmp	.+106    	; 0x5f6 <setBit>
     58c:	08 95       	ret
     58e:	8b e2       	ldi	r24, 0x2B	; 43
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	31 c0       	rjmp	.+98     	; 0x5f6 <setBit>
     594:	08 95       	ret

00000596 <gpio_out_reset>:
			break;
	}
}

void gpio_out_reset(port _port, u8 _number){
	switch(_port){
     596:	81 30       	cpi	r24, 0x01	; 1
     598:	51 f0       	breq	.+20     	; 0x5ae <gpio_out_reset+0x18>
     59a:	28 f0       	brcs	.+10     	; 0x5a6 <gpio_out_reset+0x10>
     59c:	82 30       	cpi	r24, 0x02	; 2
     59e:	59 f0       	breq	.+22     	; 0x5b6 <gpio_out_reset+0x20>
     5a0:	83 30       	cpi	r24, 0x03	; 3
     5a2:	69 f0       	breq	.+26     	; 0x5be <gpio_out_reset+0x28>
     5a4:	08 95       	ret
		case PA:
			clearBit(&PORTA, _number);
     5a6:	82 e2       	ldi	r24, 0x22	; 34
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	31 c0       	rjmp	.+98     	; 0x60e <clearBit>
			break;
     5ac:	08 95       	ret
		case PB:
			clearBit(&PORTB, _number);
     5ae:	85 e2       	ldi	r24, 0x25	; 37
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	2d c0       	rjmp	.+90     	; 0x60e <clearBit>
			break;
		case PC:
			clearBit(&PORTC, _number);
     5b4:	08 95       	ret
     5b6:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			clearBit(&PORTD, _number);
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	29 c0       	rjmp	.+82     	; 0x60e <clearBit>
     5bc:	08 95       	ret
     5be:	8b e2       	ldi	r24, 0x2B	; 43
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	25 c0       	rjmp	.+74     	; 0x60e <clearBit>
     5c4:	08 95       	ret

000005c6 <gpio_out_toggle>:
			break;
	}
}

void gpio_out_toggle(port _port, u8 _number){
	switch(_port){
     5c6:	81 30       	cpi	r24, 0x01	; 1
     5c8:	51 f0       	breq	.+20     	; 0x5de <gpio_out_toggle+0x18>
     5ca:	28 f0       	brcs	.+10     	; 0x5d6 <gpio_out_toggle+0x10>
     5cc:	82 30       	cpi	r24, 0x02	; 2
     5ce:	59 f0       	breq	.+22     	; 0x5e6 <gpio_out_toggle+0x20>
     5d0:	83 30       	cpi	r24, 0x03	; 3
     5d2:	69 f0       	breq	.+26     	; 0x5ee <gpio_out_toggle+0x28>
     5d4:	08 95       	ret
		case PA:
			toggleBit(&PORTA, _number);
     5d6:	82 e2       	ldi	r24, 0x22	; 34
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	26 c0       	rjmp	.+76     	; 0x628 <toggleBit>
			break;
     5dc:	08 95       	ret
		case PB:
			toggleBit(&PORTB, _number);
     5de:	85 e2       	ldi	r24, 0x25	; 37
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	22 c0       	rjmp	.+68     	; 0x628 <toggleBit>
			break;
		case PC:
			toggleBit(&PORTC, _number);
     5e4:	08 95       	ret
     5e6:	88 e2       	ldi	r24, 0x28	; 40
			break;
		case PD:
			toggleBit(&PORTD, _number);
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	1e c0       	rjmp	.+60     	; 0x628 <toggleBit>
     5ec:	08 95       	ret
     5ee:	8b e2       	ldi	r24, 0x2B	; 43
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	1a c0       	rjmp	.+52     	; 0x628 <toggleBit>
     5f4:	08 95       	ret

000005f6 <setBit>:
 */ 

#include "math.h"

void setBit(volatile u8 *registerName, u8 position){
	*registerName |= (1 << position);
     5f6:	fc 01       	movw	r30, r24
     5f8:	40 81       	ld	r20, Z
     5fa:	21 e0       	ldi	r18, 0x01	; 1
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	02 c0       	rjmp	.+4      	; 0x604 <setBit+0xe>
     600:	22 0f       	add	r18, r18
     602:	33 1f       	adc	r19, r19
     604:	6a 95       	dec	r22
     606:	e2 f7       	brpl	.-8      	; 0x600 <setBit+0xa>
     608:	24 2b       	or	r18, r20
     60a:	20 83       	st	Z, r18
     60c:	08 95       	ret

0000060e <clearBit>:
}

void clearBit(volatile u8 *registerName, u8 position){
     60e:	fc 01       	movw	r30, r24
	*registerName &= ~(1 << position);
     610:	90 81       	ld	r25, Z
     612:	21 e0       	ldi	r18, 0x01	; 1
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	02 c0       	rjmp	.+4      	; 0x61c <clearBit+0xe>
     618:	22 0f       	add	r18, r18
     61a:	33 1f       	adc	r19, r19
     61c:	6a 95       	dec	r22
     61e:	e2 f7       	brpl	.-8      	; 0x618 <clearBit+0xa>
     620:	20 95       	com	r18
     622:	29 23       	and	r18, r25
     624:	20 83       	st	Z, r18
     626:	08 95       	ret

00000628 <toggleBit>:
}

void toggleBit(volatile u8 *registerName, u8 position){
	*registerName ^= (1 << position);
     628:	fc 01       	movw	r30, r24
     62a:	40 81       	ld	r20, Z
     62c:	21 e0       	ldi	r18, 0x01	; 1
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	02 c0       	rjmp	.+4      	; 0x636 <toggleBit+0xe>
     632:	22 0f       	add	r18, r18
     634:	33 1f       	adc	r19, r19
     636:	6a 95       	dec	r22
     638:	e2 f7       	brpl	.-8      	; 0x632 <toggleBit+0xa>
     63a:	24 27       	eor	r18, r20
     63c:	20 83       	st	Z, r18
     63e:	08 95       	ret

00000640 <updateBit>:
}

void updateBit(volatile u8 *registerName, u8 position, u8 value){
     640:	fc 01       	movw	r30, r24
     642:	94 2f       	mov	r25, r20
	u8 newValue = value << position;
	newValue |= (*registerName & ~(1 << position));
     644:	20 81       	ld	r18, Z
     646:	41 e0       	ldi	r20, 0x01	; 1
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	06 2e       	mov	r0, r22
     64c:	02 c0       	rjmp	.+4      	; 0x652 <updateBit+0x12>
     64e:	44 0f       	add	r20, r20
     650:	55 1f       	adc	r21, r21
     652:	0a 94       	dec	r0
     654:	e2 f7       	brpl	.-8      	; 0x64e <updateBit+0xe>
     656:	40 95       	com	r20
     658:	50 95       	com	r21
     65a:	24 23       	and	r18, r20
     65c:	49 2f       	mov	r20, r25
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	02 c0       	rjmp	.+4      	; 0x666 <updateBit+0x26>
     662:	44 0f       	add	r20, r20
     664:	55 1f       	adc	r21, r21
     666:	6a 95       	dec	r22
     668:	e2 f7       	brpl	.-8      	; 0x662 <updateBit+0x22>
     66a:	42 2b       	or	r20, r18
	*registerName = newValue;
     66c:	40 83       	st	Z, r20
     66e:	08 95       	ret

00000670 <checkBit>:
}

bitValue checkBit(u8 registerName, u8 position){
	return (registerName >> position) & 1;
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	02 c0       	rjmp	.+4      	; 0x678 <checkBit+0x8>
     674:	95 95       	asr	r25
     676:	87 95       	ror	r24
     678:	6a 95       	dec	r22
     67a:	e2 f7       	brpl	.-8      	; 0x674 <checkBit+0x4>
     67c:	81 70       	andi	r24, 0x01	; 1
     67e:	08 95       	ret

00000680 <motor_init>:

u8 calibrateSpeed(u8 speed){
	return 0.91*speed;
}

void motor_init(){
     680:	0f 93       	push	r16
	gpio_init(PC, 7, OUTPUT, NO_PULL);
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	41 e0       	ldi	r20, 0x01	; 1
     686:	67 e0       	ldi	r22, 0x07	; 7
     688:	82 e0       	ldi	r24, 0x02	; 2
     68a:	30 df       	rcall	.-416    	; 0x4ec <gpio_init>
	gpio_init(PC, 6, OUTPUT, NO_PULL);
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	41 e0       	ldi	r20, 0x01	; 1
     690:	66 e0       	ldi	r22, 0x06	; 6
     692:	82 e0       	ldi	r24, 0x02	; 2
     694:	2b df       	rcall	.-426    	; 0x4ec <gpio_init>
	gpio_init(PC, 5, OUTPUT, NO_PULL);
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	41 e0       	ldi	r20, 0x01	; 1
     69a:	65 e0       	ldi	r22, 0x05	; 5
     69c:	82 e0       	ldi	r24, 0x02	; 2
     69e:	26 df       	rcall	.-436    	; 0x4ec <gpio_init>
	gpio_init(PC, 3, OUTPUT, NO_PULL);
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	41 e0       	ldi	r20, 0x01	; 1
     6a4:	63 e0       	ldi	r22, 0x03	; 3
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	21 df       	rcall	.-446    	; 0x4ec <gpio_init>
	pwm_init(0, 25000, TIMER2, CHANNEL_A);
     6aa:	00 e0       	ldi	r16, 0x00	; 0
     6ac:	22 e0       	ldi	r18, 0x02	; 2
     6ae:	48 ea       	ldi	r20, 0xA8	; 168
     6b0:	51 e6       	ldi	r21, 0x61	; 97
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	22 d1       	rcall	.+580    	; 0x8fe <pwm_init>
	pwm_init(0, 25000, TIMER2, CHANNEL_B);
     6ba:	01 e0       	ldi	r16, 0x01	; 1
     6bc:	22 e0       	ldi	r18, 0x02	; 2
     6be:	48 ea       	ldi	r20, 0xA8	; 168
     6c0:	51 e6       	ldi	r21, 0x61	; 97
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	1a d1       	rcall	.+564    	; 0x8fe <pwm_init>
}
     6ca:	0f 91       	pop	r16
     6cc:	08 95       	ret

000006ce <motor_start>:

void motor_start(){
	gpio_out_set(PC, 7);
     6ce:	67 e0       	ldi	r22, 0x07	; 7
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	49 df       	rcall	.-366    	; 0x566 <gpio_out_set>
	gpio_out_reset(PC, 6);
     6d4:	66 e0       	ldi	r22, 0x06	; 6
     6d6:	82 e0       	ldi	r24, 0x02	; 2
	gpio_out_reset(PC, 5);
     6d8:	5e df       	rcall	.-324    	; 0x596 <gpio_out_reset>
     6da:	65 e0       	ldi	r22, 0x05	; 5
	gpio_out_set(PC, 3);
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	5b df       	rcall	.-330    	; 0x596 <gpio_out_reset>
     6e0:	63 e0       	ldi	r22, 0x03	; 3
	pwm_setDutyCycle(40, TIMER2, CHANNEL_A);
     6e2:	82 e0       	ldi	r24, 0x02	; 2
     6e4:	40 df       	rcall	.-384    	; 0x566 <gpio_out_set>
     6e6:	40 e0       	ldi	r20, 0x00	; 0
	pwm_setDutyCycle(40, TIMER2, CHANNEL_B);
     6e8:	62 e0       	ldi	r22, 0x02	; 2
     6ea:	88 e2       	ldi	r24, 0x28	; 40
     6ec:	e2 d1       	rcall	.+964    	; 0xab2 <pwm_setDutyCycle>
	pwm_start(TIMER2);
     6ee:	41 e0       	ldi	r20, 0x01	; 1
     6f0:	62 e0       	ldi	r22, 0x02	; 2
     6f2:	88 e2       	ldi	r24, 0x28	; 40
	encoder_start();
     6f4:	de d1       	rcall	.+956    	; 0xab2 <pwm_setDutyCycle>
     6f6:	82 e0       	ldi	r24, 0x02	; 2
     6f8:	2d d2       	rcall	.+1114   	; 0xb54 <pwm_start>
     6fa:	cc ce       	rjmp	.-616    	; 0x494 <encoder_start>
     6fc:	08 95       	ret

000006fe <motor_stop>:
}

void motor_stop(){
     6fe:	d3 de       	rcall	.-602    	; 0x4a6 <encoder_stop>
     700:	82 e0       	ldi	r24, 0x02	; 2
     702:	6f c2       	rjmp	.+1246   	; 0xbe2 <pwm_stop>
     704:	08 95       	ret

00000706 <motor_direction>:
     706:	81 30       	cpi	r24, 0x01	; 1
     708:	99 f0       	breq	.+38     	; 0x730 <motor_direction+0x2a>
     70a:	28 f0       	brcs	.+10     	; 0x716 <motor_direction+0x10>
     70c:	82 30       	cpi	r24, 0x02	; 2
     70e:	e9 f0       	breq	.+58     	; 0x74a <motor_direction+0x44>
     710:	83 30       	cpi	r24, 0x03	; 3
     712:	41 f1       	breq	.+80     	; 0x764 <motor_direction+0x5e>
     714:	08 95       	ret
     716:	67 e0       	ldi	r22, 0x07	; 7
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	25 df       	rcall	.-438    	; 0x566 <gpio_out_set>
     71c:	66 e0       	ldi	r22, 0x06	; 6
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	3a df       	rcall	.-396    	; 0x596 <gpio_out_reset>
     722:	65 e0       	ldi	r22, 0x05	; 5
     724:	82 e0       	ldi	r24, 0x02	; 2
     726:	37 df       	rcall	.-402    	; 0x596 <gpio_out_reset>
     728:	63 e0       	ldi	r22, 0x03	; 3
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	1c cf       	rjmp	.-456    	; 0x566 <gpio_out_set>
     72e:	08 95       	ret
     730:	67 e0       	ldi	r22, 0x07	; 7
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	30 df       	rcall	.-416    	; 0x596 <gpio_out_reset>
     736:	66 e0       	ldi	r22, 0x06	; 6
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	15 df       	rcall	.-470    	; 0x566 <gpio_out_set>
     73c:	65 e0       	ldi	r22, 0x05	; 5
     73e:	82 e0       	ldi	r24, 0x02	; 2
     740:	12 df       	rcall	.-476    	; 0x566 <gpio_out_set>
     742:	63 e0       	ldi	r22, 0x03	; 3
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	27 cf       	rjmp	.-434    	; 0x596 <gpio_out_reset>
     748:	08 95       	ret
     74a:	67 e0       	ldi	r22, 0x07	; 7
     74c:	82 e0       	ldi	r24, 0x02	; 2
     74e:	23 df       	rcall	.-442    	; 0x596 <gpio_out_reset>
     750:	66 e0       	ldi	r22, 0x06	; 6
     752:	82 e0       	ldi	r24, 0x02	; 2
     754:	08 df       	rcall	.-496    	; 0x566 <gpio_out_set>
     756:	65 e0       	ldi	r22, 0x05	; 5
     758:	82 e0       	ldi	r24, 0x02	; 2
     75a:	1d df       	rcall	.-454    	; 0x596 <gpio_out_reset>
     75c:	63 e0       	ldi	r22, 0x03	; 3
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	02 cf       	rjmp	.-508    	; 0x566 <gpio_out_set>
     762:	08 95       	ret
     764:	67 e0       	ldi	r22, 0x07	; 7
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	fe de       	rcall	.-516    	; 0x566 <gpio_out_set>
     76a:	66 e0       	ldi	r22, 0x06	; 6
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	13 df       	rcall	.-474    	; 0x596 <gpio_out_reset>
     770:	65 e0       	ldi	r22, 0x05	; 5
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	f8 de       	rcall	.-528    	; 0x566 <gpio_out_set>
     776:	63 e0       	ldi	r22, 0x03	; 3
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	0d cf       	rjmp	.-486    	; 0x596 <gpio_out_reset>
     77c:	08 95       	ret

0000077e <motor_speed>:
     77e:	cf 93       	push	r28
     780:	c8 2f       	mov	r28, r24
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	62 e0       	ldi	r22, 0x02	; 2
     786:	95 d1       	rcall	.+810    	; 0xab2 <pwm_setDutyCycle>
     788:	41 e0       	ldi	r20, 0x01	; 1
     78a:	62 e0       	ldi	r22, 0x02	; 2
     78c:	8c 2f       	mov	r24, r28
     78e:	91 d1       	rcall	.+802    	; 0xab2 <pwm_setDutyCycle>
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <motor_individualDirSpeed>:
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	16 2f       	mov	r17, r22
     79c:	c4 2f       	mov	r28, r20
     79e:	d2 2f       	mov	r29, r18
     7a0:	88 23       	and	r24, r24
     7a2:	19 f0       	breq	.+6      	; 0x7aa <motor_individualDirSpeed+0x16>
     7a4:	81 30       	cpi	r24, 0x01	; 1
     7a6:	41 f0       	breq	.+16     	; 0x7b8 <motor_individualDirSpeed+0x24>
     7a8:	0d c0       	rjmp	.+26     	; 0x7c4 <motor_individualDirSpeed+0x30>
     7aa:	67 e0       	ldi	r22, 0x07	; 7
     7ac:	82 e0       	ldi	r24, 0x02	; 2
     7ae:	f3 de       	rcall	.-538    	; 0x596 <gpio_out_reset>
     7b0:	66 e0       	ldi	r22, 0x06	; 6
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	d8 de       	rcall	.-592    	; 0x566 <gpio_out_set>
     7b6:	06 c0       	rjmp	.+12     	; 0x7c4 <motor_individualDirSpeed+0x30>
     7b8:	67 e0       	ldi	r22, 0x07	; 7
     7ba:	82 e0       	ldi	r24, 0x02	; 2
     7bc:	d4 de       	rcall	.-600    	; 0x566 <gpio_out_set>
     7be:	66 e0       	ldi	r22, 0x06	; 6
     7c0:	82 e0       	ldi	r24, 0x02	; 2
     7c2:	e9 de       	rcall	.-558    	; 0x596 <gpio_out_reset>
     7c4:	40 e0       	ldi	r20, 0x00	; 0
     7c6:	62 e0       	ldi	r22, 0x02	; 2
     7c8:	81 2f       	mov	r24, r17
     7ca:	73 d1       	rcall	.+742    	; 0xab2 <pwm_setDutyCycle>
     7cc:	cc 23       	and	r28, r28
     7ce:	19 f0       	breq	.+6      	; 0x7d6 <motor_individualDirSpeed+0x42>
     7d0:	c1 30       	cpi	r28, 0x01	; 1
     7d2:	41 f0       	breq	.+16     	; 0x7e4 <motor_individualDirSpeed+0x50>
     7d4:	0d c0       	rjmp	.+26     	; 0x7f0 <motor_individualDirSpeed+0x5c>
     7d6:	65 e0       	ldi	r22, 0x05	; 5
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	dd de       	rcall	.-582    	; 0x596 <gpio_out_reset>
     7dc:	63 e0       	ldi	r22, 0x03	; 3
     7de:	82 e0       	ldi	r24, 0x02	; 2
     7e0:	c2 de       	rcall	.-636    	; 0x566 <gpio_out_set>
     7e2:	06 c0       	rjmp	.+12     	; 0x7f0 <motor_individualDirSpeed+0x5c>
     7e4:	65 e0       	ldi	r22, 0x05	; 5
     7e6:	82 e0       	ldi	r24, 0x02	; 2
     7e8:	be de       	rcall	.-644    	; 0x566 <gpio_out_set>
     7ea:	63 e0       	ldi	r22, 0x03	; 3
     7ec:	82 e0       	ldi	r24, 0x02	; 2
     7ee:	d3 de       	rcall	.-602    	; 0x596 <gpio_out_reset>
     7f0:	41 e0       	ldi	r20, 0x01	; 1
     7f2:	62 e0       	ldi	r22, 0x02	; 2
     7f4:	8d 2f       	mov	r24, r29
     7f6:	5d d1       	rcall	.+698    	; 0xab2 <pwm_setDutyCycle>
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	08 95       	ret

00000800 <calculateTop>:
#include "gpio.h"

u8 timer1ClockSource;
u8 timer2ClockSource;

u16 calculateTop(u16 *prescaler, u32 frequency, timer timerSelection){
     800:	cf 92       	push	r12
     802:	df 92       	push	r13
     804:	ef 92       	push	r14
     806:	ff 92       	push	r15
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	ec 01       	movw	r28, r24
     80e:	6a 01       	movw	r12, r20
     810:	7b 01       	movw	r14, r22
	u32 topValue = 0;
	u16 divisor = 0;
	switch(timerSelection){
     812:	21 30       	cpi	r18, 0x01	; 1
     814:	09 f0       	breq	.+2      	; 0x818 <calculateTop+0x18>
     816:	69 c0       	rjmp	.+210    	; 0x8ea <calculateTop+0xea>
		case TIMER0:
			break;
		case TIMER1:
			divisor = 1;
			*prescaler = divisor;
			topValue = S_CLOCK / divisor / frequency - 1;
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	72 e1       	ldi	r23, 0x12	; 18
     81c:	8a e7       	ldi	r24, 0x7A	; 122
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	a7 01       	movw	r20, r14
     822:	96 01       	movw	r18, r12
     824:	3f d4       	rcall	.+2174   	; 0x10a4 <__udivmodsi4>
     826:	da 01       	movw	r26, r20
     828:	c9 01       	movw	r24, r18
     82a:	01 97       	sbiw	r24, 0x01	; 1
     82c:	a1 09       	sbc	r26, r1
     82e:	b1 09       	sbc	r27, r1
			if(topValue > 0xFFFF){
     830:	00 97       	sbiw	r24, 0x00	; 0
     832:	21 e0       	ldi	r18, 0x01	; 1
     834:	a2 07       	cpc	r26, r18
     836:	b1 05       	cpc	r27, r1
     838:	28 f4       	brcc	.+10     	; 0x844 <calculateTop+0x44>
	switch(timerSelection){
		case TIMER0:
			break;
		case TIMER1:
			divisor = 1;
			*prescaler = divisor;
     83a:	21 e0       	ldi	r18, 0x01	; 1
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	39 83       	std	Y+1, r19	; 0x01
     840:	28 83       	st	Y, r18
     842:	56 c0       	rjmp	.+172    	; 0x8f0 <calculateTop+0xf0>
			topValue = S_CLOCK / divisor / frequency - 1;
			if(topValue > 0xFFFF){
				divisor = 8;
				*prescaler = divisor;
				topValue = S_CLOCK / divisor / frequency - 1;
     844:	60 e4       	ldi	r22, 0x40	; 64
     846:	72 e4       	ldi	r23, 0x42	; 66
     848:	8f e0       	ldi	r24, 0x0F	; 15
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	a7 01       	movw	r20, r14
     84e:	96 01       	movw	r18, r12
     850:	29 d4       	rcall	.+2130   	; 0x10a4 <__udivmodsi4>
     852:	da 01       	movw	r26, r20
     854:	c9 01       	movw	r24, r18
     856:	01 97       	sbiw	r24, 0x01	; 1
     858:	a1 09       	sbc	r26, r1
     85a:	b1 09       	sbc	r27, r1
				if(topValue > 0xFFFF){
     85c:	00 97       	sbiw	r24, 0x00	; 0
     85e:	21 e0       	ldi	r18, 0x01	; 1
     860:	a2 07       	cpc	r26, r18
     862:	b1 05       	cpc	r27, r1
     864:	28 f4       	brcc	.+10     	; 0x870 <calculateTop+0x70>
			divisor = 1;
			*prescaler = divisor;
			topValue = S_CLOCK / divisor / frequency - 1;
			if(topValue > 0xFFFF){
				divisor = 8;
				*prescaler = divisor;
     866:	28 e0       	ldi	r18, 0x08	; 8
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	39 83       	std	Y+1, r19	; 0x01
     86c:	28 83       	st	Y, r18
     86e:	40 c0       	rjmp	.+128    	; 0x8f0 <calculateTop+0xf0>
				topValue = S_CLOCK / divisor / frequency - 1;
				if(topValue > 0xFFFF){
					divisor = 64;
					*prescaler = divisor;
					topValue = S_CLOCK / divisor / frequency -1;
     870:	68 e4       	ldi	r22, 0x48	; 72
     872:	78 ee       	ldi	r23, 0xE8	; 232
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a7 01       	movw	r20, r14
     87a:	96 01       	movw	r18, r12
     87c:	13 d4       	rcall	.+2086   	; 0x10a4 <__udivmodsi4>
     87e:	da 01       	movw	r26, r20
     880:	c9 01       	movw	r24, r18
     882:	01 97       	sbiw	r24, 0x01	; 1
     884:	a1 09       	sbc	r26, r1
     886:	b1 09       	sbc	r27, r1
					if(topValue > 0xFFFF){
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	21 e0       	ldi	r18, 0x01	; 1
     88c:	a2 07       	cpc	r26, r18
     88e:	b1 05       	cpc	r27, r1
     890:	28 f4       	brcc	.+10     	; 0x89c <calculateTop+0x9c>
				divisor = 8;
				*prescaler = divisor;
				topValue = S_CLOCK / divisor / frequency - 1;
				if(topValue > 0xFFFF){
					divisor = 64;
					*prescaler = divisor;
     892:	20 e4       	ldi	r18, 0x40	; 64
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	39 83       	std	Y+1, r19	; 0x01
     898:	28 83       	st	Y, r18
     89a:	2a c0       	rjmp	.+84     	; 0x8f0 <calculateTop+0xf0>
					topValue = S_CLOCK / divisor / frequency -1;
					if(topValue > 0xFFFF){
						divisor = 256;
						*prescaler = divisor;
						topValue = S_CLOCK / divisor / frequency - 1;
     89c:	62 e1       	ldi	r22, 0x12	; 18
     89e:	7a e7       	ldi	r23, 0x7A	; 122
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a7 01       	movw	r20, r14
     8a6:	96 01       	movw	r18, r12
     8a8:	fd d3       	rcall	.+2042   	; 0x10a4 <__udivmodsi4>
     8aa:	da 01       	movw	r26, r20
     8ac:	c9 01       	movw	r24, r18
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	a1 09       	sbc	r26, r1
     8b2:	b1 09       	sbc	r27, r1
						if(topValue > 0xFFFF){
     8b4:	00 97       	sbiw	r24, 0x00	; 0
     8b6:	21 e0       	ldi	r18, 0x01	; 1
     8b8:	a2 07       	cpc	r26, r18
     8ba:	b1 05       	cpc	r27, r1
     8bc:	28 f4       	brcc	.+10     	; 0x8c8 <calculateTop+0xc8>
					divisor = 64;
					*prescaler = divisor;
					topValue = S_CLOCK / divisor / frequency -1;
					if(topValue > 0xFFFF){
						divisor = 256;
						*prescaler = divisor;
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	31 e0       	ldi	r19, 0x01	; 1
     8c2:	39 83       	std	Y+1, r19	; 0x01
     8c4:	28 83       	st	Y, r18
     8c6:	14 c0       	rjmp	.+40     	; 0x8f0 <calculateTop+0xf0>
						topValue = S_CLOCK / divisor / frequency - 1;
						if(topValue > 0xFFFF){
							divisor = 1024;
							*prescaler = divisor;
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	94 e0       	ldi	r25, 0x04	; 4
     8cc:	99 83       	std	Y+1, r25	; 0x01
     8ce:	88 83       	st	Y, r24
							topValue = S_CLOCK / divisor / frequency - 1;
     8d0:	64 e8       	ldi	r22, 0x84	; 132
     8d2:	7e e1       	ldi	r23, 0x1E	; 30
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	a7 01       	movw	r20, r14
     8da:	96 01       	movw	r18, r12
     8dc:	e3 d3       	rcall	.+1990   	; 0x10a4 <__udivmodsi4>
     8de:	da 01       	movw	r26, r20
     8e0:	c9 01       	movw	r24, r18
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	a1 09       	sbc	r26, r1
     8e6:	b1 09       	sbc	r27, r1
     8e8:	03 c0       	rjmp	.+6      	; 0x8f0 <calculateTop+0xf0>

u8 timer1ClockSource;
u8 timer2ClockSource;

u16 calculateTop(u16 *prescaler, u32 frequency, timer timerSelection){
	u32 topValue = 0;
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	dc 01       	movw	r26, r24
			break;
		case TIMER3:
			break;
	}
	return (u16)topValue;
}
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	ff 90       	pop	r15
     8f6:	ef 90       	pop	r14
     8f8:	df 90       	pop	r13
     8fa:	cf 90       	pop	r12
     8fc:	08 95       	ret

000008fe <pwm_init>:

void pwm_init(u8 dutyCycle, u32 frequency, timer timerSelection, channel channelSelection){
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	00 d0       	rcall	.+0      	; 0x908 <pwm_init+0xa>
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
     90c:	18 2f       	mov	r17, r24
	u16 prescaler = 0;
     90e:	1a 82       	std	Y+2, r1	; 0x02
     910:	19 82       	std	Y+1, r1	; 0x01
	u32 dutyAux = 0;
	switch(timerSelection){
     912:	21 30       	cpi	r18, 0x01	; 1
     914:	21 f0       	breq	.+8      	; 0x91e <pwm_init+0x20>
     916:	22 30       	cpi	r18, 0x02	; 2
     918:	09 f4       	brne	.+2      	; 0x91c <pwm_init+0x1e>
     91a:	81 c0       	rjmp	.+258    	; 0xa1e <pwm_init+0x120>
     91c:	c3 c0       	rjmp	.+390    	; 0xaa4 <pwm_init+0x1a6>
		case TIMER0:
			break;
		case TIMER1:
			/* Calculate TOP register to obtain the desired frequency */
			ICR1 = calculateTop(&prescaler, frequency, timerSelection);
     91e:	21 e0       	ldi	r18, 0x01	; 1
     920:	ce 01       	movw	r24, r28
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	6d df       	rcall	.-294    	; 0x800 <calculateTop>
     926:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     92a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			/* Sets the prescaler data to be later used in pwm_start() */
			switch(prescaler){
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	9a 81       	ldd	r25, Y+2	; 0x02
     932:	80 34       	cpi	r24, 0x40	; 64
     934:	91 05       	cpc	r25, r1
     936:	b9 f0       	breq	.+46     	; 0x966 <pwm_init+0x68>
     938:	30 f4       	brcc	.+12     	; 0x946 <pwm_init+0x48>
     93a:	81 30       	cpi	r24, 0x01	; 1
     93c:	91 05       	cpc	r25, r1
     93e:	59 f0       	breq	.+22     	; 0x956 <pwm_init+0x58>
     940:	08 97       	sbiw	r24, 0x08	; 8
     942:	69 f0       	breq	.+26     	; 0x95e <pwm_init+0x60>
     944:	1b c0       	rjmp	.+54     	; 0x97c <pwm_init+0x7e>
     946:	81 15       	cp	r24, r1
     948:	21 e0       	ldi	r18, 0x01	; 1
     94a:	92 07       	cpc	r25, r18
     94c:	81 f0       	breq	.+32     	; 0x96e <pwm_init+0x70>
     94e:	81 15       	cp	r24, r1
     950:	94 40       	sbci	r25, 0x04	; 4
     952:	89 f0       	breq	.+34     	; 0x976 <pwm_init+0x78>
     954:	13 c0       	rjmp	.+38     	; 0x97c <pwm_init+0x7e>
				case 1:
					timer1ClockSource = 0x01;
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <timer1ClockSource>
					break;
     95c:	0f c0       	rjmp	.+30     	; 0x97c <pwm_init+0x7e>
				case 8:
					timer1ClockSource = 0x02;
     95e:	82 e0       	ldi	r24, 0x02	; 2
     960:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <timer1ClockSource>
					break;
     964:	0b c0       	rjmp	.+22     	; 0x97c <pwm_init+0x7e>
				case 64:
					timer1ClockSource = 0x03;
     966:	83 e0       	ldi	r24, 0x03	; 3
     968:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <timer1ClockSource>
					break;
     96c:	07 c0       	rjmp	.+14     	; 0x97c <pwm_init+0x7e>
				case 256:
					timer1ClockSource = 0x04;
     96e:	84 e0       	ldi	r24, 0x04	; 4
     970:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <timer1ClockSource>
					break;
     974:	03 c0       	rjmp	.+6      	; 0x97c <pwm_init+0x7e>
				case 1024:
					timer1ClockSource = 0x05;
     976:	85 e0       	ldi	r24, 0x05	; 5
     978:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <timer1ClockSource>
					break;
			}
			/* FAST PWM mode with ICR1 as TOP */
			clearBit(&TCCR1A, WGM10);
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	80 e8       	ldi	r24, 0x80	; 128
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	45 de       	rcall	.-886    	; 0x60e <clearBit>
			setBit(&TCCR1A, WGM11);
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	80 e8       	ldi	r24, 0x80	; 128
     988:	90 e0       	ldi	r25, 0x00	; 0
			setBit(&TCCR1B, WGM13);
     98a:	35 de       	rcall	.-918    	; 0x5f6 <setBit>
     98c:	64 e0       	ldi	r22, 0x04	; 4
     98e:	81 e8       	ldi	r24, 0x81	; 129
			setBit(&TCCR1B, WGM12);
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	31 de       	rcall	.-926    	; 0x5f6 <setBit>
     994:	63 e0       	ldi	r22, 0x03	; 3
     996:	81 e8       	ldi	r24, 0x81	; 129
     998:	90 e0       	ldi	r25, 0x00	; 0
			/* Clear OC1A/B on compare match and set it on BOTTOM */
			switch(channelSelection){
     99a:	2d de       	rcall	.-934    	; 0x5f6 <setBit>
     99c:	00 23       	and	r16, r16
     99e:	19 f0       	breq	.+6      	; 0x9a6 <pwm_init+0xa8>
     9a0:	01 30       	cpi	r16, 0x01	; 1
				case CHANNEL_A:
					gpio_init(PD, 5, OUTPUT, NO_PULL);
     9a2:	f9 f0       	breq	.+62     	; 0x9e2 <pwm_init+0xe4>
     9a4:	7f c0       	rjmp	.+254    	; 0xaa4 <pwm_init+0x1a6>
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	41 e0       	ldi	r20, 0x01	; 1
     9aa:	65 e0       	ldi	r22, 0x05	; 5
					setBit(&TCCR1A, COM1A1);
     9ac:	83 e0       	ldi	r24, 0x03	; 3
     9ae:	9e dd       	rcall	.-1220   	; 0x4ec <gpio_init>
     9b0:	67 e0       	ldi	r22, 0x07	; 7
     9b2:	80 e8       	ldi	r24, 0x80	; 128
					clearBit(&TCCR1A, COM1A0);
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	1f de       	rcall	.-962    	; 0x5f6 <setBit>
     9b8:	66 e0       	ldi	r22, 0x06	; 6
     9ba:	80 e8       	ldi	r24, 0x80	; 128
					dutyAux = (u32) dutyCycle * ICR1 / 100;
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	27 de       	rcall	.-946    	; 0x60e <clearBit>
     9c0:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
					OCR1A = (u16) dutyAux;
     9c4:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     9c8:	21 2f       	mov	r18, r17
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	96 d3       	rcall	.+1836   	; 0x10fa <__umulhisi3>
     9ce:	24 e6       	ldi	r18, 0x64	; 100
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	40 e0       	ldi	r20, 0x00	; 0
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	66 d3       	rcall	.+1740   	; 0x10a4 <__udivmodsi4>
     9d8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
					break;
				case CHANNEL_B:
					gpio_init(PD, 4, OUTPUT, NO_PULL);
     9dc:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     9e0:	61 c0       	rjmp	.+194    	; 0xaa4 <pwm_init+0x1a6>
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	41 e0       	ldi	r20, 0x01	; 1
					setBit(&TCCR1A, COM1B1);
     9e6:	64 e0       	ldi	r22, 0x04	; 4
     9e8:	83 e0       	ldi	r24, 0x03	; 3
     9ea:	80 dd       	rcall	.-1280   	; 0x4ec <gpio_init>
     9ec:	65 e0       	ldi	r22, 0x05	; 5
					clearBit(&TCCR1A, COM1B0);
     9ee:	80 e8       	ldi	r24, 0x80	; 128
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	01 de       	rcall	.-1022   	; 0x5f6 <setBit>
     9f4:	64 e0       	ldi	r22, 0x04	; 4
					dutyAux = (u32) dutyCycle * ICR1 / 100;
     9f6:	80 e8       	ldi	r24, 0x80	; 128
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	09 de       	rcall	.-1006   	; 0x60e <clearBit>
     9fc:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
					OCR1B = (u16) dutyAux;
     a00:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a04:	21 2f       	mov	r18, r17
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	78 d3       	rcall	.+1776   	; 0x10fa <__umulhisi3>
     a0a:	24 e6       	ldi	r18, 0x64	; 100
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	48 d3       	rcall	.+1680   	; 0x10a4 <__udivmodsi4>
					break;
     a14:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
					break;
			}
			break;
		case TIMER2:
			TIMSK2 = 0;
			clearBit(&ASSR, AS2);
     a18:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     a1c:	43 c0       	rjmp	.+134    	; 0xaa4 <pwm_init+0x1a6>
     a1e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
			clearBit(&TCCR2B, WGM22);
     a22:	65 e0       	ldi	r22, 0x05	; 5
     a24:	86 eb       	ldi	r24, 0xB6	; 182
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	f2 dd       	rcall	.-1052   	; 0x60e <clearBit>
			setBit(&TCCR2A, WGM21);
     a2a:	63 e0       	ldi	r22, 0x03	; 3
     a2c:	81 eb       	ldi	r24, 0xB1	; 177
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	ee dd       	rcall	.-1060   	; 0x60e <clearBit>
			setBit(&TCCR2A, WGM20);
     a32:	61 e0       	ldi	r22, 0x01	; 1
     a34:	80 eb       	ldi	r24, 0xB0	; 176
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	de dd       	rcall	.-1092   	; 0x5f6 <setBit>
     a3a:	60 e0       	ldi	r22, 0x00	; 0
			timer2ClockSource = 0x01;
     a3c:	80 eb       	ldi	r24, 0xB0	; 176
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	da dd       	rcall	.-1100   	; 0x5f6 <setBit>
			switch(channelSelection){
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timer2ClockSource>
     a48:	00 23       	and	r16, r16
				case CHANNEL_A:
					gpio_init(PD, 7, OUTPUT, NO_PULL);
     a4a:	19 f0       	breq	.+6      	; 0xa52 <pwm_init+0x154>
     a4c:	01 30       	cpi	r16, 0x01	; 1
     a4e:	b1 f0       	breq	.+44     	; 0xa7c <pwm_init+0x17e>
     a50:	29 c0       	rjmp	.+82     	; 0xaa4 <pwm_init+0x1a6>
     a52:	20 e0       	ldi	r18, 0x00	; 0
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2A = (u8) dutyAux;
     a54:	41 e0       	ldi	r20, 0x01	; 1
     a56:	67 e0       	ldi	r22, 0x07	; 7
     a58:	83 e0       	ldi	r24, 0x03	; 3
     a5a:	48 dd       	rcall	.-1392   	; 0x4ec <gpio_init>
     a5c:	8f ef       	ldi	r24, 0xFF	; 255
     a5e:	18 9f       	mul	r17, r24
     a60:	90 01       	movw	r18, r0
     a62:	11 24       	eor	r1, r1
     a64:	36 95       	lsr	r19
     a66:	27 95       	ror	r18
     a68:	36 95       	lsr	r19
     a6a:	27 95       	ror	r18
     a6c:	ab e7       	ldi	r26, 0x7B	; 123
     a6e:	b4 e1       	ldi	r27, 0x14	; 20
					break;
     a70:	44 d3       	rcall	.+1672   	; 0x10fa <__umulhisi3>
				case CHANNEL_B:
					gpio_init(PD, 6, OUTPUT, NO_PULL);
     a72:	96 95       	lsr	r25
     a74:	87 95       	ror	r24
     a76:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     a7a:	14 c0       	rjmp	.+40     	; 0xaa4 <pwm_init+0x1a6>
     a7c:	20 e0       	ldi	r18, 0x00	; 0
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2B = (u8) dutyAux;
     a7e:	41 e0       	ldi	r20, 0x01	; 1
     a80:	66 e0       	ldi	r22, 0x06	; 6
     a82:	83 e0       	ldi	r24, 0x03	; 3
     a84:	33 dd       	rcall	.-1434   	; 0x4ec <gpio_init>
     a86:	8f ef       	ldi	r24, 0xFF	; 255
     a88:	18 9f       	mul	r17, r24
     a8a:	90 01       	movw	r18, r0
     a8c:	11 24       	eor	r1, r1
     a8e:	36 95       	lsr	r19
     a90:	27 95       	ror	r18
     a92:	36 95       	lsr	r19
     a94:	27 95       	ror	r18
     a96:	ab e7       	ldi	r26, 0x7B	; 123
     a98:	b4 e1       	ldi	r27, 0x14	; 20
     a9a:	2f d3       	rcall	.+1630   	; 0x10fa <__umulhisi3>
     a9c:	96 95       	lsr	r25
			}
			break;
		case TIMER3:
			break;
	}
}
     a9e:	87 95       	ror	r24
     aa0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	08 95       	ret

00000ab2 <pwm_setDutyCycle>:

/** Sets a new duty cycle for the selected timer and channel 
*/
void pwm_setDutyCycle(u8 dutyCycle, timer timerSelection, channel channelSelection){
	u32 dutyAux = 0;
	switch(timerSelection){
     ab2:	61 30       	cpi	r22, 0x01	; 1
     ab4:	19 f0       	breq	.+6      	; 0xabc <pwm_setDutyCycle+0xa>
     ab6:	62 30       	cpi	r22, 0x02	; 2
     ab8:	41 f1       	breq	.+80     	; 0xb0a <pwm_setDutyCycle+0x58>
     aba:	08 95       	ret
		case TIMER0:
			break;
		case TIMER1:
			switch(channelSelection){
     abc:	44 23       	and	r20, r20
     abe:	19 f0       	breq	.+6      	; 0xac6 <pwm_setDutyCycle+0x14>
     ac0:	41 30       	cpi	r20, 0x01	; 1
     ac2:	91 f0       	breq	.+36     	; 0xae8 <pwm_setDutyCycle+0x36>
     ac4:	08 95       	ret
				case CHANNEL_A:
					dutyAux = (u32) dutyCycle * ICR1 / 100;
     ac6:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     aca:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
					OCR1A = (u16) dutyAux;
     ace:	28 2f       	mov	r18, r24
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	13 d3       	rcall	.+1574   	; 0x10fa <__umulhisi3>
     ad4:	24 e6       	ldi	r18, 0x64	; 100
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	40 e0       	ldi	r20, 0x00	; 0
     ada:	50 e0       	ldi	r21, 0x00	; 0
     adc:	e3 d2       	rcall	.+1478   	; 0x10a4 <__udivmodsi4>
     ade:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     ae2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
					break;
     ae6:	08 95       	ret
				case CHANNEL_B:
					dutyAux = (u32) dutyCycle * ICR1 / 100;
     ae8:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     aec:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
					OCR1B = (u16) dutyAux;
     af0:	28 2f       	mov	r18, r24
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	02 d3       	rcall	.+1540   	; 0x10fa <__umulhisi3>
     af6:	24 e6       	ldi	r18, 0x64	; 100
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 e0       	ldi	r20, 0x00	; 0
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	d2 d2       	rcall	.+1444   	; 0x10a4 <__udivmodsi4>
     b00:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     b04:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				case NO_CHANNEL:
					break;
			}
			break;
		case TIMER2:
			switch(channelSelection){
     b08:	08 95       	ret
     b0a:	44 23       	and	r20, r20
     b0c:	19 f0       	breq	.+6      	; 0xb14 <pwm_setDutyCycle+0x62>
     b0e:	41 30       	cpi	r20, 0x01	; 1
     b10:	89 f0       	breq	.+34     	; 0xb34 <pwm_setDutyCycle+0x82>
				case CHANNEL_A:
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2A = (u8) dutyAux;
     b12:	08 95       	ret
     b14:	9f ef       	ldi	r25, 0xFF	; 255
     b16:	89 9f       	mul	r24, r25
     b18:	90 01       	movw	r18, r0
     b1a:	11 24       	eor	r1, r1
     b1c:	36 95       	lsr	r19
     b1e:	27 95       	ror	r18
     b20:	36 95       	lsr	r19
     b22:	27 95       	ror	r18
     b24:	ab e7       	ldi	r26, 0x7B	; 123
     b26:	b4 e1       	ldi	r27, 0x14	; 20
     b28:	e8 d2       	rcall	.+1488   	; 0x10fa <__umulhisi3>
     b2a:	96 95       	lsr	r25
     b2c:	87 95       	ror	r24
     b2e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
					break;
				case CHANNEL_B:
					dutyAux = (u16) dutyCycle * 255 / 100;
					OCR2B = (u8) dutyAux;
     b32:	08 95       	ret
     b34:	9f ef       	ldi	r25, 0xFF	; 255
     b36:	89 9f       	mul	r24, r25
     b38:	90 01       	movw	r18, r0
     b3a:	11 24       	eor	r1, r1
     b3c:	36 95       	lsr	r19
     b3e:	27 95       	ror	r18
     b40:	36 95       	lsr	r19
     b42:	27 95       	ror	r18
     b44:	ab e7       	ldi	r26, 0x7B	; 123
     b46:	b4 e1       	ldi	r27, 0x14	; 20
     b48:	d8 d2       	rcall	.+1456   	; 0x10fa <__umulhisi3>
     b4a:	96 95       	lsr	r25
     b4c:	87 95       	ror	r24
     b4e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     b52:	08 95       	ret

00000b54 <pwm_start>:
}

/** Starts the selected timer
*/
void pwm_start(timer timerSelection){
	switch(timerSelection){
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	19 f0       	breq	.+6      	; 0xb5e <pwm_start+0xa>
     b58:	82 30       	cpi	r24, 0x02	; 2
     b5a:	d1 f0       	breq	.+52     	; 0xb90 <pwm_start+0x3c>
     b5c:	08 95       	ret
		case TIMER0:
			break;
		case TIMER1:
			updateBit(&TCCR1B, CS12, (timer1ClockSource >> 2) & 1);
     b5e:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <timer1ClockSource>
     b62:	42 fb       	bst	r20, 2
     b64:	44 27       	eor	r20, r20
     b66:	40 f9       	bld	r20, 0
     b68:	62 e0       	ldi	r22, 0x02	; 2
     b6a:	81 e8       	ldi	r24, 0x81	; 129
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	68 dd       	rcall	.-1328   	; 0x640 <updateBit>
			updateBit(&TCCR1B, CS11, (timer1ClockSource >> 1) & 1);
     b70:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <timer1ClockSource>
     b74:	46 95       	lsr	r20
     b76:	41 70       	andi	r20, 0x01	; 1
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	81 e8       	ldi	r24, 0x81	; 129
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	60 dd       	rcall	.-1344   	; 0x640 <updateBit>
			updateBit(&TCCR1B, CS10, timer1ClockSource & 1);
     b80:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <timer1ClockSource>
     b84:	41 70       	andi	r20, 0x01	; 1
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	81 e8       	ldi	r24, 0x81	; 129
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	59 cd       	rjmp	.-1358   	; 0x640 <updateBit>
			break;
     b8e:	08 95       	ret
		case TIMER2:
			updateBit(&TCCR2B, CS22, (timer2ClockSource >> 2) & 1);
     b90:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <timer2ClockSource>
     b94:	42 fb       	bst	r20, 2
     b96:	44 27       	eor	r20, r20
     b98:	40 f9       	bld	r20, 0
     b9a:	62 e0       	ldi	r22, 0x02	; 2
     b9c:	81 eb       	ldi	r24, 0xB1	; 177
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	4f dd       	rcall	.-1378   	; 0x640 <updateBit>
			updateBit(&TCCR2B, CS21, (timer2ClockSource >> 1) & 1);
     ba2:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <timer2ClockSource>
     ba6:	46 95       	lsr	r20
     ba8:	41 70       	andi	r20, 0x01	; 1
     baa:	61 e0       	ldi	r22, 0x01	; 1
     bac:	81 eb       	ldi	r24, 0xB1	; 177
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	47 dd       	rcall	.-1394   	; 0x640 <updateBit>
			updateBit(&TCCR2B, CS20, timer2ClockSource & 1);
     bb2:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <timer2ClockSource>
     bb6:	41 70       	andi	r20, 0x01	; 1
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	81 eb       	ldi	r24, 0xB1	; 177
     bbc:	90 e0       	ldi	r25, 0x00	; 0
			setBit(&TCCR2A, COM2A1);
     bbe:	40 dd       	rcall	.-1408   	; 0x640 <updateBit>
     bc0:	67 e0       	ldi	r22, 0x07	; 7
     bc2:	80 eb       	ldi	r24, 0xB0	; 176
			clearBit(&TCCR2A, COM2A0);
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	17 dd       	rcall	.-1490   	; 0x5f6 <setBit>
     bc8:	66 e0       	ldi	r22, 0x06	; 6
			setBit(&TCCR2A, COM2B1);
     bca:	80 eb       	ldi	r24, 0xB0	; 176
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	1f dd       	rcall	.-1474   	; 0x60e <clearBit>
     bd0:	65 e0       	ldi	r22, 0x05	; 5
     bd2:	80 eb       	ldi	r24, 0xB0	; 176
			clearBit(&TCCR2A, COM2B0);
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0f dd       	rcall	.-1506   	; 0x5f6 <setBit>
     bd8:	64 e0       	ldi	r22, 0x04	; 4
     bda:	80 eb       	ldi	r24, 0xB0	; 176
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	17 cd       	rjmp	.-1490   	; 0x60e <clearBit>
     be0:	08 95       	ret

00000be2 <pwm_stop>:
	}
}
/** Stops the selected timer
*/
void pwm_stop(timer timerSelection){
	switch(timerSelection){
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	19 f0       	breq	.+6      	; 0xbec <pwm_stop+0xa>
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	71 f0       	breq	.+28     	; 0xc06 <pwm_stop+0x24>
     bea:	08 95       	ret
		case TIMER0:
			break;
		case TIMER1:
			clearBit(&TCCR1B, CS12);
     bec:	62 e0       	ldi	r22, 0x02	; 2
     bee:	81 e8       	ldi	r24, 0x81	; 129
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0d dd       	rcall	.-1510   	; 0x60e <clearBit>
			clearBit(&TCCR1B, CS11);
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	81 e8       	ldi	r24, 0x81	; 129
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	09 dd       	rcall	.-1518   	; 0x60e <clearBit>
			clearBit(&TCCR1B, CS10);
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	81 e8       	ldi	r24, 0x81	; 129
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	05 cd       	rjmp	.-1526   	; 0x60e <clearBit>
			break;
		case TIMER2:
			clearBit(&TCCR2B, CS22);
     c04:	08 95       	ret
     c06:	62 e0       	ldi	r22, 0x02	; 2
     c08:	81 eb       	ldi	r24, 0xB1	; 177
			clearBit(&TCCR2B, CS21);
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	00 dd       	rcall	.-1536   	; 0x60e <clearBit>
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	81 eb       	ldi	r24, 0xB1	; 177
			clearBit(&TCCR2B, CS20);
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	fc dc       	rcall	.-1544   	; 0x60e <clearBit>
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	81 eb       	ldi	r24, 0xB1	; 177
     c1a:	90 e0       	ldi	r25, 0x00	; 0
			TCCR2A &= 0x0F;
     c1c:	f8 dc       	rcall	.-1552   	; 0x60e <clearBit>
     c1e:	e0 eb       	ldi	r30, 0xB0	; 176
     c20:	f0 e0       	ldi	r31, 0x00	; 0
			gpio_out_reset(PD, 7);
     c22:	80 81       	ld	r24, Z
     c24:	8f 70       	andi	r24, 0x0F	; 15
     c26:	80 83       	st	Z, r24
     c28:	67 e0       	ldi	r22, 0x07	; 7
			gpio_out_reset(PD, 6);
     c2a:	83 e0       	ldi	r24, 0x03	; 3
     c2c:	b4 dc       	rcall	.-1688   	; 0x596 <gpio_out_reset>
     c2e:	66 e0       	ldi	r22, 0x06	; 6
     c30:	83 e0       	ldi	r24, 0x03	; 3
     c32:	b1 cc       	rjmp	.-1694   	; 0x596 <gpio_out_reset>
     c34:	08 95       	ret

00000c36 <__vector_34>:
	
}

void uart_stop(bool uartTx, bool uartRx){
	clearBit(&UCSR0B, RXEN0);
	clearBit(&UCSR0B, TXEN0);
     c36:	1f 92       	push	r1
     c38:	0f 92       	push	r0
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	0f 92       	push	r0
     c3e:	11 24       	eor	r1, r1
     c40:	0b b6       	in	r0, 0x3b	; 59
     c42:	0f 92       	push	r0
     c44:	2f 93       	push	r18
     c46:	3f 93       	push	r19
     c48:	4f 93       	push	r20
     c4a:	5f 93       	push	r21
     c4c:	6f 93       	push	r22
     c4e:	7f 93       	push	r23
     c50:	8f 93       	push	r24
     c52:	9f 93       	push	r25
     c54:	af 93       	push	r26
     c56:	bf 93       	push	r27
     c58:	ef 93       	push	r30
     c5a:	ff 93       	push	r31
     c5c:	8a e7       	ldi	r24, 0x7A	; 122
     c5e:	91 ee       	ldi	r25, 0xE1	; 225
     c60:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     c64:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
     c68:	65 e0       	ldi	r22, 0x05	; 5
     c6a:	83 e0       	ldi	r24, 0x03	; 3
     c6c:	ac dc       	rcall	.-1704   	; 0x5c6 <gpio_out_toggle>
     c6e:	ff 91       	pop	r31
     c70:	ef 91       	pop	r30
     c72:	bf 91       	pop	r27
     c74:	af 91       	pop	r26
     c76:	9f 91       	pop	r25
     c78:	8f 91       	pop	r24
     c7a:	7f 91       	pop	r23
     c7c:	6f 91       	pop	r22
     c7e:	5f 91       	pop	r21
     c80:	4f 91       	pop	r20
     c82:	3f 91       	pop	r19
     c84:	2f 91       	pop	r18
     c86:	0f 90       	pop	r0
     c88:	0b be       	out	0x3b, r0	; 59
     c8a:	0f 90       	pop	r0
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	0f 90       	pop	r0
     c90:	1f 90       	pop	r1
     c92:	18 95       	reti

00000c94 <__vector_20>:
     c94:	1f 92       	push	r1
     c96:	0f 92       	push	r0
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	0f 92       	push	r0
     c9c:	11 24       	eor	r1, r1
     c9e:	0b b6       	in	r0, 0x3b	; 59
     ca0:	0f 92       	push	r0
     ca2:	2f 93       	push	r18
     ca4:	3f 93       	push	r19
     ca6:	4f 93       	push	r20
     ca8:	5f 93       	push	r21
     caa:	6f 93       	push	r22
     cac:	7f 93       	push	r23
     cae:	8f 93       	push	r24
     cb0:	9f 93       	push	r25
     cb2:	af 93       	push	r26
     cb4:	bf 93       	push	r27
     cb6:	ef 93       	push	r30
     cb8:	ff 93       	push	r31
     cba:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     cbe:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <aux>
     cc2:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <aux>
     cc6:	8e 2f       	mov	r24, r30
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	81 33       	cpi	r24, 0x31	; 49
     ccc:	91 05       	cpc	r25, r1
     cce:	08 f0       	brcs	.+2      	; 0xcd2 <__vector_20+0x3e>
     cd0:	82 c1       	rjmp	.+772    	; 0xfd6 <__vector_20+0x342>
     cd2:	fc 01       	movw	r30, r24
     cd4:	ea 5b       	subi	r30, 0xBA	; 186
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	07 c2       	rjmp	.+1038   	; 0x10e8 <__tablejump2__>
     cda:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <systemEnable>
     cde:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <servoEnable>
     ce2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dcEnable>
     ce6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <dcSpeedLeft>
     cea:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
     cee:	07 dd       	rcall	.-1522   	; 0x6fe <motor_stop>
     cf0:	e3 db       	rcall	.-2106   	; 0x4b8 <encoder_reset>
     cf2:	d9 db       	rcall	.-2126   	; 0x4a6 <encoder_stop>
     cf4:	62 e0       	ldi	r22, 0x02	; 2
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	4e dc       	rcall	.-1892   	; 0x596 <gpio_out_reset>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	72 df       	rcall	.-284    	; 0xbe2 <pwm_stop>
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	31 dc       	rcall	.-1950   	; 0x566 <gpio_out_set>
     d04:	61 e0       	ldi	r22, 0x01	; 1
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	46 dc       	rcall	.-1908   	; 0x596 <gpio_out_reset>
     d0a:	62 e0       	ldi	r22, 0x02	; 2
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	43 dc       	rcall	.-1914   	; 0x596 <gpio_out_reset>
     d10:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <cannonState>
     d14:	65 e0       	ldi	r22, 0x05	; 5
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	3e dc       	rcall	.-1924   	; 0x596 <gpio_out_reset>
     d1a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     d1e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
     d22:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
     d26:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     d2a:	55 c1       	rjmp	.+682    	; 0xfd6 <__vector_20+0x342>
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <systemEnable>
     d32:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dcEnable>
     d36:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <cannonState>
     d3a:	a2 dc       	rcall	.-1724   	; 0x680 <motor_init>
     d3c:	74 db       	rcall	.-2328   	; 0x426 <encoder_init>
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	09 df       	rcall	.-494    	; 0xb54 <pwm_start>
     d42:	62 e0       	ldi	r22, 0x02	; 2
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	0f dc       	rcall	.-2018   	; 0x566 <gpio_out_set>
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	24 dc       	rcall	.-1976   	; 0x596 <gpio_out_reset>
     d4e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <systemMode>
     d52:	81 11       	cpse	r24, r1
     d54:	07 c0       	rjmp	.+14     	; 0xd64 <__vector_20+0xd0>
     d56:	61 e0       	ldi	r22, 0x01	; 1
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	05 dc       	rcall	.-2038   	; 0x566 <gpio_out_set>
     d5c:	62 e0       	ldi	r22, 0x02	; 2
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	1a dc       	rcall	.-1996   	; 0x596 <gpio_out_reset>
     d62:	39 c1       	rjmp	.+626    	; 0xfd6 <__vector_20+0x342>
     d64:	61 e0       	ldi	r22, 0x01	; 1
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	16 dc       	rcall	.-2004   	; 0x596 <gpio_out_reset>
     d6a:	62 e0       	ldi	r22, 0x02	; 2
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	fb db       	rcall	.-2058   	; 0x566 <gpio_out_set>
     d70:	32 c1       	rjmp	.+612    	; 0xfd6 <__vector_20+0x342>
     d72:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <systemMode>
     d76:	61 e0       	ldi	r22, 0x01	; 1
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	f5 db       	rcall	.-2070   	; 0x566 <gpio_out_set>
     d7c:	62 e0       	ldi	r22, 0x02	; 2
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	0a dc       	rcall	.-2028   	; 0x596 <gpio_out_reset>
     d82:	29 c1       	rjmp	.+594    	; 0xfd6 <__vector_20+0x342>
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <systemMode>
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	04 dc       	rcall	.-2040   	; 0x596 <gpio_out_reset>
     d8e:	62 e0       	ldi	r22, 0x02	; 2
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	e9 db       	rcall	.-2094   	; 0x566 <gpio_out_set>
     d94:	20 c1       	rjmp	.+576    	; 0xfd6 <__vector_20+0x342>
     d96:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <servoEnable>
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	22 df       	rcall	.-444    	; 0xbe2 <pwm_stop>
     d9e:	1b c1       	rjmp	.+566    	; 0xfd6 <__vector_20+0x342>
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <servoEnable>
     da6:	d6 de       	rcall	.-596    	; 0xb54 <pwm_start>
     da8:	16 c1       	rjmp	.+556    	; 0xfd6 <__vector_20+0x342>
     daa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servoEnable>
     dae:	88 23       	and	r24, r24
     db0:	09 f4       	brne	.+2      	; 0xdb4 <__vector_20+0x120>
     db2:	11 c1       	rjmp	.+546    	; 0xfd6 <__vector_20+0x342>
     db4:	41 e0       	ldi	r20, 0x01	; 1
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	83 e0       	ldi	r24, 0x03	; 3
     dba:	7b de       	rcall	.-778    	; 0xab2 <pwm_setDutyCycle>
     dbc:	0c c1       	rjmp	.+536    	; 0xfd6 <__vector_20+0x342>
     dbe:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servoEnable>
     dc2:	88 23       	and	r24, r24
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <__vector_20+0x134>
     dc6:	07 c1       	rjmp	.+526    	; 0xfd6 <__vector_20+0x342>
     dc8:	41 e0       	ldi	r20, 0x01	; 1
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	87 e0       	ldi	r24, 0x07	; 7
     dce:	71 de       	rcall	.-798    	; 0xab2 <pwm_setDutyCycle>
     dd0:	02 c1       	rjmp	.+516    	; 0xfd6 <__vector_20+0x342>
     dd2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servoEnable>
     dd6:	88 23       	and	r24, r24
     dd8:	09 f4       	brne	.+2      	; 0xddc <__vector_20+0x148>
     dda:	fd c0       	rjmp	.+506    	; 0xfd6 <__vector_20+0x342>
     ddc:	41 e0       	ldi	r20, 0x01	; 1
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	8c e0       	ldi	r24, 0x0C	; 12
     de2:	67 de       	rcall	.-818    	; 0xab2 <pwm_setDutyCycle>
     de4:	f8 c0       	rjmp	.+496    	; 0xfd6 <__vector_20+0x342>
     de6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dcEnable>
     dea:	89 dc       	rcall	.-1774   	; 0x6fe <motor_stop>
     dec:	f4 c0       	rjmp	.+488    	; 0xfd6 <__vector_20+0x342>
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dcEnable>
     df4:	6c dc       	rcall	.-1832   	; 0x6ce <motor_start>
     df6:	88 e2       	ldi	r24, 0x28	; 40
     df8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     dfc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     e00:	ea c0       	rjmp	.+468    	; 0xfd6 <__vector_20+0x342>
     e02:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     e06:	88 23       	and	r24, r24
     e08:	09 f4       	brne	.+2      	; 0xe0c <__vector_20+0x178>
     e0a:	e5 c0       	rjmp	.+458    	; 0xfd6 <__vector_20+0x342>
     e0c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <dcSpeedLeft>
     e16:	ac 01       	movw	r20, r24
     e18:	42 0f       	add	r20, r18
     e1a:	51 1d       	adc	r21, r1
     e1c:	9a 01       	movw	r18, r20
     e1e:	35 95       	asr	r19
     e20:	27 95       	ror	r18
     e22:	2a 50       	subi	r18, 0x0A	; 10
     e24:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <dcSpeedLeft>
     e28:	82 0f       	add	r24, r18
     e2a:	91 1d       	adc	r25, r1
     e2c:	95 95       	asr	r25
     e2e:	87 95       	ror	r24
     e30:	86 5f       	subi	r24, 0xF6	; 246
     e32:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     e36:	29 32       	cpi	r18, 0x29	; 41
     e38:	38 f4       	brcc	.+14     	; 0xe48 <__vector_20+0x1b4>
     e3a:	88 e2       	ldi	r24, 0x28	; 40
     e3c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     e40:	82 e3       	ldi	r24, 0x32	; 50
     e42:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     e46:	08 c0       	rjmp	.+16     	; 0xe58 <__vector_20+0x1c4>
     e48:	84 36       	cpi	r24, 0x64	; 100
     e4a:	30 f0       	brcs	.+12     	; 0xe58 <__vector_20+0x1c4>
     e4c:	84 e6       	ldi	r24, 0x64	; 100
     e4e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     e52:	8a e5       	ldi	r24, 0x5A	; 90
     e54:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     e58:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     e5c:	44 e0       	ldi	r20, 0x04	; 4
     e5e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <dcSpeedLeft>
     e62:	84 e0       	ldi	r24, 0x04	; 4
     e64:	97 dc       	rcall	.-1746   	; 0x794 <motor_individualDirSpeed>
     e66:	b7 c0       	rjmp	.+366    	; 0xfd6 <__vector_20+0x342>
     e68:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     e6c:	88 23       	and	r24, r24
     e6e:	09 f4       	brne	.+2      	; 0xe72 <__vector_20+0x1de>
     e70:	b2 c0       	rjmp	.+356    	; 0xfd6 <__vector_20+0x342>
     e72:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <dcSpeedLeft>
     e7c:	ac 01       	movw	r20, r24
     e7e:	42 0f       	add	r20, r18
     e80:	51 1d       	adc	r21, r1
     e82:	9a 01       	movw	r18, r20
     e84:	35 95       	asr	r19
     e86:	27 95       	ror	r18
     e88:	26 5f       	subi	r18, 0xF6	; 246
     e8a:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <dcSpeedLeft>
     e8e:	82 0f       	add	r24, r18
     e90:	91 1d       	adc	r25, r1
     e92:	95 95       	asr	r25
     e94:	87 95       	ror	r24
     e96:	8a 50       	subi	r24, 0x0A	; 10
     e98:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     e9c:	89 32       	cpi	r24, 0x29	; 41
     e9e:	38 f4       	brcc	.+14     	; 0xeae <__vector_20+0x21a>
     ea0:	88 e2       	ldi	r24, 0x28	; 40
     ea2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     ea6:	82 e3       	ldi	r24, 0x32	; 50
     ea8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     eac:	08 c0       	rjmp	.+16     	; 0xebe <__vector_20+0x22a>
     eae:	24 36       	cpi	r18, 0x64	; 100
     eb0:	30 f0       	brcs	.+12     	; 0xebe <__vector_20+0x22a>
     eb2:	84 e6       	ldi	r24, 0x64	; 100
     eb4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     eb8:	8a e5       	ldi	r24, 0x5A	; 90
     eba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     ebe:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     ec2:	44 e0       	ldi	r20, 0x04	; 4
     ec4:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <dcSpeedLeft>
     ec8:	84 e0       	ldi	r24, 0x04	; 4
     eca:	64 dc       	rcall	.-1848   	; 0x794 <motor_individualDirSpeed>
     ecc:	84 c0       	rjmp	.+264    	; 0xfd6 <__vector_20+0x342>
     ece:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     ed2:	88 23       	and	r24, r24
     ed4:	09 f4       	brne	.+2      	; 0xed8 <__vector_20+0x244>
     ed6:	7f c0       	rjmp	.+254    	; 0xfd6 <__vector_20+0x342>
     ed8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dcSpeedLeft>
     edc:	84 36       	cpi	r24, 0x64	; 100
     ede:	08 f0       	brcs	.+2      	; 0xee2 <__vector_20+0x24e>
     ee0:	7a c0       	rjmp	.+244    	; 0xfd6 <__vector_20+0x342>
     ee2:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
     ee6:	94 36       	cpi	r25, 0x64	; 100
     ee8:	08 f0       	brcs	.+2      	; 0xeec <__vector_20+0x258>
     eea:	75 c0       	rjmp	.+234    	; 0xfd6 <__vector_20+0x342>
     eec:	86 5f       	subi	r24, 0xF6	; 246
     eee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     ef2:	96 5f       	subi	r25, 0xF6	; 246
     ef4:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
     ef8:	42 dc       	rcall	.-1916   	; 0x77e <motor_speed>
     efa:	6d c0       	rjmp	.+218    	; 0xfd6 <__vector_20+0x342>
     efc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     f00:	88 23       	and	r24, r24
     f02:	09 f4       	brne	.+2      	; 0xf06 <__vector_20+0x272>
     f04:	68 c0       	rjmp	.+208    	; 0xfd6 <__vector_20+0x342>
     f06:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dcSpeedLeft>
     f0a:	89 32       	cpi	r24, 0x29	; 41
     f0c:	08 f4       	brcc	.+2      	; 0xf10 <__vector_20+0x27c>
     f0e:	63 c0       	rjmp	.+198    	; 0xfd6 <__vector_20+0x342>
     f10:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
     f14:	99 32       	cpi	r25, 0x29	; 41
     f16:	08 f4       	brcc	.+2      	; 0xf1a <__vector_20+0x286>
     f18:	5e c0       	rjmp	.+188    	; 0xfd6 <__vector_20+0x342>
     f1a:	8a 50       	subi	r24, 0x0A	; 10
     f1c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dcSpeedLeft>
     f20:	9a 50       	subi	r25, 0x0A	; 10
     f22:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
     f26:	2b dc       	rcall	.-1962   	; 0x77e <motor_speed>
     f28:	56 c0       	rjmp	.+172    	; 0xfd6 <__vector_20+0x342>
     f2a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     f2e:	88 23       	and	r24, r24
     f30:	09 f4       	brne	.+2      	; 0xf34 <__vector_20+0x2a0>
     f32:	51 c0       	rjmp	.+162    	; 0xfd6 <__vector_20+0x342>
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	e7 db       	rcall	.-2098   	; 0x706 <motor_direction>
     f38:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <dcSpeedLeft>
     f3c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	82 0f       	add	r24, r18
     f44:	91 1d       	adc	r25, r1
     f46:	95 95       	asr	r25
     f48:	87 95       	ror	r24
     f4a:	19 dc       	rcall	.-1998   	; 0x77e <motor_speed>
     f4c:	44 c0       	rjmp	.+136    	; 0xfd6 <__vector_20+0x342>
     f4e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     f52:	88 23       	and	r24, r24
     f54:	09 f4       	brne	.+2      	; 0xf58 <__vector_20+0x2c4>
     f56:	3f c0       	rjmp	.+126    	; 0xfd6 <__vector_20+0x342>
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	d5 db       	rcall	.-2134   	; 0x706 <motor_direction>
     f5c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <dcSpeedLeft>
     f60:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	82 0f       	add	r24, r18
     f68:	91 1d       	adc	r25, r1
     f6a:	95 95       	asr	r25
     f6c:	87 95       	ror	r24
     f6e:	07 dc       	rcall	.-2034   	; 0x77e <motor_speed>
     f70:	32 c0       	rjmp	.+100    	; 0xfd6 <__vector_20+0x342>
     f72:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     f76:	88 23       	and	r24, r24
     f78:	71 f1       	breq	.+92     	; 0xfd6 <__vector_20+0x342>
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	c4 db       	rcall	.-2168   	; 0x706 <motor_direction>
     f7e:	2b c0       	rjmp	.+86     	; 0xfd6 <__vector_20+0x342>
     f80:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dcEnable>
     f84:	88 23       	and	r24, r24
     f86:	39 f1       	breq	.+78     	; 0xfd6 <__vector_20+0x342>
     f88:	83 e0       	ldi	r24, 0x03	; 3
     f8a:	bd db       	rcall	.-2182   	; 0x706 <motor_direction>
     f8c:	24 c0       	rjmp	.+72     	; 0xfd6 <__vector_20+0x342>
     f8e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <systemEnable>
     f92:	88 23       	and	r24, r24
     f94:	01 f1       	breq	.+64     	; 0xfd6 <__vector_20+0x342>
     f96:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <cannonState>
     f9a:	81 11       	cpse	r24, r1
     f9c:	0f c0       	rjmp	.+30     	; 0xfbc <__vector_20+0x328>
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <cannonState>
     fa4:	2a e7       	ldi	r18, 0x7A	; 122
     fa6:	31 ee       	ldi	r19, 0xE1	; 225
     fa8:	30 93 95 00 	sts	0x0095, r19	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     fac:	20 93 94 00 	sts	0x0094, r18	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
     fb0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     fb4:	84 e0       	ldi	r24, 0x04	; 4
     fb6:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
     fba:	0d c0       	rjmp	.+26     	; 0xfd6 <__vector_20+0x342>
     fbc:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <cannonState>
     fc0:	65 e0       	ldi	r22, 0x05	; 5
     fc2:	83 e0       	ldi	r24, 0x03	; 3
     fc4:	e8 da       	rcall	.-2608   	; 0x596 <gpio_out_reset>
     fc6:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     fca:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
     fce:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
     fd2:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     fd6:	ff 91       	pop	r31
     fd8:	ef 91       	pop	r30
     fda:	bf 91       	pop	r27
     fdc:	af 91       	pop	r26
     fde:	9f 91       	pop	r25
     fe0:	8f 91       	pop	r24
     fe2:	7f 91       	pop	r23
     fe4:	6f 91       	pop	r22
     fe6:	5f 91       	pop	r21
     fe8:	4f 91       	pop	r20
     fea:	3f 91       	pop	r19
     fec:	2f 91       	pop	r18
     fee:	0f 90       	pop	r0
     ff0:	0b be       	out	0x3b, r0	; 59
     ff2:	0f 90       	pop	r0
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	0f 90       	pop	r0
     ff8:	1f 90       	pop	r1
     ffa:	18 95       	reti

00000ffc <uart_init>:
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	08 2f       	mov	r16, r24
    1006:	16 2f       	mov	r17, r22
    1008:	d4 2f       	mov	r29, r20
    100a:	c2 2f       	mov	r28, r18
    100c:	61 e0       	ldi	r22, 0x01	; 1
    100e:	80 ec       	ldi	r24, 0xC0	; 192
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	fd da       	rcall	.-2566   	; 0x60e <clearBit>
    1014:	62 e0       	ldi	r22, 0x02	; 2
    1016:	81 ec       	ldi	r24, 0xC1	; 193
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	f9 da       	rcall	.-2574   	; 0x60e <clearBit>
    101c:	62 e0       	ldi	r22, 0x02	; 2
    101e:	82 ec       	ldi	r24, 0xC2	; 194
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	e9 da       	rcall	.-2606   	; 0x5f6 <setBit>
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	82 ec       	ldi	r24, 0xC2	; 194
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	e5 da       	rcall	.-2614   	; 0x5f6 <setBit>
    102c:	67 e0       	ldi	r22, 0x07	; 7
    102e:	82 ec       	ldi	r24, 0xC2	; 194
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	ed da       	rcall	.-2598   	; 0x60e <clearBit>
    1034:	40 2f       	mov	r20, r16
    1036:	66 e0       	ldi	r22, 0x06	; 6
    1038:	82 ec       	ldi	r24, 0xC2	; 194
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	01 db       	rcall	.-2558   	; 0x640 <updateBit>
    103e:	65 e0       	ldi	r22, 0x05	; 5
    1040:	82 ec       	ldi	r24, 0xC2	; 194
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	d8 da       	rcall	.-2640   	; 0x5f6 <setBit>
    1046:	41 2f       	mov	r20, r17
    1048:	64 e0       	ldi	r22, 0x04	; 4
    104a:	82 ec       	ldi	r24, 0xC2	; 194
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	f8 da       	rcall	.-2576   	; 0x640 <updateBit>
    1050:	4d 2f       	mov	r20, r29
    1052:	63 e0       	ldi	r22, 0x03	; 3
    1054:	82 ec       	ldi	r24, 0xC2	; 194
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	f3 da       	rcall	.-2586   	; 0x640 <updateBit>
    105a:	2c 2f       	mov	r18, r28
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1062:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1066:	67 e0       	ldi	r22, 0x07	; 7
    1068:	81 ec       	ldi	r24, 0xC1	; 193
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	c4 da       	rcall	.-2680   	; 0x5f6 <setBit>
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	08 95       	ret

00001078 <uart_start>:
    1078:	cf 93       	push	r28
    107a:	c8 2f       	mov	r28, r24
    107c:	46 2f       	mov	r20, r22
    107e:	64 e0       	ldi	r22, 0x04	; 4
    1080:	81 ec       	ldi	r24, 0xC1	; 193
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	dd da       	rcall	.-2630   	; 0x640 <updateBit>
    1086:	4c 2f       	mov	r20, r28
    1088:	63 e0       	ldi	r22, 0x03	; 3
    108a:	81 ec       	ldi	r24, 0xC1	; 193
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	d8 da       	rcall	.-2640   	; 0x640 <updateBit>
    1090:	cf 91       	pop	r28
    1092:	08 95       	ret

00001094 <uart_transmit>:
}

void uart_transmit(u8 data){
	while(!(UCSR0A & (1 << UDRE0)));
    1094:	e0 ec       	ldi	r30, 0xC0	; 192
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	90 81       	ld	r25, Z
    109a:	95 ff       	sbrs	r25, 5
    109c:	fd cf       	rjmp	.-6      	; 0x1098 <uart_transmit+0x4>
	UDR0 = data;
    109e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    10a2:	08 95       	ret

000010a4 <__udivmodsi4>:
    10a4:	a1 e2       	ldi	r26, 0x21	; 33
    10a6:	1a 2e       	mov	r1, r26
    10a8:	aa 1b       	sub	r26, r26
    10aa:	bb 1b       	sub	r27, r27
    10ac:	fd 01       	movw	r30, r26
    10ae:	0d c0       	rjmp	.+26     	; 0x10ca <__udivmodsi4_ep>

000010b0 <__udivmodsi4_loop>:
    10b0:	aa 1f       	adc	r26, r26
    10b2:	bb 1f       	adc	r27, r27
    10b4:	ee 1f       	adc	r30, r30
    10b6:	ff 1f       	adc	r31, r31
    10b8:	a2 17       	cp	r26, r18
    10ba:	b3 07       	cpc	r27, r19
    10bc:	e4 07       	cpc	r30, r20
    10be:	f5 07       	cpc	r31, r21
    10c0:	20 f0       	brcs	.+8      	; 0x10ca <__udivmodsi4_ep>
    10c2:	a2 1b       	sub	r26, r18
    10c4:	b3 0b       	sbc	r27, r19
    10c6:	e4 0b       	sbc	r30, r20
    10c8:	f5 0b       	sbc	r31, r21

000010ca <__udivmodsi4_ep>:
    10ca:	66 1f       	adc	r22, r22
    10cc:	77 1f       	adc	r23, r23
    10ce:	88 1f       	adc	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	1a 94       	dec	r1
    10d4:	69 f7       	brne	.-38     	; 0x10b0 <__udivmodsi4_loop>
    10d6:	60 95       	com	r22
    10d8:	70 95       	com	r23
    10da:	80 95       	com	r24
    10dc:	90 95       	com	r25
    10de:	9b 01       	movw	r18, r22
    10e0:	ac 01       	movw	r20, r24
    10e2:	bd 01       	movw	r22, r26
    10e4:	cf 01       	movw	r24, r30
    10e6:	08 95       	ret

000010e8 <__tablejump2__>:
    10e8:	ee 0f       	add	r30, r30
    10ea:	ff 1f       	adc	r31, r31
    10ec:	00 24       	eor	r0, r0
    10ee:	00 1c       	adc	r0, r0
    10f0:	0b be       	out	0x3b, r0	; 59
    10f2:	07 90       	elpm	r0, Z+
    10f4:	f6 91       	elpm	r31, Z
    10f6:	e0 2d       	mov	r30, r0
    10f8:	09 94       	ijmp

000010fa <__umulhisi3>:
    10fa:	a2 9f       	mul	r26, r18
    10fc:	b0 01       	movw	r22, r0
    10fe:	b3 9f       	mul	r27, r19
    1100:	c0 01       	movw	r24, r0
    1102:	a3 9f       	mul	r26, r19
    1104:	70 0d       	add	r23, r0
    1106:	81 1d       	adc	r24, r1
    1108:	11 24       	eor	r1, r1
    110a:	91 1d       	adc	r25, r1
    110c:	b2 9f       	mul	r27, r18
    110e:	70 0d       	add	r23, r0
    1110:	81 1d       	adc	r24, r1
    1112:	11 24       	eor	r1, r1
    1114:	91 1d       	adc	r25, r1
    1116:	08 95       	ret

00001118 <_exit>:
    1118:	f8 94       	cli

0000111a <__stop_program>:
    111a:	ff cf       	rjmp	.-2      	; 0x111a <__stop_program>
